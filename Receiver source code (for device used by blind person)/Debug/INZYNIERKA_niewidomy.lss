
INZYNIERKA_niewidomy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000096e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ba  00800060  000096e6  0000977a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000482  0080021a  0080021a  00009934  2**0
                  ALLOC
  3 .stab         00006540  00000000  00000000  00009934  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002393  00000000  00000000  0000fe74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00012207  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00012367  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000124f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0001453b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0001563c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000165c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00016740  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00016a02  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00017290  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 22 38 	jmp	0x7044	; 0x7044 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	f6 e9       	ldi	r31, 0x96	; 150
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 31       	cpi	r26, 0x1A	; 26
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	16 e0       	ldi	r17, 0x06	; 6
      78:	aa e1       	ldi	r26, 0x1A	; 26
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 39       	cpi	r26, 0x9C	; 156
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 45 35 	call	0x6a8a	; 0x6a8a <main>
      8a:	0c 94 71 4b 	jmp	0x96e2	; 0x96e2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <rcv_spi>:
uint8_t  buf[2][BUF_SIZE];		// podwÛjny bufor do odczytu z karty SD

volatile uint8_t nr_buf;		// indeks aktywnego buforu

BYTE rcv_spi (void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	SPDR = 0xFF;
      9a:	ef e2       	ldi	r30, 0x2F	; 47
      9c:	f0 e0       	ldi	r31, 0x00	; 0
      9e:	8f ef       	ldi	r24, 0xFF	; 255
      a0:	80 83       	st	Z, r24
	loop_until_bit_is_set(SPSR, SPIF);
      a2:	ee e2       	ldi	r30, 0x2E	; 46
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	88 23       	and	r24, r24
      aa:	dc f7       	brge	.-10     	; 0xa2 <rcv_spi+0x10>
	return SPDR;
      ac:	ef e2       	ldi	r30, 0x2F	; 47
      ae:	f0 e0       	ldi	r31, 0x00	; 0
      b0:	80 81       	ld	r24, Z
}
      b2:	cf 91       	pop	r28
      b4:	df 91       	pop	r29
      b6:	08 95       	ret

000000b8 <komunikat_glosowy>:

// ********** FUNKCJA ODTWARZAJ•CA DèWI K *********************************
void komunikat_glosowy(uint8_t komunikat){
      b8:	df 93       	push	r29
      ba:	cf 93       	push	r28
      bc:	cd b7       	in	r28, 0x3d	; 61
      be:	de b7       	in	r29, 0x3e	; 62
      c0:	2f 97       	sbiw	r28, 0x0f	; 15
      c2:	0f b6       	in	r0, 0x3f	; 63
      c4:	f8 94       	cli
      c6:	de bf       	out	0x3e, r29	; 62
      c8:	0f be       	out	0x3f, r0	; 63
      ca:	cd bf       	out	0x3d, r28	; 61
      cc:	8f 87       	std	Y+15, r24	; 0x0f
	//PLAYER_init();
	while(1) {
		pf_mount(&Fs);	/* Initialize FS */
      ce:	8a e6       	ldi	r24, 0x6A	; 106
      d0:	96 e0       	ldi	r25, 0x06	; 6
      d2:	0e 94 c4 21 	call	0x4388	; 0x4388 <pf_mount>
      d6:	80 e0       	ldi	r24, 0x00	; 0
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	a6 e9       	ldi	r26, 0x96	; 150
      dc:	b3 e4       	ldi	r27, 0x43	; 67
      de:	8b 87       	std	Y+11, r24	; 0x0b
      e0:	9c 87       	std	Y+12, r25	; 0x0c
      e2:	ad 87       	std	Y+13, r26	; 0x0d
      e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
      e6:	6b 85       	ldd	r22, Y+11	; 0x0b
      e8:	7c 85       	ldd	r23, Y+12	; 0x0c
      ea:	8d 85       	ldd	r24, Y+13	; 0x0d
      ec:	9e 85       	ldd	r25, Y+14	; 0x0e
      ee:	20 e0       	ldi	r18, 0x00	; 0
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	4a e7       	ldi	r20, 0x7A	; 122
      f4:	55 e4       	ldi	r21, 0x45	; 69
      f6:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
      fa:	dc 01       	movw	r26, r24
      fc:	cb 01       	movw	r24, r22
      fe:	8f 83       	std	Y+7, r24	; 0x07
     100:	98 87       	std	Y+8, r25	; 0x08
     102:	a9 87       	std	Y+9, r26	; 0x09
     104:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     106:	6f 81       	ldd	r22, Y+7	; 0x07
     108:	78 85       	ldd	r23, Y+8	; 0x08
     10a:	89 85       	ldd	r24, Y+9	; 0x09
     10c:	9a 85       	ldd	r25, Y+10	; 0x0a
     10e:	20 e0       	ldi	r18, 0x00	; 0
     110:	30 e0       	ldi	r19, 0x00	; 0
     112:	40 e8       	ldi	r20, 0x80	; 128
     114:	5f e3       	ldi	r21, 0x3F	; 63
     116:	0e 94 29 46 	call	0x8c52	; 0x8c52 <__ltsf2>
     11a:	88 23       	and	r24, r24
     11c:	2c f4       	brge	.+10     	; 0x128 <komunikat_glosowy+0x70>
		__ticks = 1;
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	9e 83       	std	Y+6, r25	; 0x06
     124:	8d 83       	std	Y+5, r24	; 0x05
     126:	3f c0       	rjmp	.+126    	; 0x1a6 <komunikat_glosowy+0xee>
	else if (__tmp > 65535)
     128:	6f 81       	ldd	r22, Y+7	; 0x07
     12a:	78 85       	ldd	r23, Y+8	; 0x08
     12c:	89 85       	ldd	r24, Y+9	; 0x09
     12e:	9a 85       	ldd	r25, Y+10	; 0x0a
     130:	20 e0       	ldi	r18, 0x00	; 0
     132:	3f ef       	ldi	r19, 0xFF	; 255
     134:	4f e7       	ldi	r20, 0x7F	; 127
     136:	57 e4       	ldi	r21, 0x47	; 71
     138:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <__gtsf2>
     13c:	18 16       	cp	r1, r24
     13e:	4c f5       	brge	.+82     	; 0x192 <komunikat_glosowy+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     140:	6b 85       	ldd	r22, Y+11	; 0x0b
     142:	7c 85       	ldd	r23, Y+12	; 0x0c
     144:	8d 85       	ldd	r24, Y+13	; 0x0d
     146:	9e 85       	ldd	r25, Y+14	; 0x0e
     148:	20 e0       	ldi	r18, 0x00	; 0
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	40 e2       	ldi	r20, 0x20	; 32
     14e:	51 e4       	ldi	r21, 0x41	; 65
     150:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
     154:	dc 01       	movw	r26, r24
     156:	cb 01       	movw	r24, r22
     158:	bc 01       	movw	r22, r24
     15a:	cd 01       	movw	r24, r26
     15c:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
     160:	dc 01       	movw	r26, r24
     162:	cb 01       	movw	r24, r22
     164:	9e 83       	std	Y+6, r25	; 0x06
     166:	8d 83       	std	Y+5, r24	; 0x05
     168:	0f c0       	rjmp	.+30     	; 0x188 <komunikat_glosowy+0xd0>
     16a:	80 e9       	ldi	r24, 0x90	; 144
     16c:	91 e0       	ldi	r25, 0x01	; 1
     16e:	9c 83       	std	Y+4, r25	; 0x04
     170:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     172:	8b 81       	ldd	r24, Y+3	; 0x03
     174:	9c 81       	ldd	r25, Y+4	; 0x04
     176:	01 97       	sbiw	r24, 0x01	; 1
     178:	f1 f7       	brne	.-4      	; 0x176 <komunikat_glosowy+0xbe>
     17a:	9c 83       	std	Y+4, r25	; 0x04
     17c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     17e:	8d 81       	ldd	r24, Y+5	; 0x05
     180:	9e 81       	ldd	r25, Y+6	; 0x06
     182:	01 97       	sbiw	r24, 0x01	; 1
     184:	9e 83       	std	Y+6, r25	; 0x06
     186:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     188:	8d 81       	ldd	r24, Y+5	; 0x05
     18a:	9e 81       	ldd	r25, Y+6	; 0x06
     18c:	00 97       	sbiw	r24, 0x00	; 0
     18e:	69 f7       	brne	.-38     	; 0x16a <komunikat_glosowy+0xb2>
     190:	14 c0       	rjmp	.+40     	; 0x1ba <komunikat_glosowy+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     192:	6f 81       	ldd	r22, Y+7	; 0x07
     194:	78 85       	ldd	r23, Y+8	; 0x08
     196:	89 85       	ldd	r24, Y+9	; 0x09
     198:	9a 85       	ldd	r25, Y+10	; 0x0a
     19a:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
     19e:	dc 01       	movw	r26, r24
     1a0:	cb 01       	movw	r24, r22
     1a2:	9e 83       	std	Y+6, r25	; 0x06
     1a4:	8d 83       	std	Y+5, r24	; 0x05
     1a6:	8d 81       	ldd	r24, Y+5	; 0x05
     1a8:	9e 81       	ldd	r25, Y+6	; 0x06
     1aa:	9a 83       	std	Y+2, r25	; 0x02
     1ac:	89 83       	std	Y+1, r24	; 0x01
     1ae:	89 81       	ldd	r24, Y+1	; 0x01
     1b0:	9a 81       	ldd	r25, Y+2	; 0x02
     1b2:	01 97       	sbiw	r24, 0x01	; 1
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <komunikat_glosowy+0xfa>
     1b6:	9a 83       	std	Y+2, r25	; 0x02
     1b8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);			// odczekaj 300ms
		play(dzwiek(komunikat)); // odtwarzaj plik WAV
     1ba:	8f 85       	ldd	r24, Y+15	; 0x0f
     1bc:	88 2f       	mov	r24, r24
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	0e 94 1d 01 	call	0x23a	; 0x23a <dzwiek>
     1c4:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
		break;
	}
}
     1c8:	2f 96       	adiw	r28, 0x0f	; 15
     1ca:	0f b6       	in	r0, 0x3f	; 63
     1cc:	f8 94       	cli
     1ce:	de bf       	out	0x3e, r29	; 62
     1d0:	0f be       	out	0x3f, r0	; 63
     1d2:	cd bf       	out	0x3d, r28	; 61
     1d4:	cf 91       	pop	r28
     1d6:	df 91       	pop	r29
     1d8:	08 95       	ret

000001da <PLAYER_init>:

//*********** INICJALIZACJA ODTWARZACZA ***********************************
void PLAYER_init(void){
     1da:	df 93       	push	r29
     1dc:	cf 93       	push	r28
     1de:	cd b7       	in	r28, 0x3d	; 61
     1e0:	de b7       	in	r29, 0x3e	; 62

	// init SPI
	DDRB |= (1<<CS)|(1<<MOSI)|(1<<SCK);
     1e2:	a7 e3       	ldi	r26, 0x37	; 55
     1e4:	b0 e0       	ldi	r27, 0x00	; 0
     1e6:	e7 e3       	ldi	r30, 0x37	; 55
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	80 81       	ld	r24, Z
     1ec:	80 6b       	ori	r24, 0xB0	; 176
     1ee:	8c 93       	st	X, r24
	PORTB = 0xf0; // podciπgniÍcie SPI do VCC
     1f0:	e8 e3       	ldi	r30, 0x38	; 56
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 ef       	ldi	r24, 0xF0	; 240
     1f6:	80 83       	st	Z, r24
	SPCR |= (1<<SPE)|(1<<MSTR); //odblokowanie SPI, tryb master
     1f8:	ad e2       	ldi	r26, 0x2D	; 45
     1fa:	b0 e0       	ldi	r27, 0x00	; 0
     1fc:	ed e2       	ldi	r30, 0x2D	; 45
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	80 65       	ori	r24, 0x50	; 80
     204:	8c 93       	st	X, r24
	SPSR |= (1<<SPI2X);	// masymalny zegar SCK (fclk/2)
     206:	ae e2       	ldi	r26, 0x2E	; 46
     208:	b0 e0       	ldi	r27, 0x00	; 0
     20a:	ee e2       	ldi	r30, 0x2E	; 46
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 81       	ld	r24, Z
     210:	81 60       	ori	r24, 0x01	; 1
     212:	8c 93       	st	X, r24

	// Timer0 (samplowanie)
	TCCR0 = (1<<WGM01);		// tryb CTC
     214:	e3 e5       	ldi	r30, 0x53	; 83
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	88 e0       	ldi	r24, 0x08	; 8
     21a:	80 83       	st	Z, r24
	TIMSK = (1<<OCIE0);		// zezwolenie na przerwanie CompareMatch
     21c:	e9 e5       	ldi	r30, 0x59	; 89
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	82 e0       	ldi	r24, 0x02	; 2
     222:	80 83       	st	Z, r24

	// Timer1 (konfiguracja PWM - noúna)
	TCCR1A = (1<<WGM10)|(1<<COM1A1)|(0<<COM1A0)|(1<<COM1B1);//zezwolenie na przerwanie CompareMatch (ustawia wyjscie na stan niski), tryb PWM 8bit
     224:	ef e4       	ldi	r30, 0x4F	; 79
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	81 ea       	ldi	r24, 0xA1	; 161
     22a:	80 83       	st	Z, r24
	TCCR1B = (1<<CS10); // preskaler = 1
     22c:	ee e4       	ldi	r30, 0x4E	; 78
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	80 83       	st	Z, r24
}
     234:	cf 91       	pop	r28
     236:	df 91       	pop	r29
     238:	08 95       	ret

0000023a <dzwiek>:

void dzwiek (uint8_t komunikat) {
     23a:	df 93       	push	r29
     23c:	cf 93       	push	r28
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
     242:	c9 50       	subi	r28, 0x09	; 9
     244:	d2 40       	sbci	r29, 0x02	; 2
     246:	0f b6       	in	r0, 0x3f	; 63
     248:	f8 94       	cli
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	0f be       	out	0x3f, r0	; 63
     24e:	cd bf       	out	0x3d, r28	; 61
     250:	fe 01       	movw	r30, r28
     252:	e5 5d       	subi	r30, 0xD5	; 213
     254:	fe 4f       	sbci	r31, 0xFE	; 254
     256:	80 83       	st	Z, r24
	char zero[] = "0.wav";					  // "0"
     258:	9e 01       	movw	r18, r28
     25a:	2f 5f       	subi	r18, 0xFF	; 255
     25c:	3f 4f       	sbci	r19, 0xFF	; 255
     25e:	c2 5d       	subi	r28, 0xD2	; 210
     260:	de 4f       	sbci	r29, 0xFE	; 254
     262:	39 83       	std	Y+1, r19	; 0x01
     264:	28 83       	st	Y, r18
     266:	ce 52       	subi	r28, 0x2E	; 46
     268:	d1 40       	sbci	r29, 0x01	; 1
     26a:	82 e6       	ldi	r24, 0x62	; 98
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	c0 5d       	subi	r28, 0xD0	; 208
     270:	de 4f       	sbci	r29, 0xFE	; 254
     272:	99 83       	std	Y+1, r25	; 0x01
     274:	88 83       	st	Y, r24
     276:	c0 53       	subi	r28, 0x30	; 48
     278:	d1 40       	sbci	r29, 0x01	; 1
     27a:	96 e0       	ldi	r25, 0x06	; 6
     27c:	ce 5c       	subi	r28, 0xCE	; 206
     27e:	de 4f       	sbci	r29, 0xFE	; 254
     280:	98 83       	st	Y, r25
     282:	c2 53       	subi	r28, 0x32	; 50
     284:	d1 40       	sbci	r29, 0x01	; 1
     286:	c0 5d       	subi	r28, 0xD0	; 208
     288:	de 4f       	sbci	r29, 0xFE	; 254
     28a:	e8 81       	ld	r30, Y
     28c:	f9 81       	ldd	r31, Y+1	; 0x01
     28e:	c0 53       	subi	r28, 0x30	; 48
     290:	d1 40       	sbci	r29, 0x01	; 1
     292:	00 80       	ld	r0, Z
     294:	c0 5d       	subi	r28, 0xD0	; 208
     296:	de 4f       	sbci	r29, 0xFE	; 254
     298:	28 81       	ld	r18, Y
     29a:	39 81       	ldd	r19, Y+1	; 0x01
     29c:	c0 53       	subi	r28, 0x30	; 48
     29e:	d1 40       	sbci	r29, 0x01	; 1
     2a0:	2f 5f       	subi	r18, 0xFF	; 255
     2a2:	3f 4f       	sbci	r19, 0xFF	; 255
     2a4:	c0 5d       	subi	r28, 0xD0	; 208
     2a6:	de 4f       	sbci	r29, 0xFE	; 254
     2a8:	39 83       	std	Y+1, r19	; 0x01
     2aa:	28 83       	st	Y, r18
     2ac:	c0 53       	subi	r28, 0x30	; 48
     2ae:	d1 40       	sbci	r29, 0x01	; 1
     2b0:	c2 5d       	subi	r28, 0xD2	; 210
     2b2:	de 4f       	sbci	r29, 0xFE	; 254
     2b4:	e8 81       	ld	r30, Y
     2b6:	f9 81       	ldd	r31, Y+1	; 0x01
     2b8:	ce 52       	subi	r28, 0x2E	; 46
     2ba:	d1 40       	sbci	r29, 0x01	; 1
     2bc:	00 82       	st	Z, r0
     2be:	c2 5d       	subi	r28, 0xD2	; 210
     2c0:	de 4f       	sbci	r29, 0xFE	; 254
     2c2:	28 81       	ld	r18, Y
     2c4:	39 81       	ldd	r19, Y+1	; 0x01
     2c6:	ce 52       	subi	r28, 0x2E	; 46
     2c8:	d1 40       	sbci	r29, 0x01	; 1
     2ca:	2f 5f       	subi	r18, 0xFF	; 255
     2cc:	3f 4f       	sbci	r19, 0xFF	; 255
     2ce:	c2 5d       	subi	r28, 0xD2	; 210
     2d0:	de 4f       	sbci	r29, 0xFE	; 254
     2d2:	39 83       	std	Y+1, r19	; 0x01
     2d4:	28 83       	st	Y, r18
     2d6:	ce 52       	subi	r28, 0x2E	; 46
     2d8:	d1 40       	sbci	r29, 0x01	; 1
     2da:	ce 5c       	subi	r28, 0xCE	; 206
     2dc:	de 4f       	sbci	r29, 0xFE	; 254
     2de:	38 81       	ld	r19, Y
     2e0:	c2 53       	subi	r28, 0x32	; 50
     2e2:	d1 40       	sbci	r29, 0x01	; 1
     2e4:	31 50       	subi	r19, 0x01	; 1
     2e6:	ce 5c       	subi	r28, 0xCE	; 206
     2e8:	de 4f       	sbci	r29, 0xFE	; 254
     2ea:	38 83       	st	Y, r19
     2ec:	c2 53       	subi	r28, 0x32	; 50
     2ee:	d1 40       	sbci	r29, 0x01	; 1
     2f0:	ce 5c       	subi	r28, 0xCE	; 206
     2f2:	de 4f       	sbci	r29, 0xFE	; 254
     2f4:	88 81       	ld	r24, Y
     2f6:	c2 53       	subi	r28, 0x32	; 50
     2f8:	d1 40       	sbci	r29, 0x01	; 1
     2fa:	88 23       	and	r24, r24
     2fc:	21 f6       	brne	.-120    	; 0x286 <dzwiek+0x4c>
	char jeden[] = "1.wav";					  // "1"
     2fe:	fe 01       	movw	r30, r28
     300:	37 96       	adiw	r30, 0x07	; 7
     302:	cd 5c       	subi	r28, 0xCD	; 205
     304:	de 4f       	sbci	r29, 0xFE	; 254
     306:	f9 83       	std	Y+1, r31	; 0x01
     308:	e8 83       	st	Y, r30
     30a:	c3 53       	subi	r28, 0x33	; 51
     30c:	d1 40       	sbci	r29, 0x01	; 1
     30e:	28 e6       	ldi	r18, 0x68	; 104
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	cb 5c       	subi	r28, 0xCB	; 203
     314:	de 4f       	sbci	r29, 0xFE	; 254
     316:	39 83       	std	Y+1, r19	; 0x01
     318:	28 83       	st	Y, r18
     31a:	c5 53       	subi	r28, 0x35	; 53
     31c:	d1 40       	sbci	r29, 0x01	; 1
     31e:	36 e0       	ldi	r19, 0x06	; 6
     320:	c9 5c       	subi	r28, 0xC9	; 201
     322:	de 4f       	sbci	r29, 0xFE	; 254
     324:	38 83       	st	Y, r19
     326:	c7 53       	subi	r28, 0x37	; 55
     328:	d1 40       	sbci	r29, 0x01	; 1
     32a:	cb 5c       	subi	r28, 0xCB	; 203
     32c:	de 4f       	sbci	r29, 0xFE	; 254
     32e:	e8 81       	ld	r30, Y
     330:	f9 81       	ldd	r31, Y+1	; 0x01
     332:	c5 53       	subi	r28, 0x35	; 53
     334:	d1 40       	sbci	r29, 0x01	; 1
     336:	00 80       	ld	r0, Z
     338:	cb 5c       	subi	r28, 0xCB	; 203
     33a:	de 4f       	sbci	r29, 0xFE	; 254
     33c:	28 81       	ld	r18, Y
     33e:	39 81       	ldd	r19, Y+1	; 0x01
     340:	c5 53       	subi	r28, 0x35	; 53
     342:	d1 40       	sbci	r29, 0x01	; 1
     344:	2f 5f       	subi	r18, 0xFF	; 255
     346:	3f 4f       	sbci	r19, 0xFF	; 255
     348:	cb 5c       	subi	r28, 0xCB	; 203
     34a:	de 4f       	sbci	r29, 0xFE	; 254
     34c:	39 83       	std	Y+1, r19	; 0x01
     34e:	28 83       	st	Y, r18
     350:	c5 53       	subi	r28, 0x35	; 53
     352:	d1 40       	sbci	r29, 0x01	; 1
     354:	cd 5c       	subi	r28, 0xCD	; 205
     356:	de 4f       	sbci	r29, 0xFE	; 254
     358:	e8 81       	ld	r30, Y
     35a:	f9 81       	ldd	r31, Y+1	; 0x01
     35c:	c3 53       	subi	r28, 0x33	; 51
     35e:	d1 40       	sbci	r29, 0x01	; 1
     360:	00 82       	st	Z, r0
     362:	cd 5c       	subi	r28, 0xCD	; 205
     364:	de 4f       	sbci	r29, 0xFE	; 254
     366:	28 81       	ld	r18, Y
     368:	39 81       	ldd	r19, Y+1	; 0x01
     36a:	c3 53       	subi	r28, 0x33	; 51
     36c:	d1 40       	sbci	r29, 0x01	; 1
     36e:	2f 5f       	subi	r18, 0xFF	; 255
     370:	3f 4f       	sbci	r19, 0xFF	; 255
     372:	cd 5c       	subi	r28, 0xCD	; 205
     374:	de 4f       	sbci	r29, 0xFE	; 254
     376:	39 83       	std	Y+1, r19	; 0x01
     378:	28 83       	st	Y, r18
     37a:	c3 53       	subi	r28, 0x33	; 51
     37c:	d1 40       	sbci	r29, 0x01	; 1
     37e:	c9 5c       	subi	r28, 0xC9	; 201
     380:	de 4f       	sbci	r29, 0xFE	; 254
     382:	38 81       	ld	r19, Y
     384:	c7 53       	subi	r28, 0x37	; 55
     386:	d1 40       	sbci	r29, 0x01	; 1
     388:	31 50       	subi	r19, 0x01	; 1
     38a:	c9 5c       	subi	r28, 0xC9	; 201
     38c:	de 4f       	sbci	r29, 0xFE	; 254
     38e:	38 83       	st	Y, r19
     390:	c7 53       	subi	r28, 0x37	; 55
     392:	d1 40       	sbci	r29, 0x01	; 1
     394:	c9 5c       	subi	r28, 0xC9	; 201
     396:	de 4f       	sbci	r29, 0xFE	; 254
     398:	88 81       	ld	r24, Y
     39a:	c7 53       	subi	r28, 0x37	; 55
     39c:	d1 40       	sbci	r29, 0x01	; 1
     39e:	88 23       	and	r24, r24
     3a0:	21 f6       	brne	.-120    	; 0x32a <dzwiek+0xf0>
	char dwa[] = "2.wav";					  // "2"
     3a2:	fe 01       	movw	r30, r28
     3a4:	3d 96       	adiw	r30, 0x0d	; 13
     3a6:	c8 5c       	subi	r28, 0xC8	; 200
     3a8:	de 4f       	sbci	r29, 0xFE	; 254
     3aa:	f9 83       	std	Y+1, r31	; 0x01
     3ac:	e8 83       	st	Y, r30
     3ae:	c8 53       	subi	r28, 0x38	; 56
     3b0:	d1 40       	sbci	r29, 0x01	; 1
     3b2:	2e e6       	ldi	r18, 0x6E	; 110
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	c6 5c       	subi	r28, 0xC6	; 198
     3b8:	de 4f       	sbci	r29, 0xFE	; 254
     3ba:	39 83       	std	Y+1, r19	; 0x01
     3bc:	28 83       	st	Y, r18
     3be:	ca 53       	subi	r28, 0x3A	; 58
     3c0:	d1 40       	sbci	r29, 0x01	; 1
     3c2:	36 e0       	ldi	r19, 0x06	; 6
     3c4:	c4 5c       	subi	r28, 0xC4	; 196
     3c6:	de 4f       	sbci	r29, 0xFE	; 254
     3c8:	38 83       	st	Y, r19
     3ca:	cc 53       	subi	r28, 0x3C	; 60
     3cc:	d1 40       	sbci	r29, 0x01	; 1
     3ce:	c6 5c       	subi	r28, 0xC6	; 198
     3d0:	de 4f       	sbci	r29, 0xFE	; 254
     3d2:	e8 81       	ld	r30, Y
     3d4:	f9 81       	ldd	r31, Y+1	; 0x01
     3d6:	ca 53       	subi	r28, 0x3A	; 58
     3d8:	d1 40       	sbci	r29, 0x01	; 1
     3da:	00 80       	ld	r0, Z
     3dc:	c6 5c       	subi	r28, 0xC6	; 198
     3de:	de 4f       	sbci	r29, 0xFE	; 254
     3e0:	28 81       	ld	r18, Y
     3e2:	39 81       	ldd	r19, Y+1	; 0x01
     3e4:	ca 53       	subi	r28, 0x3A	; 58
     3e6:	d1 40       	sbci	r29, 0x01	; 1
     3e8:	2f 5f       	subi	r18, 0xFF	; 255
     3ea:	3f 4f       	sbci	r19, 0xFF	; 255
     3ec:	c6 5c       	subi	r28, 0xC6	; 198
     3ee:	de 4f       	sbci	r29, 0xFE	; 254
     3f0:	39 83       	std	Y+1, r19	; 0x01
     3f2:	28 83       	st	Y, r18
     3f4:	ca 53       	subi	r28, 0x3A	; 58
     3f6:	d1 40       	sbci	r29, 0x01	; 1
     3f8:	c8 5c       	subi	r28, 0xC8	; 200
     3fa:	de 4f       	sbci	r29, 0xFE	; 254
     3fc:	e8 81       	ld	r30, Y
     3fe:	f9 81       	ldd	r31, Y+1	; 0x01
     400:	c8 53       	subi	r28, 0x38	; 56
     402:	d1 40       	sbci	r29, 0x01	; 1
     404:	00 82       	st	Z, r0
     406:	c8 5c       	subi	r28, 0xC8	; 200
     408:	de 4f       	sbci	r29, 0xFE	; 254
     40a:	28 81       	ld	r18, Y
     40c:	39 81       	ldd	r19, Y+1	; 0x01
     40e:	c8 53       	subi	r28, 0x38	; 56
     410:	d1 40       	sbci	r29, 0x01	; 1
     412:	2f 5f       	subi	r18, 0xFF	; 255
     414:	3f 4f       	sbci	r19, 0xFF	; 255
     416:	c8 5c       	subi	r28, 0xC8	; 200
     418:	de 4f       	sbci	r29, 0xFE	; 254
     41a:	39 83       	std	Y+1, r19	; 0x01
     41c:	28 83       	st	Y, r18
     41e:	c8 53       	subi	r28, 0x38	; 56
     420:	d1 40       	sbci	r29, 0x01	; 1
     422:	c4 5c       	subi	r28, 0xC4	; 196
     424:	de 4f       	sbci	r29, 0xFE	; 254
     426:	38 81       	ld	r19, Y
     428:	cc 53       	subi	r28, 0x3C	; 60
     42a:	d1 40       	sbci	r29, 0x01	; 1
     42c:	31 50       	subi	r19, 0x01	; 1
     42e:	c4 5c       	subi	r28, 0xC4	; 196
     430:	de 4f       	sbci	r29, 0xFE	; 254
     432:	38 83       	st	Y, r19
     434:	cc 53       	subi	r28, 0x3C	; 60
     436:	d1 40       	sbci	r29, 0x01	; 1
     438:	c4 5c       	subi	r28, 0xC4	; 196
     43a:	de 4f       	sbci	r29, 0xFE	; 254
     43c:	88 81       	ld	r24, Y
     43e:	cc 53       	subi	r28, 0x3C	; 60
     440:	d1 40       	sbci	r29, 0x01	; 1
     442:	88 23       	and	r24, r24
     444:	21 f6       	brne	.-120    	; 0x3ce <dzwiek+0x194>
	char trzy[] = "3.wav";					  // "3"
     446:	fe 01       	movw	r30, r28
     448:	73 96       	adiw	r30, 0x13	; 19
     44a:	c3 5c       	subi	r28, 0xC3	; 195
     44c:	de 4f       	sbci	r29, 0xFE	; 254
     44e:	f9 83       	std	Y+1, r31	; 0x01
     450:	e8 83       	st	Y, r30
     452:	cd 53       	subi	r28, 0x3D	; 61
     454:	d1 40       	sbci	r29, 0x01	; 1
     456:	24 e7       	ldi	r18, 0x74	; 116
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	c1 5c       	subi	r28, 0xC1	; 193
     45c:	de 4f       	sbci	r29, 0xFE	; 254
     45e:	39 83       	std	Y+1, r19	; 0x01
     460:	28 83       	st	Y, r18
     462:	cf 53       	subi	r28, 0x3F	; 63
     464:	d1 40       	sbci	r29, 0x01	; 1
     466:	36 e0       	ldi	r19, 0x06	; 6
     468:	cf 5b       	subi	r28, 0xBF	; 191
     46a:	de 4f       	sbci	r29, 0xFE	; 254
     46c:	38 83       	st	Y, r19
     46e:	c1 54       	subi	r28, 0x41	; 65
     470:	d1 40       	sbci	r29, 0x01	; 1
     472:	c1 5c       	subi	r28, 0xC1	; 193
     474:	de 4f       	sbci	r29, 0xFE	; 254
     476:	e8 81       	ld	r30, Y
     478:	f9 81       	ldd	r31, Y+1	; 0x01
     47a:	cf 53       	subi	r28, 0x3F	; 63
     47c:	d1 40       	sbci	r29, 0x01	; 1
     47e:	00 80       	ld	r0, Z
     480:	c1 5c       	subi	r28, 0xC1	; 193
     482:	de 4f       	sbci	r29, 0xFE	; 254
     484:	28 81       	ld	r18, Y
     486:	39 81       	ldd	r19, Y+1	; 0x01
     488:	cf 53       	subi	r28, 0x3F	; 63
     48a:	d1 40       	sbci	r29, 0x01	; 1
     48c:	2f 5f       	subi	r18, 0xFF	; 255
     48e:	3f 4f       	sbci	r19, 0xFF	; 255
     490:	c1 5c       	subi	r28, 0xC1	; 193
     492:	de 4f       	sbci	r29, 0xFE	; 254
     494:	39 83       	std	Y+1, r19	; 0x01
     496:	28 83       	st	Y, r18
     498:	cf 53       	subi	r28, 0x3F	; 63
     49a:	d1 40       	sbci	r29, 0x01	; 1
     49c:	c3 5c       	subi	r28, 0xC3	; 195
     49e:	de 4f       	sbci	r29, 0xFE	; 254
     4a0:	e8 81       	ld	r30, Y
     4a2:	f9 81       	ldd	r31, Y+1	; 0x01
     4a4:	cd 53       	subi	r28, 0x3D	; 61
     4a6:	d1 40       	sbci	r29, 0x01	; 1
     4a8:	00 82       	st	Z, r0
     4aa:	c3 5c       	subi	r28, 0xC3	; 195
     4ac:	de 4f       	sbci	r29, 0xFE	; 254
     4ae:	28 81       	ld	r18, Y
     4b0:	39 81       	ldd	r19, Y+1	; 0x01
     4b2:	cd 53       	subi	r28, 0x3D	; 61
     4b4:	d1 40       	sbci	r29, 0x01	; 1
     4b6:	2f 5f       	subi	r18, 0xFF	; 255
     4b8:	3f 4f       	sbci	r19, 0xFF	; 255
     4ba:	c3 5c       	subi	r28, 0xC3	; 195
     4bc:	de 4f       	sbci	r29, 0xFE	; 254
     4be:	39 83       	std	Y+1, r19	; 0x01
     4c0:	28 83       	st	Y, r18
     4c2:	cd 53       	subi	r28, 0x3D	; 61
     4c4:	d1 40       	sbci	r29, 0x01	; 1
     4c6:	cf 5b       	subi	r28, 0xBF	; 191
     4c8:	de 4f       	sbci	r29, 0xFE	; 254
     4ca:	38 81       	ld	r19, Y
     4cc:	c1 54       	subi	r28, 0x41	; 65
     4ce:	d1 40       	sbci	r29, 0x01	; 1
     4d0:	31 50       	subi	r19, 0x01	; 1
     4d2:	cf 5b       	subi	r28, 0xBF	; 191
     4d4:	de 4f       	sbci	r29, 0xFE	; 254
     4d6:	38 83       	st	Y, r19
     4d8:	c1 54       	subi	r28, 0x41	; 65
     4da:	d1 40       	sbci	r29, 0x01	; 1
     4dc:	cf 5b       	subi	r28, 0xBF	; 191
     4de:	de 4f       	sbci	r29, 0xFE	; 254
     4e0:	88 81       	ld	r24, Y
     4e2:	c1 54       	subi	r28, 0x41	; 65
     4e4:	d1 40       	sbci	r29, 0x01	; 1
     4e6:	88 23       	and	r24, r24
     4e8:	21 f6       	brne	.-120    	; 0x472 <dzwiek+0x238>
	char cztery[] = "4.wav";				  // "4"
     4ea:	fe 01       	movw	r30, r28
     4ec:	79 96       	adiw	r30, 0x19	; 25
     4ee:	ce 5b       	subi	r28, 0xBE	; 190
     4f0:	de 4f       	sbci	r29, 0xFE	; 254
     4f2:	f9 83       	std	Y+1, r31	; 0x01
     4f4:	e8 83       	st	Y, r30
     4f6:	c2 54       	subi	r28, 0x42	; 66
     4f8:	d1 40       	sbci	r29, 0x01	; 1
     4fa:	2a e7       	ldi	r18, 0x7A	; 122
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	cc 5b       	subi	r28, 0xBC	; 188
     500:	de 4f       	sbci	r29, 0xFE	; 254
     502:	39 83       	std	Y+1, r19	; 0x01
     504:	28 83       	st	Y, r18
     506:	c4 54       	subi	r28, 0x44	; 68
     508:	d1 40       	sbci	r29, 0x01	; 1
     50a:	36 e0       	ldi	r19, 0x06	; 6
     50c:	ca 5b       	subi	r28, 0xBA	; 186
     50e:	de 4f       	sbci	r29, 0xFE	; 254
     510:	38 83       	st	Y, r19
     512:	c6 54       	subi	r28, 0x46	; 70
     514:	d1 40       	sbci	r29, 0x01	; 1
     516:	cc 5b       	subi	r28, 0xBC	; 188
     518:	de 4f       	sbci	r29, 0xFE	; 254
     51a:	e8 81       	ld	r30, Y
     51c:	f9 81       	ldd	r31, Y+1	; 0x01
     51e:	c4 54       	subi	r28, 0x44	; 68
     520:	d1 40       	sbci	r29, 0x01	; 1
     522:	00 80       	ld	r0, Z
     524:	cc 5b       	subi	r28, 0xBC	; 188
     526:	de 4f       	sbci	r29, 0xFE	; 254
     528:	28 81       	ld	r18, Y
     52a:	39 81       	ldd	r19, Y+1	; 0x01
     52c:	c4 54       	subi	r28, 0x44	; 68
     52e:	d1 40       	sbci	r29, 0x01	; 1
     530:	2f 5f       	subi	r18, 0xFF	; 255
     532:	3f 4f       	sbci	r19, 0xFF	; 255
     534:	cc 5b       	subi	r28, 0xBC	; 188
     536:	de 4f       	sbci	r29, 0xFE	; 254
     538:	39 83       	std	Y+1, r19	; 0x01
     53a:	28 83       	st	Y, r18
     53c:	c4 54       	subi	r28, 0x44	; 68
     53e:	d1 40       	sbci	r29, 0x01	; 1
     540:	ce 5b       	subi	r28, 0xBE	; 190
     542:	de 4f       	sbci	r29, 0xFE	; 254
     544:	e8 81       	ld	r30, Y
     546:	f9 81       	ldd	r31, Y+1	; 0x01
     548:	c2 54       	subi	r28, 0x42	; 66
     54a:	d1 40       	sbci	r29, 0x01	; 1
     54c:	00 82       	st	Z, r0
     54e:	ce 5b       	subi	r28, 0xBE	; 190
     550:	de 4f       	sbci	r29, 0xFE	; 254
     552:	28 81       	ld	r18, Y
     554:	39 81       	ldd	r19, Y+1	; 0x01
     556:	c2 54       	subi	r28, 0x42	; 66
     558:	d1 40       	sbci	r29, 0x01	; 1
     55a:	2f 5f       	subi	r18, 0xFF	; 255
     55c:	3f 4f       	sbci	r19, 0xFF	; 255
     55e:	ce 5b       	subi	r28, 0xBE	; 190
     560:	de 4f       	sbci	r29, 0xFE	; 254
     562:	39 83       	std	Y+1, r19	; 0x01
     564:	28 83       	st	Y, r18
     566:	c2 54       	subi	r28, 0x42	; 66
     568:	d1 40       	sbci	r29, 0x01	; 1
     56a:	ca 5b       	subi	r28, 0xBA	; 186
     56c:	de 4f       	sbci	r29, 0xFE	; 254
     56e:	38 81       	ld	r19, Y
     570:	c6 54       	subi	r28, 0x46	; 70
     572:	d1 40       	sbci	r29, 0x01	; 1
     574:	31 50       	subi	r19, 0x01	; 1
     576:	ca 5b       	subi	r28, 0xBA	; 186
     578:	de 4f       	sbci	r29, 0xFE	; 254
     57a:	38 83       	st	Y, r19
     57c:	c6 54       	subi	r28, 0x46	; 70
     57e:	d1 40       	sbci	r29, 0x01	; 1
     580:	ca 5b       	subi	r28, 0xBA	; 186
     582:	de 4f       	sbci	r29, 0xFE	; 254
     584:	88 81       	ld	r24, Y
     586:	c6 54       	subi	r28, 0x46	; 70
     588:	d1 40       	sbci	r29, 0x01	; 1
     58a:	88 23       	and	r24, r24
     58c:	21 f6       	brne	.-120    	; 0x516 <dzwiek+0x2dc>
	char piec[] = "5.wav";					  // "5"
     58e:	fe 01       	movw	r30, r28
     590:	7f 96       	adiw	r30, 0x1f	; 31
     592:	c9 5b       	subi	r28, 0xB9	; 185
     594:	de 4f       	sbci	r29, 0xFE	; 254
     596:	f9 83       	std	Y+1, r31	; 0x01
     598:	e8 83       	st	Y, r30
     59a:	c7 54       	subi	r28, 0x47	; 71
     59c:	d1 40       	sbci	r29, 0x01	; 1
     59e:	20 e8       	ldi	r18, 0x80	; 128
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	c7 5b       	subi	r28, 0xB7	; 183
     5a4:	de 4f       	sbci	r29, 0xFE	; 254
     5a6:	39 83       	std	Y+1, r19	; 0x01
     5a8:	28 83       	st	Y, r18
     5aa:	c9 54       	subi	r28, 0x49	; 73
     5ac:	d1 40       	sbci	r29, 0x01	; 1
     5ae:	36 e0       	ldi	r19, 0x06	; 6
     5b0:	c5 5b       	subi	r28, 0xB5	; 181
     5b2:	de 4f       	sbci	r29, 0xFE	; 254
     5b4:	38 83       	st	Y, r19
     5b6:	cb 54       	subi	r28, 0x4B	; 75
     5b8:	d1 40       	sbci	r29, 0x01	; 1
     5ba:	c7 5b       	subi	r28, 0xB7	; 183
     5bc:	de 4f       	sbci	r29, 0xFE	; 254
     5be:	e8 81       	ld	r30, Y
     5c0:	f9 81       	ldd	r31, Y+1	; 0x01
     5c2:	c9 54       	subi	r28, 0x49	; 73
     5c4:	d1 40       	sbci	r29, 0x01	; 1
     5c6:	00 80       	ld	r0, Z
     5c8:	c7 5b       	subi	r28, 0xB7	; 183
     5ca:	de 4f       	sbci	r29, 0xFE	; 254
     5cc:	28 81       	ld	r18, Y
     5ce:	39 81       	ldd	r19, Y+1	; 0x01
     5d0:	c9 54       	subi	r28, 0x49	; 73
     5d2:	d1 40       	sbci	r29, 0x01	; 1
     5d4:	2f 5f       	subi	r18, 0xFF	; 255
     5d6:	3f 4f       	sbci	r19, 0xFF	; 255
     5d8:	c7 5b       	subi	r28, 0xB7	; 183
     5da:	de 4f       	sbci	r29, 0xFE	; 254
     5dc:	39 83       	std	Y+1, r19	; 0x01
     5de:	28 83       	st	Y, r18
     5e0:	c9 54       	subi	r28, 0x49	; 73
     5e2:	d1 40       	sbci	r29, 0x01	; 1
     5e4:	c9 5b       	subi	r28, 0xB9	; 185
     5e6:	de 4f       	sbci	r29, 0xFE	; 254
     5e8:	e8 81       	ld	r30, Y
     5ea:	f9 81       	ldd	r31, Y+1	; 0x01
     5ec:	c7 54       	subi	r28, 0x47	; 71
     5ee:	d1 40       	sbci	r29, 0x01	; 1
     5f0:	00 82       	st	Z, r0
     5f2:	c9 5b       	subi	r28, 0xB9	; 185
     5f4:	de 4f       	sbci	r29, 0xFE	; 254
     5f6:	28 81       	ld	r18, Y
     5f8:	39 81       	ldd	r19, Y+1	; 0x01
     5fa:	c7 54       	subi	r28, 0x47	; 71
     5fc:	d1 40       	sbci	r29, 0x01	; 1
     5fe:	2f 5f       	subi	r18, 0xFF	; 255
     600:	3f 4f       	sbci	r19, 0xFF	; 255
     602:	c9 5b       	subi	r28, 0xB9	; 185
     604:	de 4f       	sbci	r29, 0xFE	; 254
     606:	39 83       	std	Y+1, r19	; 0x01
     608:	28 83       	st	Y, r18
     60a:	c7 54       	subi	r28, 0x47	; 71
     60c:	d1 40       	sbci	r29, 0x01	; 1
     60e:	c5 5b       	subi	r28, 0xB5	; 181
     610:	de 4f       	sbci	r29, 0xFE	; 254
     612:	38 81       	ld	r19, Y
     614:	cb 54       	subi	r28, 0x4B	; 75
     616:	d1 40       	sbci	r29, 0x01	; 1
     618:	31 50       	subi	r19, 0x01	; 1
     61a:	c5 5b       	subi	r28, 0xB5	; 181
     61c:	de 4f       	sbci	r29, 0xFE	; 254
     61e:	38 83       	st	Y, r19
     620:	cb 54       	subi	r28, 0x4B	; 75
     622:	d1 40       	sbci	r29, 0x01	; 1
     624:	c5 5b       	subi	r28, 0xB5	; 181
     626:	de 4f       	sbci	r29, 0xFE	; 254
     628:	88 81       	ld	r24, Y
     62a:	cb 54       	subi	r28, 0x4B	; 75
     62c:	d1 40       	sbci	r29, 0x01	; 1
     62e:	88 23       	and	r24, r24
     630:	21 f6       	brne	.-120    	; 0x5ba <dzwiek+0x380>
	char szesc[] = "6.wav";				  	  // "6"
     632:	fe 01       	movw	r30, r28
     634:	b5 96       	adiw	r30, 0x25	; 37
     636:	c4 5b       	subi	r28, 0xB4	; 180
     638:	de 4f       	sbci	r29, 0xFE	; 254
     63a:	f9 83       	std	Y+1, r31	; 0x01
     63c:	e8 83       	st	Y, r30
     63e:	cc 54       	subi	r28, 0x4C	; 76
     640:	d1 40       	sbci	r29, 0x01	; 1
     642:	26 e8       	ldi	r18, 0x86	; 134
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	c2 5b       	subi	r28, 0xB2	; 178
     648:	de 4f       	sbci	r29, 0xFE	; 254
     64a:	39 83       	std	Y+1, r19	; 0x01
     64c:	28 83       	st	Y, r18
     64e:	ce 54       	subi	r28, 0x4E	; 78
     650:	d1 40       	sbci	r29, 0x01	; 1
     652:	36 e0       	ldi	r19, 0x06	; 6
     654:	c0 5b       	subi	r28, 0xB0	; 176
     656:	de 4f       	sbci	r29, 0xFE	; 254
     658:	38 83       	st	Y, r19
     65a:	c0 55       	subi	r28, 0x50	; 80
     65c:	d1 40       	sbci	r29, 0x01	; 1
     65e:	c2 5b       	subi	r28, 0xB2	; 178
     660:	de 4f       	sbci	r29, 0xFE	; 254
     662:	e8 81       	ld	r30, Y
     664:	f9 81       	ldd	r31, Y+1	; 0x01
     666:	ce 54       	subi	r28, 0x4E	; 78
     668:	d1 40       	sbci	r29, 0x01	; 1
     66a:	00 80       	ld	r0, Z
     66c:	c2 5b       	subi	r28, 0xB2	; 178
     66e:	de 4f       	sbci	r29, 0xFE	; 254
     670:	28 81       	ld	r18, Y
     672:	39 81       	ldd	r19, Y+1	; 0x01
     674:	ce 54       	subi	r28, 0x4E	; 78
     676:	d1 40       	sbci	r29, 0x01	; 1
     678:	2f 5f       	subi	r18, 0xFF	; 255
     67a:	3f 4f       	sbci	r19, 0xFF	; 255
     67c:	c2 5b       	subi	r28, 0xB2	; 178
     67e:	de 4f       	sbci	r29, 0xFE	; 254
     680:	39 83       	std	Y+1, r19	; 0x01
     682:	28 83       	st	Y, r18
     684:	ce 54       	subi	r28, 0x4E	; 78
     686:	d1 40       	sbci	r29, 0x01	; 1
     688:	c4 5b       	subi	r28, 0xB4	; 180
     68a:	de 4f       	sbci	r29, 0xFE	; 254
     68c:	e8 81       	ld	r30, Y
     68e:	f9 81       	ldd	r31, Y+1	; 0x01
     690:	cc 54       	subi	r28, 0x4C	; 76
     692:	d1 40       	sbci	r29, 0x01	; 1
     694:	00 82       	st	Z, r0
     696:	c4 5b       	subi	r28, 0xB4	; 180
     698:	de 4f       	sbci	r29, 0xFE	; 254
     69a:	28 81       	ld	r18, Y
     69c:	39 81       	ldd	r19, Y+1	; 0x01
     69e:	cc 54       	subi	r28, 0x4C	; 76
     6a0:	d1 40       	sbci	r29, 0x01	; 1
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	c4 5b       	subi	r28, 0xB4	; 180
     6a8:	de 4f       	sbci	r29, 0xFE	; 254
     6aa:	39 83       	std	Y+1, r19	; 0x01
     6ac:	28 83       	st	Y, r18
     6ae:	cc 54       	subi	r28, 0x4C	; 76
     6b0:	d1 40       	sbci	r29, 0x01	; 1
     6b2:	c0 5b       	subi	r28, 0xB0	; 176
     6b4:	de 4f       	sbci	r29, 0xFE	; 254
     6b6:	38 81       	ld	r19, Y
     6b8:	c0 55       	subi	r28, 0x50	; 80
     6ba:	d1 40       	sbci	r29, 0x01	; 1
     6bc:	31 50       	subi	r19, 0x01	; 1
     6be:	c0 5b       	subi	r28, 0xB0	; 176
     6c0:	de 4f       	sbci	r29, 0xFE	; 254
     6c2:	38 83       	st	Y, r19
     6c4:	c0 55       	subi	r28, 0x50	; 80
     6c6:	d1 40       	sbci	r29, 0x01	; 1
     6c8:	c0 5b       	subi	r28, 0xB0	; 176
     6ca:	de 4f       	sbci	r29, 0xFE	; 254
     6cc:	88 81       	ld	r24, Y
     6ce:	c0 55       	subi	r28, 0x50	; 80
     6d0:	d1 40       	sbci	r29, 0x01	; 1
     6d2:	88 23       	and	r24, r24
     6d4:	21 f6       	brne	.-120    	; 0x65e <dzwiek+0x424>
	char siedem[] = "7.wav";				  // "7"
     6d6:	fe 01       	movw	r30, r28
     6d8:	bb 96       	adiw	r30, 0x2b	; 43
     6da:	cf 5a       	subi	r28, 0xAF	; 175
     6dc:	de 4f       	sbci	r29, 0xFE	; 254
     6de:	f9 83       	std	Y+1, r31	; 0x01
     6e0:	e8 83       	st	Y, r30
     6e2:	c1 55       	subi	r28, 0x51	; 81
     6e4:	d1 40       	sbci	r29, 0x01	; 1
     6e6:	2c e8       	ldi	r18, 0x8C	; 140
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	cd 5a       	subi	r28, 0xAD	; 173
     6ec:	de 4f       	sbci	r29, 0xFE	; 254
     6ee:	39 83       	std	Y+1, r19	; 0x01
     6f0:	28 83       	st	Y, r18
     6f2:	c3 55       	subi	r28, 0x53	; 83
     6f4:	d1 40       	sbci	r29, 0x01	; 1
     6f6:	36 e0       	ldi	r19, 0x06	; 6
     6f8:	cb 5a       	subi	r28, 0xAB	; 171
     6fa:	de 4f       	sbci	r29, 0xFE	; 254
     6fc:	38 83       	st	Y, r19
     6fe:	c5 55       	subi	r28, 0x55	; 85
     700:	d1 40       	sbci	r29, 0x01	; 1
     702:	cd 5a       	subi	r28, 0xAD	; 173
     704:	de 4f       	sbci	r29, 0xFE	; 254
     706:	e8 81       	ld	r30, Y
     708:	f9 81       	ldd	r31, Y+1	; 0x01
     70a:	c3 55       	subi	r28, 0x53	; 83
     70c:	d1 40       	sbci	r29, 0x01	; 1
     70e:	00 80       	ld	r0, Z
     710:	cd 5a       	subi	r28, 0xAD	; 173
     712:	de 4f       	sbci	r29, 0xFE	; 254
     714:	28 81       	ld	r18, Y
     716:	39 81       	ldd	r19, Y+1	; 0x01
     718:	c3 55       	subi	r28, 0x53	; 83
     71a:	d1 40       	sbci	r29, 0x01	; 1
     71c:	2f 5f       	subi	r18, 0xFF	; 255
     71e:	3f 4f       	sbci	r19, 0xFF	; 255
     720:	cd 5a       	subi	r28, 0xAD	; 173
     722:	de 4f       	sbci	r29, 0xFE	; 254
     724:	39 83       	std	Y+1, r19	; 0x01
     726:	28 83       	st	Y, r18
     728:	c3 55       	subi	r28, 0x53	; 83
     72a:	d1 40       	sbci	r29, 0x01	; 1
     72c:	cf 5a       	subi	r28, 0xAF	; 175
     72e:	de 4f       	sbci	r29, 0xFE	; 254
     730:	e8 81       	ld	r30, Y
     732:	f9 81       	ldd	r31, Y+1	; 0x01
     734:	c1 55       	subi	r28, 0x51	; 81
     736:	d1 40       	sbci	r29, 0x01	; 1
     738:	00 82       	st	Z, r0
     73a:	cf 5a       	subi	r28, 0xAF	; 175
     73c:	de 4f       	sbci	r29, 0xFE	; 254
     73e:	28 81       	ld	r18, Y
     740:	39 81       	ldd	r19, Y+1	; 0x01
     742:	c1 55       	subi	r28, 0x51	; 81
     744:	d1 40       	sbci	r29, 0x01	; 1
     746:	2f 5f       	subi	r18, 0xFF	; 255
     748:	3f 4f       	sbci	r19, 0xFF	; 255
     74a:	cf 5a       	subi	r28, 0xAF	; 175
     74c:	de 4f       	sbci	r29, 0xFE	; 254
     74e:	39 83       	std	Y+1, r19	; 0x01
     750:	28 83       	st	Y, r18
     752:	c1 55       	subi	r28, 0x51	; 81
     754:	d1 40       	sbci	r29, 0x01	; 1
     756:	cb 5a       	subi	r28, 0xAB	; 171
     758:	de 4f       	sbci	r29, 0xFE	; 254
     75a:	38 81       	ld	r19, Y
     75c:	c5 55       	subi	r28, 0x55	; 85
     75e:	d1 40       	sbci	r29, 0x01	; 1
     760:	31 50       	subi	r19, 0x01	; 1
     762:	cb 5a       	subi	r28, 0xAB	; 171
     764:	de 4f       	sbci	r29, 0xFE	; 254
     766:	38 83       	st	Y, r19
     768:	c5 55       	subi	r28, 0x55	; 85
     76a:	d1 40       	sbci	r29, 0x01	; 1
     76c:	cb 5a       	subi	r28, 0xAB	; 171
     76e:	de 4f       	sbci	r29, 0xFE	; 254
     770:	88 81       	ld	r24, Y
     772:	c5 55       	subi	r28, 0x55	; 85
     774:	d1 40       	sbci	r29, 0x01	; 1
     776:	88 23       	and	r24, r24
     778:	21 f6       	brne	.-120    	; 0x702 <dzwiek+0x4c8>
	char osiem[] = "8.wav";					  // "8"
     77a:	fe 01       	movw	r30, r28
     77c:	f1 96       	adiw	r30, 0x31	; 49
     77e:	ca 5a       	subi	r28, 0xAA	; 170
     780:	de 4f       	sbci	r29, 0xFE	; 254
     782:	f9 83       	std	Y+1, r31	; 0x01
     784:	e8 83       	st	Y, r30
     786:	c6 55       	subi	r28, 0x56	; 86
     788:	d1 40       	sbci	r29, 0x01	; 1
     78a:	22 e9       	ldi	r18, 0x92	; 146
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	c8 5a       	subi	r28, 0xA8	; 168
     790:	de 4f       	sbci	r29, 0xFE	; 254
     792:	39 83       	std	Y+1, r19	; 0x01
     794:	28 83       	st	Y, r18
     796:	c8 55       	subi	r28, 0x58	; 88
     798:	d1 40       	sbci	r29, 0x01	; 1
     79a:	36 e0       	ldi	r19, 0x06	; 6
     79c:	c6 5a       	subi	r28, 0xA6	; 166
     79e:	de 4f       	sbci	r29, 0xFE	; 254
     7a0:	38 83       	st	Y, r19
     7a2:	ca 55       	subi	r28, 0x5A	; 90
     7a4:	d1 40       	sbci	r29, 0x01	; 1
     7a6:	c8 5a       	subi	r28, 0xA8	; 168
     7a8:	de 4f       	sbci	r29, 0xFE	; 254
     7aa:	e8 81       	ld	r30, Y
     7ac:	f9 81       	ldd	r31, Y+1	; 0x01
     7ae:	c8 55       	subi	r28, 0x58	; 88
     7b0:	d1 40       	sbci	r29, 0x01	; 1
     7b2:	00 80       	ld	r0, Z
     7b4:	c8 5a       	subi	r28, 0xA8	; 168
     7b6:	de 4f       	sbci	r29, 0xFE	; 254
     7b8:	28 81       	ld	r18, Y
     7ba:	39 81       	ldd	r19, Y+1	; 0x01
     7bc:	c8 55       	subi	r28, 0x58	; 88
     7be:	d1 40       	sbci	r29, 0x01	; 1
     7c0:	2f 5f       	subi	r18, 0xFF	; 255
     7c2:	3f 4f       	sbci	r19, 0xFF	; 255
     7c4:	c8 5a       	subi	r28, 0xA8	; 168
     7c6:	de 4f       	sbci	r29, 0xFE	; 254
     7c8:	39 83       	std	Y+1, r19	; 0x01
     7ca:	28 83       	st	Y, r18
     7cc:	c8 55       	subi	r28, 0x58	; 88
     7ce:	d1 40       	sbci	r29, 0x01	; 1
     7d0:	ca 5a       	subi	r28, 0xAA	; 170
     7d2:	de 4f       	sbci	r29, 0xFE	; 254
     7d4:	e8 81       	ld	r30, Y
     7d6:	f9 81       	ldd	r31, Y+1	; 0x01
     7d8:	c6 55       	subi	r28, 0x56	; 86
     7da:	d1 40       	sbci	r29, 0x01	; 1
     7dc:	00 82       	st	Z, r0
     7de:	ca 5a       	subi	r28, 0xAA	; 170
     7e0:	de 4f       	sbci	r29, 0xFE	; 254
     7e2:	28 81       	ld	r18, Y
     7e4:	39 81       	ldd	r19, Y+1	; 0x01
     7e6:	c6 55       	subi	r28, 0x56	; 86
     7e8:	d1 40       	sbci	r29, 0x01	; 1
     7ea:	2f 5f       	subi	r18, 0xFF	; 255
     7ec:	3f 4f       	sbci	r19, 0xFF	; 255
     7ee:	ca 5a       	subi	r28, 0xAA	; 170
     7f0:	de 4f       	sbci	r29, 0xFE	; 254
     7f2:	39 83       	std	Y+1, r19	; 0x01
     7f4:	28 83       	st	Y, r18
     7f6:	c6 55       	subi	r28, 0x56	; 86
     7f8:	d1 40       	sbci	r29, 0x01	; 1
     7fa:	c6 5a       	subi	r28, 0xA6	; 166
     7fc:	de 4f       	sbci	r29, 0xFE	; 254
     7fe:	38 81       	ld	r19, Y
     800:	ca 55       	subi	r28, 0x5A	; 90
     802:	d1 40       	sbci	r29, 0x01	; 1
     804:	31 50       	subi	r19, 0x01	; 1
     806:	c6 5a       	subi	r28, 0xA6	; 166
     808:	de 4f       	sbci	r29, 0xFE	; 254
     80a:	38 83       	st	Y, r19
     80c:	ca 55       	subi	r28, 0x5A	; 90
     80e:	d1 40       	sbci	r29, 0x01	; 1
     810:	c6 5a       	subi	r28, 0xA6	; 166
     812:	de 4f       	sbci	r29, 0xFE	; 254
     814:	88 81       	ld	r24, Y
     816:	ca 55       	subi	r28, 0x5A	; 90
     818:	d1 40       	sbci	r29, 0x01	; 1
     81a:	88 23       	and	r24, r24
     81c:	21 f6       	brne	.-120    	; 0x7a6 <dzwiek+0x56c>
	char dziewiec[] = "9.wav";				  // "9"
     81e:	fe 01       	movw	r30, r28
     820:	f7 96       	adiw	r30, 0x37	; 55
     822:	c5 5a       	subi	r28, 0xA5	; 165
     824:	de 4f       	sbci	r29, 0xFE	; 254
     826:	f9 83       	std	Y+1, r31	; 0x01
     828:	e8 83       	st	Y, r30
     82a:	cb 55       	subi	r28, 0x5B	; 91
     82c:	d1 40       	sbci	r29, 0x01	; 1
     82e:	28 e9       	ldi	r18, 0x98	; 152
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	c3 5a       	subi	r28, 0xA3	; 163
     834:	de 4f       	sbci	r29, 0xFE	; 254
     836:	39 83       	std	Y+1, r19	; 0x01
     838:	28 83       	st	Y, r18
     83a:	cd 55       	subi	r28, 0x5D	; 93
     83c:	d1 40       	sbci	r29, 0x01	; 1
     83e:	36 e0       	ldi	r19, 0x06	; 6
     840:	c1 5a       	subi	r28, 0xA1	; 161
     842:	de 4f       	sbci	r29, 0xFE	; 254
     844:	38 83       	st	Y, r19
     846:	cf 55       	subi	r28, 0x5F	; 95
     848:	d1 40       	sbci	r29, 0x01	; 1
     84a:	c3 5a       	subi	r28, 0xA3	; 163
     84c:	de 4f       	sbci	r29, 0xFE	; 254
     84e:	e8 81       	ld	r30, Y
     850:	f9 81       	ldd	r31, Y+1	; 0x01
     852:	cd 55       	subi	r28, 0x5D	; 93
     854:	d1 40       	sbci	r29, 0x01	; 1
     856:	00 80       	ld	r0, Z
     858:	c3 5a       	subi	r28, 0xA3	; 163
     85a:	de 4f       	sbci	r29, 0xFE	; 254
     85c:	28 81       	ld	r18, Y
     85e:	39 81       	ldd	r19, Y+1	; 0x01
     860:	cd 55       	subi	r28, 0x5D	; 93
     862:	d1 40       	sbci	r29, 0x01	; 1
     864:	2f 5f       	subi	r18, 0xFF	; 255
     866:	3f 4f       	sbci	r19, 0xFF	; 255
     868:	c3 5a       	subi	r28, 0xA3	; 163
     86a:	de 4f       	sbci	r29, 0xFE	; 254
     86c:	39 83       	std	Y+1, r19	; 0x01
     86e:	28 83       	st	Y, r18
     870:	cd 55       	subi	r28, 0x5D	; 93
     872:	d1 40       	sbci	r29, 0x01	; 1
     874:	c5 5a       	subi	r28, 0xA5	; 165
     876:	de 4f       	sbci	r29, 0xFE	; 254
     878:	e8 81       	ld	r30, Y
     87a:	f9 81       	ldd	r31, Y+1	; 0x01
     87c:	cb 55       	subi	r28, 0x5B	; 91
     87e:	d1 40       	sbci	r29, 0x01	; 1
     880:	00 82       	st	Z, r0
     882:	c5 5a       	subi	r28, 0xA5	; 165
     884:	de 4f       	sbci	r29, 0xFE	; 254
     886:	28 81       	ld	r18, Y
     888:	39 81       	ldd	r19, Y+1	; 0x01
     88a:	cb 55       	subi	r28, 0x5B	; 91
     88c:	d1 40       	sbci	r29, 0x01	; 1
     88e:	2f 5f       	subi	r18, 0xFF	; 255
     890:	3f 4f       	sbci	r19, 0xFF	; 255
     892:	c5 5a       	subi	r28, 0xA5	; 165
     894:	de 4f       	sbci	r29, 0xFE	; 254
     896:	39 83       	std	Y+1, r19	; 0x01
     898:	28 83       	st	Y, r18
     89a:	cb 55       	subi	r28, 0x5B	; 91
     89c:	d1 40       	sbci	r29, 0x01	; 1
     89e:	c1 5a       	subi	r28, 0xA1	; 161
     8a0:	de 4f       	sbci	r29, 0xFE	; 254
     8a2:	38 81       	ld	r19, Y
     8a4:	cf 55       	subi	r28, 0x5F	; 95
     8a6:	d1 40       	sbci	r29, 0x01	; 1
     8a8:	31 50       	subi	r19, 0x01	; 1
     8aa:	c1 5a       	subi	r28, 0xA1	; 161
     8ac:	de 4f       	sbci	r29, 0xFE	; 254
     8ae:	38 83       	st	Y, r19
     8b0:	cf 55       	subi	r28, 0x5F	; 95
     8b2:	d1 40       	sbci	r29, 0x01	; 1
     8b4:	c1 5a       	subi	r28, 0xA1	; 161
     8b6:	de 4f       	sbci	r29, 0xFE	; 254
     8b8:	88 81       	ld	r24, Y
     8ba:	cf 55       	subi	r28, 0x5F	; 95
     8bc:	d1 40       	sbci	r29, 0x01	; 1
     8be:	88 23       	and	r24, r24
     8c0:	21 f6       	brne	.-120    	; 0x84a <dzwiek+0x610>

	char start[] = "10.wav";				  // "witaj uøytkowniku, trwa konfiguracja urzπdzenia. ProszÍ czekaÊ"
     8c2:	fe 01       	movw	r30, r28
     8c4:	fd 96       	adiw	r30, 0x3d	; 61
     8c6:	c0 5a       	subi	r28, 0xA0	; 160
     8c8:	de 4f       	sbci	r29, 0xFE	; 254
     8ca:	f9 83       	std	Y+1, r31	; 0x01
     8cc:	e8 83       	st	Y, r30
     8ce:	c0 56       	subi	r28, 0x60	; 96
     8d0:	d1 40       	sbci	r29, 0x01	; 1
     8d2:	2e e9       	ldi	r18, 0x9E	; 158
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	ce 59       	subi	r28, 0x9E	; 158
     8d8:	de 4f       	sbci	r29, 0xFE	; 254
     8da:	39 83       	std	Y+1, r19	; 0x01
     8dc:	28 83       	st	Y, r18
     8de:	c2 56       	subi	r28, 0x62	; 98
     8e0:	d1 40       	sbci	r29, 0x01	; 1
     8e2:	37 e0       	ldi	r19, 0x07	; 7
     8e4:	cc 59       	subi	r28, 0x9C	; 156
     8e6:	de 4f       	sbci	r29, 0xFE	; 254
     8e8:	38 83       	st	Y, r19
     8ea:	c4 56       	subi	r28, 0x64	; 100
     8ec:	d1 40       	sbci	r29, 0x01	; 1
     8ee:	ce 59       	subi	r28, 0x9E	; 158
     8f0:	de 4f       	sbci	r29, 0xFE	; 254
     8f2:	e8 81       	ld	r30, Y
     8f4:	f9 81       	ldd	r31, Y+1	; 0x01
     8f6:	c2 56       	subi	r28, 0x62	; 98
     8f8:	d1 40       	sbci	r29, 0x01	; 1
     8fa:	00 80       	ld	r0, Z
     8fc:	ce 59       	subi	r28, 0x9E	; 158
     8fe:	de 4f       	sbci	r29, 0xFE	; 254
     900:	28 81       	ld	r18, Y
     902:	39 81       	ldd	r19, Y+1	; 0x01
     904:	c2 56       	subi	r28, 0x62	; 98
     906:	d1 40       	sbci	r29, 0x01	; 1
     908:	2f 5f       	subi	r18, 0xFF	; 255
     90a:	3f 4f       	sbci	r19, 0xFF	; 255
     90c:	ce 59       	subi	r28, 0x9E	; 158
     90e:	de 4f       	sbci	r29, 0xFE	; 254
     910:	39 83       	std	Y+1, r19	; 0x01
     912:	28 83       	st	Y, r18
     914:	c2 56       	subi	r28, 0x62	; 98
     916:	d1 40       	sbci	r29, 0x01	; 1
     918:	c0 5a       	subi	r28, 0xA0	; 160
     91a:	de 4f       	sbci	r29, 0xFE	; 254
     91c:	e8 81       	ld	r30, Y
     91e:	f9 81       	ldd	r31, Y+1	; 0x01
     920:	c0 56       	subi	r28, 0x60	; 96
     922:	d1 40       	sbci	r29, 0x01	; 1
     924:	00 82       	st	Z, r0
     926:	c0 5a       	subi	r28, 0xA0	; 160
     928:	de 4f       	sbci	r29, 0xFE	; 254
     92a:	28 81       	ld	r18, Y
     92c:	39 81       	ldd	r19, Y+1	; 0x01
     92e:	c0 56       	subi	r28, 0x60	; 96
     930:	d1 40       	sbci	r29, 0x01	; 1
     932:	2f 5f       	subi	r18, 0xFF	; 255
     934:	3f 4f       	sbci	r19, 0xFF	; 255
     936:	c0 5a       	subi	r28, 0xA0	; 160
     938:	de 4f       	sbci	r29, 0xFE	; 254
     93a:	39 83       	std	Y+1, r19	; 0x01
     93c:	28 83       	st	Y, r18
     93e:	c0 56       	subi	r28, 0x60	; 96
     940:	d1 40       	sbci	r29, 0x01	; 1
     942:	cc 59       	subi	r28, 0x9C	; 156
     944:	de 4f       	sbci	r29, 0xFE	; 254
     946:	38 81       	ld	r19, Y
     948:	c4 56       	subi	r28, 0x64	; 100
     94a:	d1 40       	sbci	r29, 0x01	; 1
     94c:	31 50       	subi	r19, 0x01	; 1
     94e:	cc 59       	subi	r28, 0x9C	; 156
     950:	de 4f       	sbci	r29, 0xFE	; 254
     952:	38 83       	st	Y, r19
     954:	c4 56       	subi	r28, 0x64	; 100
     956:	d1 40       	sbci	r29, 0x01	; 1
     958:	cc 59       	subi	r28, 0x9C	; 156
     95a:	de 4f       	sbci	r29, 0xFE	; 254
     95c:	88 81       	ld	r24, Y
     95e:	c4 56       	subi	r28, 0x64	; 100
     960:	d1 40       	sbci	r29, 0x01	; 1
     962:	88 23       	and	r24, r24
     964:	21 f6       	brne	.-120    	; 0x8ee <__stack+0x8f>
	char wprowadz_numer[] = "11.wav";	 	  // "proszÍ wprowadziÊ numer linii komunikacji miejskiej"
     966:	ce 01       	movw	r24, r28
     968:	8c 5b       	subi	r24, 0xBC	; 188
     96a:	9f 4f       	sbci	r25, 0xFF	; 255
     96c:	cb 59       	subi	r28, 0x9B	; 155
     96e:	de 4f       	sbci	r29, 0xFE	; 254
     970:	99 83       	std	Y+1, r25	; 0x01
     972:	88 83       	st	Y, r24
     974:	c5 56       	subi	r28, 0x65	; 101
     976:	d1 40       	sbci	r29, 0x01	; 1
     978:	e5 ea       	ldi	r30, 0xA5	; 165
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	c9 59       	subi	r28, 0x99	; 153
     97e:	de 4f       	sbci	r29, 0xFE	; 254
     980:	f9 83       	std	Y+1, r31	; 0x01
     982:	e8 83       	st	Y, r30
     984:	c7 56       	subi	r28, 0x67	; 103
     986:	d1 40       	sbci	r29, 0x01	; 1
     988:	f7 e0       	ldi	r31, 0x07	; 7
     98a:	c7 59       	subi	r28, 0x97	; 151
     98c:	de 4f       	sbci	r29, 0xFE	; 254
     98e:	f8 83       	st	Y, r31
     990:	c9 56       	subi	r28, 0x69	; 105
     992:	d1 40       	sbci	r29, 0x01	; 1
     994:	c9 59       	subi	r28, 0x99	; 153
     996:	de 4f       	sbci	r29, 0xFE	; 254
     998:	e8 81       	ld	r30, Y
     99a:	f9 81       	ldd	r31, Y+1	; 0x01
     99c:	c7 56       	subi	r28, 0x67	; 103
     99e:	d1 40       	sbci	r29, 0x01	; 1
     9a0:	00 80       	ld	r0, Z
     9a2:	c9 59       	subi	r28, 0x99	; 153
     9a4:	de 4f       	sbci	r29, 0xFE	; 254
     9a6:	28 81       	ld	r18, Y
     9a8:	39 81       	ldd	r19, Y+1	; 0x01
     9aa:	c7 56       	subi	r28, 0x67	; 103
     9ac:	d1 40       	sbci	r29, 0x01	; 1
     9ae:	2f 5f       	subi	r18, 0xFF	; 255
     9b0:	3f 4f       	sbci	r19, 0xFF	; 255
     9b2:	c9 59       	subi	r28, 0x99	; 153
     9b4:	de 4f       	sbci	r29, 0xFE	; 254
     9b6:	39 83       	std	Y+1, r19	; 0x01
     9b8:	28 83       	st	Y, r18
     9ba:	c7 56       	subi	r28, 0x67	; 103
     9bc:	d1 40       	sbci	r29, 0x01	; 1
     9be:	cb 59       	subi	r28, 0x9B	; 155
     9c0:	de 4f       	sbci	r29, 0xFE	; 254
     9c2:	e8 81       	ld	r30, Y
     9c4:	f9 81       	ldd	r31, Y+1	; 0x01
     9c6:	c5 56       	subi	r28, 0x65	; 101
     9c8:	d1 40       	sbci	r29, 0x01	; 1
     9ca:	00 82       	st	Z, r0
     9cc:	cb 59       	subi	r28, 0x9B	; 155
     9ce:	de 4f       	sbci	r29, 0xFE	; 254
     9d0:	28 81       	ld	r18, Y
     9d2:	39 81       	ldd	r19, Y+1	; 0x01
     9d4:	c5 56       	subi	r28, 0x65	; 101
     9d6:	d1 40       	sbci	r29, 0x01	; 1
     9d8:	2f 5f       	subi	r18, 0xFF	; 255
     9da:	3f 4f       	sbci	r19, 0xFF	; 255
     9dc:	cb 59       	subi	r28, 0x9B	; 155
     9de:	de 4f       	sbci	r29, 0xFE	; 254
     9e0:	39 83       	std	Y+1, r19	; 0x01
     9e2:	28 83       	st	Y, r18
     9e4:	c5 56       	subi	r28, 0x65	; 101
     9e6:	d1 40       	sbci	r29, 0x01	; 1
     9e8:	c7 59       	subi	r28, 0x97	; 151
     9ea:	de 4f       	sbci	r29, 0xFE	; 254
     9ec:	38 81       	ld	r19, Y
     9ee:	c9 56       	subi	r28, 0x69	; 105
     9f0:	d1 40       	sbci	r29, 0x01	; 1
     9f2:	31 50       	subi	r19, 0x01	; 1
     9f4:	c7 59       	subi	r28, 0x97	; 151
     9f6:	de 4f       	sbci	r29, 0xFE	; 254
     9f8:	38 83       	st	Y, r19
     9fa:	c9 56       	subi	r28, 0x69	; 105
     9fc:	d1 40       	sbci	r29, 0x01	; 1
     9fe:	c7 59       	subi	r28, 0x97	; 151
     a00:	de 4f       	sbci	r29, 0xFE	; 254
     a02:	88 81       	ld	r24, Y
     a04:	c9 56       	subi	r28, 0x69	; 105
     a06:	d1 40       	sbci	r29, 0x01	; 1
     a08:	88 23       	and	r24, r24
     a0a:	21 f6       	brne	.-120    	; 0x994 <__stack+0x135>
	char setki[] = "12.wav";				  // "wprowadü liczbÍ setek
     a0c:	ce 01       	movw	r24, r28
     a0e:	85 5b       	subi	r24, 0xB5	; 181
     a10:	9f 4f       	sbci	r25, 0xFF	; 255
     a12:	c6 59       	subi	r28, 0x96	; 150
     a14:	de 4f       	sbci	r29, 0xFE	; 254
     a16:	99 83       	std	Y+1, r25	; 0x01
     a18:	88 83       	st	Y, r24
     a1a:	ca 56       	subi	r28, 0x6A	; 106
     a1c:	d1 40       	sbci	r29, 0x01	; 1
     a1e:	ec ea       	ldi	r30, 0xAC	; 172
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	c4 59       	subi	r28, 0x94	; 148
     a24:	de 4f       	sbci	r29, 0xFE	; 254
     a26:	f9 83       	std	Y+1, r31	; 0x01
     a28:	e8 83       	st	Y, r30
     a2a:	cc 56       	subi	r28, 0x6C	; 108
     a2c:	d1 40       	sbci	r29, 0x01	; 1
     a2e:	f7 e0       	ldi	r31, 0x07	; 7
     a30:	c2 59       	subi	r28, 0x92	; 146
     a32:	de 4f       	sbci	r29, 0xFE	; 254
     a34:	f8 83       	st	Y, r31
     a36:	ce 56       	subi	r28, 0x6E	; 110
     a38:	d1 40       	sbci	r29, 0x01	; 1
     a3a:	c4 59       	subi	r28, 0x94	; 148
     a3c:	de 4f       	sbci	r29, 0xFE	; 254
     a3e:	e8 81       	ld	r30, Y
     a40:	f9 81       	ldd	r31, Y+1	; 0x01
     a42:	cc 56       	subi	r28, 0x6C	; 108
     a44:	d1 40       	sbci	r29, 0x01	; 1
     a46:	00 80       	ld	r0, Z
     a48:	c4 59       	subi	r28, 0x94	; 148
     a4a:	de 4f       	sbci	r29, 0xFE	; 254
     a4c:	28 81       	ld	r18, Y
     a4e:	39 81       	ldd	r19, Y+1	; 0x01
     a50:	cc 56       	subi	r28, 0x6C	; 108
     a52:	d1 40       	sbci	r29, 0x01	; 1
     a54:	2f 5f       	subi	r18, 0xFF	; 255
     a56:	3f 4f       	sbci	r19, 0xFF	; 255
     a58:	c4 59       	subi	r28, 0x94	; 148
     a5a:	de 4f       	sbci	r29, 0xFE	; 254
     a5c:	39 83       	std	Y+1, r19	; 0x01
     a5e:	28 83       	st	Y, r18
     a60:	cc 56       	subi	r28, 0x6C	; 108
     a62:	d1 40       	sbci	r29, 0x01	; 1
     a64:	c6 59       	subi	r28, 0x96	; 150
     a66:	de 4f       	sbci	r29, 0xFE	; 254
     a68:	e8 81       	ld	r30, Y
     a6a:	f9 81       	ldd	r31, Y+1	; 0x01
     a6c:	ca 56       	subi	r28, 0x6A	; 106
     a6e:	d1 40       	sbci	r29, 0x01	; 1
     a70:	00 82       	st	Z, r0
     a72:	c6 59       	subi	r28, 0x96	; 150
     a74:	de 4f       	sbci	r29, 0xFE	; 254
     a76:	28 81       	ld	r18, Y
     a78:	39 81       	ldd	r19, Y+1	; 0x01
     a7a:	ca 56       	subi	r28, 0x6A	; 106
     a7c:	d1 40       	sbci	r29, 0x01	; 1
     a7e:	2f 5f       	subi	r18, 0xFF	; 255
     a80:	3f 4f       	sbci	r19, 0xFF	; 255
     a82:	c6 59       	subi	r28, 0x96	; 150
     a84:	de 4f       	sbci	r29, 0xFE	; 254
     a86:	39 83       	std	Y+1, r19	; 0x01
     a88:	28 83       	st	Y, r18
     a8a:	ca 56       	subi	r28, 0x6A	; 106
     a8c:	d1 40       	sbci	r29, 0x01	; 1
     a8e:	c2 59       	subi	r28, 0x92	; 146
     a90:	de 4f       	sbci	r29, 0xFE	; 254
     a92:	38 81       	ld	r19, Y
     a94:	ce 56       	subi	r28, 0x6E	; 110
     a96:	d1 40       	sbci	r29, 0x01	; 1
     a98:	31 50       	subi	r19, 0x01	; 1
     a9a:	c2 59       	subi	r28, 0x92	; 146
     a9c:	de 4f       	sbci	r29, 0xFE	; 254
     a9e:	38 83       	st	Y, r19
     aa0:	ce 56       	subi	r28, 0x6E	; 110
     aa2:	d1 40       	sbci	r29, 0x01	; 1
     aa4:	c2 59       	subi	r28, 0x92	; 146
     aa6:	de 4f       	sbci	r29, 0xFE	; 254
     aa8:	88 81       	ld	r24, Y
     aaa:	ce 56       	subi	r28, 0x6E	; 110
     aac:	d1 40       	sbci	r29, 0x01	; 1
     aae:	88 23       	and	r24, r24
     ab0:	21 f6       	brne	.-120    	; 0xa3a <__stack+0x1db>
	char dziesiatki[] = "13.wav";	 		  // "wprowadü liczbÍ dziesiπtek
     ab2:	ce 01       	movw	r24, r28
     ab4:	8e 5a       	subi	r24, 0xAE	; 174
     ab6:	9f 4f       	sbci	r25, 0xFF	; 255
     ab8:	c1 59       	subi	r28, 0x91	; 145
     aba:	de 4f       	sbci	r29, 0xFE	; 254
     abc:	99 83       	std	Y+1, r25	; 0x01
     abe:	88 83       	st	Y, r24
     ac0:	cf 56       	subi	r28, 0x6F	; 111
     ac2:	d1 40       	sbci	r29, 0x01	; 1
     ac4:	e3 eb       	ldi	r30, 0xB3	; 179
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	cf 58       	subi	r28, 0x8F	; 143
     aca:	de 4f       	sbci	r29, 0xFE	; 254
     acc:	f9 83       	std	Y+1, r31	; 0x01
     ace:	e8 83       	st	Y, r30
     ad0:	c1 57       	subi	r28, 0x71	; 113
     ad2:	d1 40       	sbci	r29, 0x01	; 1
     ad4:	f7 e0       	ldi	r31, 0x07	; 7
     ad6:	cd 58       	subi	r28, 0x8D	; 141
     ad8:	de 4f       	sbci	r29, 0xFE	; 254
     ada:	f8 83       	st	Y, r31
     adc:	c3 57       	subi	r28, 0x73	; 115
     ade:	d1 40       	sbci	r29, 0x01	; 1
     ae0:	cf 58       	subi	r28, 0x8F	; 143
     ae2:	de 4f       	sbci	r29, 0xFE	; 254
     ae4:	e8 81       	ld	r30, Y
     ae6:	f9 81       	ldd	r31, Y+1	; 0x01
     ae8:	c1 57       	subi	r28, 0x71	; 113
     aea:	d1 40       	sbci	r29, 0x01	; 1
     aec:	00 80       	ld	r0, Z
     aee:	cf 58       	subi	r28, 0x8F	; 143
     af0:	de 4f       	sbci	r29, 0xFE	; 254
     af2:	28 81       	ld	r18, Y
     af4:	39 81       	ldd	r19, Y+1	; 0x01
     af6:	c1 57       	subi	r28, 0x71	; 113
     af8:	d1 40       	sbci	r29, 0x01	; 1
     afa:	2f 5f       	subi	r18, 0xFF	; 255
     afc:	3f 4f       	sbci	r19, 0xFF	; 255
     afe:	cf 58       	subi	r28, 0x8F	; 143
     b00:	de 4f       	sbci	r29, 0xFE	; 254
     b02:	39 83       	std	Y+1, r19	; 0x01
     b04:	28 83       	st	Y, r18
     b06:	c1 57       	subi	r28, 0x71	; 113
     b08:	d1 40       	sbci	r29, 0x01	; 1
     b0a:	c1 59       	subi	r28, 0x91	; 145
     b0c:	de 4f       	sbci	r29, 0xFE	; 254
     b0e:	e8 81       	ld	r30, Y
     b10:	f9 81       	ldd	r31, Y+1	; 0x01
     b12:	cf 56       	subi	r28, 0x6F	; 111
     b14:	d1 40       	sbci	r29, 0x01	; 1
     b16:	00 82       	st	Z, r0
     b18:	c1 59       	subi	r28, 0x91	; 145
     b1a:	de 4f       	sbci	r29, 0xFE	; 254
     b1c:	28 81       	ld	r18, Y
     b1e:	39 81       	ldd	r19, Y+1	; 0x01
     b20:	cf 56       	subi	r28, 0x6F	; 111
     b22:	d1 40       	sbci	r29, 0x01	; 1
     b24:	2f 5f       	subi	r18, 0xFF	; 255
     b26:	3f 4f       	sbci	r19, 0xFF	; 255
     b28:	c1 59       	subi	r28, 0x91	; 145
     b2a:	de 4f       	sbci	r29, 0xFE	; 254
     b2c:	39 83       	std	Y+1, r19	; 0x01
     b2e:	28 83       	st	Y, r18
     b30:	cf 56       	subi	r28, 0x6F	; 111
     b32:	d1 40       	sbci	r29, 0x01	; 1
     b34:	cd 58       	subi	r28, 0x8D	; 141
     b36:	de 4f       	sbci	r29, 0xFE	; 254
     b38:	38 81       	ld	r19, Y
     b3a:	c3 57       	subi	r28, 0x73	; 115
     b3c:	d1 40       	sbci	r29, 0x01	; 1
     b3e:	31 50       	subi	r19, 0x01	; 1
     b40:	cd 58       	subi	r28, 0x8D	; 141
     b42:	de 4f       	sbci	r29, 0xFE	; 254
     b44:	38 83       	st	Y, r19
     b46:	c3 57       	subi	r28, 0x73	; 115
     b48:	d1 40       	sbci	r29, 0x01	; 1
     b4a:	cd 58       	subi	r28, 0x8D	; 141
     b4c:	de 4f       	sbci	r29, 0xFE	; 254
     b4e:	88 81       	ld	r24, Y
     b50:	c3 57       	subi	r28, 0x73	; 115
     b52:	d1 40       	sbci	r29, 0x01	; 1
     b54:	88 23       	and	r24, r24
     b56:	21 f6       	brne	.-120    	; 0xae0 <__stack+0x281>
	char jednosci[] = "14.wav";		 		  // "wprowadü liczbÍ jednosci
     b58:	ce 01       	movw	r24, r28
     b5a:	87 5a       	subi	r24, 0xA7	; 167
     b5c:	9f 4f       	sbci	r25, 0xFF	; 255
     b5e:	cc 58       	subi	r28, 0x8C	; 140
     b60:	de 4f       	sbci	r29, 0xFE	; 254
     b62:	99 83       	std	Y+1, r25	; 0x01
     b64:	88 83       	st	Y, r24
     b66:	c4 57       	subi	r28, 0x74	; 116
     b68:	d1 40       	sbci	r29, 0x01	; 1
     b6a:	ea eb       	ldi	r30, 0xBA	; 186
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	ca 58       	subi	r28, 0x8A	; 138
     b70:	de 4f       	sbci	r29, 0xFE	; 254
     b72:	f9 83       	std	Y+1, r31	; 0x01
     b74:	e8 83       	st	Y, r30
     b76:	c6 57       	subi	r28, 0x76	; 118
     b78:	d1 40       	sbci	r29, 0x01	; 1
     b7a:	f7 e0       	ldi	r31, 0x07	; 7
     b7c:	c8 58       	subi	r28, 0x88	; 136
     b7e:	de 4f       	sbci	r29, 0xFE	; 254
     b80:	f8 83       	st	Y, r31
     b82:	c8 57       	subi	r28, 0x78	; 120
     b84:	d1 40       	sbci	r29, 0x01	; 1
     b86:	ca 58       	subi	r28, 0x8A	; 138
     b88:	de 4f       	sbci	r29, 0xFE	; 254
     b8a:	e8 81       	ld	r30, Y
     b8c:	f9 81       	ldd	r31, Y+1	; 0x01
     b8e:	c6 57       	subi	r28, 0x76	; 118
     b90:	d1 40       	sbci	r29, 0x01	; 1
     b92:	00 80       	ld	r0, Z
     b94:	ca 58       	subi	r28, 0x8A	; 138
     b96:	de 4f       	sbci	r29, 0xFE	; 254
     b98:	28 81       	ld	r18, Y
     b9a:	39 81       	ldd	r19, Y+1	; 0x01
     b9c:	c6 57       	subi	r28, 0x76	; 118
     b9e:	d1 40       	sbci	r29, 0x01	; 1
     ba0:	2f 5f       	subi	r18, 0xFF	; 255
     ba2:	3f 4f       	sbci	r19, 0xFF	; 255
     ba4:	ca 58       	subi	r28, 0x8A	; 138
     ba6:	de 4f       	sbci	r29, 0xFE	; 254
     ba8:	39 83       	std	Y+1, r19	; 0x01
     baa:	28 83       	st	Y, r18
     bac:	c6 57       	subi	r28, 0x76	; 118
     bae:	d1 40       	sbci	r29, 0x01	; 1
     bb0:	cc 58       	subi	r28, 0x8C	; 140
     bb2:	de 4f       	sbci	r29, 0xFE	; 254
     bb4:	e8 81       	ld	r30, Y
     bb6:	f9 81       	ldd	r31, Y+1	; 0x01
     bb8:	c4 57       	subi	r28, 0x74	; 116
     bba:	d1 40       	sbci	r29, 0x01	; 1
     bbc:	00 82       	st	Z, r0
     bbe:	cc 58       	subi	r28, 0x8C	; 140
     bc0:	de 4f       	sbci	r29, 0xFE	; 254
     bc2:	28 81       	ld	r18, Y
     bc4:	39 81       	ldd	r19, Y+1	; 0x01
     bc6:	c4 57       	subi	r28, 0x74	; 116
     bc8:	d1 40       	sbci	r29, 0x01	; 1
     bca:	2f 5f       	subi	r18, 0xFF	; 255
     bcc:	3f 4f       	sbci	r19, 0xFF	; 255
     bce:	cc 58       	subi	r28, 0x8C	; 140
     bd0:	de 4f       	sbci	r29, 0xFE	; 254
     bd2:	39 83       	std	Y+1, r19	; 0x01
     bd4:	28 83       	st	Y, r18
     bd6:	c4 57       	subi	r28, 0x74	; 116
     bd8:	d1 40       	sbci	r29, 0x01	; 1
     bda:	c8 58       	subi	r28, 0x88	; 136
     bdc:	de 4f       	sbci	r29, 0xFE	; 254
     bde:	38 81       	ld	r19, Y
     be0:	c8 57       	subi	r28, 0x78	; 120
     be2:	d1 40       	sbci	r29, 0x01	; 1
     be4:	31 50       	subi	r19, 0x01	; 1
     be6:	c8 58       	subi	r28, 0x88	; 136
     be8:	de 4f       	sbci	r29, 0xFE	; 254
     bea:	38 83       	st	Y, r19
     bec:	c8 57       	subi	r28, 0x78	; 120
     bee:	d1 40       	sbci	r29, 0x01	; 1
     bf0:	c8 58       	subi	r28, 0x88	; 136
     bf2:	de 4f       	sbci	r29, 0xFE	; 254
     bf4:	88 81       	ld	r24, Y
     bf6:	c8 57       	subi	r28, 0x78	; 120
     bf8:	d1 40       	sbci	r29, 0x01	; 1
     bfa:	88 23       	and	r24, r24
     bfc:	21 f6       	brne	.-120    	; 0xb86 <__stack+0x327>
	char wybrano_linie[] = "15.wav";	 	  // "wybrano liniÍ numer(...)"
     bfe:	ce 01       	movw	r24, r28
     c00:	80 5a       	subi	r24, 0xA0	; 160
     c02:	9f 4f       	sbci	r25, 0xFF	; 255
     c04:	c7 58       	subi	r28, 0x87	; 135
     c06:	de 4f       	sbci	r29, 0xFE	; 254
     c08:	99 83       	std	Y+1, r25	; 0x01
     c0a:	88 83       	st	Y, r24
     c0c:	c9 57       	subi	r28, 0x79	; 121
     c0e:	d1 40       	sbci	r29, 0x01	; 1
     c10:	e1 ec       	ldi	r30, 0xC1	; 193
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	c5 58       	subi	r28, 0x85	; 133
     c16:	de 4f       	sbci	r29, 0xFE	; 254
     c18:	f9 83       	std	Y+1, r31	; 0x01
     c1a:	e8 83       	st	Y, r30
     c1c:	cb 57       	subi	r28, 0x7B	; 123
     c1e:	d1 40       	sbci	r29, 0x01	; 1
     c20:	f7 e0       	ldi	r31, 0x07	; 7
     c22:	c3 58       	subi	r28, 0x83	; 131
     c24:	de 4f       	sbci	r29, 0xFE	; 254
     c26:	f8 83       	st	Y, r31
     c28:	cd 57       	subi	r28, 0x7D	; 125
     c2a:	d1 40       	sbci	r29, 0x01	; 1
     c2c:	c5 58       	subi	r28, 0x85	; 133
     c2e:	de 4f       	sbci	r29, 0xFE	; 254
     c30:	e8 81       	ld	r30, Y
     c32:	f9 81       	ldd	r31, Y+1	; 0x01
     c34:	cb 57       	subi	r28, 0x7B	; 123
     c36:	d1 40       	sbci	r29, 0x01	; 1
     c38:	00 80       	ld	r0, Z
     c3a:	c5 58       	subi	r28, 0x85	; 133
     c3c:	de 4f       	sbci	r29, 0xFE	; 254
     c3e:	28 81       	ld	r18, Y
     c40:	39 81       	ldd	r19, Y+1	; 0x01
     c42:	cb 57       	subi	r28, 0x7B	; 123
     c44:	d1 40       	sbci	r29, 0x01	; 1
     c46:	2f 5f       	subi	r18, 0xFF	; 255
     c48:	3f 4f       	sbci	r19, 0xFF	; 255
     c4a:	c5 58       	subi	r28, 0x85	; 133
     c4c:	de 4f       	sbci	r29, 0xFE	; 254
     c4e:	39 83       	std	Y+1, r19	; 0x01
     c50:	28 83       	st	Y, r18
     c52:	cb 57       	subi	r28, 0x7B	; 123
     c54:	d1 40       	sbci	r29, 0x01	; 1
     c56:	c7 58       	subi	r28, 0x87	; 135
     c58:	de 4f       	sbci	r29, 0xFE	; 254
     c5a:	e8 81       	ld	r30, Y
     c5c:	f9 81       	ldd	r31, Y+1	; 0x01
     c5e:	c9 57       	subi	r28, 0x79	; 121
     c60:	d1 40       	sbci	r29, 0x01	; 1
     c62:	00 82       	st	Z, r0
     c64:	c7 58       	subi	r28, 0x87	; 135
     c66:	de 4f       	sbci	r29, 0xFE	; 254
     c68:	28 81       	ld	r18, Y
     c6a:	39 81       	ldd	r19, Y+1	; 0x01
     c6c:	c9 57       	subi	r28, 0x79	; 121
     c6e:	d1 40       	sbci	r29, 0x01	; 1
     c70:	2f 5f       	subi	r18, 0xFF	; 255
     c72:	3f 4f       	sbci	r19, 0xFF	; 255
     c74:	c7 58       	subi	r28, 0x87	; 135
     c76:	de 4f       	sbci	r29, 0xFE	; 254
     c78:	39 83       	std	Y+1, r19	; 0x01
     c7a:	28 83       	st	Y, r18
     c7c:	c9 57       	subi	r28, 0x79	; 121
     c7e:	d1 40       	sbci	r29, 0x01	; 1
     c80:	c3 58       	subi	r28, 0x83	; 131
     c82:	de 4f       	sbci	r29, 0xFE	; 254
     c84:	38 81       	ld	r19, Y
     c86:	cd 57       	subi	r28, 0x7D	; 125
     c88:	d1 40       	sbci	r29, 0x01	; 1
     c8a:	31 50       	subi	r19, 0x01	; 1
     c8c:	c3 58       	subi	r28, 0x83	; 131
     c8e:	de 4f       	sbci	r29, 0xFE	; 254
     c90:	38 83       	st	Y, r19
     c92:	cd 57       	subi	r28, 0x7D	; 125
     c94:	d1 40       	sbci	r29, 0x01	; 1
     c96:	c3 58       	subi	r28, 0x83	; 131
     c98:	de 4f       	sbci	r29, 0xFE	; 254
     c9a:	88 81       	ld	r24, Y
     c9c:	cd 57       	subi	r28, 0x7D	; 125
     c9e:	d1 40       	sbci	r29, 0x01	; 1
     ca0:	88 23       	and	r24, r24
     ca2:	21 f6       	brne	.-120    	; 0xc2c <__stack+0x3cd>
	char podjechala_linia[] = "16.wav";	  	  // "podjecha≥a Twoja linia (...)"
     ca4:	ce 01       	movw	r24, r28
     ca6:	89 59       	subi	r24, 0x99	; 153
     ca8:	9f 4f       	sbci	r25, 0xFF	; 255
     caa:	c2 58       	subi	r28, 0x82	; 130
     cac:	de 4f       	sbci	r29, 0xFE	; 254
     cae:	99 83       	std	Y+1, r25	; 0x01
     cb0:	88 83       	st	Y, r24
     cb2:	ce 57       	subi	r28, 0x7E	; 126
     cb4:	d1 40       	sbci	r29, 0x01	; 1
     cb6:	e8 ec       	ldi	r30, 0xC8	; 200
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	c0 58       	subi	r28, 0x80	; 128
     cbc:	de 4f       	sbci	r29, 0xFE	; 254
     cbe:	f9 83       	std	Y+1, r31	; 0x01
     cc0:	e8 83       	st	Y, r30
     cc2:	c0 58       	subi	r28, 0x80	; 128
     cc4:	d1 40       	sbci	r29, 0x01	; 1
     cc6:	f7 e0       	ldi	r31, 0x07	; 7
     cc8:	ce 57       	subi	r28, 0x7E	; 126
     cca:	de 4f       	sbci	r29, 0xFE	; 254
     ccc:	f8 83       	st	Y, r31
     cce:	c2 58       	subi	r28, 0x82	; 130
     cd0:	d1 40       	sbci	r29, 0x01	; 1
     cd2:	c0 58       	subi	r28, 0x80	; 128
     cd4:	de 4f       	sbci	r29, 0xFE	; 254
     cd6:	e8 81       	ld	r30, Y
     cd8:	f9 81       	ldd	r31, Y+1	; 0x01
     cda:	c0 58       	subi	r28, 0x80	; 128
     cdc:	d1 40       	sbci	r29, 0x01	; 1
     cde:	00 80       	ld	r0, Z
     ce0:	c0 58       	subi	r28, 0x80	; 128
     ce2:	de 4f       	sbci	r29, 0xFE	; 254
     ce4:	28 81       	ld	r18, Y
     ce6:	39 81       	ldd	r19, Y+1	; 0x01
     ce8:	c0 58       	subi	r28, 0x80	; 128
     cea:	d1 40       	sbci	r29, 0x01	; 1
     cec:	2f 5f       	subi	r18, 0xFF	; 255
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	c0 58       	subi	r28, 0x80	; 128
     cf2:	de 4f       	sbci	r29, 0xFE	; 254
     cf4:	39 83       	std	Y+1, r19	; 0x01
     cf6:	28 83       	st	Y, r18
     cf8:	c0 58       	subi	r28, 0x80	; 128
     cfa:	d1 40       	sbci	r29, 0x01	; 1
     cfc:	c2 58       	subi	r28, 0x82	; 130
     cfe:	de 4f       	sbci	r29, 0xFE	; 254
     d00:	e8 81       	ld	r30, Y
     d02:	f9 81       	ldd	r31, Y+1	; 0x01
     d04:	ce 57       	subi	r28, 0x7E	; 126
     d06:	d1 40       	sbci	r29, 0x01	; 1
     d08:	00 82       	st	Z, r0
     d0a:	c2 58       	subi	r28, 0x82	; 130
     d0c:	de 4f       	sbci	r29, 0xFE	; 254
     d0e:	28 81       	ld	r18, Y
     d10:	39 81       	ldd	r19, Y+1	; 0x01
     d12:	ce 57       	subi	r28, 0x7E	; 126
     d14:	d1 40       	sbci	r29, 0x01	; 1
     d16:	2f 5f       	subi	r18, 0xFF	; 255
     d18:	3f 4f       	sbci	r19, 0xFF	; 255
     d1a:	c2 58       	subi	r28, 0x82	; 130
     d1c:	de 4f       	sbci	r29, 0xFE	; 254
     d1e:	39 83       	std	Y+1, r19	; 0x01
     d20:	28 83       	st	Y, r18
     d22:	ce 57       	subi	r28, 0x7E	; 126
     d24:	d1 40       	sbci	r29, 0x01	; 1
     d26:	ce 57       	subi	r28, 0x7E	; 126
     d28:	de 4f       	sbci	r29, 0xFE	; 254
     d2a:	38 81       	ld	r19, Y
     d2c:	c2 58       	subi	r28, 0x82	; 130
     d2e:	d1 40       	sbci	r29, 0x01	; 1
     d30:	31 50       	subi	r19, 0x01	; 1
     d32:	ce 57       	subi	r28, 0x7E	; 126
     d34:	de 4f       	sbci	r29, 0xFE	; 254
     d36:	38 83       	st	Y, r19
     d38:	c2 58       	subi	r28, 0x82	; 130
     d3a:	d1 40       	sbci	r29, 0x01	; 1
     d3c:	ce 57       	subi	r28, 0x7E	; 126
     d3e:	de 4f       	sbci	r29, 0xFE	; 254
     d40:	88 81       	ld	r24, Y
     d42:	c2 58       	subi	r28, 0x82	; 130
     d44:	d1 40       	sbci	r29, 0x01	; 1
     d46:	88 23       	and	r24, r24
     d48:	21 f6       	brne	.-120    	; 0xcd2 <__stack+0x473>
	char koniec[] = "17.wav";			 	  // "zakoÒczy≥em pracÍ, teraz moøesz wy≥πczyÊ urzπdzenie"
     d4a:	ce 01       	movw	r24, r28
     d4c:	82 59       	subi	r24, 0x92	; 146
     d4e:	9f 4f       	sbci	r25, 0xFF	; 255
     d50:	cd 57       	subi	r28, 0x7D	; 125
     d52:	de 4f       	sbci	r29, 0xFE	; 254
     d54:	99 83       	std	Y+1, r25	; 0x01
     d56:	88 83       	st	Y, r24
     d58:	c3 58       	subi	r28, 0x83	; 131
     d5a:	d1 40       	sbci	r29, 0x01	; 1
     d5c:	ef ec       	ldi	r30, 0xCF	; 207
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	cb 57       	subi	r28, 0x7B	; 123
     d62:	de 4f       	sbci	r29, 0xFE	; 254
     d64:	f9 83       	std	Y+1, r31	; 0x01
     d66:	e8 83       	st	Y, r30
     d68:	c5 58       	subi	r28, 0x85	; 133
     d6a:	d1 40       	sbci	r29, 0x01	; 1
     d6c:	f7 e0       	ldi	r31, 0x07	; 7
     d6e:	c9 57       	subi	r28, 0x79	; 121
     d70:	de 4f       	sbci	r29, 0xFE	; 254
     d72:	f8 83       	st	Y, r31
     d74:	c7 58       	subi	r28, 0x87	; 135
     d76:	d1 40       	sbci	r29, 0x01	; 1
     d78:	cb 57       	subi	r28, 0x7B	; 123
     d7a:	de 4f       	sbci	r29, 0xFE	; 254
     d7c:	e8 81       	ld	r30, Y
     d7e:	f9 81       	ldd	r31, Y+1	; 0x01
     d80:	c5 58       	subi	r28, 0x85	; 133
     d82:	d1 40       	sbci	r29, 0x01	; 1
     d84:	00 80       	ld	r0, Z
     d86:	cb 57       	subi	r28, 0x7B	; 123
     d88:	de 4f       	sbci	r29, 0xFE	; 254
     d8a:	28 81       	ld	r18, Y
     d8c:	39 81       	ldd	r19, Y+1	; 0x01
     d8e:	c5 58       	subi	r28, 0x85	; 133
     d90:	d1 40       	sbci	r29, 0x01	; 1
     d92:	2f 5f       	subi	r18, 0xFF	; 255
     d94:	3f 4f       	sbci	r19, 0xFF	; 255
     d96:	cb 57       	subi	r28, 0x7B	; 123
     d98:	de 4f       	sbci	r29, 0xFE	; 254
     d9a:	39 83       	std	Y+1, r19	; 0x01
     d9c:	28 83       	st	Y, r18
     d9e:	c5 58       	subi	r28, 0x85	; 133
     da0:	d1 40       	sbci	r29, 0x01	; 1
     da2:	cd 57       	subi	r28, 0x7D	; 125
     da4:	de 4f       	sbci	r29, 0xFE	; 254
     da6:	e8 81       	ld	r30, Y
     da8:	f9 81       	ldd	r31, Y+1	; 0x01
     daa:	c3 58       	subi	r28, 0x83	; 131
     dac:	d1 40       	sbci	r29, 0x01	; 1
     dae:	00 82       	st	Z, r0
     db0:	cd 57       	subi	r28, 0x7D	; 125
     db2:	de 4f       	sbci	r29, 0xFE	; 254
     db4:	28 81       	ld	r18, Y
     db6:	39 81       	ldd	r19, Y+1	; 0x01
     db8:	c3 58       	subi	r28, 0x83	; 131
     dba:	d1 40       	sbci	r29, 0x01	; 1
     dbc:	2f 5f       	subi	r18, 0xFF	; 255
     dbe:	3f 4f       	sbci	r19, 0xFF	; 255
     dc0:	cd 57       	subi	r28, 0x7D	; 125
     dc2:	de 4f       	sbci	r29, 0xFE	; 254
     dc4:	39 83       	std	Y+1, r19	; 0x01
     dc6:	28 83       	st	Y, r18
     dc8:	c3 58       	subi	r28, 0x83	; 131
     dca:	d1 40       	sbci	r29, 0x01	; 1
     dcc:	c9 57       	subi	r28, 0x79	; 121
     dce:	de 4f       	sbci	r29, 0xFE	; 254
     dd0:	38 81       	ld	r19, Y
     dd2:	c7 58       	subi	r28, 0x87	; 135
     dd4:	d1 40       	sbci	r29, 0x01	; 1
     dd6:	31 50       	subi	r19, 0x01	; 1
     dd8:	c9 57       	subi	r28, 0x79	; 121
     dda:	de 4f       	sbci	r29, 0xFE	; 254
     ddc:	38 83       	st	Y, r19
     dde:	c7 58       	subi	r28, 0x87	; 135
     de0:	d1 40       	sbci	r29, 0x01	; 1
     de2:	c9 57       	subi	r28, 0x79	; 121
     de4:	de 4f       	sbci	r29, 0xFE	; 254
     de6:	88 81       	ld	r24, Y
     de8:	c7 58       	subi	r28, 0x87	; 135
     dea:	d1 40       	sbci	r29, 0x01	; 1
     dec:	88 23       	and	r24, r24
     dee:	21 f6       	brne	.-120    	; 0xd78 <__stack+0x519>
	char enter[] = "18.wav";				  // "enter"
     df0:	ce 01       	movw	r24, r28
     df2:	8b 58       	subi	r24, 0x8B	; 139
     df4:	9f 4f       	sbci	r25, 0xFF	; 255
     df6:	c8 57       	subi	r28, 0x78	; 120
     df8:	de 4f       	sbci	r29, 0xFE	; 254
     dfa:	99 83       	std	Y+1, r25	; 0x01
     dfc:	88 83       	st	Y, r24
     dfe:	c8 58       	subi	r28, 0x88	; 136
     e00:	d1 40       	sbci	r29, 0x01	; 1
     e02:	e6 ed       	ldi	r30, 0xD6	; 214
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	c6 57       	subi	r28, 0x76	; 118
     e08:	de 4f       	sbci	r29, 0xFE	; 254
     e0a:	f9 83       	std	Y+1, r31	; 0x01
     e0c:	e8 83       	st	Y, r30
     e0e:	ca 58       	subi	r28, 0x8A	; 138
     e10:	d1 40       	sbci	r29, 0x01	; 1
     e12:	f7 e0       	ldi	r31, 0x07	; 7
     e14:	c4 57       	subi	r28, 0x74	; 116
     e16:	de 4f       	sbci	r29, 0xFE	; 254
     e18:	f8 83       	st	Y, r31
     e1a:	cc 58       	subi	r28, 0x8C	; 140
     e1c:	d1 40       	sbci	r29, 0x01	; 1
     e1e:	c6 57       	subi	r28, 0x76	; 118
     e20:	de 4f       	sbci	r29, 0xFE	; 254
     e22:	e8 81       	ld	r30, Y
     e24:	f9 81       	ldd	r31, Y+1	; 0x01
     e26:	ca 58       	subi	r28, 0x8A	; 138
     e28:	d1 40       	sbci	r29, 0x01	; 1
     e2a:	00 80       	ld	r0, Z
     e2c:	c6 57       	subi	r28, 0x76	; 118
     e2e:	de 4f       	sbci	r29, 0xFE	; 254
     e30:	28 81       	ld	r18, Y
     e32:	39 81       	ldd	r19, Y+1	; 0x01
     e34:	ca 58       	subi	r28, 0x8A	; 138
     e36:	d1 40       	sbci	r29, 0x01	; 1
     e38:	2f 5f       	subi	r18, 0xFF	; 255
     e3a:	3f 4f       	sbci	r19, 0xFF	; 255
     e3c:	c6 57       	subi	r28, 0x76	; 118
     e3e:	de 4f       	sbci	r29, 0xFE	; 254
     e40:	39 83       	std	Y+1, r19	; 0x01
     e42:	28 83       	st	Y, r18
     e44:	ca 58       	subi	r28, 0x8A	; 138
     e46:	d1 40       	sbci	r29, 0x01	; 1
     e48:	c8 57       	subi	r28, 0x78	; 120
     e4a:	de 4f       	sbci	r29, 0xFE	; 254
     e4c:	e8 81       	ld	r30, Y
     e4e:	f9 81       	ldd	r31, Y+1	; 0x01
     e50:	c8 58       	subi	r28, 0x88	; 136
     e52:	d1 40       	sbci	r29, 0x01	; 1
     e54:	00 82       	st	Z, r0
     e56:	c8 57       	subi	r28, 0x78	; 120
     e58:	de 4f       	sbci	r29, 0xFE	; 254
     e5a:	28 81       	ld	r18, Y
     e5c:	39 81       	ldd	r19, Y+1	; 0x01
     e5e:	c8 58       	subi	r28, 0x88	; 136
     e60:	d1 40       	sbci	r29, 0x01	; 1
     e62:	2f 5f       	subi	r18, 0xFF	; 255
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	c8 57       	subi	r28, 0x78	; 120
     e68:	de 4f       	sbci	r29, 0xFE	; 254
     e6a:	39 83       	std	Y+1, r19	; 0x01
     e6c:	28 83       	st	Y, r18
     e6e:	c8 58       	subi	r28, 0x88	; 136
     e70:	d1 40       	sbci	r29, 0x01	; 1
     e72:	c4 57       	subi	r28, 0x74	; 116
     e74:	de 4f       	sbci	r29, 0xFE	; 254
     e76:	38 81       	ld	r19, Y
     e78:	cc 58       	subi	r28, 0x8C	; 140
     e7a:	d1 40       	sbci	r29, 0x01	; 1
     e7c:	31 50       	subi	r19, 0x01	; 1
     e7e:	c4 57       	subi	r28, 0x74	; 116
     e80:	de 4f       	sbci	r29, 0xFE	; 254
     e82:	38 83       	st	Y, r19
     e84:	cc 58       	subi	r28, 0x8C	; 140
     e86:	d1 40       	sbci	r29, 0x01	; 1
     e88:	c4 57       	subi	r28, 0x74	; 116
     e8a:	de 4f       	sbci	r29, 0xFE	; 254
     e8c:	88 81       	ld	r24, Y
     e8e:	cc 58       	subi	r28, 0x8C	; 140
     e90:	d1 40       	sbci	r29, 0x01	; 1
     e92:	88 23       	and	r24, r24
     e94:	21 f6       	brne	.-120    	; 0xe1e <__stack+0x5bf>
	char wprowadz_kierunek[] = "19.wav";	  // "wprowadz kierunek"
     e96:	ce 01       	movw	r24, r28
     e98:	84 58       	subi	r24, 0x84	; 132
     e9a:	9f 4f       	sbci	r25, 0xFF	; 255
     e9c:	c3 57       	subi	r28, 0x73	; 115
     e9e:	de 4f       	sbci	r29, 0xFE	; 254
     ea0:	99 83       	std	Y+1, r25	; 0x01
     ea2:	88 83       	st	Y, r24
     ea4:	cd 58       	subi	r28, 0x8D	; 141
     ea6:	d1 40       	sbci	r29, 0x01	; 1
     ea8:	ed ed       	ldi	r30, 0xDD	; 221
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	c1 57       	subi	r28, 0x71	; 113
     eae:	de 4f       	sbci	r29, 0xFE	; 254
     eb0:	f9 83       	std	Y+1, r31	; 0x01
     eb2:	e8 83       	st	Y, r30
     eb4:	cf 58       	subi	r28, 0x8F	; 143
     eb6:	d1 40       	sbci	r29, 0x01	; 1
     eb8:	f7 e0       	ldi	r31, 0x07	; 7
     eba:	cf 56       	subi	r28, 0x6F	; 111
     ebc:	de 4f       	sbci	r29, 0xFE	; 254
     ebe:	f8 83       	st	Y, r31
     ec0:	c1 59       	subi	r28, 0x91	; 145
     ec2:	d1 40       	sbci	r29, 0x01	; 1
     ec4:	c1 57       	subi	r28, 0x71	; 113
     ec6:	de 4f       	sbci	r29, 0xFE	; 254
     ec8:	e8 81       	ld	r30, Y
     eca:	f9 81       	ldd	r31, Y+1	; 0x01
     ecc:	cf 58       	subi	r28, 0x8F	; 143
     ece:	d1 40       	sbci	r29, 0x01	; 1
     ed0:	00 80       	ld	r0, Z
     ed2:	c1 57       	subi	r28, 0x71	; 113
     ed4:	de 4f       	sbci	r29, 0xFE	; 254
     ed6:	28 81       	ld	r18, Y
     ed8:	39 81       	ldd	r19, Y+1	; 0x01
     eda:	cf 58       	subi	r28, 0x8F	; 143
     edc:	d1 40       	sbci	r29, 0x01	; 1
     ede:	2f 5f       	subi	r18, 0xFF	; 255
     ee0:	3f 4f       	sbci	r19, 0xFF	; 255
     ee2:	c1 57       	subi	r28, 0x71	; 113
     ee4:	de 4f       	sbci	r29, 0xFE	; 254
     ee6:	39 83       	std	Y+1, r19	; 0x01
     ee8:	28 83       	st	Y, r18
     eea:	cf 58       	subi	r28, 0x8F	; 143
     eec:	d1 40       	sbci	r29, 0x01	; 1
     eee:	c3 57       	subi	r28, 0x73	; 115
     ef0:	de 4f       	sbci	r29, 0xFE	; 254
     ef2:	e8 81       	ld	r30, Y
     ef4:	f9 81       	ldd	r31, Y+1	; 0x01
     ef6:	cd 58       	subi	r28, 0x8D	; 141
     ef8:	d1 40       	sbci	r29, 0x01	; 1
     efa:	00 82       	st	Z, r0
     efc:	c3 57       	subi	r28, 0x73	; 115
     efe:	de 4f       	sbci	r29, 0xFE	; 254
     f00:	28 81       	ld	r18, Y
     f02:	39 81       	ldd	r19, Y+1	; 0x01
     f04:	cd 58       	subi	r28, 0x8D	; 141
     f06:	d1 40       	sbci	r29, 0x01	; 1
     f08:	2f 5f       	subi	r18, 0xFF	; 255
     f0a:	3f 4f       	sbci	r19, 0xFF	; 255
     f0c:	c3 57       	subi	r28, 0x73	; 115
     f0e:	de 4f       	sbci	r29, 0xFE	; 254
     f10:	39 83       	std	Y+1, r19	; 0x01
     f12:	28 83       	st	Y, r18
     f14:	cd 58       	subi	r28, 0x8D	; 141
     f16:	d1 40       	sbci	r29, 0x01	; 1
     f18:	cf 56       	subi	r28, 0x6F	; 111
     f1a:	de 4f       	sbci	r29, 0xFE	; 254
     f1c:	38 81       	ld	r19, Y
     f1e:	c1 59       	subi	r28, 0x91	; 145
     f20:	d1 40       	sbci	r29, 0x01	; 1
     f22:	31 50       	subi	r19, 0x01	; 1
     f24:	cf 56       	subi	r28, 0x6F	; 111
     f26:	de 4f       	sbci	r29, 0xFE	; 254
     f28:	38 83       	st	Y, r19
     f2a:	c1 59       	subi	r28, 0x91	; 145
     f2c:	d1 40       	sbci	r29, 0x01	; 1
     f2e:	cf 56       	subi	r28, 0x6F	; 111
     f30:	de 4f       	sbci	r29, 0xFE	; 254
     f32:	88 81       	ld	r24, Y
     f34:	c1 59       	subi	r28, 0x91	; 145
     f36:	d1 40       	sbci	r29, 0x01	; 1
     f38:	88 23       	and	r24, r24
     f3a:	21 f6       	brne	.-120    	; 0xec4 <__stack+0x665>
	char szukam[] = "20.wav";				  // "szukam wybranej linii"
     f3c:	ce 01       	movw	r24, r28
     f3e:	8d 57       	subi	r24, 0x7D	; 125
     f40:	9f 4f       	sbci	r25, 0xFF	; 255
     f42:	ce 56       	subi	r28, 0x6E	; 110
     f44:	de 4f       	sbci	r29, 0xFE	; 254
     f46:	99 83       	std	Y+1, r25	; 0x01
     f48:	88 83       	st	Y, r24
     f4a:	c2 59       	subi	r28, 0x92	; 146
     f4c:	d1 40       	sbci	r29, 0x01	; 1
     f4e:	e4 ee       	ldi	r30, 0xE4	; 228
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	cc 56       	subi	r28, 0x6C	; 108
     f54:	de 4f       	sbci	r29, 0xFE	; 254
     f56:	f9 83       	std	Y+1, r31	; 0x01
     f58:	e8 83       	st	Y, r30
     f5a:	c4 59       	subi	r28, 0x94	; 148
     f5c:	d1 40       	sbci	r29, 0x01	; 1
     f5e:	f7 e0       	ldi	r31, 0x07	; 7
     f60:	ca 56       	subi	r28, 0x6A	; 106
     f62:	de 4f       	sbci	r29, 0xFE	; 254
     f64:	f8 83       	st	Y, r31
     f66:	c6 59       	subi	r28, 0x96	; 150
     f68:	d1 40       	sbci	r29, 0x01	; 1
     f6a:	cc 56       	subi	r28, 0x6C	; 108
     f6c:	de 4f       	sbci	r29, 0xFE	; 254
     f6e:	e8 81       	ld	r30, Y
     f70:	f9 81       	ldd	r31, Y+1	; 0x01
     f72:	c4 59       	subi	r28, 0x94	; 148
     f74:	d1 40       	sbci	r29, 0x01	; 1
     f76:	00 80       	ld	r0, Z
     f78:	cc 56       	subi	r28, 0x6C	; 108
     f7a:	de 4f       	sbci	r29, 0xFE	; 254
     f7c:	28 81       	ld	r18, Y
     f7e:	39 81       	ldd	r19, Y+1	; 0x01
     f80:	c4 59       	subi	r28, 0x94	; 148
     f82:	d1 40       	sbci	r29, 0x01	; 1
     f84:	2f 5f       	subi	r18, 0xFF	; 255
     f86:	3f 4f       	sbci	r19, 0xFF	; 255
     f88:	cc 56       	subi	r28, 0x6C	; 108
     f8a:	de 4f       	sbci	r29, 0xFE	; 254
     f8c:	39 83       	std	Y+1, r19	; 0x01
     f8e:	28 83       	st	Y, r18
     f90:	c4 59       	subi	r28, 0x94	; 148
     f92:	d1 40       	sbci	r29, 0x01	; 1
     f94:	ce 56       	subi	r28, 0x6E	; 110
     f96:	de 4f       	sbci	r29, 0xFE	; 254
     f98:	e8 81       	ld	r30, Y
     f9a:	f9 81       	ldd	r31, Y+1	; 0x01
     f9c:	c2 59       	subi	r28, 0x92	; 146
     f9e:	d1 40       	sbci	r29, 0x01	; 1
     fa0:	00 82       	st	Z, r0
     fa2:	ce 56       	subi	r28, 0x6E	; 110
     fa4:	de 4f       	sbci	r29, 0xFE	; 254
     fa6:	28 81       	ld	r18, Y
     fa8:	39 81       	ldd	r19, Y+1	; 0x01
     faa:	c2 59       	subi	r28, 0x92	; 146
     fac:	d1 40       	sbci	r29, 0x01	; 1
     fae:	2f 5f       	subi	r18, 0xFF	; 255
     fb0:	3f 4f       	sbci	r19, 0xFF	; 255
     fb2:	ce 56       	subi	r28, 0x6E	; 110
     fb4:	de 4f       	sbci	r29, 0xFE	; 254
     fb6:	39 83       	std	Y+1, r19	; 0x01
     fb8:	28 83       	st	Y, r18
     fba:	c2 59       	subi	r28, 0x92	; 146
     fbc:	d1 40       	sbci	r29, 0x01	; 1
     fbe:	ca 56       	subi	r28, 0x6A	; 106
     fc0:	de 4f       	sbci	r29, 0xFE	; 254
     fc2:	38 81       	ld	r19, Y
     fc4:	c6 59       	subi	r28, 0x96	; 150
     fc6:	d1 40       	sbci	r29, 0x01	; 1
     fc8:	31 50       	subi	r19, 0x01	; 1
     fca:	ca 56       	subi	r28, 0x6A	; 106
     fcc:	de 4f       	sbci	r29, 0xFE	; 254
     fce:	38 83       	st	Y, r19
     fd0:	c6 59       	subi	r28, 0x96	; 150
     fd2:	d1 40       	sbci	r29, 0x01	; 1
     fd4:	ca 56       	subi	r28, 0x6A	; 106
     fd6:	de 4f       	sbci	r29, 0xFE	; 254
     fd8:	88 81       	ld	r24, Y
     fda:	c6 59       	subi	r28, 0x96	; 150
     fdc:	d1 40       	sbci	r29, 0x01	; 1
     fde:	88 23       	and	r24, r24
     fe0:	21 f6       	brne	.-120    	; 0xf6a <__stack+0x70b>
	char inny_pojazd[] = "21.wav";			  // "Jedzie inny pojazd komunikacji miejskiej"
     fe2:	ce 01       	movw	r24, r28
     fe4:	86 57       	subi	r24, 0x76	; 118
     fe6:	9f 4f       	sbci	r25, 0xFF	; 255
     fe8:	c9 56       	subi	r28, 0x69	; 105
     fea:	de 4f       	sbci	r29, 0xFE	; 254
     fec:	99 83       	std	Y+1, r25	; 0x01
     fee:	88 83       	st	Y, r24
     ff0:	c7 59       	subi	r28, 0x97	; 151
     ff2:	d1 40       	sbci	r29, 0x01	; 1
     ff4:	eb ee       	ldi	r30, 0xEB	; 235
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	c7 56       	subi	r28, 0x67	; 103
     ffa:	de 4f       	sbci	r29, 0xFE	; 254
     ffc:	f9 83       	std	Y+1, r31	; 0x01
     ffe:	e8 83       	st	Y, r30
    1000:	c9 59       	subi	r28, 0x99	; 153
    1002:	d1 40       	sbci	r29, 0x01	; 1
    1004:	f7 e0       	ldi	r31, 0x07	; 7
    1006:	c5 56       	subi	r28, 0x65	; 101
    1008:	de 4f       	sbci	r29, 0xFE	; 254
    100a:	f8 83       	st	Y, r31
    100c:	cb 59       	subi	r28, 0x9B	; 155
    100e:	d1 40       	sbci	r29, 0x01	; 1
    1010:	c7 56       	subi	r28, 0x67	; 103
    1012:	de 4f       	sbci	r29, 0xFE	; 254
    1014:	e8 81       	ld	r30, Y
    1016:	f9 81       	ldd	r31, Y+1	; 0x01
    1018:	c9 59       	subi	r28, 0x99	; 153
    101a:	d1 40       	sbci	r29, 0x01	; 1
    101c:	00 80       	ld	r0, Z
    101e:	c7 56       	subi	r28, 0x67	; 103
    1020:	de 4f       	sbci	r29, 0xFE	; 254
    1022:	28 81       	ld	r18, Y
    1024:	39 81       	ldd	r19, Y+1	; 0x01
    1026:	c9 59       	subi	r28, 0x99	; 153
    1028:	d1 40       	sbci	r29, 0x01	; 1
    102a:	2f 5f       	subi	r18, 0xFF	; 255
    102c:	3f 4f       	sbci	r19, 0xFF	; 255
    102e:	c7 56       	subi	r28, 0x67	; 103
    1030:	de 4f       	sbci	r29, 0xFE	; 254
    1032:	39 83       	std	Y+1, r19	; 0x01
    1034:	28 83       	st	Y, r18
    1036:	c9 59       	subi	r28, 0x99	; 153
    1038:	d1 40       	sbci	r29, 0x01	; 1
    103a:	c9 56       	subi	r28, 0x69	; 105
    103c:	de 4f       	sbci	r29, 0xFE	; 254
    103e:	e8 81       	ld	r30, Y
    1040:	f9 81       	ldd	r31, Y+1	; 0x01
    1042:	c7 59       	subi	r28, 0x97	; 151
    1044:	d1 40       	sbci	r29, 0x01	; 1
    1046:	00 82       	st	Z, r0
    1048:	c9 56       	subi	r28, 0x69	; 105
    104a:	de 4f       	sbci	r29, 0xFE	; 254
    104c:	28 81       	ld	r18, Y
    104e:	39 81       	ldd	r19, Y+1	; 0x01
    1050:	c7 59       	subi	r28, 0x97	; 151
    1052:	d1 40       	sbci	r29, 0x01	; 1
    1054:	2f 5f       	subi	r18, 0xFF	; 255
    1056:	3f 4f       	sbci	r19, 0xFF	; 255
    1058:	c9 56       	subi	r28, 0x69	; 105
    105a:	de 4f       	sbci	r29, 0xFE	; 254
    105c:	39 83       	std	Y+1, r19	; 0x01
    105e:	28 83       	st	Y, r18
    1060:	c7 59       	subi	r28, 0x97	; 151
    1062:	d1 40       	sbci	r29, 0x01	; 1
    1064:	c5 56       	subi	r28, 0x65	; 101
    1066:	de 4f       	sbci	r29, 0xFE	; 254
    1068:	38 81       	ld	r19, Y
    106a:	cb 59       	subi	r28, 0x9B	; 155
    106c:	d1 40       	sbci	r29, 0x01	; 1
    106e:	31 50       	subi	r19, 0x01	; 1
    1070:	c5 56       	subi	r28, 0x65	; 101
    1072:	de 4f       	sbci	r29, 0xFE	; 254
    1074:	38 83       	st	Y, r19
    1076:	cb 59       	subi	r28, 0x9B	; 155
    1078:	d1 40       	sbci	r29, 0x01	; 1
    107a:	c5 56       	subi	r28, 0x65	; 101
    107c:	de 4f       	sbci	r29, 0xFE	; 254
    107e:	88 81       	ld	r24, Y
    1080:	cb 59       	subi	r28, 0x9B	; 155
    1082:	d1 40       	sbci	r29, 0x01	; 1
    1084:	88 23       	and	r24, r24
    1086:	21 f6       	brne	.-120    	; 0x1010 <__stack+0x7b1>
	char zly_numer[] = "22.wav";			  // "Nie ma takiej linii komunikacji publicznej. Zresetuj urzπdzenie i wprowadü inny numer"
    1088:	ce 01       	movw	r24, r28
    108a:	8f 56       	subi	r24, 0x6F	; 111
    108c:	9f 4f       	sbci	r25, 0xFF	; 255
    108e:	c4 56       	subi	r28, 0x64	; 100
    1090:	de 4f       	sbci	r29, 0xFE	; 254
    1092:	99 83       	std	Y+1, r25	; 0x01
    1094:	88 83       	st	Y, r24
    1096:	cc 59       	subi	r28, 0x9C	; 156
    1098:	d1 40       	sbci	r29, 0x01	; 1
    109a:	e2 ef       	ldi	r30, 0xF2	; 242
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	c2 56       	subi	r28, 0x62	; 98
    10a0:	de 4f       	sbci	r29, 0xFE	; 254
    10a2:	f9 83       	std	Y+1, r31	; 0x01
    10a4:	e8 83       	st	Y, r30
    10a6:	ce 59       	subi	r28, 0x9E	; 158
    10a8:	d1 40       	sbci	r29, 0x01	; 1
    10aa:	f7 e0       	ldi	r31, 0x07	; 7
    10ac:	c0 56       	subi	r28, 0x60	; 96
    10ae:	de 4f       	sbci	r29, 0xFE	; 254
    10b0:	f8 83       	st	Y, r31
    10b2:	c0 5a       	subi	r28, 0xA0	; 160
    10b4:	d1 40       	sbci	r29, 0x01	; 1
    10b6:	c2 56       	subi	r28, 0x62	; 98
    10b8:	de 4f       	sbci	r29, 0xFE	; 254
    10ba:	e8 81       	ld	r30, Y
    10bc:	f9 81       	ldd	r31, Y+1	; 0x01
    10be:	ce 59       	subi	r28, 0x9E	; 158
    10c0:	d1 40       	sbci	r29, 0x01	; 1
    10c2:	00 80       	ld	r0, Z
    10c4:	c2 56       	subi	r28, 0x62	; 98
    10c6:	de 4f       	sbci	r29, 0xFE	; 254
    10c8:	28 81       	ld	r18, Y
    10ca:	39 81       	ldd	r19, Y+1	; 0x01
    10cc:	ce 59       	subi	r28, 0x9E	; 158
    10ce:	d1 40       	sbci	r29, 0x01	; 1
    10d0:	2f 5f       	subi	r18, 0xFF	; 255
    10d2:	3f 4f       	sbci	r19, 0xFF	; 255
    10d4:	c2 56       	subi	r28, 0x62	; 98
    10d6:	de 4f       	sbci	r29, 0xFE	; 254
    10d8:	39 83       	std	Y+1, r19	; 0x01
    10da:	28 83       	st	Y, r18
    10dc:	ce 59       	subi	r28, 0x9E	; 158
    10de:	d1 40       	sbci	r29, 0x01	; 1
    10e0:	c4 56       	subi	r28, 0x64	; 100
    10e2:	de 4f       	sbci	r29, 0xFE	; 254
    10e4:	e8 81       	ld	r30, Y
    10e6:	f9 81       	ldd	r31, Y+1	; 0x01
    10e8:	cc 59       	subi	r28, 0x9C	; 156
    10ea:	d1 40       	sbci	r29, 0x01	; 1
    10ec:	00 82       	st	Z, r0
    10ee:	c4 56       	subi	r28, 0x64	; 100
    10f0:	de 4f       	sbci	r29, 0xFE	; 254
    10f2:	28 81       	ld	r18, Y
    10f4:	39 81       	ldd	r19, Y+1	; 0x01
    10f6:	cc 59       	subi	r28, 0x9C	; 156
    10f8:	d1 40       	sbci	r29, 0x01	; 1
    10fa:	2f 5f       	subi	r18, 0xFF	; 255
    10fc:	3f 4f       	sbci	r19, 0xFF	; 255
    10fe:	c4 56       	subi	r28, 0x64	; 100
    1100:	de 4f       	sbci	r29, 0xFE	; 254
    1102:	39 83       	std	Y+1, r19	; 0x01
    1104:	28 83       	st	Y, r18
    1106:	cc 59       	subi	r28, 0x9C	; 156
    1108:	d1 40       	sbci	r29, 0x01	; 1
    110a:	c0 56       	subi	r28, 0x60	; 96
    110c:	de 4f       	sbci	r29, 0xFE	; 254
    110e:	38 81       	ld	r19, Y
    1110:	c0 5a       	subi	r28, 0xA0	; 160
    1112:	d1 40       	sbci	r29, 0x01	; 1
    1114:	31 50       	subi	r19, 0x01	; 1
    1116:	c0 56       	subi	r28, 0x60	; 96
    1118:	de 4f       	sbci	r29, 0xFE	; 254
    111a:	38 83       	st	Y, r19
    111c:	c0 5a       	subi	r28, 0xA0	; 160
    111e:	d1 40       	sbci	r29, 0x01	; 1
    1120:	c0 56       	subi	r28, 0x60	; 96
    1122:	de 4f       	sbci	r29, 0xFE	; 254
    1124:	88 81       	ld	r24, Y
    1126:	c0 5a       	subi	r28, 0xA0	; 160
    1128:	d1 40       	sbci	r29, 0x01	; 1
    112a:	88 23       	and	r24, r24
    112c:	21 f6       	brne	.-120    	; 0x10b6 <__stack+0x857>

	char Stare_Bemowo[] = "30.wav";
    112e:	ce 01       	movw	r24, r28
    1130:	88 56       	subi	r24, 0x68	; 104
    1132:	9f 4f       	sbci	r25, 0xFF	; 255
    1134:	cf 55       	subi	r28, 0x5F	; 95
    1136:	de 4f       	sbci	r29, 0xFE	; 254
    1138:	99 83       	std	Y+1, r25	; 0x01
    113a:	88 83       	st	Y, r24
    113c:	c1 5a       	subi	r28, 0xA1	; 161
    113e:	d1 40       	sbci	r29, 0x01	; 1
    1140:	e9 ef       	ldi	r30, 0xF9	; 249
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	cd 55       	subi	r28, 0x5D	; 93
    1146:	de 4f       	sbci	r29, 0xFE	; 254
    1148:	f9 83       	std	Y+1, r31	; 0x01
    114a:	e8 83       	st	Y, r30
    114c:	c3 5a       	subi	r28, 0xA3	; 163
    114e:	d1 40       	sbci	r29, 0x01	; 1
    1150:	f7 e0       	ldi	r31, 0x07	; 7
    1152:	cb 55       	subi	r28, 0x5B	; 91
    1154:	de 4f       	sbci	r29, 0xFE	; 254
    1156:	f8 83       	st	Y, r31
    1158:	c5 5a       	subi	r28, 0xA5	; 165
    115a:	d1 40       	sbci	r29, 0x01	; 1
    115c:	cd 55       	subi	r28, 0x5D	; 93
    115e:	de 4f       	sbci	r29, 0xFE	; 254
    1160:	e8 81       	ld	r30, Y
    1162:	f9 81       	ldd	r31, Y+1	; 0x01
    1164:	c3 5a       	subi	r28, 0xA3	; 163
    1166:	d1 40       	sbci	r29, 0x01	; 1
    1168:	00 80       	ld	r0, Z
    116a:	cd 55       	subi	r28, 0x5D	; 93
    116c:	de 4f       	sbci	r29, 0xFE	; 254
    116e:	28 81       	ld	r18, Y
    1170:	39 81       	ldd	r19, Y+1	; 0x01
    1172:	c3 5a       	subi	r28, 0xA3	; 163
    1174:	d1 40       	sbci	r29, 0x01	; 1
    1176:	2f 5f       	subi	r18, 0xFF	; 255
    1178:	3f 4f       	sbci	r19, 0xFF	; 255
    117a:	cd 55       	subi	r28, 0x5D	; 93
    117c:	de 4f       	sbci	r29, 0xFE	; 254
    117e:	39 83       	std	Y+1, r19	; 0x01
    1180:	28 83       	st	Y, r18
    1182:	c3 5a       	subi	r28, 0xA3	; 163
    1184:	d1 40       	sbci	r29, 0x01	; 1
    1186:	cf 55       	subi	r28, 0x5F	; 95
    1188:	de 4f       	sbci	r29, 0xFE	; 254
    118a:	e8 81       	ld	r30, Y
    118c:	f9 81       	ldd	r31, Y+1	; 0x01
    118e:	c1 5a       	subi	r28, 0xA1	; 161
    1190:	d1 40       	sbci	r29, 0x01	; 1
    1192:	00 82       	st	Z, r0
    1194:	cf 55       	subi	r28, 0x5F	; 95
    1196:	de 4f       	sbci	r29, 0xFE	; 254
    1198:	28 81       	ld	r18, Y
    119a:	39 81       	ldd	r19, Y+1	; 0x01
    119c:	c1 5a       	subi	r28, 0xA1	; 161
    119e:	d1 40       	sbci	r29, 0x01	; 1
    11a0:	2f 5f       	subi	r18, 0xFF	; 255
    11a2:	3f 4f       	sbci	r19, 0xFF	; 255
    11a4:	cf 55       	subi	r28, 0x5F	; 95
    11a6:	de 4f       	sbci	r29, 0xFE	; 254
    11a8:	39 83       	std	Y+1, r19	; 0x01
    11aa:	28 83       	st	Y, r18
    11ac:	c1 5a       	subi	r28, 0xA1	; 161
    11ae:	d1 40       	sbci	r29, 0x01	; 1
    11b0:	cb 55       	subi	r28, 0x5B	; 91
    11b2:	de 4f       	sbci	r29, 0xFE	; 254
    11b4:	38 81       	ld	r19, Y
    11b6:	c5 5a       	subi	r28, 0xA5	; 165
    11b8:	d1 40       	sbci	r29, 0x01	; 1
    11ba:	31 50       	subi	r19, 0x01	; 1
    11bc:	cb 55       	subi	r28, 0x5B	; 91
    11be:	de 4f       	sbci	r29, 0xFE	; 254
    11c0:	38 83       	st	Y, r19
    11c2:	c5 5a       	subi	r28, 0xA5	; 165
    11c4:	d1 40       	sbci	r29, 0x01	; 1
    11c6:	cb 55       	subi	r28, 0x5B	; 91
    11c8:	de 4f       	sbci	r29, 0xFE	; 254
    11ca:	88 81       	ld	r24, Y
    11cc:	c5 5a       	subi	r28, 0xA5	; 165
    11ce:	d1 40       	sbci	r29, 0x01	; 1
    11d0:	88 23       	and	r24, r24
    11d2:	21 f6       	brne	.-120    	; 0x115c <__stack+0x8fd>
	char PKP_Olszynka_Grochowska[] = "31.wav";
    11d4:	ce 01       	movw	r24, r28
    11d6:	81 56       	subi	r24, 0x61	; 97
    11d8:	9f 4f       	sbci	r25, 0xFF	; 255
    11da:	ca 55       	subi	r28, 0x5A	; 90
    11dc:	de 4f       	sbci	r29, 0xFE	; 254
    11de:	99 83       	std	Y+1, r25	; 0x01
    11e0:	88 83       	st	Y, r24
    11e2:	c6 5a       	subi	r28, 0xA6	; 166
    11e4:	d1 40       	sbci	r29, 0x01	; 1
    11e6:	e0 e0       	ldi	r30, 0x00	; 0
    11e8:	f1 e0       	ldi	r31, 0x01	; 1
    11ea:	c8 55       	subi	r28, 0x58	; 88
    11ec:	de 4f       	sbci	r29, 0xFE	; 254
    11ee:	f9 83       	std	Y+1, r31	; 0x01
    11f0:	e8 83       	st	Y, r30
    11f2:	c8 5a       	subi	r28, 0xA8	; 168
    11f4:	d1 40       	sbci	r29, 0x01	; 1
    11f6:	f7 e0       	ldi	r31, 0x07	; 7
    11f8:	c6 55       	subi	r28, 0x56	; 86
    11fa:	de 4f       	sbci	r29, 0xFE	; 254
    11fc:	f8 83       	st	Y, r31
    11fe:	ca 5a       	subi	r28, 0xAA	; 170
    1200:	d1 40       	sbci	r29, 0x01	; 1
    1202:	c8 55       	subi	r28, 0x58	; 88
    1204:	de 4f       	sbci	r29, 0xFE	; 254
    1206:	e8 81       	ld	r30, Y
    1208:	f9 81       	ldd	r31, Y+1	; 0x01
    120a:	c8 5a       	subi	r28, 0xA8	; 168
    120c:	d1 40       	sbci	r29, 0x01	; 1
    120e:	00 80       	ld	r0, Z
    1210:	c8 55       	subi	r28, 0x58	; 88
    1212:	de 4f       	sbci	r29, 0xFE	; 254
    1214:	28 81       	ld	r18, Y
    1216:	39 81       	ldd	r19, Y+1	; 0x01
    1218:	c8 5a       	subi	r28, 0xA8	; 168
    121a:	d1 40       	sbci	r29, 0x01	; 1
    121c:	2f 5f       	subi	r18, 0xFF	; 255
    121e:	3f 4f       	sbci	r19, 0xFF	; 255
    1220:	c8 55       	subi	r28, 0x58	; 88
    1222:	de 4f       	sbci	r29, 0xFE	; 254
    1224:	39 83       	std	Y+1, r19	; 0x01
    1226:	28 83       	st	Y, r18
    1228:	c8 5a       	subi	r28, 0xA8	; 168
    122a:	d1 40       	sbci	r29, 0x01	; 1
    122c:	ca 55       	subi	r28, 0x5A	; 90
    122e:	de 4f       	sbci	r29, 0xFE	; 254
    1230:	e8 81       	ld	r30, Y
    1232:	f9 81       	ldd	r31, Y+1	; 0x01
    1234:	c6 5a       	subi	r28, 0xA6	; 166
    1236:	d1 40       	sbci	r29, 0x01	; 1
    1238:	00 82       	st	Z, r0
    123a:	ca 55       	subi	r28, 0x5A	; 90
    123c:	de 4f       	sbci	r29, 0xFE	; 254
    123e:	28 81       	ld	r18, Y
    1240:	39 81       	ldd	r19, Y+1	; 0x01
    1242:	c6 5a       	subi	r28, 0xA6	; 166
    1244:	d1 40       	sbci	r29, 0x01	; 1
    1246:	2f 5f       	subi	r18, 0xFF	; 255
    1248:	3f 4f       	sbci	r19, 0xFF	; 255
    124a:	ca 55       	subi	r28, 0x5A	; 90
    124c:	de 4f       	sbci	r29, 0xFE	; 254
    124e:	39 83       	std	Y+1, r19	; 0x01
    1250:	28 83       	st	Y, r18
    1252:	c6 5a       	subi	r28, 0xA6	; 166
    1254:	d1 40       	sbci	r29, 0x01	; 1
    1256:	c6 55       	subi	r28, 0x56	; 86
    1258:	de 4f       	sbci	r29, 0xFE	; 254
    125a:	38 81       	ld	r19, Y
    125c:	ca 5a       	subi	r28, 0xAA	; 170
    125e:	d1 40       	sbci	r29, 0x01	; 1
    1260:	31 50       	subi	r19, 0x01	; 1
    1262:	c6 55       	subi	r28, 0x56	; 86
    1264:	de 4f       	sbci	r29, 0xFE	; 254
    1266:	38 83       	st	Y, r19
    1268:	ca 5a       	subi	r28, 0xAA	; 170
    126a:	d1 40       	sbci	r29, 0x01	; 1
    126c:	c6 55       	subi	r28, 0x56	; 86
    126e:	de 4f       	sbci	r29, 0xFE	; 254
    1270:	88 81       	ld	r24, Y
    1272:	ca 5a       	subi	r28, 0xAA	; 170
    1274:	d1 40       	sbci	r29, 0x01	; 1
    1276:	88 23       	and	r24, r24
    1278:	21 f6       	brne	.-120    	; 0x1202 <__stack+0x9a3>
	char Osiedle_Gorczewska[] = "32.wav";
    127a:	ce 01       	movw	r24, r28
    127c:	8a 55       	subi	r24, 0x5A	; 90
    127e:	9f 4f       	sbci	r25, 0xFF	; 255
    1280:	c5 55       	subi	r28, 0x55	; 85
    1282:	de 4f       	sbci	r29, 0xFE	; 254
    1284:	99 83       	std	Y+1, r25	; 0x01
    1286:	88 83       	st	Y, r24
    1288:	cb 5a       	subi	r28, 0xAB	; 171
    128a:	d1 40       	sbci	r29, 0x01	; 1
    128c:	e7 e0       	ldi	r30, 0x07	; 7
    128e:	f1 e0       	ldi	r31, 0x01	; 1
    1290:	c3 55       	subi	r28, 0x53	; 83
    1292:	de 4f       	sbci	r29, 0xFE	; 254
    1294:	f9 83       	std	Y+1, r31	; 0x01
    1296:	e8 83       	st	Y, r30
    1298:	cd 5a       	subi	r28, 0xAD	; 173
    129a:	d1 40       	sbci	r29, 0x01	; 1
    129c:	f7 e0       	ldi	r31, 0x07	; 7
    129e:	c1 55       	subi	r28, 0x51	; 81
    12a0:	de 4f       	sbci	r29, 0xFE	; 254
    12a2:	f8 83       	st	Y, r31
    12a4:	cf 5a       	subi	r28, 0xAF	; 175
    12a6:	d1 40       	sbci	r29, 0x01	; 1
    12a8:	c3 55       	subi	r28, 0x53	; 83
    12aa:	de 4f       	sbci	r29, 0xFE	; 254
    12ac:	e8 81       	ld	r30, Y
    12ae:	f9 81       	ldd	r31, Y+1	; 0x01
    12b0:	cd 5a       	subi	r28, 0xAD	; 173
    12b2:	d1 40       	sbci	r29, 0x01	; 1
    12b4:	00 80       	ld	r0, Z
    12b6:	c3 55       	subi	r28, 0x53	; 83
    12b8:	de 4f       	sbci	r29, 0xFE	; 254
    12ba:	28 81       	ld	r18, Y
    12bc:	39 81       	ldd	r19, Y+1	; 0x01
    12be:	cd 5a       	subi	r28, 0xAD	; 173
    12c0:	d1 40       	sbci	r29, 0x01	; 1
    12c2:	2f 5f       	subi	r18, 0xFF	; 255
    12c4:	3f 4f       	sbci	r19, 0xFF	; 255
    12c6:	c3 55       	subi	r28, 0x53	; 83
    12c8:	de 4f       	sbci	r29, 0xFE	; 254
    12ca:	39 83       	std	Y+1, r19	; 0x01
    12cc:	28 83       	st	Y, r18
    12ce:	cd 5a       	subi	r28, 0xAD	; 173
    12d0:	d1 40       	sbci	r29, 0x01	; 1
    12d2:	c5 55       	subi	r28, 0x55	; 85
    12d4:	de 4f       	sbci	r29, 0xFE	; 254
    12d6:	e8 81       	ld	r30, Y
    12d8:	f9 81       	ldd	r31, Y+1	; 0x01
    12da:	cb 5a       	subi	r28, 0xAB	; 171
    12dc:	d1 40       	sbci	r29, 0x01	; 1
    12de:	00 82       	st	Z, r0
    12e0:	c5 55       	subi	r28, 0x55	; 85
    12e2:	de 4f       	sbci	r29, 0xFE	; 254
    12e4:	28 81       	ld	r18, Y
    12e6:	39 81       	ldd	r19, Y+1	; 0x01
    12e8:	cb 5a       	subi	r28, 0xAB	; 171
    12ea:	d1 40       	sbci	r29, 0x01	; 1
    12ec:	2f 5f       	subi	r18, 0xFF	; 255
    12ee:	3f 4f       	sbci	r19, 0xFF	; 255
    12f0:	c5 55       	subi	r28, 0x55	; 85
    12f2:	de 4f       	sbci	r29, 0xFE	; 254
    12f4:	39 83       	std	Y+1, r19	; 0x01
    12f6:	28 83       	st	Y, r18
    12f8:	cb 5a       	subi	r28, 0xAB	; 171
    12fa:	d1 40       	sbci	r29, 0x01	; 1
    12fc:	c1 55       	subi	r28, 0x51	; 81
    12fe:	de 4f       	sbci	r29, 0xFE	; 254
    1300:	38 81       	ld	r19, Y
    1302:	cf 5a       	subi	r28, 0xAF	; 175
    1304:	d1 40       	sbci	r29, 0x01	; 1
    1306:	31 50       	subi	r19, 0x01	; 1
    1308:	c1 55       	subi	r28, 0x51	; 81
    130a:	de 4f       	sbci	r29, 0xFE	; 254
    130c:	38 83       	st	Y, r19
    130e:	cf 5a       	subi	r28, 0xAF	; 175
    1310:	d1 40       	sbci	r29, 0x01	; 1
    1312:	c1 55       	subi	r28, 0x51	; 81
    1314:	de 4f       	sbci	r29, 0xFE	; 254
    1316:	88 81       	ld	r24, Y
    1318:	cf 5a       	subi	r28, 0xAF	; 175
    131a:	d1 40       	sbci	r29, 0x01	; 1
    131c:	88 23       	and	r24, r24
    131e:	21 f6       	brne	.-120    	; 0x12a8 <__stack+0xa49>
	char Gwiazdzista[] = "33.wav";
    1320:	ce 01       	movw	r24, r28
    1322:	83 55       	subi	r24, 0x53	; 83
    1324:	9f 4f       	sbci	r25, 0xFF	; 255
    1326:	c0 55       	subi	r28, 0x50	; 80
    1328:	de 4f       	sbci	r29, 0xFE	; 254
    132a:	99 83       	std	Y+1, r25	; 0x01
    132c:	88 83       	st	Y, r24
    132e:	c0 5b       	subi	r28, 0xB0	; 176
    1330:	d1 40       	sbci	r29, 0x01	; 1
    1332:	ee e0       	ldi	r30, 0x0E	; 14
    1334:	f1 e0       	ldi	r31, 0x01	; 1
    1336:	ce 54       	subi	r28, 0x4E	; 78
    1338:	de 4f       	sbci	r29, 0xFE	; 254
    133a:	f9 83       	std	Y+1, r31	; 0x01
    133c:	e8 83       	st	Y, r30
    133e:	c2 5b       	subi	r28, 0xB2	; 178
    1340:	d1 40       	sbci	r29, 0x01	; 1
    1342:	f7 e0       	ldi	r31, 0x07	; 7
    1344:	cc 54       	subi	r28, 0x4C	; 76
    1346:	de 4f       	sbci	r29, 0xFE	; 254
    1348:	f8 83       	st	Y, r31
    134a:	c4 5b       	subi	r28, 0xB4	; 180
    134c:	d1 40       	sbci	r29, 0x01	; 1
    134e:	ce 54       	subi	r28, 0x4E	; 78
    1350:	de 4f       	sbci	r29, 0xFE	; 254
    1352:	e8 81       	ld	r30, Y
    1354:	f9 81       	ldd	r31, Y+1	; 0x01
    1356:	c2 5b       	subi	r28, 0xB2	; 178
    1358:	d1 40       	sbci	r29, 0x01	; 1
    135a:	00 80       	ld	r0, Z
    135c:	ce 54       	subi	r28, 0x4E	; 78
    135e:	de 4f       	sbci	r29, 0xFE	; 254
    1360:	28 81       	ld	r18, Y
    1362:	39 81       	ldd	r19, Y+1	; 0x01
    1364:	c2 5b       	subi	r28, 0xB2	; 178
    1366:	d1 40       	sbci	r29, 0x01	; 1
    1368:	2f 5f       	subi	r18, 0xFF	; 255
    136a:	3f 4f       	sbci	r19, 0xFF	; 255
    136c:	ce 54       	subi	r28, 0x4E	; 78
    136e:	de 4f       	sbci	r29, 0xFE	; 254
    1370:	39 83       	std	Y+1, r19	; 0x01
    1372:	28 83       	st	Y, r18
    1374:	c2 5b       	subi	r28, 0xB2	; 178
    1376:	d1 40       	sbci	r29, 0x01	; 1
    1378:	c0 55       	subi	r28, 0x50	; 80
    137a:	de 4f       	sbci	r29, 0xFE	; 254
    137c:	e8 81       	ld	r30, Y
    137e:	f9 81       	ldd	r31, Y+1	; 0x01
    1380:	c0 5b       	subi	r28, 0xB0	; 176
    1382:	d1 40       	sbci	r29, 0x01	; 1
    1384:	00 82       	st	Z, r0
    1386:	c0 55       	subi	r28, 0x50	; 80
    1388:	de 4f       	sbci	r29, 0xFE	; 254
    138a:	28 81       	ld	r18, Y
    138c:	39 81       	ldd	r19, Y+1	; 0x01
    138e:	c0 5b       	subi	r28, 0xB0	; 176
    1390:	d1 40       	sbci	r29, 0x01	; 1
    1392:	2f 5f       	subi	r18, 0xFF	; 255
    1394:	3f 4f       	sbci	r19, 0xFF	; 255
    1396:	c0 55       	subi	r28, 0x50	; 80
    1398:	de 4f       	sbci	r29, 0xFE	; 254
    139a:	39 83       	std	Y+1, r19	; 0x01
    139c:	28 83       	st	Y, r18
    139e:	c0 5b       	subi	r28, 0xB0	; 176
    13a0:	d1 40       	sbci	r29, 0x01	; 1
    13a2:	cc 54       	subi	r28, 0x4C	; 76
    13a4:	de 4f       	sbci	r29, 0xFE	; 254
    13a6:	38 81       	ld	r19, Y
    13a8:	c4 5b       	subi	r28, 0xB4	; 180
    13aa:	d1 40       	sbci	r29, 0x01	; 1
    13ac:	31 50       	subi	r19, 0x01	; 1
    13ae:	cc 54       	subi	r28, 0x4C	; 76
    13b0:	de 4f       	sbci	r29, 0xFE	; 254
    13b2:	38 83       	st	Y, r19
    13b4:	c4 5b       	subi	r28, 0xB4	; 180
    13b6:	d1 40       	sbci	r29, 0x01	; 1
    13b8:	cc 54       	subi	r28, 0x4C	; 76
    13ba:	de 4f       	sbci	r29, 0xFE	; 254
    13bc:	88 81       	ld	r24, Y
    13be:	c4 5b       	subi	r28, 0xB4	; 180
    13c0:	d1 40       	sbci	r29, 0x01	; 1
    13c2:	88 23       	and	r24, r24
    13c4:	21 f6       	brne	.-120    	; 0x134e <__stack+0xaef>
	char PR_Al_Krakowska[] = "34.wav";
    13c6:	ce 01       	movw	r24, r28
    13c8:	8c 54       	subi	r24, 0x4C	; 76
    13ca:	9f 4f       	sbci	r25, 0xFF	; 255
    13cc:	cb 54       	subi	r28, 0x4B	; 75
    13ce:	de 4f       	sbci	r29, 0xFE	; 254
    13d0:	99 83       	std	Y+1, r25	; 0x01
    13d2:	88 83       	st	Y, r24
    13d4:	c5 5b       	subi	r28, 0xB5	; 181
    13d6:	d1 40       	sbci	r29, 0x01	; 1
    13d8:	e5 e1       	ldi	r30, 0x15	; 21
    13da:	f1 e0       	ldi	r31, 0x01	; 1
    13dc:	c9 54       	subi	r28, 0x49	; 73
    13de:	de 4f       	sbci	r29, 0xFE	; 254
    13e0:	f9 83       	std	Y+1, r31	; 0x01
    13e2:	e8 83       	st	Y, r30
    13e4:	c7 5b       	subi	r28, 0xB7	; 183
    13e6:	d1 40       	sbci	r29, 0x01	; 1
    13e8:	f7 e0       	ldi	r31, 0x07	; 7
    13ea:	c7 54       	subi	r28, 0x47	; 71
    13ec:	de 4f       	sbci	r29, 0xFE	; 254
    13ee:	f8 83       	st	Y, r31
    13f0:	c9 5b       	subi	r28, 0xB9	; 185
    13f2:	d1 40       	sbci	r29, 0x01	; 1
    13f4:	c9 54       	subi	r28, 0x49	; 73
    13f6:	de 4f       	sbci	r29, 0xFE	; 254
    13f8:	e8 81       	ld	r30, Y
    13fa:	f9 81       	ldd	r31, Y+1	; 0x01
    13fc:	c7 5b       	subi	r28, 0xB7	; 183
    13fe:	d1 40       	sbci	r29, 0x01	; 1
    1400:	00 80       	ld	r0, Z
    1402:	c9 54       	subi	r28, 0x49	; 73
    1404:	de 4f       	sbci	r29, 0xFE	; 254
    1406:	28 81       	ld	r18, Y
    1408:	39 81       	ldd	r19, Y+1	; 0x01
    140a:	c7 5b       	subi	r28, 0xB7	; 183
    140c:	d1 40       	sbci	r29, 0x01	; 1
    140e:	2f 5f       	subi	r18, 0xFF	; 255
    1410:	3f 4f       	sbci	r19, 0xFF	; 255
    1412:	c9 54       	subi	r28, 0x49	; 73
    1414:	de 4f       	sbci	r29, 0xFE	; 254
    1416:	39 83       	std	Y+1, r19	; 0x01
    1418:	28 83       	st	Y, r18
    141a:	c7 5b       	subi	r28, 0xB7	; 183
    141c:	d1 40       	sbci	r29, 0x01	; 1
    141e:	cb 54       	subi	r28, 0x4B	; 75
    1420:	de 4f       	sbci	r29, 0xFE	; 254
    1422:	e8 81       	ld	r30, Y
    1424:	f9 81       	ldd	r31, Y+1	; 0x01
    1426:	c5 5b       	subi	r28, 0xB5	; 181
    1428:	d1 40       	sbci	r29, 0x01	; 1
    142a:	00 82       	st	Z, r0
    142c:	cb 54       	subi	r28, 0x4B	; 75
    142e:	de 4f       	sbci	r29, 0xFE	; 254
    1430:	28 81       	ld	r18, Y
    1432:	39 81       	ldd	r19, Y+1	; 0x01
    1434:	c5 5b       	subi	r28, 0xB5	; 181
    1436:	d1 40       	sbci	r29, 0x01	; 1
    1438:	2f 5f       	subi	r18, 0xFF	; 255
    143a:	3f 4f       	sbci	r19, 0xFF	; 255
    143c:	cb 54       	subi	r28, 0x4B	; 75
    143e:	de 4f       	sbci	r29, 0xFE	; 254
    1440:	39 83       	std	Y+1, r19	; 0x01
    1442:	28 83       	st	Y, r18
    1444:	c5 5b       	subi	r28, 0xB5	; 181
    1446:	d1 40       	sbci	r29, 0x01	; 1
    1448:	c7 54       	subi	r28, 0x47	; 71
    144a:	de 4f       	sbci	r29, 0xFE	; 254
    144c:	38 81       	ld	r19, Y
    144e:	c9 5b       	subi	r28, 0xB9	; 185
    1450:	d1 40       	sbci	r29, 0x01	; 1
    1452:	31 50       	subi	r19, 0x01	; 1
    1454:	c7 54       	subi	r28, 0x47	; 71
    1456:	de 4f       	sbci	r29, 0xFE	; 254
    1458:	38 83       	st	Y, r19
    145a:	c9 5b       	subi	r28, 0xB9	; 185
    145c:	d1 40       	sbci	r29, 0x01	; 1
    145e:	c7 54       	subi	r28, 0x47	; 71
    1460:	de 4f       	sbci	r29, 0xFE	; 254
    1462:	88 81       	ld	r24, Y
    1464:	c9 5b       	subi	r28, 0xB9	; 185
    1466:	d1 40       	sbci	r29, 0x01	; 1
    1468:	88 23       	and	r24, r24
    146a:	21 f6       	brne	.-120    	; 0x13f4 <__stack+0xb95>

	char Boernerowo[] = "35.wav";
    146c:	ce 01       	movw	r24, r28
    146e:	85 54       	subi	r24, 0x45	; 69
    1470:	9f 4f       	sbci	r25, 0xFF	; 255
    1472:	c6 54       	subi	r28, 0x46	; 70
    1474:	de 4f       	sbci	r29, 0xFE	; 254
    1476:	99 83       	std	Y+1, r25	; 0x01
    1478:	88 83       	st	Y, r24
    147a:	ca 5b       	subi	r28, 0xBA	; 186
    147c:	d1 40       	sbci	r29, 0x01	; 1
    147e:	ec e1       	ldi	r30, 0x1C	; 28
    1480:	f1 e0       	ldi	r31, 0x01	; 1
    1482:	c4 54       	subi	r28, 0x44	; 68
    1484:	de 4f       	sbci	r29, 0xFE	; 254
    1486:	f9 83       	std	Y+1, r31	; 0x01
    1488:	e8 83       	st	Y, r30
    148a:	cc 5b       	subi	r28, 0xBC	; 188
    148c:	d1 40       	sbci	r29, 0x01	; 1
    148e:	f7 e0       	ldi	r31, 0x07	; 7
    1490:	c2 54       	subi	r28, 0x42	; 66
    1492:	de 4f       	sbci	r29, 0xFE	; 254
    1494:	f8 83       	st	Y, r31
    1496:	ce 5b       	subi	r28, 0xBE	; 190
    1498:	d1 40       	sbci	r29, 0x01	; 1
    149a:	c4 54       	subi	r28, 0x44	; 68
    149c:	de 4f       	sbci	r29, 0xFE	; 254
    149e:	e8 81       	ld	r30, Y
    14a0:	f9 81       	ldd	r31, Y+1	; 0x01
    14a2:	cc 5b       	subi	r28, 0xBC	; 188
    14a4:	d1 40       	sbci	r29, 0x01	; 1
    14a6:	00 80       	ld	r0, Z
    14a8:	c4 54       	subi	r28, 0x44	; 68
    14aa:	de 4f       	sbci	r29, 0xFE	; 254
    14ac:	28 81       	ld	r18, Y
    14ae:	39 81       	ldd	r19, Y+1	; 0x01
    14b0:	cc 5b       	subi	r28, 0xBC	; 188
    14b2:	d1 40       	sbci	r29, 0x01	; 1
    14b4:	2f 5f       	subi	r18, 0xFF	; 255
    14b6:	3f 4f       	sbci	r19, 0xFF	; 255
    14b8:	c4 54       	subi	r28, 0x44	; 68
    14ba:	de 4f       	sbci	r29, 0xFE	; 254
    14bc:	39 83       	std	Y+1, r19	; 0x01
    14be:	28 83       	st	Y, r18
    14c0:	cc 5b       	subi	r28, 0xBC	; 188
    14c2:	d1 40       	sbci	r29, 0x01	; 1
    14c4:	c6 54       	subi	r28, 0x46	; 70
    14c6:	de 4f       	sbci	r29, 0xFE	; 254
    14c8:	e8 81       	ld	r30, Y
    14ca:	f9 81       	ldd	r31, Y+1	; 0x01
    14cc:	ca 5b       	subi	r28, 0xBA	; 186
    14ce:	d1 40       	sbci	r29, 0x01	; 1
    14d0:	00 82       	st	Z, r0
    14d2:	c6 54       	subi	r28, 0x46	; 70
    14d4:	de 4f       	sbci	r29, 0xFE	; 254
    14d6:	28 81       	ld	r18, Y
    14d8:	39 81       	ldd	r19, Y+1	; 0x01
    14da:	ca 5b       	subi	r28, 0xBA	; 186
    14dc:	d1 40       	sbci	r29, 0x01	; 1
    14de:	2f 5f       	subi	r18, 0xFF	; 255
    14e0:	3f 4f       	sbci	r19, 0xFF	; 255
    14e2:	c6 54       	subi	r28, 0x46	; 70
    14e4:	de 4f       	sbci	r29, 0xFE	; 254
    14e6:	39 83       	std	Y+1, r19	; 0x01
    14e8:	28 83       	st	Y, r18
    14ea:	ca 5b       	subi	r28, 0xBA	; 186
    14ec:	d1 40       	sbci	r29, 0x01	; 1
    14ee:	c2 54       	subi	r28, 0x42	; 66
    14f0:	de 4f       	sbci	r29, 0xFE	; 254
    14f2:	38 81       	ld	r19, Y
    14f4:	ce 5b       	subi	r28, 0xBE	; 190
    14f6:	d1 40       	sbci	r29, 0x01	; 1
    14f8:	31 50       	subi	r19, 0x01	; 1
    14fa:	c2 54       	subi	r28, 0x42	; 66
    14fc:	de 4f       	sbci	r29, 0xFE	; 254
    14fe:	38 83       	st	Y, r19
    1500:	ce 5b       	subi	r28, 0xBE	; 190
    1502:	d1 40       	sbci	r29, 0x01	; 1
    1504:	c2 54       	subi	r28, 0x42	; 66
    1506:	de 4f       	sbci	r29, 0xFE	; 254
    1508:	88 81       	ld	r24, Y
    150a:	ce 5b       	subi	r28, 0xBE	; 190
    150c:	d1 40       	sbci	r29, 0x01	; 1
    150e:	88 23       	and	r24, r24
    1510:	21 f6       	brne	.-120    	; 0x149a <__stack+0xc3b>
	char Zeran_FSO[] = "36.wav";
    1512:	ce 01       	movw	r24, r28
    1514:	8e 53       	subi	r24, 0x3E	; 62
    1516:	9f 4f       	sbci	r25, 0xFF	; 255
    1518:	c1 54       	subi	r28, 0x41	; 65
    151a:	de 4f       	sbci	r29, 0xFE	; 254
    151c:	99 83       	std	Y+1, r25	; 0x01
    151e:	88 83       	st	Y, r24
    1520:	cf 5b       	subi	r28, 0xBF	; 191
    1522:	d1 40       	sbci	r29, 0x01	; 1
    1524:	e3 e2       	ldi	r30, 0x23	; 35
    1526:	f1 e0       	ldi	r31, 0x01	; 1
    1528:	cf 53       	subi	r28, 0x3F	; 63
    152a:	de 4f       	sbci	r29, 0xFE	; 254
    152c:	f9 83       	std	Y+1, r31	; 0x01
    152e:	e8 83       	st	Y, r30
    1530:	c1 5c       	subi	r28, 0xC1	; 193
    1532:	d1 40       	sbci	r29, 0x01	; 1
    1534:	f7 e0       	ldi	r31, 0x07	; 7
    1536:	cd 53       	subi	r28, 0x3D	; 61
    1538:	de 4f       	sbci	r29, 0xFE	; 254
    153a:	f8 83       	st	Y, r31
    153c:	c3 5c       	subi	r28, 0xC3	; 195
    153e:	d1 40       	sbci	r29, 0x01	; 1
    1540:	cf 53       	subi	r28, 0x3F	; 63
    1542:	de 4f       	sbci	r29, 0xFE	; 254
    1544:	e8 81       	ld	r30, Y
    1546:	f9 81       	ldd	r31, Y+1	; 0x01
    1548:	c1 5c       	subi	r28, 0xC1	; 193
    154a:	d1 40       	sbci	r29, 0x01	; 1
    154c:	00 80       	ld	r0, Z
    154e:	cf 53       	subi	r28, 0x3F	; 63
    1550:	de 4f       	sbci	r29, 0xFE	; 254
    1552:	28 81       	ld	r18, Y
    1554:	39 81       	ldd	r19, Y+1	; 0x01
    1556:	c1 5c       	subi	r28, 0xC1	; 193
    1558:	d1 40       	sbci	r29, 0x01	; 1
    155a:	2f 5f       	subi	r18, 0xFF	; 255
    155c:	3f 4f       	sbci	r19, 0xFF	; 255
    155e:	cf 53       	subi	r28, 0x3F	; 63
    1560:	de 4f       	sbci	r29, 0xFE	; 254
    1562:	39 83       	std	Y+1, r19	; 0x01
    1564:	28 83       	st	Y, r18
    1566:	c1 5c       	subi	r28, 0xC1	; 193
    1568:	d1 40       	sbci	r29, 0x01	; 1
    156a:	c1 54       	subi	r28, 0x41	; 65
    156c:	de 4f       	sbci	r29, 0xFE	; 254
    156e:	e8 81       	ld	r30, Y
    1570:	f9 81       	ldd	r31, Y+1	; 0x01
    1572:	cf 5b       	subi	r28, 0xBF	; 191
    1574:	d1 40       	sbci	r29, 0x01	; 1
    1576:	00 82       	st	Z, r0
    1578:	c1 54       	subi	r28, 0x41	; 65
    157a:	de 4f       	sbci	r29, 0xFE	; 254
    157c:	28 81       	ld	r18, Y
    157e:	39 81       	ldd	r19, Y+1	; 0x01
    1580:	cf 5b       	subi	r28, 0xBF	; 191
    1582:	d1 40       	sbci	r29, 0x01	; 1
    1584:	2f 5f       	subi	r18, 0xFF	; 255
    1586:	3f 4f       	sbci	r19, 0xFF	; 255
    1588:	c1 54       	subi	r28, 0x41	; 65
    158a:	de 4f       	sbci	r29, 0xFE	; 254
    158c:	39 83       	std	Y+1, r19	; 0x01
    158e:	28 83       	st	Y, r18
    1590:	cf 5b       	subi	r28, 0xBF	; 191
    1592:	d1 40       	sbci	r29, 0x01	; 1
    1594:	cd 53       	subi	r28, 0x3D	; 61
    1596:	de 4f       	sbci	r29, 0xFE	; 254
    1598:	38 81       	ld	r19, Y
    159a:	c3 5c       	subi	r28, 0xC3	; 195
    159c:	d1 40       	sbci	r29, 0x01	; 1
    159e:	31 50       	subi	r19, 0x01	; 1
    15a0:	cd 53       	subi	r28, 0x3D	; 61
    15a2:	de 4f       	sbci	r29, 0xFE	; 254
    15a4:	38 83       	st	Y, r19
    15a6:	c3 5c       	subi	r28, 0xC3	; 195
    15a8:	d1 40       	sbci	r29, 0x01	; 1
    15aa:	cd 53       	subi	r28, 0x3D	; 61
    15ac:	de 4f       	sbci	r29, 0xFE	; 254
    15ae:	88 81       	ld	r24, Y
    15b0:	c3 5c       	subi	r28, 0xC3	; 195
    15b2:	d1 40       	sbci	r29, 0x01	; 1
    15b4:	88 23       	and	r24, r24
    15b6:	21 f6       	brne	.-120    	; 0x1540 <__stack+0xce1>
	char Sadyba[] = "37.wav";
    15b8:	ce 01       	movw	r24, r28
    15ba:	87 53       	subi	r24, 0x37	; 55
    15bc:	9f 4f       	sbci	r25, 0xFF	; 255
    15be:	cc 53       	subi	r28, 0x3C	; 60
    15c0:	de 4f       	sbci	r29, 0xFE	; 254
    15c2:	99 83       	std	Y+1, r25	; 0x01
    15c4:	88 83       	st	Y, r24
    15c6:	c4 5c       	subi	r28, 0xC4	; 196
    15c8:	d1 40       	sbci	r29, 0x01	; 1
    15ca:	ea e2       	ldi	r30, 0x2A	; 42
    15cc:	f1 e0       	ldi	r31, 0x01	; 1
    15ce:	ca 53       	subi	r28, 0x3A	; 58
    15d0:	de 4f       	sbci	r29, 0xFE	; 254
    15d2:	f9 83       	std	Y+1, r31	; 0x01
    15d4:	e8 83       	st	Y, r30
    15d6:	c6 5c       	subi	r28, 0xC6	; 198
    15d8:	d1 40       	sbci	r29, 0x01	; 1
    15da:	f7 e0       	ldi	r31, 0x07	; 7
    15dc:	c8 53       	subi	r28, 0x38	; 56
    15de:	de 4f       	sbci	r29, 0xFE	; 254
    15e0:	f8 83       	st	Y, r31
    15e2:	c8 5c       	subi	r28, 0xC8	; 200
    15e4:	d1 40       	sbci	r29, 0x01	; 1
    15e6:	ca 53       	subi	r28, 0x3A	; 58
    15e8:	de 4f       	sbci	r29, 0xFE	; 254
    15ea:	e8 81       	ld	r30, Y
    15ec:	f9 81       	ldd	r31, Y+1	; 0x01
    15ee:	c6 5c       	subi	r28, 0xC6	; 198
    15f0:	d1 40       	sbci	r29, 0x01	; 1
    15f2:	00 80       	ld	r0, Z
    15f4:	ca 53       	subi	r28, 0x3A	; 58
    15f6:	de 4f       	sbci	r29, 0xFE	; 254
    15f8:	28 81       	ld	r18, Y
    15fa:	39 81       	ldd	r19, Y+1	; 0x01
    15fc:	c6 5c       	subi	r28, 0xC6	; 198
    15fe:	d1 40       	sbci	r29, 0x01	; 1
    1600:	2f 5f       	subi	r18, 0xFF	; 255
    1602:	3f 4f       	sbci	r19, 0xFF	; 255
    1604:	ca 53       	subi	r28, 0x3A	; 58
    1606:	de 4f       	sbci	r29, 0xFE	; 254
    1608:	39 83       	std	Y+1, r19	; 0x01
    160a:	28 83       	st	Y, r18
    160c:	c6 5c       	subi	r28, 0xC6	; 198
    160e:	d1 40       	sbci	r29, 0x01	; 1
    1610:	cc 53       	subi	r28, 0x3C	; 60
    1612:	de 4f       	sbci	r29, 0xFE	; 254
    1614:	e8 81       	ld	r30, Y
    1616:	f9 81       	ldd	r31, Y+1	; 0x01
    1618:	c4 5c       	subi	r28, 0xC4	; 196
    161a:	d1 40       	sbci	r29, 0x01	; 1
    161c:	00 82       	st	Z, r0
    161e:	cc 53       	subi	r28, 0x3C	; 60
    1620:	de 4f       	sbci	r29, 0xFE	; 254
    1622:	28 81       	ld	r18, Y
    1624:	39 81       	ldd	r19, Y+1	; 0x01
    1626:	c4 5c       	subi	r28, 0xC4	; 196
    1628:	d1 40       	sbci	r29, 0x01	; 1
    162a:	2f 5f       	subi	r18, 0xFF	; 255
    162c:	3f 4f       	sbci	r19, 0xFF	; 255
    162e:	cc 53       	subi	r28, 0x3C	; 60
    1630:	de 4f       	sbci	r29, 0xFE	; 254
    1632:	39 83       	std	Y+1, r19	; 0x01
    1634:	28 83       	st	Y, r18
    1636:	c4 5c       	subi	r28, 0xC4	; 196
    1638:	d1 40       	sbci	r29, 0x01	; 1
    163a:	c8 53       	subi	r28, 0x38	; 56
    163c:	de 4f       	sbci	r29, 0xFE	; 254
    163e:	38 81       	ld	r19, Y
    1640:	c8 5c       	subi	r28, 0xC8	; 200
    1642:	d1 40       	sbci	r29, 0x01	; 1
    1644:	31 50       	subi	r19, 0x01	; 1
    1646:	c8 53       	subi	r28, 0x38	; 56
    1648:	de 4f       	sbci	r29, 0xFE	; 254
    164a:	38 83       	st	Y, r19
    164c:	c8 5c       	subi	r28, 0xC8	; 200
    164e:	d1 40       	sbci	r29, 0x01	; 1
    1650:	c8 53       	subi	r28, 0x38	; 56
    1652:	de 4f       	sbci	r29, 0xFE	; 254
    1654:	88 81       	ld	r24, Y
    1656:	c8 5c       	subi	r28, 0xC8	; 200
    1658:	d1 40       	sbci	r29, 0x01	; 1
    165a:	88 23       	and	r24, r24
    165c:	21 f6       	brne	.-120    	; 0x15e6 <__stack+0xd87>
	char Szczesliwice[] = "38.wav";
    165e:	ce 01       	movw	r24, r28
    1660:	80 53       	subi	r24, 0x30	; 48
    1662:	9f 4f       	sbci	r25, 0xFF	; 255
    1664:	c7 53       	subi	r28, 0x37	; 55
    1666:	de 4f       	sbci	r29, 0xFE	; 254
    1668:	99 83       	std	Y+1, r25	; 0x01
    166a:	88 83       	st	Y, r24
    166c:	c9 5c       	subi	r28, 0xC9	; 201
    166e:	d1 40       	sbci	r29, 0x01	; 1
    1670:	e1 e3       	ldi	r30, 0x31	; 49
    1672:	f1 e0       	ldi	r31, 0x01	; 1
    1674:	c5 53       	subi	r28, 0x35	; 53
    1676:	de 4f       	sbci	r29, 0xFE	; 254
    1678:	f9 83       	std	Y+1, r31	; 0x01
    167a:	e8 83       	st	Y, r30
    167c:	cb 5c       	subi	r28, 0xCB	; 203
    167e:	d1 40       	sbci	r29, 0x01	; 1
    1680:	f7 e0       	ldi	r31, 0x07	; 7
    1682:	c3 53       	subi	r28, 0x33	; 51
    1684:	de 4f       	sbci	r29, 0xFE	; 254
    1686:	f8 83       	st	Y, r31
    1688:	cd 5c       	subi	r28, 0xCD	; 205
    168a:	d1 40       	sbci	r29, 0x01	; 1
    168c:	c5 53       	subi	r28, 0x35	; 53
    168e:	de 4f       	sbci	r29, 0xFE	; 254
    1690:	e8 81       	ld	r30, Y
    1692:	f9 81       	ldd	r31, Y+1	; 0x01
    1694:	cb 5c       	subi	r28, 0xCB	; 203
    1696:	d1 40       	sbci	r29, 0x01	; 1
    1698:	00 80       	ld	r0, Z
    169a:	c5 53       	subi	r28, 0x35	; 53
    169c:	de 4f       	sbci	r29, 0xFE	; 254
    169e:	28 81       	ld	r18, Y
    16a0:	39 81       	ldd	r19, Y+1	; 0x01
    16a2:	cb 5c       	subi	r28, 0xCB	; 203
    16a4:	d1 40       	sbci	r29, 0x01	; 1
    16a6:	2f 5f       	subi	r18, 0xFF	; 255
    16a8:	3f 4f       	sbci	r19, 0xFF	; 255
    16aa:	c5 53       	subi	r28, 0x35	; 53
    16ac:	de 4f       	sbci	r29, 0xFE	; 254
    16ae:	39 83       	std	Y+1, r19	; 0x01
    16b0:	28 83       	st	Y, r18
    16b2:	cb 5c       	subi	r28, 0xCB	; 203
    16b4:	d1 40       	sbci	r29, 0x01	; 1
    16b6:	c7 53       	subi	r28, 0x37	; 55
    16b8:	de 4f       	sbci	r29, 0xFE	; 254
    16ba:	e8 81       	ld	r30, Y
    16bc:	f9 81       	ldd	r31, Y+1	; 0x01
    16be:	c9 5c       	subi	r28, 0xC9	; 201
    16c0:	d1 40       	sbci	r29, 0x01	; 1
    16c2:	00 82       	st	Z, r0
    16c4:	c7 53       	subi	r28, 0x37	; 55
    16c6:	de 4f       	sbci	r29, 0xFE	; 254
    16c8:	28 81       	ld	r18, Y
    16ca:	39 81       	ldd	r19, Y+1	; 0x01
    16cc:	c9 5c       	subi	r28, 0xC9	; 201
    16ce:	d1 40       	sbci	r29, 0x01	; 1
    16d0:	2f 5f       	subi	r18, 0xFF	; 255
    16d2:	3f 4f       	sbci	r19, 0xFF	; 255
    16d4:	c7 53       	subi	r28, 0x37	; 55
    16d6:	de 4f       	sbci	r29, 0xFE	; 254
    16d8:	39 83       	std	Y+1, r19	; 0x01
    16da:	28 83       	st	Y, r18
    16dc:	c9 5c       	subi	r28, 0xC9	; 201
    16de:	d1 40       	sbci	r29, 0x01	; 1
    16e0:	c3 53       	subi	r28, 0x33	; 51
    16e2:	de 4f       	sbci	r29, 0xFE	; 254
    16e4:	38 81       	ld	r19, Y
    16e6:	cd 5c       	subi	r28, 0xCD	; 205
    16e8:	d1 40       	sbci	r29, 0x01	; 1
    16ea:	31 50       	subi	r19, 0x01	; 1
    16ec:	c3 53       	subi	r28, 0x33	; 51
    16ee:	de 4f       	sbci	r29, 0xFE	; 254
    16f0:	38 83       	st	Y, r19
    16f2:	cd 5c       	subi	r28, 0xCD	; 205
    16f4:	d1 40       	sbci	r29, 0x01	; 1
    16f6:	c3 53       	subi	r28, 0x33	; 51
    16f8:	de 4f       	sbci	r29, 0xFE	; 254
    16fa:	88 81       	ld	r24, Y
    16fc:	cd 5c       	subi	r28, 0xCD	; 205
    16fe:	d1 40       	sbci	r29, 0x01	; 1
    1700:	88 23       	and	r24, r24
    1702:	21 f6       	brne	.-120    	; 0x168c <__stack+0xe2d>
	char Nowodwory[] = "39.wav";
    1704:	ce 01       	movw	r24, r28
    1706:	89 52       	subi	r24, 0x29	; 41
    1708:	9f 4f       	sbci	r25, 0xFF	; 255
    170a:	c2 53       	subi	r28, 0x32	; 50
    170c:	de 4f       	sbci	r29, 0xFE	; 254
    170e:	99 83       	std	Y+1, r25	; 0x01
    1710:	88 83       	st	Y, r24
    1712:	ce 5c       	subi	r28, 0xCE	; 206
    1714:	d1 40       	sbci	r29, 0x01	; 1
    1716:	e8 e3       	ldi	r30, 0x38	; 56
    1718:	f1 e0       	ldi	r31, 0x01	; 1
    171a:	c0 53       	subi	r28, 0x30	; 48
    171c:	de 4f       	sbci	r29, 0xFE	; 254
    171e:	f9 83       	std	Y+1, r31	; 0x01
    1720:	e8 83       	st	Y, r30
    1722:	c0 5d       	subi	r28, 0xD0	; 208
    1724:	d1 40       	sbci	r29, 0x01	; 1
    1726:	f7 e0       	ldi	r31, 0x07	; 7
    1728:	ce 52       	subi	r28, 0x2E	; 46
    172a:	de 4f       	sbci	r29, 0xFE	; 254
    172c:	f8 83       	st	Y, r31
    172e:	c2 5d       	subi	r28, 0xD2	; 210
    1730:	d1 40       	sbci	r29, 0x01	; 1
    1732:	c0 53       	subi	r28, 0x30	; 48
    1734:	de 4f       	sbci	r29, 0xFE	; 254
    1736:	e8 81       	ld	r30, Y
    1738:	f9 81       	ldd	r31, Y+1	; 0x01
    173a:	c0 5d       	subi	r28, 0xD0	; 208
    173c:	d1 40       	sbci	r29, 0x01	; 1
    173e:	00 80       	ld	r0, Z
    1740:	c0 53       	subi	r28, 0x30	; 48
    1742:	de 4f       	sbci	r29, 0xFE	; 254
    1744:	28 81       	ld	r18, Y
    1746:	39 81       	ldd	r19, Y+1	; 0x01
    1748:	c0 5d       	subi	r28, 0xD0	; 208
    174a:	d1 40       	sbci	r29, 0x01	; 1
    174c:	2f 5f       	subi	r18, 0xFF	; 255
    174e:	3f 4f       	sbci	r19, 0xFF	; 255
    1750:	c0 53       	subi	r28, 0x30	; 48
    1752:	de 4f       	sbci	r29, 0xFE	; 254
    1754:	39 83       	std	Y+1, r19	; 0x01
    1756:	28 83       	st	Y, r18
    1758:	c0 5d       	subi	r28, 0xD0	; 208
    175a:	d1 40       	sbci	r29, 0x01	; 1
    175c:	c2 53       	subi	r28, 0x32	; 50
    175e:	de 4f       	sbci	r29, 0xFE	; 254
    1760:	e8 81       	ld	r30, Y
    1762:	f9 81       	ldd	r31, Y+1	; 0x01
    1764:	ce 5c       	subi	r28, 0xCE	; 206
    1766:	d1 40       	sbci	r29, 0x01	; 1
    1768:	00 82       	st	Z, r0
    176a:	c2 53       	subi	r28, 0x32	; 50
    176c:	de 4f       	sbci	r29, 0xFE	; 254
    176e:	28 81       	ld	r18, Y
    1770:	39 81       	ldd	r19, Y+1	; 0x01
    1772:	ce 5c       	subi	r28, 0xCE	; 206
    1774:	d1 40       	sbci	r29, 0x01	; 1
    1776:	2f 5f       	subi	r18, 0xFF	; 255
    1778:	3f 4f       	sbci	r19, 0xFF	; 255
    177a:	c2 53       	subi	r28, 0x32	; 50
    177c:	de 4f       	sbci	r29, 0xFE	; 254
    177e:	39 83       	std	Y+1, r19	; 0x01
    1780:	28 83       	st	Y, r18
    1782:	ce 5c       	subi	r28, 0xCE	; 206
    1784:	d1 40       	sbci	r29, 0x01	; 1
    1786:	ce 52       	subi	r28, 0x2E	; 46
    1788:	de 4f       	sbci	r29, 0xFE	; 254
    178a:	38 81       	ld	r19, Y
    178c:	c2 5d       	subi	r28, 0xD2	; 210
    178e:	d1 40       	sbci	r29, 0x01	; 1
    1790:	31 50       	subi	r19, 0x01	; 1
    1792:	ce 52       	subi	r28, 0x2E	; 46
    1794:	de 4f       	sbci	r29, 0xFE	; 254
    1796:	38 83       	st	Y, r19
    1798:	c2 5d       	subi	r28, 0xD2	; 210
    179a:	d1 40       	sbci	r29, 0x01	; 1
    179c:	ce 52       	subi	r28, 0x2E	; 46
    179e:	de 4f       	sbci	r29, 0xFE	; 254
    17a0:	88 81       	ld	r24, Y
    17a2:	c2 5d       	subi	r28, 0xD2	; 210
    17a4:	d1 40       	sbci	r29, 0x01	; 1
    17a6:	88 23       	and	r24, r24
    17a8:	21 f6       	brne	.-120    	; 0x1732 <__stack+0xed3>

	char Metro_Mlociny[] = "40.wav";
    17aa:	ce 01       	movw	r24, r28
    17ac:	82 52       	subi	r24, 0x22	; 34
    17ae:	9f 4f       	sbci	r25, 0xFF	; 255
    17b0:	cd 52       	subi	r28, 0x2D	; 45
    17b2:	de 4f       	sbci	r29, 0xFE	; 254
    17b4:	99 83       	std	Y+1, r25	; 0x01
    17b6:	88 83       	st	Y, r24
    17b8:	c3 5d       	subi	r28, 0xD3	; 211
    17ba:	d1 40       	sbci	r29, 0x01	; 1
    17bc:	ef e3       	ldi	r30, 0x3F	; 63
    17be:	f1 e0       	ldi	r31, 0x01	; 1
    17c0:	cb 52       	subi	r28, 0x2B	; 43
    17c2:	de 4f       	sbci	r29, 0xFE	; 254
    17c4:	f9 83       	std	Y+1, r31	; 0x01
    17c6:	e8 83       	st	Y, r30
    17c8:	c5 5d       	subi	r28, 0xD5	; 213
    17ca:	d1 40       	sbci	r29, 0x01	; 1
    17cc:	f7 e0       	ldi	r31, 0x07	; 7
    17ce:	c9 52       	subi	r28, 0x29	; 41
    17d0:	de 4f       	sbci	r29, 0xFE	; 254
    17d2:	f8 83       	st	Y, r31
    17d4:	c7 5d       	subi	r28, 0xD7	; 215
    17d6:	d1 40       	sbci	r29, 0x01	; 1
    17d8:	cb 52       	subi	r28, 0x2B	; 43
    17da:	de 4f       	sbci	r29, 0xFE	; 254
    17dc:	e8 81       	ld	r30, Y
    17de:	f9 81       	ldd	r31, Y+1	; 0x01
    17e0:	c5 5d       	subi	r28, 0xD5	; 213
    17e2:	d1 40       	sbci	r29, 0x01	; 1
    17e4:	00 80       	ld	r0, Z
    17e6:	cb 52       	subi	r28, 0x2B	; 43
    17e8:	de 4f       	sbci	r29, 0xFE	; 254
    17ea:	28 81       	ld	r18, Y
    17ec:	39 81       	ldd	r19, Y+1	; 0x01
    17ee:	c5 5d       	subi	r28, 0xD5	; 213
    17f0:	d1 40       	sbci	r29, 0x01	; 1
    17f2:	2f 5f       	subi	r18, 0xFF	; 255
    17f4:	3f 4f       	sbci	r19, 0xFF	; 255
    17f6:	cb 52       	subi	r28, 0x2B	; 43
    17f8:	de 4f       	sbci	r29, 0xFE	; 254
    17fa:	39 83       	std	Y+1, r19	; 0x01
    17fc:	28 83       	st	Y, r18
    17fe:	c5 5d       	subi	r28, 0xD5	; 213
    1800:	d1 40       	sbci	r29, 0x01	; 1
    1802:	cd 52       	subi	r28, 0x2D	; 45
    1804:	de 4f       	sbci	r29, 0xFE	; 254
    1806:	e8 81       	ld	r30, Y
    1808:	f9 81       	ldd	r31, Y+1	; 0x01
    180a:	c3 5d       	subi	r28, 0xD3	; 211
    180c:	d1 40       	sbci	r29, 0x01	; 1
    180e:	00 82       	st	Z, r0
    1810:	cd 52       	subi	r28, 0x2D	; 45
    1812:	de 4f       	sbci	r29, 0xFE	; 254
    1814:	28 81       	ld	r18, Y
    1816:	39 81       	ldd	r19, Y+1	; 0x01
    1818:	c3 5d       	subi	r28, 0xD3	; 211
    181a:	d1 40       	sbci	r29, 0x01	; 1
    181c:	2f 5f       	subi	r18, 0xFF	; 255
    181e:	3f 4f       	sbci	r19, 0xFF	; 255
    1820:	cd 52       	subi	r28, 0x2D	; 45
    1822:	de 4f       	sbci	r29, 0xFE	; 254
    1824:	39 83       	std	Y+1, r19	; 0x01
    1826:	28 83       	st	Y, r18
    1828:	c3 5d       	subi	r28, 0xD3	; 211
    182a:	d1 40       	sbci	r29, 0x01	; 1
    182c:	c9 52       	subi	r28, 0x29	; 41
    182e:	de 4f       	sbci	r29, 0xFE	; 254
    1830:	38 81       	ld	r19, Y
    1832:	c7 5d       	subi	r28, 0xD7	; 215
    1834:	d1 40       	sbci	r29, 0x01	; 1
    1836:	31 50       	subi	r19, 0x01	; 1
    1838:	c9 52       	subi	r28, 0x29	; 41
    183a:	de 4f       	sbci	r29, 0xFE	; 254
    183c:	38 83       	st	Y, r19
    183e:	c7 5d       	subi	r28, 0xD7	; 215
    1840:	d1 40       	sbci	r29, 0x01	; 1
    1842:	c9 52       	subi	r28, 0x29	; 41
    1844:	de 4f       	sbci	r29, 0xFE	; 254
    1846:	88 81       	ld	r24, Y
    1848:	c7 5d       	subi	r28, 0xD7	; 215
    184a:	d1 40       	sbci	r29, 0x01	; 1
    184c:	88 23       	and	r24, r24
    184e:	21 f6       	brne	.-120    	; 0x17d8 <__stack+0xf79>
	char CH_Blue_City[] = "41.wav";
    1850:	ce 01       	movw	r24, r28
    1852:	8b 51       	subi	r24, 0x1B	; 27
    1854:	9f 4f       	sbci	r25, 0xFF	; 255
    1856:	c8 52       	subi	r28, 0x28	; 40
    1858:	de 4f       	sbci	r29, 0xFE	; 254
    185a:	99 83       	std	Y+1, r25	; 0x01
    185c:	88 83       	st	Y, r24
    185e:	c8 5d       	subi	r28, 0xD8	; 216
    1860:	d1 40       	sbci	r29, 0x01	; 1
    1862:	e6 e4       	ldi	r30, 0x46	; 70
    1864:	f1 e0       	ldi	r31, 0x01	; 1
    1866:	c6 52       	subi	r28, 0x26	; 38
    1868:	de 4f       	sbci	r29, 0xFE	; 254
    186a:	f9 83       	std	Y+1, r31	; 0x01
    186c:	e8 83       	st	Y, r30
    186e:	ca 5d       	subi	r28, 0xDA	; 218
    1870:	d1 40       	sbci	r29, 0x01	; 1
    1872:	f7 e0       	ldi	r31, 0x07	; 7
    1874:	c4 52       	subi	r28, 0x24	; 36
    1876:	de 4f       	sbci	r29, 0xFE	; 254
    1878:	f8 83       	st	Y, r31
    187a:	cc 5d       	subi	r28, 0xDC	; 220
    187c:	d1 40       	sbci	r29, 0x01	; 1
    187e:	c6 52       	subi	r28, 0x26	; 38
    1880:	de 4f       	sbci	r29, 0xFE	; 254
    1882:	e8 81       	ld	r30, Y
    1884:	f9 81       	ldd	r31, Y+1	; 0x01
    1886:	ca 5d       	subi	r28, 0xDA	; 218
    1888:	d1 40       	sbci	r29, 0x01	; 1
    188a:	00 80       	ld	r0, Z
    188c:	c6 52       	subi	r28, 0x26	; 38
    188e:	de 4f       	sbci	r29, 0xFE	; 254
    1890:	28 81       	ld	r18, Y
    1892:	39 81       	ldd	r19, Y+1	; 0x01
    1894:	ca 5d       	subi	r28, 0xDA	; 218
    1896:	d1 40       	sbci	r29, 0x01	; 1
    1898:	2f 5f       	subi	r18, 0xFF	; 255
    189a:	3f 4f       	sbci	r19, 0xFF	; 255
    189c:	c6 52       	subi	r28, 0x26	; 38
    189e:	de 4f       	sbci	r29, 0xFE	; 254
    18a0:	39 83       	std	Y+1, r19	; 0x01
    18a2:	28 83       	st	Y, r18
    18a4:	ca 5d       	subi	r28, 0xDA	; 218
    18a6:	d1 40       	sbci	r29, 0x01	; 1
    18a8:	c8 52       	subi	r28, 0x28	; 40
    18aa:	de 4f       	sbci	r29, 0xFE	; 254
    18ac:	e8 81       	ld	r30, Y
    18ae:	f9 81       	ldd	r31, Y+1	; 0x01
    18b0:	c8 5d       	subi	r28, 0xD8	; 216
    18b2:	d1 40       	sbci	r29, 0x01	; 1
    18b4:	00 82       	st	Z, r0
    18b6:	c8 52       	subi	r28, 0x28	; 40
    18b8:	de 4f       	sbci	r29, 0xFE	; 254
    18ba:	28 81       	ld	r18, Y
    18bc:	39 81       	ldd	r19, Y+1	; 0x01
    18be:	c8 5d       	subi	r28, 0xD8	; 216
    18c0:	d1 40       	sbci	r29, 0x01	; 1
    18c2:	2f 5f       	subi	r18, 0xFF	; 255
    18c4:	3f 4f       	sbci	r19, 0xFF	; 255
    18c6:	c8 52       	subi	r28, 0x28	; 40
    18c8:	de 4f       	sbci	r29, 0xFE	; 254
    18ca:	39 83       	std	Y+1, r19	; 0x01
    18cc:	28 83       	st	Y, r18
    18ce:	c8 5d       	subi	r28, 0xD8	; 216
    18d0:	d1 40       	sbci	r29, 0x01	; 1
    18d2:	c4 52       	subi	r28, 0x24	; 36
    18d4:	de 4f       	sbci	r29, 0xFE	; 254
    18d6:	38 81       	ld	r19, Y
    18d8:	cc 5d       	subi	r28, 0xDC	; 220
    18da:	d1 40       	sbci	r29, 0x01	; 1
    18dc:	31 50       	subi	r19, 0x01	; 1
    18de:	c4 52       	subi	r28, 0x24	; 36
    18e0:	de 4f       	sbci	r29, 0xFE	; 254
    18e2:	38 83       	st	Y, r19
    18e4:	cc 5d       	subi	r28, 0xDC	; 220
    18e6:	d1 40       	sbci	r29, 0x01	; 1
    18e8:	c4 52       	subi	r28, 0x24	; 36
    18ea:	de 4f       	sbci	r29, 0xFE	; 254
    18ec:	88 81       	ld	r24, Y
    18ee:	cc 5d       	subi	r28, 0xDC	; 220
    18f0:	d1 40       	sbci	r29, 0x01	; 1
    18f2:	88 23       	and	r24, r24
    18f4:	21 f6       	brne	.-120    	; 0x187e <__stack+0x101f>
	char CH_Reduta[] = "42.wav";
    18f6:	ce 01       	movw	r24, r28
    18f8:	84 51       	subi	r24, 0x14	; 20
    18fa:	9f 4f       	sbci	r25, 0xFF	; 255
    18fc:	c3 52       	subi	r28, 0x23	; 35
    18fe:	de 4f       	sbci	r29, 0xFE	; 254
    1900:	99 83       	std	Y+1, r25	; 0x01
    1902:	88 83       	st	Y, r24
    1904:	cd 5d       	subi	r28, 0xDD	; 221
    1906:	d1 40       	sbci	r29, 0x01	; 1
    1908:	ed e4       	ldi	r30, 0x4D	; 77
    190a:	f1 e0       	ldi	r31, 0x01	; 1
    190c:	c1 52       	subi	r28, 0x21	; 33
    190e:	de 4f       	sbci	r29, 0xFE	; 254
    1910:	f9 83       	std	Y+1, r31	; 0x01
    1912:	e8 83       	st	Y, r30
    1914:	cf 5d       	subi	r28, 0xDF	; 223
    1916:	d1 40       	sbci	r29, 0x01	; 1
    1918:	f7 e0       	ldi	r31, 0x07	; 7
    191a:	cf 51       	subi	r28, 0x1F	; 31
    191c:	de 4f       	sbci	r29, 0xFE	; 254
    191e:	f8 83       	st	Y, r31
    1920:	c1 5e       	subi	r28, 0xE1	; 225
    1922:	d1 40       	sbci	r29, 0x01	; 1
    1924:	c1 52       	subi	r28, 0x21	; 33
    1926:	de 4f       	sbci	r29, 0xFE	; 254
    1928:	e8 81       	ld	r30, Y
    192a:	f9 81       	ldd	r31, Y+1	; 0x01
    192c:	cf 5d       	subi	r28, 0xDF	; 223
    192e:	d1 40       	sbci	r29, 0x01	; 1
    1930:	00 80       	ld	r0, Z
    1932:	c1 52       	subi	r28, 0x21	; 33
    1934:	de 4f       	sbci	r29, 0xFE	; 254
    1936:	28 81       	ld	r18, Y
    1938:	39 81       	ldd	r19, Y+1	; 0x01
    193a:	cf 5d       	subi	r28, 0xDF	; 223
    193c:	d1 40       	sbci	r29, 0x01	; 1
    193e:	2f 5f       	subi	r18, 0xFF	; 255
    1940:	3f 4f       	sbci	r19, 0xFF	; 255
    1942:	c1 52       	subi	r28, 0x21	; 33
    1944:	de 4f       	sbci	r29, 0xFE	; 254
    1946:	39 83       	std	Y+1, r19	; 0x01
    1948:	28 83       	st	Y, r18
    194a:	cf 5d       	subi	r28, 0xDF	; 223
    194c:	d1 40       	sbci	r29, 0x01	; 1
    194e:	c3 52       	subi	r28, 0x23	; 35
    1950:	de 4f       	sbci	r29, 0xFE	; 254
    1952:	e8 81       	ld	r30, Y
    1954:	f9 81       	ldd	r31, Y+1	; 0x01
    1956:	cd 5d       	subi	r28, 0xDD	; 221
    1958:	d1 40       	sbci	r29, 0x01	; 1
    195a:	00 82       	st	Z, r0
    195c:	c3 52       	subi	r28, 0x23	; 35
    195e:	de 4f       	sbci	r29, 0xFE	; 254
    1960:	28 81       	ld	r18, Y
    1962:	39 81       	ldd	r19, Y+1	; 0x01
    1964:	cd 5d       	subi	r28, 0xDD	; 221
    1966:	d1 40       	sbci	r29, 0x01	; 1
    1968:	2f 5f       	subi	r18, 0xFF	; 255
    196a:	3f 4f       	sbci	r19, 0xFF	; 255
    196c:	c3 52       	subi	r28, 0x23	; 35
    196e:	de 4f       	sbci	r29, 0xFE	; 254
    1970:	39 83       	std	Y+1, r19	; 0x01
    1972:	28 83       	st	Y, r18
    1974:	cd 5d       	subi	r28, 0xDD	; 221
    1976:	d1 40       	sbci	r29, 0x01	; 1
    1978:	cf 51       	subi	r28, 0x1F	; 31
    197a:	de 4f       	sbci	r29, 0xFE	; 254
    197c:	38 81       	ld	r19, Y
    197e:	c1 5e       	subi	r28, 0xE1	; 225
    1980:	d1 40       	sbci	r29, 0x01	; 1
    1982:	31 50       	subi	r19, 0x01	; 1
    1984:	cf 51       	subi	r28, 0x1F	; 31
    1986:	de 4f       	sbci	r29, 0xFE	; 254
    1988:	38 83       	st	Y, r19
    198a:	c1 5e       	subi	r28, 0xE1	; 225
    198c:	d1 40       	sbci	r29, 0x01	; 1
    198e:	cf 51       	subi	r28, 0x1F	; 31
    1990:	de 4f       	sbci	r29, 0xFE	; 254
    1992:	88 81       	ld	r24, Y
    1994:	c1 5e       	subi	r28, 0xE1	; 225
    1996:	d1 40       	sbci	r29, 0x01	; 1
    1998:	88 23       	and	r24, r24
    199a:	21 f6       	brne	.-120    	; 0x1924 <__stack+0x10c5>
	char Witolin[] = "43.wav";
    199c:	ce 01       	movw	r24, r28
    199e:	8d 50       	subi	r24, 0x0D	; 13
    19a0:	9f 4f       	sbci	r25, 0xFF	; 255
    19a2:	ce 51       	subi	r28, 0x1E	; 30
    19a4:	de 4f       	sbci	r29, 0xFE	; 254
    19a6:	99 83       	std	Y+1, r25	; 0x01
    19a8:	88 83       	st	Y, r24
    19aa:	c2 5e       	subi	r28, 0xE2	; 226
    19ac:	d1 40       	sbci	r29, 0x01	; 1
    19ae:	e4 e5       	ldi	r30, 0x54	; 84
    19b0:	f1 e0       	ldi	r31, 0x01	; 1
    19b2:	cc 51       	subi	r28, 0x1C	; 28
    19b4:	de 4f       	sbci	r29, 0xFE	; 254
    19b6:	f9 83       	std	Y+1, r31	; 0x01
    19b8:	e8 83       	st	Y, r30
    19ba:	c4 5e       	subi	r28, 0xE4	; 228
    19bc:	d1 40       	sbci	r29, 0x01	; 1
    19be:	f7 e0       	ldi	r31, 0x07	; 7
    19c0:	ca 51       	subi	r28, 0x1A	; 26
    19c2:	de 4f       	sbci	r29, 0xFE	; 254
    19c4:	f8 83       	st	Y, r31
    19c6:	c6 5e       	subi	r28, 0xE6	; 230
    19c8:	d1 40       	sbci	r29, 0x01	; 1
    19ca:	cc 51       	subi	r28, 0x1C	; 28
    19cc:	de 4f       	sbci	r29, 0xFE	; 254
    19ce:	e8 81       	ld	r30, Y
    19d0:	f9 81       	ldd	r31, Y+1	; 0x01
    19d2:	c4 5e       	subi	r28, 0xE4	; 228
    19d4:	d1 40       	sbci	r29, 0x01	; 1
    19d6:	00 80       	ld	r0, Z
    19d8:	cc 51       	subi	r28, 0x1C	; 28
    19da:	de 4f       	sbci	r29, 0xFE	; 254
    19dc:	28 81       	ld	r18, Y
    19de:	39 81       	ldd	r19, Y+1	; 0x01
    19e0:	c4 5e       	subi	r28, 0xE4	; 228
    19e2:	d1 40       	sbci	r29, 0x01	; 1
    19e4:	2f 5f       	subi	r18, 0xFF	; 255
    19e6:	3f 4f       	sbci	r19, 0xFF	; 255
    19e8:	cc 51       	subi	r28, 0x1C	; 28
    19ea:	de 4f       	sbci	r29, 0xFE	; 254
    19ec:	39 83       	std	Y+1, r19	; 0x01
    19ee:	28 83       	st	Y, r18
    19f0:	c4 5e       	subi	r28, 0xE4	; 228
    19f2:	d1 40       	sbci	r29, 0x01	; 1
    19f4:	ce 51       	subi	r28, 0x1E	; 30
    19f6:	de 4f       	sbci	r29, 0xFE	; 254
    19f8:	e8 81       	ld	r30, Y
    19fa:	f9 81       	ldd	r31, Y+1	; 0x01
    19fc:	c2 5e       	subi	r28, 0xE2	; 226
    19fe:	d1 40       	sbci	r29, 0x01	; 1
    1a00:	00 82       	st	Z, r0
    1a02:	ce 51       	subi	r28, 0x1E	; 30
    1a04:	de 4f       	sbci	r29, 0xFE	; 254
    1a06:	28 81       	ld	r18, Y
    1a08:	39 81       	ldd	r19, Y+1	; 0x01
    1a0a:	c2 5e       	subi	r28, 0xE2	; 226
    1a0c:	d1 40       	sbci	r29, 0x01	; 1
    1a0e:	2f 5f       	subi	r18, 0xFF	; 255
    1a10:	3f 4f       	sbci	r19, 0xFF	; 255
    1a12:	ce 51       	subi	r28, 0x1E	; 30
    1a14:	de 4f       	sbci	r29, 0xFE	; 254
    1a16:	39 83       	std	Y+1, r19	; 0x01
    1a18:	28 83       	st	Y, r18
    1a1a:	c2 5e       	subi	r28, 0xE2	; 226
    1a1c:	d1 40       	sbci	r29, 0x01	; 1
    1a1e:	ca 51       	subi	r28, 0x1A	; 26
    1a20:	de 4f       	sbci	r29, 0xFE	; 254
    1a22:	38 81       	ld	r19, Y
    1a24:	c6 5e       	subi	r28, 0xE6	; 230
    1a26:	d1 40       	sbci	r29, 0x01	; 1
    1a28:	31 50       	subi	r19, 0x01	; 1
    1a2a:	ca 51       	subi	r28, 0x1A	; 26
    1a2c:	de 4f       	sbci	r29, 0xFE	; 254
    1a2e:	38 83       	st	Y, r19
    1a30:	c6 5e       	subi	r28, 0xE6	; 230
    1a32:	d1 40       	sbci	r29, 0x01	; 1
    1a34:	ca 51       	subi	r28, 0x1A	; 26
    1a36:	de 4f       	sbci	r29, 0xFE	; 254
    1a38:	88 81       	ld	r24, Y
    1a3a:	c6 5e       	subi	r28, 0xE6	; 230
    1a3c:	d1 40       	sbci	r29, 0x01	; 1
    1a3e:	88 23       	and	r24, r24
    1a40:	21 f6       	brne	.-120    	; 0x19ca <__stack+0x116b>
	char Natolin_Pln[] = "44.wav";
    1a42:	ce 01       	movw	r24, r28
    1a44:	86 50       	subi	r24, 0x06	; 6
    1a46:	9f 4f       	sbci	r25, 0xFF	; 255
    1a48:	c9 51       	subi	r28, 0x19	; 25
    1a4a:	de 4f       	sbci	r29, 0xFE	; 254
    1a4c:	99 83       	std	Y+1, r25	; 0x01
    1a4e:	88 83       	st	Y, r24
    1a50:	c7 5e       	subi	r28, 0xE7	; 231
    1a52:	d1 40       	sbci	r29, 0x01	; 1
    1a54:	eb e5       	ldi	r30, 0x5B	; 91
    1a56:	f1 e0       	ldi	r31, 0x01	; 1
    1a58:	c7 51       	subi	r28, 0x17	; 23
    1a5a:	de 4f       	sbci	r29, 0xFE	; 254
    1a5c:	f9 83       	std	Y+1, r31	; 0x01
    1a5e:	e8 83       	st	Y, r30
    1a60:	c9 5e       	subi	r28, 0xE9	; 233
    1a62:	d1 40       	sbci	r29, 0x01	; 1
    1a64:	f7 e0       	ldi	r31, 0x07	; 7
    1a66:	c5 51       	subi	r28, 0x15	; 21
    1a68:	de 4f       	sbci	r29, 0xFE	; 254
    1a6a:	f8 83       	st	Y, r31
    1a6c:	cb 5e       	subi	r28, 0xEB	; 235
    1a6e:	d1 40       	sbci	r29, 0x01	; 1
    1a70:	c7 51       	subi	r28, 0x17	; 23
    1a72:	de 4f       	sbci	r29, 0xFE	; 254
    1a74:	e8 81       	ld	r30, Y
    1a76:	f9 81       	ldd	r31, Y+1	; 0x01
    1a78:	c9 5e       	subi	r28, 0xE9	; 233
    1a7a:	d1 40       	sbci	r29, 0x01	; 1
    1a7c:	00 80       	ld	r0, Z
    1a7e:	c7 51       	subi	r28, 0x17	; 23
    1a80:	de 4f       	sbci	r29, 0xFE	; 254
    1a82:	28 81       	ld	r18, Y
    1a84:	39 81       	ldd	r19, Y+1	; 0x01
    1a86:	c9 5e       	subi	r28, 0xE9	; 233
    1a88:	d1 40       	sbci	r29, 0x01	; 1
    1a8a:	2f 5f       	subi	r18, 0xFF	; 255
    1a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8e:	c7 51       	subi	r28, 0x17	; 23
    1a90:	de 4f       	sbci	r29, 0xFE	; 254
    1a92:	39 83       	std	Y+1, r19	; 0x01
    1a94:	28 83       	st	Y, r18
    1a96:	c9 5e       	subi	r28, 0xE9	; 233
    1a98:	d1 40       	sbci	r29, 0x01	; 1
    1a9a:	c9 51       	subi	r28, 0x19	; 25
    1a9c:	de 4f       	sbci	r29, 0xFE	; 254
    1a9e:	e8 81       	ld	r30, Y
    1aa0:	f9 81       	ldd	r31, Y+1	; 0x01
    1aa2:	c7 5e       	subi	r28, 0xE7	; 231
    1aa4:	d1 40       	sbci	r29, 0x01	; 1
    1aa6:	00 82       	st	Z, r0
    1aa8:	c9 51       	subi	r28, 0x19	; 25
    1aaa:	de 4f       	sbci	r29, 0xFE	; 254
    1aac:	28 81       	ld	r18, Y
    1aae:	39 81       	ldd	r19, Y+1	; 0x01
    1ab0:	c7 5e       	subi	r28, 0xE7	; 231
    1ab2:	d1 40       	sbci	r29, 0x01	; 1
    1ab4:	2f 5f       	subi	r18, 0xFF	; 255
    1ab6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab8:	c9 51       	subi	r28, 0x19	; 25
    1aba:	de 4f       	sbci	r29, 0xFE	; 254
    1abc:	39 83       	std	Y+1, r19	; 0x01
    1abe:	28 83       	st	Y, r18
    1ac0:	c7 5e       	subi	r28, 0xE7	; 231
    1ac2:	d1 40       	sbci	r29, 0x01	; 1
    1ac4:	c5 51       	subi	r28, 0x15	; 21
    1ac6:	de 4f       	sbci	r29, 0xFE	; 254
    1ac8:	38 81       	ld	r19, Y
    1aca:	cb 5e       	subi	r28, 0xEB	; 235
    1acc:	d1 40       	sbci	r29, 0x01	; 1
    1ace:	31 50       	subi	r19, 0x01	; 1
    1ad0:	c5 51       	subi	r28, 0x15	; 21
    1ad2:	de 4f       	sbci	r29, 0xFE	; 254
    1ad4:	38 83       	st	Y, r19
    1ad6:	cb 5e       	subi	r28, 0xEB	; 235
    1ad8:	d1 40       	sbci	r29, 0x01	; 1
    1ada:	c5 51       	subi	r28, 0x15	; 21
    1adc:	de 4f       	sbci	r29, 0xFE	; 254
    1ade:	88 81       	ld	r24, Y
    1ae0:	cb 5e       	subi	r28, 0xEB	; 235
    1ae2:	d1 40       	sbci	r29, 0x01	; 1
    1ae4:	88 23       	and	r24, r24
    1ae6:	21 f6       	brne	.-120    	; 0x1a70 <__stack+0x1211>

	char Konwiktorska[] = "45.wav";
    1ae8:	ce 01       	movw	r24, r28
    1aea:	8f 5f       	subi	r24, 0xFF	; 255
    1aec:	9e 4f       	sbci	r25, 0xFE	; 254
    1aee:	c4 51       	subi	r28, 0x14	; 20
    1af0:	de 4f       	sbci	r29, 0xFE	; 254
    1af2:	99 83       	std	Y+1, r25	; 0x01
    1af4:	88 83       	st	Y, r24
    1af6:	cc 5e       	subi	r28, 0xEC	; 236
    1af8:	d1 40       	sbci	r29, 0x01	; 1
    1afa:	e2 e6       	ldi	r30, 0x62	; 98
    1afc:	f1 e0       	ldi	r31, 0x01	; 1
    1afe:	c2 51       	subi	r28, 0x12	; 18
    1b00:	de 4f       	sbci	r29, 0xFE	; 254
    1b02:	f9 83       	std	Y+1, r31	; 0x01
    1b04:	e8 83       	st	Y, r30
    1b06:	ce 5e       	subi	r28, 0xEE	; 238
    1b08:	d1 40       	sbci	r29, 0x01	; 1
    1b0a:	f7 e0       	ldi	r31, 0x07	; 7
    1b0c:	c0 51       	subi	r28, 0x10	; 16
    1b0e:	de 4f       	sbci	r29, 0xFE	; 254
    1b10:	f8 83       	st	Y, r31
    1b12:	c0 5f       	subi	r28, 0xF0	; 240
    1b14:	d1 40       	sbci	r29, 0x01	; 1
    1b16:	c2 51       	subi	r28, 0x12	; 18
    1b18:	de 4f       	sbci	r29, 0xFE	; 254
    1b1a:	e8 81       	ld	r30, Y
    1b1c:	f9 81       	ldd	r31, Y+1	; 0x01
    1b1e:	ce 5e       	subi	r28, 0xEE	; 238
    1b20:	d1 40       	sbci	r29, 0x01	; 1
    1b22:	00 80       	ld	r0, Z
    1b24:	c2 51       	subi	r28, 0x12	; 18
    1b26:	de 4f       	sbci	r29, 0xFE	; 254
    1b28:	28 81       	ld	r18, Y
    1b2a:	39 81       	ldd	r19, Y+1	; 0x01
    1b2c:	ce 5e       	subi	r28, 0xEE	; 238
    1b2e:	d1 40       	sbci	r29, 0x01	; 1
    1b30:	2f 5f       	subi	r18, 0xFF	; 255
    1b32:	3f 4f       	sbci	r19, 0xFF	; 255
    1b34:	c2 51       	subi	r28, 0x12	; 18
    1b36:	de 4f       	sbci	r29, 0xFE	; 254
    1b38:	39 83       	std	Y+1, r19	; 0x01
    1b3a:	28 83       	st	Y, r18
    1b3c:	ce 5e       	subi	r28, 0xEE	; 238
    1b3e:	d1 40       	sbci	r29, 0x01	; 1
    1b40:	c4 51       	subi	r28, 0x14	; 20
    1b42:	de 4f       	sbci	r29, 0xFE	; 254
    1b44:	e8 81       	ld	r30, Y
    1b46:	f9 81       	ldd	r31, Y+1	; 0x01
    1b48:	cc 5e       	subi	r28, 0xEC	; 236
    1b4a:	d1 40       	sbci	r29, 0x01	; 1
    1b4c:	00 82       	st	Z, r0
    1b4e:	c4 51       	subi	r28, 0x14	; 20
    1b50:	de 4f       	sbci	r29, 0xFE	; 254
    1b52:	28 81       	ld	r18, Y
    1b54:	39 81       	ldd	r19, Y+1	; 0x01
    1b56:	cc 5e       	subi	r28, 0xEC	; 236
    1b58:	d1 40       	sbci	r29, 0x01	; 1
    1b5a:	2f 5f       	subi	r18, 0xFF	; 255
    1b5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5e:	c4 51       	subi	r28, 0x14	; 20
    1b60:	de 4f       	sbci	r29, 0xFE	; 254
    1b62:	39 83       	std	Y+1, r19	; 0x01
    1b64:	28 83       	st	Y, r18
    1b66:	cc 5e       	subi	r28, 0xEC	; 236
    1b68:	d1 40       	sbci	r29, 0x01	; 1
    1b6a:	c0 51       	subi	r28, 0x10	; 16
    1b6c:	de 4f       	sbci	r29, 0xFE	; 254
    1b6e:	38 81       	ld	r19, Y
    1b70:	c0 5f       	subi	r28, 0xF0	; 240
    1b72:	d1 40       	sbci	r29, 0x01	; 1
    1b74:	31 50       	subi	r19, 0x01	; 1
    1b76:	c0 51       	subi	r28, 0x10	; 16
    1b78:	de 4f       	sbci	r29, 0xFE	; 254
    1b7a:	38 83       	st	Y, r19
    1b7c:	c0 5f       	subi	r28, 0xF0	; 240
    1b7e:	d1 40       	sbci	r29, 0x01	; 1
    1b80:	c0 51       	subi	r28, 0x10	; 16
    1b82:	de 4f       	sbci	r29, 0xFE	; 254
    1b84:	88 81       	ld	r24, Y
    1b86:	c0 5f       	subi	r28, 0xF0	; 240
    1b88:	d1 40       	sbci	r29, 0x01	; 1
    1b8a:	88 23       	and	r24, r24
    1b8c:	21 f6       	brne	.-120    	; 0x1b16 <__stack+0x12b7>
	char Metro_Marymont[] = "46.wav";
    1b8e:	ce 01       	movw	r24, r28
    1b90:	88 5f       	subi	r24, 0xF8	; 248
    1b92:	9e 4f       	sbci	r25, 0xFE	; 254
    1b94:	cf 50       	subi	r28, 0x0F	; 15
    1b96:	de 4f       	sbci	r29, 0xFE	; 254
    1b98:	99 83       	std	Y+1, r25	; 0x01
    1b9a:	88 83       	st	Y, r24
    1b9c:	c1 5f       	subi	r28, 0xF1	; 241
    1b9e:	d1 40       	sbci	r29, 0x01	; 1
    1ba0:	e9 e6       	ldi	r30, 0x69	; 105
    1ba2:	f1 e0       	ldi	r31, 0x01	; 1
    1ba4:	cd 50       	subi	r28, 0x0D	; 13
    1ba6:	de 4f       	sbci	r29, 0xFE	; 254
    1ba8:	f9 83       	std	Y+1, r31	; 0x01
    1baa:	e8 83       	st	Y, r30
    1bac:	c3 5f       	subi	r28, 0xF3	; 243
    1bae:	d1 40       	sbci	r29, 0x01	; 1
    1bb0:	f7 e0       	ldi	r31, 0x07	; 7
    1bb2:	cb 50       	subi	r28, 0x0B	; 11
    1bb4:	de 4f       	sbci	r29, 0xFE	; 254
    1bb6:	f8 83       	st	Y, r31
    1bb8:	c5 5f       	subi	r28, 0xF5	; 245
    1bba:	d1 40       	sbci	r29, 0x01	; 1
    1bbc:	cd 50       	subi	r28, 0x0D	; 13
    1bbe:	de 4f       	sbci	r29, 0xFE	; 254
    1bc0:	e8 81       	ld	r30, Y
    1bc2:	f9 81       	ldd	r31, Y+1	; 0x01
    1bc4:	c3 5f       	subi	r28, 0xF3	; 243
    1bc6:	d1 40       	sbci	r29, 0x01	; 1
    1bc8:	00 80       	ld	r0, Z
    1bca:	cd 50       	subi	r28, 0x0D	; 13
    1bcc:	de 4f       	sbci	r29, 0xFE	; 254
    1bce:	28 81       	ld	r18, Y
    1bd0:	39 81       	ldd	r19, Y+1	; 0x01
    1bd2:	c3 5f       	subi	r28, 0xF3	; 243
    1bd4:	d1 40       	sbci	r29, 0x01	; 1
    1bd6:	2f 5f       	subi	r18, 0xFF	; 255
    1bd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bda:	cd 50       	subi	r28, 0x0D	; 13
    1bdc:	de 4f       	sbci	r29, 0xFE	; 254
    1bde:	39 83       	std	Y+1, r19	; 0x01
    1be0:	28 83       	st	Y, r18
    1be2:	c3 5f       	subi	r28, 0xF3	; 243
    1be4:	d1 40       	sbci	r29, 0x01	; 1
    1be6:	cf 50       	subi	r28, 0x0F	; 15
    1be8:	de 4f       	sbci	r29, 0xFE	; 254
    1bea:	e8 81       	ld	r30, Y
    1bec:	f9 81       	ldd	r31, Y+1	; 0x01
    1bee:	c1 5f       	subi	r28, 0xF1	; 241
    1bf0:	d1 40       	sbci	r29, 0x01	; 1
    1bf2:	00 82       	st	Z, r0
    1bf4:	cf 50       	subi	r28, 0x0F	; 15
    1bf6:	de 4f       	sbci	r29, 0xFE	; 254
    1bf8:	28 81       	ld	r18, Y
    1bfa:	39 81       	ldd	r19, Y+1	; 0x01
    1bfc:	c1 5f       	subi	r28, 0xF1	; 241
    1bfe:	d1 40       	sbci	r29, 0x01	; 1
    1c00:	2f 5f       	subi	r18, 0xFF	; 255
    1c02:	3f 4f       	sbci	r19, 0xFF	; 255
    1c04:	cf 50       	subi	r28, 0x0F	; 15
    1c06:	de 4f       	sbci	r29, 0xFE	; 254
    1c08:	39 83       	std	Y+1, r19	; 0x01
    1c0a:	28 83       	st	Y, r18
    1c0c:	c1 5f       	subi	r28, 0xF1	; 241
    1c0e:	d1 40       	sbci	r29, 0x01	; 1
    1c10:	cb 50       	subi	r28, 0x0B	; 11
    1c12:	de 4f       	sbci	r29, 0xFE	; 254
    1c14:	38 81       	ld	r19, Y
    1c16:	c5 5f       	subi	r28, 0xF5	; 245
    1c18:	d1 40       	sbci	r29, 0x01	; 1
    1c1a:	31 50       	subi	r19, 0x01	; 1
    1c1c:	cb 50       	subi	r28, 0x0B	; 11
    1c1e:	de 4f       	sbci	r29, 0xFE	; 254
    1c20:	38 83       	st	Y, r19
    1c22:	c5 5f       	subi	r28, 0xF5	; 245
    1c24:	d1 40       	sbci	r29, 0x01	; 1
    1c26:	cb 50       	subi	r28, 0x0B	; 11
    1c28:	de 4f       	sbci	r29, 0xFE	; 254
    1c2a:	88 81       	ld	r24, Y
    1c2c:	c5 5f       	subi	r28, 0xF5	; 245
    1c2e:	d1 40       	sbci	r29, 0x01	; 1
    1c30:	88 23       	and	r24, r24
    1c32:	21 f6       	brne	.-120    	; 0x1bbc <__stack+0x135d>
	char Dw_Wsch_Kijowska[] = "47.wav";
    1c34:	ce 01       	movw	r24, r28
    1c36:	81 5f       	subi	r24, 0xF1	; 241
    1c38:	9e 4f       	sbci	r25, 0xFE	; 254
    1c3a:	ca 50       	subi	r28, 0x0A	; 10
    1c3c:	de 4f       	sbci	r29, 0xFE	; 254
    1c3e:	99 83       	std	Y+1, r25	; 0x01
    1c40:	88 83       	st	Y, r24
    1c42:	c6 5f       	subi	r28, 0xF6	; 246
    1c44:	d1 40       	sbci	r29, 0x01	; 1
    1c46:	e0 e7       	ldi	r30, 0x70	; 112
    1c48:	f1 e0       	ldi	r31, 0x01	; 1
    1c4a:	c8 50       	subi	r28, 0x08	; 8
    1c4c:	de 4f       	sbci	r29, 0xFE	; 254
    1c4e:	f9 83       	std	Y+1, r31	; 0x01
    1c50:	e8 83       	st	Y, r30
    1c52:	c8 5f       	subi	r28, 0xF8	; 248
    1c54:	d1 40       	sbci	r29, 0x01	; 1
    1c56:	f7 e0       	ldi	r31, 0x07	; 7
    1c58:	c6 50       	subi	r28, 0x06	; 6
    1c5a:	de 4f       	sbci	r29, 0xFE	; 254
    1c5c:	f8 83       	st	Y, r31
    1c5e:	ca 5f       	subi	r28, 0xFA	; 250
    1c60:	d1 40       	sbci	r29, 0x01	; 1
    1c62:	c8 50       	subi	r28, 0x08	; 8
    1c64:	de 4f       	sbci	r29, 0xFE	; 254
    1c66:	e8 81       	ld	r30, Y
    1c68:	f9 81       	ldd	r31, Y+1	; 0x01
    1c6a:	c8 5f       	subi	r28, 0xF8	; 248
    1c6c:	d1 40       	sbci	r29, 0x01	; 1
    1c6e:	00 80       	ld	r0, Z
    1c70:	c8 50       	subi	r28, 0x08	; 8
    1c72:	de 4f       	sbci	r29, 0xFE	; 254
    1c74:	28 81       	ld	r18, Y
    1c76:	39 81       	ldd	r19, Y+1	; 0x01
    1c78:	c8 5f       	subi	r28, 0xF8	; 248
    1c7a:	d1 40       	sbci	r29, 0x01	; 1
    1c7c:	2f 5f       	subi	r18, 0xFF	; 255
    1c7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c80:	c8 50       	subi	r28, 0x08	; 8
    1c82:	de 4f       	sbci	r29, 0xFE	; 254
    1c84:	39 83       	std	Y+1, r19	; 0x01
    1c86:	28 83       	st	Y, r18
    1c88:	c8 5f       	subi	r28, 0xF8	; 248
    1c8a:	d1 40       	sbci	r29, 0x01	; 1
    1c8c:	ca 50       	subi	r28, 0x0A	; 10
    1c8e:	de 4f       	sbci	r29, 0xFE	; 254
    1c90:	e8 81       	ld	r30, Y
    1c92:	f9 81       	ldd	r31, Y+1	; 0x01
    1c94:	c6 5f       	subi	r28, 0xF6	; 246
    1c96:	d1 40       	sbci	r29, 0x01	; 1
    1c98:	00 82       	st	Z, r0
    1c9a:	ca 50       	subi	r28, 0x0A	; 10
    1c9c:	de 4f       	sbci	r29, 0xFE	; 254
    1c9e:	28 81       	ld	r18, Y
    1ca0:	39 81       	ldd	r19, Y+1	; 0x01
    1ca2:	c6 5f       	subi	r28, 0xF6	; 246
    1ca4:	d1 40       	sbci	r29, 0x01	; 1
    1ca6:	2f 5f       	subi	r18, 0xFF	; 255
    1ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    1caa:	ca 50       	subi	r28, 0x0A	; 10
    1cac:	de 4f       	sbci	r29, 0xFE	; 254
    1cae:	39 83       	std	Y+1, r19	; 0x01
    1cb0:	28 83       	st	Y, r18
    1cb2:	c6 5f       	subi	r28, 0xF6	; 246
    1cb4:	d1 40       	sbci	r29, 0x01	; 1
    1cb6:	c6 50       	subi	r28, 0x06	; 6
    1cb8:	de 4f       	sbci	r29, 0xFE	; 254
    1cba:	38 81       	ld	r19, Y
    1cbc:	ca 5f       	subi	r28, 0xFA	; 250
    1cbe:	d1 40       	sbci	r29, 0x01	; 1
    1cc0:	31 50       	subi	r19, 0x01	; 1
    1cc2:	c6 50       	subi	r28, 0x06	; 6
    1cc4:	de 4f       	sbci	r29, 0xFE	; 254
    1cc6:	38 83       	st	Y, r19
    1cc8:	ca 5f       	subi	r28, 0xFA	; 250
    1cca:	d1 40       	sbci	r29, 0x01	; 1
    1ccc:	c6 50       	subi	r28, 0x06	; 6
    1cce:	de 4f       	sbci	r29, 0xFE	; 254
    1cd0:	88 81       	ld	r24, Y
    1cd2:	ca 5f       	subi	r28, 0xFA	; 250
    1cd4:	d1 40       	sbci	r29, 0x01	; 1
    1cd6:	88 23       	and	r24, r24
    1cd8:	21 f6       	brne	.-120    	; 0x1c62 <__stack+0x1403>
	char Annopol[] = "48.wav";
    1cda:	ce 01       	movw	r24, r28
    1cdc:	8a 5e       	subi	r24, 0xEA	; 234
    1cde:	9e 4f       	sbci	r25, 0xFE	; 254
    1ce0:	c5 50       	subi	r28, 0x05	; 5
    1ce2:	de 4f       	sbci	r29, 0xFE	; 254
    1ce4:	99 83       	std	Y+1, r25	; 0x01
    1ce6:	88 83       	st	Y, r24
    1ce8:	cb 5f       	subi	r28, 0xFB	; 251
    1cea:	d1 40       	sbci	r29, 0x01	; 1
    1cec:	e7 e7       	ldi	r30, 0x77	; 119
    1cee:	f1 e0       	ldi	r31, 0x01	; 1
    1cf0:	c3 50       	subi	r28, 0x03	; 3
    1cf2:	de 4f       	sbci	r29, 0xFE	; 254
    1cf4:	f9 83       	std	Y+1, r31	; 0x01
    1cf6:	e8 83       	st	Y, r30
    1cf8:	cd 5f       	subi	r28, 0xFD	; 253
    1cfa:	d1 40       	sbci	r29, 0x01	; 1
    1cfc:	f7 e0       	ldi	r31, 0x07	; 7
    1cfe:	c1 50       	subi	r28, 0x01	; 1
    1d00:	de 4f       	sbci	r29, 0xFE	; 254
    1d02:	f8 83       	st	Y, r31
    1d04:	cf 5f       	subi	r28, 0xFF	; 255
    1d06:	d1 40       	sbci	r29, 0x01	; 1
    1d08:	c3 50       	subi	r28, 0x03	; 3
    1d0a:	de 4f       	sbci	r29, 0xFE	; 254
    1d0c:	e8 81       	ld	r30, Y
    1d0e:	f9 81       	ldd	r31, Y+1	; 0x01
    1d10:	cd 5f       	subi	r28, 0xFD	; 253
    1d12:	d1 40       	sbci	r29, 0x01	; 1
    1d14:	00 80       	ld	r0, Z
    1d16:	c3 50       	subi	r28, 0x03	; 3
    1d18:	de 4f       	sbci	r29, 0xFE	; 254
    1d1a:	28 81       	ld	r18, Y
    1d1c:	39 81       	ldd	r19, Y+1	; 0x01
    1d1e:	cd 5f       	subi	r28, 0xFD	; 253
    1d20:	d1 40       	sbci	r29, 0x01	; 1
    1d22:	2f 5f       	subi	r18, 0xFF	; 255
    1d24:	3f 4f       	sbci	r19, 0xFF	; 255
    1d26:	c3 50       	subi	r28, 0x03	; 3
    1d28:	de 4f       	sbci	r29, 0xFE	; 254
    1d2a:	39 83       	std	Y+1, r19	; 0x01
    1d2c:	28 83       	st	Y, r18
    1d2e:	cd 5f       	subi	r28, 0xFD	; 253
    1d30:	d1 40       	sbci	r29, 0x01	; 1
    1d32:	c5 50       	subi	r28, 0x05	; 5
    1d34:	de 4f       	sbci	r29, 0xFE	; 254
    1d36:	e8 81       	ld	r30, Y
    1d38:	f9 81       	ldd	r31, Y+1	; 0x01
    1d3a:	cb 5f       	subi	r28, 0xFB	; 251
    1d3c:	d1 40       	sbci	r29, 0x01	; 1
    1d3e:	00 82       	st	Z, r0
    1d40:	c5 50       	subi	r28, 0x05	; 5
    1d42:	de 4f       	sbci	r29, 0xFE	; 254
    1d44:	28 81       	ld	r18, Y
    1d46:	39 81       	ldd	r19, Y+1	; 0x01
    1d48:	cb 5f       	subi	r28, 0xFB	; 251
    1d4a:	d1 40       	sbci	r29, 0x01	; 1
    1d4c:	2f 5f       	subi	r18, 0xFF	; 255
    1d4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d50:	c5 50       	subi	r28, 0x05	; 5
    1d52:	de 4f       	sbci	r29, 0xFE	; 254
    1d54:	39 83       	std	Y+1, r19	; 0x01
    1d56:	28 83       	st	Y, r18
    1d58:	cb 5f       	subi	r28, 0xFB	; 251
    1d5a:	d1 40       	sbci	r29, 0x01	; 1
    1d5c:	c1 50       	subi	r28, 0x01	; 1
    1d5e:	de 4f       	sbci	r29, 0xFE	; 254
    1d60:	38 81       	ld	r19, Y
    1d62:	cf 5f       	subi	r28, 0xFF	; 255
    1d64:	d1 40       	sbci	r29, 0x01	; 1
    1d66:	31 50       	subi	r19, 0x01	; 1
    1d68:	c1 50       	subi	r28, 0x01	; 1
    1d6a:	de 4f       	sbci	r29, 0xFE	; 254
    1d6c:	38 83       	st	Y, r19
    1d6e:	cf 5f       	subi	r28, 0xFF	; 255
    1d70:	d1 40       	sbci	r29, 0x01	; 1
    1d72:	c1 50       	subi	r28, 0x01	; 1
    1d74:	de 4f       	sbci	r29, 0xFE	; 254
    1d76:	88 81       	ld	r24, Y
    1d78:	cf 5f       	subi	r28, 0xFF	; 255
    1d7a:	d1 40       	sbci	r29, 0x01	; 1
    1d7c:	88 23       	and	r24, r24
    1d7e:	21 f6       	brne	.-120    	; 0x1d08 <__stack+0x14a9>
	char Banacha[] = "49.wav";
    1d80:	ce 01       	movw	r24, r28
    1d82:	83 5e       	subi	r24, 0xE3	; 227
    1d84:	9e 4f       	sbci	r25, 0xFE	; 254
    1d86:	c0 50       	subi	r28, 0x00	; 0
    1d88:	de 4f       	sbci	r29, 0xFE	; 254
    1d8a:	99 83       	std	Y+1, r25	; 0x01
    1d8c:	88 83       	st	Y, r24
    1d8e:	c0 50       	subi	r28, 0x00	; 0
    1d90:	d2 40       	sbci	r29, 0x02	; 2
    1d92:	ee e7       	ldi	r30, 0x7E	; 126
    1d94:	f1 e0       	ldi	r31, 0x01	; 1
    1d96:	ce 5f       	subi	r28, 0xFE	; 254
    1d98:	dd 4f       	sbci	r29, 0xFD	; 253
    1d9a:	f9 83       	std	Y+1, r31	; 0x01
    1d9c:	e8 83       	st	Y, r30
    1d9e:	c2 50       	subi	r28, 0x02	; 2
    1da0:	d2 40       	sbci	r29, 0x02	; 2
    1da2:	f7 e0       	ldi	r31, 0x07	; 7
    1da4:	cc 5f       	subi	r28, 0xFC	; 252
    1da6:	dd 4f       	sbci	r29, 0xFD	; 253
    1da8:	f8 83       	st	Y, r31
    1daa:	c4 50       	subi	r28, 0x04	; 4
    1dac:	d2 40       	sbci	r29, 0x02	; 2
    1dae:	ce 5f       	subi	r28, 0xFE	; 254
    1db0:	dd 4f       	sbci	r29, 0xFD	; 253
    1db2:	e8 81       	ld	r30, Y
    1db4:	f9 81       	ldd	r31, Y+1	; 0x01
    1db6:	c2 50       	subi	r28, 0x02	; 2
    1db8:	d2 40       	sbci	r29, 0x02	; 2
    1dba:	00 80       	ld	r0, Z
    1dbc:	ce 5f       	subi	r28, 0xFE	; 254
    1dbe:	dd 4f       	sbci	r29, 0xFD	; 253
    1dc0:	28 81       	ld	r18, Y
    1dc2:	39 81       	ldd	r19, Y+1	; 0x01
    1dc4:	c2 50       	subi	r28, 0x02	; 2
    1dc6:	d2 40       	sbci	r29, 0x02	; 2
    1dc8:	2f 5f       	subi	r18, 0xFF	; 255
    1dca:	3f 4f       	sbci	r19, 0xFF	; 255
    1dcc:	ce 5f       	subi	r28, 0xFE	; 254
    1dce:	dd 4f       	sbci	r29, 0xFD	; 253
    1dd0:	39 83       	std	Y+1, r19	; 0x01
    1dd2:	28 83       	st	Y, r18
    1dd4:	c2 50       	subi	r28, 0x02	; 2
    1dd6:	d2 40       	sbci	r29, 0x02	; 2
    1dd8:	c0 50       	subi	r28, 0x00	; 0
    1dda:	de 4f       	sbci	r29, 0xFE	; 254
    1ddc:	e8 81       	ld	r30, Y
    1dde:	f9 81       	ldd	r31, Y+1	; 0x01
    1de0:	c0 50       	subi	r28, 0x00	; 0
    1de2:	d2 40       	sbci	r29, 0x02	; 2
    1de4:	00 82       	st	Z, r0
    1de6:	c0 50       	subi	r28, 0x00	; 0
    1de8:	de 4f       	sbci	r29, 0xFE	; 254
    1dea:	28 81       	ld	r18, Y
    1dec:	39 81       	ldd	r19, Y+1	; 0x01
    1dee:	c0 50       	subi	r28, 0x00	; 0
    1df0:	d2 40       	sbci	r29, 0x02	; 2
    1df2:	2f 5f       	subi	r18, 0xFF	; 255
    1df4:	3f 4f       	sbci	r19, 0xFF	; 255
    1df6:	c0 50       	subi	r28, 0x00	; 0
    1df8:	de 4f       	sbci	r29, 0xFE	; 254
    1dfa:	39 83       	std	Y+1, r19	; 0x01
    1dfc:	28 83       	st	Y, r18
    1dfe:	c0 50       	subi	r28, 0x00	; 0
    1e00:	d2 40       	sbci	r29, 0x02	; 2
    1e02:	cc 5f       	subi	r28, 0xFC	; 252
    1e04:	dd 4f       	sbci	r29, 0xFD	; 253
    1e06:	38 81       	ld	r19, Y
    1e08:	c4 50       	subi	r28, 0x04	; 4
    1e0a:	d2 40       	sbci	r29, 0x02	; 2
    1e0c:	31 50       	subi	r19, 0x01	; 1
    1e0e:	cc 5f       	subi	r28, 0xFC	; 252
    1e10:	dd 4f       	sbci	r29, 0xFD	; 253
    1e12:	38 83       	st	Y, r19
    1e14:	c4 50       	subi	r28, 0x04	; 4
    1e16:	d2 40       	sbci	r29, 0x02	; 2
    1e18:	cc 5f       	subi	r28, 0xFC	; 252
    1e1a:	dd 4f       	sbci	r29, 0xFD	; 253
    1e1c:	88 81       	ld	r24, Y
    1e1e:	c4 50       	subi	r28, 0x04	; 4
    1e20:	d2 40       	sbci	r29, 0x02	; 2
    1e22:	88 23       	and	r24, r24
    1e24:	21 f6       	brne	.-120    	; 0x1dae <__stack+0x154f>
	char Lipkow_Muzeum[] = "50.wav";
    1e26:	ce 01       	movw	r24, r28
    1e28:	8c 5d       	subi	r24, 0xDC	; 220
    1e2a:	9e 4f       	sbci	r25, 0xFE	; 254
    1e2c:	cb 5f       	subi	r28, 0xFB	; 251
    1e2e:	dd 4f       	sbci	r29, 0xFD	; 253
    1e30:	99 83       	std	Y+1, r25	; 0x01
    1e32:	88 83       	st	Y, r24
    1e34:	c5 50       	subi	r28, 0x05	; 5
    1e36:	d2 40       	sbci	r29, 0x02	; 2
    1e38:	e5 e8       	ldi	r30, 0x85	; 133
    1e3a:	f1 e0       	ldi	r31, 0x01	; 1
    1e3c:	c9 5f       	subi	r28, 0xF9	; 249
    1e3e:	dd 4f       	sbci	r29, 0xFD	; 253
    1e40:	f9 83       	std	Y+1, r31	; 0x01
    1e42:	e8 83       	st	Y, r30
    1e44:	c7 50       	subi	r28, 0x07	; 7
    1e46:	d2 40       	sbci	r29, 0x02	; 2
    1e48:	f7 e0       	ldi	r31, 0x07	; 7
    1e4a:	c7 5f       	subi	r28, 0xF7	; 247
    1e4c:	dd 4f       	sbci	r29, 0xFD	; 253
    1e4e:	f8 83       	st	Y, r31
    1e50:	c9 50       	subi	r28, 0x09	; 9
    1e52:	d2 40       	sbci	r29, 0x02	; 2
    1e54:	c9 5f       	subi	r28, 0xF9	; 249
    1e56:	dd 4f       	sbci	r29, 0xFD	; 253
    1e58:	e8 81       	ld	r30, Y
    1e5a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e5c:	c7 50       	subi	r28, 0x07	; 7
    1e5e:	d2 40       	sbci	r29, 0x02	; 2
    1e60:	00 80       	ld	r0, Z
    1e62:	c9 5f       	subi	r28, 0xF9	; 249
    1e64:	dd 4f       	sbci	r29, 0xFD	; 253
    1e66:	28 81       	ld	r18, Y
    1e68:	39 81       	ldd	r19, Y+1	; 0x01
    1e6a:	c7 50       	subi	r28, 0x07	; 7
    1e6c:	d2 40       	sbci	r29, 0x02	; 2
    1e6e:	2f 5f       	subi	r18, 0xFF	; 255
    1e70:	3f 4f       	sbci	r19, 0xFF	; 255
    1e72:	c9 5f       	subi	r28, 0xF9	; 249
    1e74:	dd 4f       	sbci	r29, 0xFD	; 253
    1e76:	39 83       	std	Y+1, r19	; 0x01
    1e78:	28 83       	st	Y, r18
    1e7a:	c7 50       	subi	r28, 0x07	; 7
    1e7c:	d2 40       	sbci	r29, 0x02	; 2
    1e7e:	cb 5f       	subi	r28, 0xFB	; 251
    1e80:	dd 4f       	sbci	r29, 0xFD	; 253
    1e82:	e8 81       	ld	r30, Y
    1e84:	f9 81       	ldd	r31, Y+1	; 0x01
    1e86:	c5 50       	subi	r28, 0x05	; 5
    1e88:	d2 40       	sbci	r29, 0x02	; 2
    1e8a:	00 82       	st	Z, r0
    1e8c:	cb 5f       	subi	r28, 0xFB	; 251
    1e8e:	dd 4f       	sbci	r29, 0xFD	; 253
    1e90:	28 81       	ld	r18, Y
    1e92:	39 81       	ldd	r19, Y+1	; 0x01
    1e94:	c5 50       	subi	r28, 0x05	; 5
    1e96:	d2 40       	sbci	r29, 0x02	; 2
    1e98:	2f 5f       	subi	r18, 0xFF	; 255
    1e9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e9c:	cb 5f       	subi	r28, 0xFB	; 251
    1e9e:	dd 4f       	sbci	r29, 0xFD	; 253
    1ea0:	39 83       	std	Y+1, r19	; 0x01
    1ea2:	28 83       	st	Y, r18
    1ea4:	c5 50       	subi	r28, 0x05	; 5
    1ea6:	d2 40       	sbci	r29, 0x02	; 2
    1ea8:	c7 5f       	subi	r28, 0xF7	; 247
    1eaa:	dd 4f       	sbci	r29, 0xFD	; 253
    1eac:	38 81       	ld	r19, Y
    1eae:	c9 50       	subi	r28, 0x09	; 9
    1eb0:	d2 40       	sbci	r29, 0x02	; 2
    1eb2:	31 50       	subi	r19, 0x01	; 1
    1eb4:	c7 5f       	subi	r28, 0xF7	; 247
    1eb6:	dd 4f       	sbci	r29, 0xFD	; 253
    1eb8:	38 83       	st	Y, r19
    1eba:	c9 50       	subi	r28, 0x09	; 9
    1ebc:	d2 40       	sbci	r29, 0x02	; 2
    1ebe:	c7 5f       	subi	r28, 0xF7	; 247
    1ec0:	dd 4f       	sbci	r29, 0xFD	; 253
    1ec2:	88 81       	ld	r24, Y
    1ec4:	c9 50       	subi	r28, 0x09	; 9
    1ec6:	d2 40       	sbci	r29, 0x02	; 2
    1ec8:	88 23       	and	r24, r24
    1eca:	21 f6       	brne	.-120    	; 0x1e54 <__stack+0x15f5>


	switch (komunikat) {
    1ecc:	fe 01       	movw	r30, r28
    1ece:	e5 5d       	subi	r30, 0xD5	; 213
    1ed0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ed2:	80 81       	ld	r24, Z
    1ed4:	e8 2f       	mov	r30, r24
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	c4 5d       	subi	r28, 0xD4	; 212
    1eda:	de 4f       	sbci	r29, 0xFE	; 254
    1edc:	f9 83       	std	Y+1, r31	; 0x01
    1ede:	e8 83       	st	Y, r30
    1ee0:	cc 52       	subi	r28, 0x2C	; 44
    1ee2:	d1 40       	sbci	r29, 0x01	; 1
    1ee4:	c4 5d       	subi	r28, 0xD4	; 212
    1ee6:	de 4f       	sbci	r29, 0xFE	; 254
    1ee8:	28 81       	ld	r18, Y
    1eea:	39 81       	ldd	r19, Y+1	; 0x01
    1eec:	cc 52       	subi	r28, 0x2C	; 44
    1eee:	d1 40       	sbci	r29, 0x01	; 1
    1ef0:	25 31       	cpi	r18, 0x15	; 21
    1ef2:	31 05       	cpc	r19, r1
    1ef4:	09 f4       	brne	.+2      	; 0x1ef8 <__stack+0x1699>
    1ef6:	b0 c2       	rjmp	.+1376   	; 0x2458 <__stack+0x1bf9>
    1ef8:	c4 5d       	subi	r28, 0xD4	; 212
    1efa:	de 4f       	sbci	r29, 0xFE	; 254
    1efc:	88 81       	ld	r24, Y
    1efe:	99 81       	ldd	r25, Y+1	; 0x01
    1f00:	cc 52       	subi	r28, 0x2C	; 44
    1f02:	d1 40       	sbci	r29, 0x01	; 1
    1f04:	86 31       	cpi	r24, 0x16	; 22
    1f06:	91 05       	cpc	r25, r1
    1f08:	0c f0       	brlt	.+2      	; 0x1f0c <__stack+0x16ad>
    1f0a:	0f c1       	rjmp	.+542    	; 0x212a <__stack+0x18cb>
    1f0c:	c4 5d       	subi	r28, 0xD4	; 212
    1f0e:	de 4f       	sbci	r29, 0xFE	; 254
    1f10:	e8 81       	ld	r30, Y
    1f12:	f9 81       	ldd	r31, Y+1	; 0x01
    1f14:	cc 52       	subi	r28, 0x2C	; 44
    1f16:	d1 40       	sbci	r29, 0x01	; 1
    1f18:	ea 30       	cpi	r30, 0x0A	; 10
    1f1a:	f1 05       	cpc	r31, r1
    1f1c:	09 f4       	brne	.+2      	; 0x1f20 <__stack+0x16c1>
    1f1e:	5b c2       	rjmp	.+1206   	; 0x23d6 <__stack+0x1b77>
    1f20:	c4 5d       	subi	r28, 0xD4	; 212
    1f22:	de 4f       	sbci	r29, 0xFE	; 254
    1f24:	28 81       	ld	r18, Y
    1f26:	39 81       	ldd	r19, Y+1	; 0x01
    1f28:	cc 52       	subi	r28, 0x2C	; 44
    1f2a:	d1 40       	sbci	r29, 0x01	; 1
    1f2c:	2b 30       	cpi	r18, 0x0B	; 11
    1f2e:	31 05       	cpc	r19, r1
    1f30:	0c f0       	brlt	.+2      	; 0x1f34 <__stack+0x16d5>
    1f32:	82 c0       	rjmp	.+260    	; 0x2038 <__stack+0x17d9>
    1f34:	c4 5d       	subi	r28, 0xD4	; 212
    1f36:	de 4f       	sbci	r29, 0xFE	; 254
    1f38:	88 81       	ld	r24, Y
    1f3a:	99 81       	ldd	r25, Y+1	; 0x01
    1f3c:	cc 52       	subi	r28, 0x2C	; 44
    1f3e:	d1 40       	sbci	r29, 0x01	; 1
    1f40:	84 30       	cpi	r24, 0x04	; 4
    1f42:	91 05       	cpc	r25, r1
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <__stack+0x16e9>
    1f46:	29 c2       	rjmp	.+1106   	; 0x239a <__stack+0x1b3b>
    1f48:	c4 5d       	subi	r28, 0xD4	; 212
    1f4a:	de 4f       	sbci	r29, 0xFE	; 254
    1f4c:	e8 81       	ld	r30, Y
    1f4e:	f9 81       	ldd	r31, Y+1	; 0x01
    1f50:	cc 52       	subi	r28, 0x2C	; 44
    1f52:	d1 40       	sbci	r29, 0x01	; 1
    1f54:	e5 30       	cpi	r30, 0x05	; 5
    1f56:	f1 05       	cpc	r31, r1
    1f58:	94 f5       	brge	.+100    	; 0x1fbe <__stack+0x175f>
    1f5a:	c4 5d       	subi	r28, 0xD4	; 212
    1f5c:	de 4f       	sbci	r29, 0xFE	; 254
    1f5e:	28 81       	ld	r18, Y
    1f60:	39 81       	ldd	r19, Y+1	; 0x01
    1f62:	cc 52       	subi	r28, 0x2C	; 44
    1f64:	d1 40       	sbci	r29, 0x01	; 1
    1f66:	21 30       	cpi	r18, 0x01	; 1
    1f68:	31 05       	cpc	r19, r1
    1f6a:	09 f4       	brne	.+2      	; 0x1f6e <__stack+0x170f>
    1f6c:	07 c2       	rjmp	.+1038   	; 0x237c <__stack+0x1b1d>
    1f6e:	c4 5d       	subi	r28, 0xD4	; 212
    1f70:	de 4f       	sbci	r29, 0xFE	; 254
    1f72:	88 81       	ld	r24, Y
    1f74:	99 81       	ldd	r25, Y+1	; 0x01
    1f76:	cc 52       	subi	r28, 0x2C	; 44
    1f78:	d1 40       	sbci	r29, 0x01	; 1
    1f7a:	82 30       	cpi	r24, 0x02	; 2
    1f7c:	91 05       	cpc	r25, r1
    1f7e:	54 f4       	brge	.+20     	; 0x1f94 <__stack+0x1735>
    1f80:	c4 5d       	subi	r28, 0xD4	; 212
    1f82:	de 4f       	sbci	r29, 0xFE	; 254
    1f84:	e8 81       	ld	r30, Y
    1f86:	f9 81       	ldd	r31, Y+1	; 0x01
    1f88:	cc 52       	subi	r28, 0x2C	; 44
    1f8a:	d1 40       	sbci	r29, 0x01	; 1
    1f8c:	30 97       	sbiw	r30, 0x00	; 0
    1f8e:	09 f4       	brne	.+2      	; 0x1f92 <__stack+0x1733>
    1f90:	f0 c1       	rjmp	.+992    	; 0x2372 <__stack+0x1b13>
    1f92:	eb c2       	rjmp	.+1494   	; 0x256a <__stack+0x1d0b>
    1f94:	c4 5d       	subi	r28, 0xD4	; 212
    1f96:	de 4f       	sbci	r29, 0xFE	; 254
    1f98:	28 81       	ld	r18, Y
    1f9a:	39 81       	ldd	r19, Y+1	; 0x01
    1f9c:	cc 52       	subi	r28, 0x2C	; 44
    1f9e:	d1 40       	sbci	r29, 0x01	; 1
    1fa0:	22 30       	cpi	r18, 0x02	; 2
    1fa2:	31 05       	cpc	r19, r1
    1fa4:	09 f4       	brne	.+2      	; 0x1fa8 <__stack+0x1749>
    1fa6:	ef c1       	rjmp	.+990    	; 0x2386 <__stack+0x1b27>
    1fa8:	c4 5d       	subi	r28, 0xD4	; 212
    1faa:	de 4f       	sbci	r29, 0xFE	; 254
    1fac:	88 81       	ld	r24, Y
    1fae:	99 81       	ldd	r25, Y+1	; 0x01
    1fb0:	cc 52       	subi	r28, 0x2C	; 44
    1fb2:	d1 40       	sbci	r29, 0x01	; 1
    1fb4:	83 30       	cpi	r24, 0x03	; 3
    1fb6:	91 05       	cpc	r25, r1
    1fb8:	09 f4       	brne	.+2      	; 0x1fbc <__stack+0x175d>
    1fba:	ea c1       	rjmp	.+980    	; 0x2390 <__stack+0x1b31>
    1fbc:	d6 c2       	rjmp	.+1452   	; 0x256a <__stack+0x1d0b>
    1fbe:	c4 5d       	subi	r28, 0xD4	; 212
    1fc0:	de 4f       	sbci	r29, 0xFE	; 254
    1fc2:	e8 81       	ld	r30, Y
    1fc4:	f9 81       	ldd	r31, Y+1	; 0x01
    1fc6:	cc 52       	subi	r28, 0x2C	; 44
    1fc8:	d1 40       	sbci	r29, 0x01	; 1
    1fca:	e7 30       	cpi	r30, 0x07	; 7
    1fcc:	f1 05       	cpc	r31, r1
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <__stack+0x1773>
    1fd0:	f3 c1       	rjmp	.+998    	; 0x23b8 <__stack+0x1b59>
    1fd2:	c4 5d       	subi	r28, 0xD4	; 212
    1fd4:	de 4f       	sbci	r29, 0xFE	; 254
    1fd6:	28 81       	ld	r18, Y
    1fd8:	39 81       	ldd	r19, Y+1	; 0x01
    1fda:	cc 52       	subi	r28, 0x2C	; 44
    1fdc:	d1 40       	sbci	r29, 0x01	; 1
    1fde:	28 30       	cpi	r18, 0x08	; 8
    1fe0:	31 05       	cpc	r19, r1
    1fe2:	ac f4       	brge	.+42     	; 0x200e <__stack+0x17af>
    1fe4:	c4 5d       	subi	r28, 0xD4	; 212
    1fe6:	de 4f       	sbci	r29, 0xFE	; 254
    1fe8:	88 81       	ld	r24, Y
    1fea:	99 81       	ldd	r25, Y+1	; 0x01
    1fec:	cc 52       	subi	r28, 0x2C	; 44
    1fee:	d1 40       	sbci	r29, 0x01	; 1
    1ff0:	85 30       	cpi	r24, 0x05	; 5
    1ff2:	91 05       	cpc	r25, r1
    1ff4:	09 f4       	brne	.+2      	; 0x1ff8 <__stack+0x1799>
    1ff6:	d6 c1       	rjmp	.+940    	; 0x23a4 <__stack+0x1b45>
    1ff8:	c4 5d       	subi	r28, 0xD4	; 212
    1ffa:	de 4f       	sbci	r29, 0xFE	; 254
    1ffc:	e8 81       	ld	r30, Y
    1ffe:	f9 81       	ldd	r31, Y+1	; 0x01
    2000:	cc 52       	subi	r28, 0x2C	; 44
    2002:	d1 40       	sbci	r29, 0x01	; 1
    2004:	e6 30       	cpi	r30, 0x06	; 6
    2006:	f1 05       	cpc	r31, r1
    2008:	09 f4       	brne	.+2      	; 0x200c <__stack+0x17ad>
    200a:	d1 c1       	rjmp	.+930    	; 0x23ae <__stack+0x1b4f>
    200c:	ae c2       	rjmp	.+1372   	; 0x256a <__stack+0x1d0b>
    200e:	c4 5d       	subi	r28, 0xD4	; 212
    2010:	de 4f       	sbci	r29, 0xFE	; 254
    2012:	28 81       	ld	r18, Y
    2014:	39 81       	ldd	r19, Y+1	; 0x01
    2016:	cc 52       	subi	r28, 0x2C	; 44
    2018:	d1 40       	sbci	r29, 0x01	; 1
    201a:	28 30       	cpi	r18, 0x08	; 8
    201c:	31 05       	cpc	r19, r1
    201e:	09 f4       	brne	.+2      	; 0x2022 <__stack+0x17c3>
    2020:	d0 c1       	rjmp	.+928    	; 0x23c2 <__stack+0x1b63>
    2022:	c4 5d       	subi	r28, 0xD4	; 212
    2024:	de 4f       	sbci	r29, 0xFE	; 254
    2026:	88 81       	ld	r24, Y
    2028:	99 81       	ldd	r25, Y+1	; 0x01
    202a:	cc 52       	subi	r28, 0x2C	; 44
    202c:	d1 40       	sbci	r29, 0x01	; 1
    202e:	89 30       	cpi	r24, 0x09	; 9
    2030:	91 05       	cpc	r25, r1
    2032:	09 f4       	brne	.+2      	; 0x2036 <__stack+0x17d7>
    2034:	cb c1       	rjmp	.+918    	; 0x23cc <__stack+0x1b6d>
    2036:	99 c2       	rjmp	.+1330   	; 0x256a <__stack+0x1d0b>
    2038:	c4 5d       	subi	r28, 0xD4	; 212
    203a:	de 4f       	sbci	r29, 0xFE	; 254
    203c:	e8 81       	ld	r30, Y
    203e:	f9 81       	ldd	r31, Y+1	; 0x01
    2040:	cc 52       	subi	r28, 0x2C	; 44
    2042:	d1 40       	sbci	r29, 0x01	; 1
    2044:	ef 30       	cpi	r30, 0x0F	; 15
    2046:	f1 05       	cpc	r31, r1
    2048:	09 f4       	brne	.+2      	; 0x204c <__stack+0x17ed>
    204a:	e2 c1       	rjmp	.+964    	; 0x2410 <__stack+0x1bb1>
    204c:	c4 5d       	subi	r28, 0xD4	; 212
    204e:	de 4f       	sbci	r29, 0xFE	; 254
    2050:	28 81       	ld	r18, Y
    2052:	39 81       	ldd	r19, Y+1	; 0x01
    2054:	cc 52       	subi	r28, 0x2C	; 44
    2056:	d1 40       	sbci	r29, 0x01	; 1
    2058:	20 31       	cpi	r18, 0x10	; 16
    205a:	31 05       	cpc	r19, r1
    205c:	4c f5       	brge	.+82     	; 0x20b0 <__stack+0x1851>
    205e:	c4 5d       	subi	r28, 0xD4	; 212
    2060:	de 4f       	sbci	r29, 0xFE	; 254
    2062:	88 81       	ld	r24, Y
    2064:	99 81       	ldd	r25, Y+1	; 0x01
    2066:	cc 52       	subi	r28, 0x2C	; 44
    2068:	d1 40       	sbci	r29, 0x01	; 1
    206a:	8c 30       	cpi	r24, 0x0C	; 12
    206c:	91 05       	cpc	r25, r1
    206e:	09 f4       	brne	.+2      	; 0x2072 <__stack+0x1813>
    2070:	bd c1       	rjmp	.+890    	; 0x23ec <__stack+0x1b8d>
    2072:	c4 5d       	subi	r28, 0xD4	; 212
    2074:	de 4f       	sbci	r29, 0xFE	; 254
    2076:	e8 81       	ld	r30, Y
    2078:	f9 81       	ldd	r31, Y+1	; 0x01
    207a:	cc 52       	subi	r28, 0x2C	; 44
    207c:	d1 40       	sbci	r29, 0x01	; 1
    207e:	ec 30       	cpi	r30, 0x0C	; 12
    2080:	f1 05       	cpc	r31, r1
    2082:	0c f4       	brge	.+2      	; 0x2086 <__stack+0x1827>
    2084:	ad c1       	rjmp	.+858    	; 0x23e0 <__stack+0x1b81>
    2086:	c4 5d       	subi	r28, 0xD4	; 212
    2088:	de 4f       	sbci	r29, 0xFE	; 254
    208a:	28 81       	ld	r18, Y
    208c:	39 81       	ldd	r19, Y+1	; 0x01
    208e:	cc 52       	subi	r28, 0x2C	; 44
    2090:	d1 40       	sbci	r29, 0x01	; 1
    2092:	2d 30       	cpi	r18, 0x0D	; 13
    2094:	31 05       	cpc	r19, r1
    2096:	09 f4       	brne	.+2      	; 0x209a <__stack+0x183b>
    2098:	af c1       	rjmp	.+862    	; 0x23f8 <__stack+0x1b99>
    209a:	c4 5d       	subi	r28, 0xD4	; 212
    209c:	de 4f       	sbci	r29, 0xFE	; 254
    209e:	88 81       	ld	r24, Y
    20a0:	99 81       	ldd	r25, Y+1	; 0x01
    20a2:	cc 52       	subi	r28, 0x2C	; 44
    20a4:	d1 40       	sbci	r29, 0x01	; 1
    20a6:	8e 30       	cpi	r24, 0x0E	; 14
    20a8:	91 05       	cpc	r25, r1
    20aa:	09 f4       	brne	.+2      	; 0x20ae <__stack+0x184f>
    20ac:	ab c1       	rjmp	.+854    	; 0x2404 <__stack+0x1ba5>
    20ae:	5d c2       	rjmp	.+1210   	; 0x256a <__stack+0x1d0b>
    20b0:	c4 5d       	subi	r28, 0xD4	; 212
    20b2:	de 4f       	sbci	r29, 0xFE	; 254
    20b4:	e8 81       	ld	r30, Y
    20b6:	f9 81       	ldd	r31, Y+1	; 0x01
    20b8:	cc 52       	subi	r28, 0x2C	; 44
    20ba:	d1 40       	sbci	r29, 0x01	; 1
    20bc:	e2 31       	cpi	r30, 0x12	; 18
    20be:	f1 05       	cpc	r31, r1
    20c0:	09 f4       	brne	.+2      	; 0x20c4 <__stack+0x1865>
    20c2:	b8 c1       	rjmp	.+880    	; 0x2434 <__stack+0x1bd5>
    20c4:	c4 5d       	subi	r28, 0xD4	; 212
    20c6:	de 4f       	sbci	r29, 0xFE	; 254
    20c8:	28 81       	ld	r18, Y
    20ca:	39 81       	ldd	r19, Y+1	; 0x01
    20cc:	cc 52       	subi	r28, 0x2C	; 44
    20ce:	d1 40       	sbci	r29, 0x01	; 1
    20d0:	23 31       	cpi	r18, 0x13	; 19
    20d2:	31 05       	cpc	r19, r1
    20d4:	ac f4       	brge	.+42     	; 0x2100 <__stack+0x18a1>
    20d6:	c4 5d       	subi	r28, 0xD4	; 212
    20d8:	de 4f       	sbci	r29, 0xFE	; 254
    20da:	88 81       	ld	r24, Y
    20dc:	99 81       	ldd	r25, Y+1	; 0x01
    20de:	cc 52       	subi	r28, 0x2C	; 44
    20e0:	d1 40       	sbci	r29, 0x01	; 1
    20e2:	80 31       	cpi	r24, 0x10	; 16
    20e4:	91 05       	cpc	r25, r1
    20e6:	09 f4       	brne	.+2      	; 0x20ea <__stack+0x188b>
    20e8:	99 c1       	rjmp	.+818    	; 0x241c <__stack+0x1bbd>
    20ea:	c4 5d       	subi	r28, 0xD4	; 212
    20ec:	de 4f       	sbci	r29, 0xFE	; 254
    20ee:	e8 81       	ld	r30, Y
    20f0:	f9 81       	ldd	r31, Y+1	; 0x01
    20f2:	cc 52       	subi	r28, 0x2C	; 44
    20f4:	d1 40       	sbci	r29, 0x01	; 1
    20f6:	e1 31       	cpi	r30, 0x11	; 17
    20f8:	f1 05       	cpc	r31, r1
    20fa:	09 f4       	brne	.+2      	; 0x20fe <__stack+0x189f>
    20fc:	95 c1       	rjmp	.+810    	; 0x2428 <__stack+0x1bc9>
    20fe:	35 c2       	rjmp	.+1130   	; 0x256a <__stack+0x1d0b>
    2100:	c4 5d       	subi	r28, 0xD4	; 212
    2102:	de 4f       	sbci	r29, 0xFE	; 254
    2104:	28 81       	ld	r18, Y
    2106:	39 81       	ldd	r19, Y+1	; 0x01
    2108:	cc 52       	subi	r28, 0x2C	; 44
    210a:	d1 40       	sbci	r29, 0x01	; 1
    210c:	23 31       	cpi	r18, 0x13	; 19
    210e:	31 05       	cpc	r19, r1
    2110:	09 f4       	brne	.+2      	; 0x2114 <__stack+0x18b5>
    2112:	96 c1       	rjmp	.+812    	; 0x2440 <__stack+0x1be1>
    2114:	c4 5d       	subi	r28, 0xD4	; 212
    2116:	de 4f       	sbci	r29, 0xFE	; 254
    2118:	88 81       	ld	r24, Y
    211a:	99 81       	ldd	r25, Y+1	; 0x01
    211c:	cc 52       	subi	r28, 0x2C	; 44
    211e:	d1 40       	sbci	r29, 0x01	; 1
    2120:	84 31       	cpi	r24, 0x14	; 20
    2122:	91 05       	cpc	r25, r1
    2124:	09 f4       	brne	.+2      	; 0x2128 <__stack+0x18c9>
    2126:	92 c1       	rjmp	.+804    	; 0x244c <__stack+0x1bed>
    2128:	20 c2       	rjmp	.+1088   	; 0x256a <__stack+0x1d0b>
    212a:	c4 5d       	subi	r28, 0xD4	; 212
    212c:	de 4f       	sbci	r29, 0xFE	; 254
    212e:	e8 81       	ld	r30, Y
    2130:	f9 81       	ldd	r31, Y+1	; 0x01
    2132:	cc 52       	subi	r28, 0x2C	; 44
    2134:	d1 40       	sbci	r29, 0x01	; 1
    2136:	e7 32       	cpi	r30, 0x27	; 39
    2138:	f1 05       	cpc	r31, r1
    213a:	09 f4       	brne	.+2      	; 0x213e <__stack+0x18df>
    213c:	cf c1       	rjmp	.+926    	; 0x24dc <__stack+0x1c7d>
    213e:	c4 5d       	subi	r28, 0xD4	; 212
    2140:	de 4f       	sbci	r29, 0xFE	; 254
    2142:	28 81       	ld	r18, Y
    2144:	39 81       	ldd	r19, Y+1	; 0x01
    2146:	cc 52       	subi	r28, 0x2C	; 44
    2148:	d1 40       	sbci	r29, 0x01	; 1
    214a:	28 32       	cpi	r18, 0x28	; 40
    214c:	31 05       	cpc	r19, r1
    214e:	0c f0       	brlt	.+2      	; 0x2152 <__stack+0x18f3>
    2150:	83 c0       	rjmp	.+262    	; 0x2258 <__stack+0x19f9>
    2152:	c4 5d       	subi	r28, 0xD4	; 212
    2154:	de 4f       	sbci	r29, 0xFE	; 254
    2156:	88 81       	ld	r24, Y
    2158:	99 81       	ldd	r25, Y+1	; 0x01
    215a:	cc 52       	subi	r28, 0x2C	; 44
    215c:	d1 40       	sbci	r29, 0x01	; 1
    215e:	81 32       	cpi	r24, 0x21	; 33
    2160:	91 05       	cpc	r25, r1
    2162:	09 f4       	brne	.+2      	; 0x2166 <__stack+0x1907>
    2164:	97 c1       	rjmp	.+814    	; 0x2494 <__stack+0x1c35>
    2166:	c4 5d       	subi	r28, 0xD4	; 212
    2168:	de 4f       	sbci	r29, 0xFE	; 254
    216a:	e8 81       	ld	r30, Y
    216c:	f9 81       	ldd	r31, Y+1	; 0x01
    216e:	cc 52       	subi	r28, 0x2C	; 44
    2170:	d1 40       	sbci	r29, 0x01	; 1
    2172:	e2 32       	cpi	r30, 0x22	; 34
    2174:	f1 05       	cpc	r31, r1
    2176:	9c f5       	brge	.+102    	; 0x21de <__stack+0x197f>
    2178:	c4 5d       	subi	r28, 0xD4	; 212
    217a:	de 4f       	sbci	r29, 0xFE	; 254
    217c:	28 81       	ld	r18, Y
    217e:	39 81       	ldd	r19, Y+1	; 0x01
    2180:	cc 52       	subi	r28, 0x2C	; 44
    2182:	d1 40       	sbci	r29, 0x01	; 1
    2184:	2e 31       	cpi	r18, 0x1E	; 30
    2186:	31 05       	cpc	r19, r1
    2188:	09 f4       	brne	.+2      	; 0x218c <__stack+0x192d>
    218a:	72 c1       	rjmp	.+740    	; 0x2470 <__stack+0x1c11>
    218c:	c4 5d       	subi	r28, 0xD4	; 212
    218e:	de 4f       	sbci	r29, 0xFE	; 254
    2190:	88 81       	ld	r24, Y
    2192:	99 81       	ldd	r25, Y+1	; 0x01
    2194:	cc 52       	subi	r28, 0x2C	; 44
    2196:	d1 40       	sbci	r29, 0x01	; 1
    2198:	8f 31       	cpi	r24, 0x1F	; 31
    219a:	91 05       	cpc	r25, r1
    219c:	5c f4       	brge	.+22     	; 0x21b4 <__stack+0x1955>
    219e:	c4 5d       	subi	r28, 0xD4	; 212
    21a0:	de 4f       	sbci	r29, 0xFE	; 254
    21a2:	e8 81       	ld	r30, Y
    21a4:	f9 81       	ldd	r31, Y+1	; 0x01
    21a6:	cc 52       	subi	r28, 0x2C	; 44
    21a8:	d1 40       	sbci	r29, 0x01	; 1
    21aa:	e6 31       	cpi	r30, 0x16	; 22
    21ac:	f1 05       	cpc	r31, r1
    21ae:	09 f4       	brne	.+2      	; 0x21b2 <__stack+0x1953>
    21b0:	59 c1       	rjmp	.+690    	; 0x2464 <__stack+0x1c05>
    21b2:	db c1       	rjmp	.+950    	; 0x256a <__stack+0x1d0b>
    21b4:	c4 5d       	subi	r28, 0xD4	; 212
    21b6:	de 4f       	sbci	r29, 0xFE	; 254
    21b8:	28 81       	ld	r18, Y
    21ba:	39 81       	ldd	r19, Y+1	; 0x01
    21bc:	cc 52       	subi	r28, 0x2C	; 44
    21be:	d1 40       	sbci	r29, 0x01	; 1
    21c0:	2f 31       	cpi	r18, 0x1F	; 31
    21c2:	31 05       	cpc	r19, r1
    21c4:	09 f4       	brne	.+2      	; 0x21c8 <__stack+0x1969>
    21c6:	5a c1       	rjmp	.+692    	; 0x247c <__stack+0x1c1d>
    21c8:	c4 5d       	subi	r28, 0xD4	; 212
    21ca:	de 4f       	sbci	r29, 0xFE	; 254
    21cc:	88 81       	ld	r24, Y
    21ce:	99 81       	ldd	r25, Y+1	; 0x01
    21d0:	cc 52       	subi	r28, 0x2C	; 44
    21d2:	d1 40       	sbci	r29, 0x01	; 1
    21d4:	80 32       	cpi	r24, 0x20	; 32
    21d6:	91 05       	cpc	r25, r1
    21d8:	09 f4       	brne	.+2      	; 0x21dc <__stack+0x197d>
    21da:	56 c1       	rjmp	.+684    	; 0x2488 <__stack+0x1c29>
    21dc:	c6 c1       	rjmp	.+908    	; 0x256a <__stack+0x1d0b>
    21de:	c4 5d       	subi	r28, 0xD4	; 212
    21e0:	de 4f       	sbci	r29, 0xFE	; 254
    21e2:	e8 81       	ld	r30, Y
    21e4:	f9 81       	ldd	r31, Y+1	; 0x01
    21e6:	cc 52       	subi	r28, 0x2C	; 44
    21e8:	d1 40       	sbci	r29, 0x01	; 1
    21ea:	e4 32       	cpi	r30, 0x24	; 36
    21ec:	f1 05       	cpc	r31, r1
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <__stack+0x1993>
    21f0:	63 c1       	rjmp	.+710    	; 0x24b8 <__stack+0x1c59>
    21f2:	c4 5d       	subi	r28, 0xD4	; 212
    21f4:	de 4f       	sbci	r29, 0xFE	; 254
    21f6:	28 81       	ld	r18, Y
    21f8:	39 81       	ldd	r19, Y+1	; 0x01
    21fa:	cc 52       	subi	r28, 0x2C	; 44
    21fc:	d1 40       	sbci	r29, 0x01	; 1
    21fe:	25 32       	cpi	r18, 0x25	; 37
    2200:	31 05       	cpc	r19, r1
    2202:	ac f4       	brge	.+42     	; 0x222e <__stack+0x19cf>
    2204:	c4 5d       	subi	r28, 0xD4	; 212
    2206:	de 4f       	sbci	r29, 0xFE	; 254
    2208:	88 81       	ld	r24, Y
    220a:	99 81       	ldd	r25, Y+1	; 0x01
    220c:	cc 52       	subi	r28, 0x2C	; 44
    220e:	d1 40       	sbci	r29, 0x01	; 1
    2210:	82 32       	cpi	r24, 0x22	; 34
    2212:	91 05       	cpc	r25, r1
    2214:	09 f4       	brne	.+2      	; 0x2218 <__stack+0x19b9>
    2216:	44 c1       	rjmp	.+648    	; 0x24a0 <__stack+0x1c41>
    2218:	c4 5d       	subi	r28, 0xD4	; 212
    221a:	de 4f       	sbci	r29, 0xFE	; 254
    221c:	e8 81       	ld	r30, Y
    221e:	f9 81       	ldd	r31, Y+1	; 0x01
    2220:	cc 52       	subi	r28, 0x2C	; 44
    2222:	d1 40       	sbci	r29, 0x01	; 1
    2224:	e3 32       	cpi	r30, 0x23	; 35
    2226:	f1 05       	cpc	r31, r1
    2228:	09 f4       	brne	.+2      	; 0x222c <__stack+0x19cd>
    222a:	40 c1       	rjmp	.+640    	; 0x24ac <__stack+0x1c4d>
    222c:	9e c1       	rjmp	.+828    	; 0x256a <__stack+0x1d0b>
    222e:	c4 5d       	subi	r28, 0xD4	; 212
    2230:	de 4f       	sbci	r29, 0xFE	; 254
    2232:	28 81       	ld	r18, Y
    2234:	39 81       	ldd	r19, Y+1	; 0x01
    2236:	cc 52       	subi	r28, 0x2C	; 44
    2238:	d1 40       	sbci	r29, 0x01	; 1
    223a:	25 32       	cpi	r18, 0x25	; 37
    223c:	31 05       	cpc	r19, r1
    223e:	09 f4       	brne	.+2      	; 0x2242 <__stack+0x19e3>
    2240:	41 c1       	rjmp	.+642    	; 0x24c4 <__stack+0x1c65>
    2242:	c4 5d       	subi	r28, 0xD4	; 212
    2244:	de 4f       	sbci	r29, 0xFE	; 254
    2246:	88 81       	ld	r24, Y
    2248:	99 81       	ldd	r25, Y+1	; 0x01
    224a:	cc 52       	subi	r28, 0x2C	; 44
    224c:	d1 40       	sbci	r29, 0x01	; 1
    224e:	86 32       	cpi	r24, 0x26	; 38
    2250:	91 05       	cpc	r25, r1
    2252:	09 f4       	brne	.+2      	; 0x2256 <__stack+0x19f7>
    2254:	3d c1       	rjmp	.+634    	; 0x24d0 <__stack+0x1c71>
    2256:	89 c1       	rjmp	.+786    	; 0x256a <__stack+0x1d0b>
    2258:	c4 5d       	subi	r28, 0xD4	; 212
    225a:	de 4f       	sbci	r29, 0xFE	; 254
    225c:	e8 81       	ld	r30, Y
    225e:	f9 81       	ldd	r31, Y+1	; 0x01
    2260:	cc 52       	subi	r28, 0x2C	; 44
    2262:	d1 40       	sbci	r29, 0x01	; 1
    2264:	ed 32       	cpi	r30, 0x2D	; 45
    2266:	f1 05       	cpc	r31, r1
    2268:	09 f4       	brne	.+2      	; 0x226c <__stack+0x1a0d>
    226a:	5c c1       	rjmp	.+696    	; 0x2524 <__stack+0x1cc5>
    226c:	c4 5d       	subi	r28, 0xD4	; 212
    226e:	de 4f       	sbci	r29, 0xFE	; 254
    2270:	28 81       	ld	r18, Y
    2272:	39 81       	ldd	r19, Y+1	; 0x01
    2274:	cc 52       	subi	r28, 0x2C	; 44
    2276:	d1 40       	sbci	r29, 0x01	; 1
    2278:	2e 32       	cpi	r18, 0x2E	; 46
    227a:	31 05       	cpc	r19, r1
    227c:	ec f5       	brge	.+122    	; 0x22f8 <__stack+0x1a99>
    227e:	c4 5d       	subi	r28, 0xD4	; 212
    2280:	de 4f       	sbci	r29, 0xFE	; 254
    2282:	88 81       	ld	r24, Y
    2284:	99 81       	ldd	r25, Y+1	; 0x01
    2286:	cc 52       	subi	r28, 0x2C	; 44
    2288:	d1 40       	sbci	r29, 0x01	; 1
    228a:	8a 32       	cpi	r24, 0x2A	; 42
    228c:	91 05       	cpc	r25, r1
    228e:	09 f4       	brne	.+2      	; 0x2292 <__stack+0x1a33>
    2290:	37 c1       	rjmp	.+622    	; 0x2500 <__stack+0x1ca1>
    2292:	c4 5d       	subi	r28, 0xD4	; 212
    2294:	de 4f       	sbci	r29, 0xFE	; 254
    2296:	e8 81       	ld	r30, Y
    2298:	f9 81       	ldd	r31, Y+1	; 0x01
    229a:	cc 52       	subi	r28, 0x2C	; 44
    229c:	d1 40       	sbci	r29, 0x01	; 1
    229e:	eb 32       	cpi	r30, 0x2B	; 43
    22a0:	f1 05       	cpc	r31, r1
    22a2:	ac f4       	brge	.+42     	; 0x22ce <__stack+0x1a6f>
    22a4:	c4 5d       	subi	r28, 0xD4	; 212
    22a6:	de 4f       	sbci	r29, 0xFE	; 254
    22a8:	28 81       	ld	r18, Y
    22aa:	39 81       	ldd	r19, Y+1	; 0x01
    22ac:	cc 52       	subi	r28, 0x2C	; 44
    22ae:	d1 40       	sbci	r29, 0x01	; 1
    22b0:	28 32       	cpi	r18, 0x28	; 40
    22b2:	31 05       	cpc	r19, r1
    22b4:	09 f4       	brne	.+2      	; 0x22b8 <__stack+0x1a59>
    22b6:	18 c1       	rjmp	.+560    	; 0x24e8 <__stack+0x1c89>
    22b8:	c4 5d       	subi	r28, 0xD4	; 212
    22ba:	de 4f       	sbci	r29, 0xFE	; 254
    22bc:	88 81       	ld	r24, Y
    22be:	99 81       	ldd	r25, Y+1	; 0x01
    22c0:	cc 52       	subi	r28, 0x2C	; 44
    22c2:	d1 40       	sbci	r29, 0x01	; 1
    22c4:	89 32       	cpi	r24, 0x29	; 41
    22c6:	91 05       	cpc	r25, r1
    22c8:	09 f4       	brne	.+2      	; 0x22cc <__stack+0x1a6d>
    22ca:	14 c1       	rjmp	.+552    	; 0x24f4 <__stack+0x1c95>
    22cc:	4e c1       	rjmp	.+668    	; 0x256a <__stack+0x1d0b>
    22ce:	c4 5d       	subi	r28, 0xD4	; 212
    22d0:	de 4f       	sbci	r29, 0xFE	; 254
    22d2:	e8 81       	ld	r30, Y
    22d4:	f9 81       	ldd	r31, Y+1	; 0x01
    22d6:	cc 52       	subi	r28, 0x2C	; 44
    22d8:	d1 40       	sbci	r29, 0x01	; 1
    22da:	eb 32       	cpi	r30, 0x2B	; 43
    22dc:	f1 05       	cpc	r31, r1
    22de:	09 f4       	brne	.+2      	; 0x22e2 <__stack+0x1a83>
    22e0:	15 c1       	rjmp	.+554    	; 0x250c <__stack+0x1cad>
    22e2:	c4 5d       	subi	r28, 0xD4	; 212
    22e4:	de 4f       	sbci	r29, 0xFE	; 254
    22e6:	28 81       	ld	r18, Y
    22e8:	39 81       	ldd	r19, Y+1	; 0x01
    22ea:	cc 52       	subi	r28, 0x2C	; 44
    22ec:	d1 40       	sbci	r29, 0x01	; 1
    22ee:	2c 32       	cpi	r18, 0x2C	; 44
    22f0:	31 05       	cpc	r19, r1
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <__stack+0x1a97>
    22f4:	11 c1       	rjmp	.+546    	; 0x2518 <__stack+0x1cb9>
    22f6:	39 c1       	rjmp	.+626    	; 0x256a <__stack+0x1d0b>
    22f8:	c4 5d       	subi	r28, 0xD4	; 212
    22fa:	de 4f       	sbci	r29, 0xFE	; 254
    22fc:	88 81       	ld	r24, Y
    22fe:	99 81       	ldd	r25, Y+1	; 0x01
    2300:	cc 52       	subi	r28, 0x2C	; 44
    2302:	d1 40       	sbci	r29, 0x01	; 1
    2304:	80 33       	cpi	r24, 0x30	; 48
    2306:	91 05       	cpc	r25, r1
    2308:	09 f4       	brne	.+2      	; 0x230c <__stack+0x1aad>
    230a:	1e c1       	rjmp	.+572    	; 0x2548 <__stack+0x1ce9>
    230c:	c4 5d       	subi	r28, 0xD4	; 212
    230e:	de 4f       	sbci	r29, 0xFE	; 254
    2310:	e8 81       	ld	r30, Y
    2312:	f9 81       	ldd	r31, Y+1	; 0x01
    2314:	cc 52       	subi	r28, 0x2C	; 44
    2316:	d1 40       	sbci	r29, 0x01	; 1
    2318:	e1 33       	cpi	r30, 0x31	; 49
    231a:	f1 05       	cpc	r31, r1
    231c:	ac f4       	brge	.+42     	; 0x2348 <__stack+0x1ae9>
    231e:	c4 5d       	subi	r28, 0xD4	; 212
    2320:	de 4f       	sbci	r29, 0xFE	; 254
    2322:	28 81       	ld	r18, Y
    2324:	39 81       	ldd	r19, Y+1	; 0x01
    2326:	cc 52       	subi	r28, 0x2C	; 44
    2328:	d1 40       	sbci	r29, 0x01	; 1
    232a:	2e 32       	cpi	r18, 0x2E	; 46
    232c:	31 05       	cpc	r19, r1
    232e:	09 f4       	brne	.+2      	; 0x2332 <__stack+0x1ad3>
    2330:	ff c0       	rjmp	.+510    	; 0x2530 <__stack+0x1cd1>
    2332:	c4 5d       	subi	r28, 0xD4	; 212
    2334:	de 4f       	sbci	r29, 0xFE	; 254
    2336:	88 81       	ld	r24, Y
    2338:	99 81       	ldd	r25, Y+1	; 0x01
    233a:	cc 52       	subi	r28, 0x2C	; 44
    233c:	d1 40       	sbci	r29, 0x01	; 1
    233e:	8f 32       	cpi	r24, 0x2F	; 47
    2340:	91 05       	cpc	r25, r1
    2342:	09 f4       	brne	.+2      	; 0x2346 <__stack+0x1ae7>
    2344:	fb c0       	rjmp	.+502    	; 0x253c <__stack+0x1cdd>
    2346:	11 c1       	rjmp	.+546    	; 0x256a <__stack+0x1d0b>
    2348:	c4 5d       	subi	r28, 0xD4	; 212
    234a:	de 4f       	sbci	r29, 0xFE	; 254
    234c:	e8 81       	ld	r30, Y
    234e:	f9 81       	ldd	r31, Y+1	; 0x01
    2350:	cc 52       	subi	r28, 0x2C	; 44
    2352:	d1 40       	sbci	r29, 0x01	; 1
    2354:	e1 33       	cpi	r30, 0x31	; 49
    2356:	f1 05       	cpc	r31, r1
    2358:	09 f4       	brne	.+2      	; 0x235c <__stack+0x1afd>
    235a:	fc c0       	rjmp	.+504    	; 0x2554 <__stack+0x1cf5>
    235c:	c4 5d       	subi	r28, 0xD4	; 212
    235e:	de 4f       	sbci	r29, 0xFE	; 254
    2360:	28 81       	ld	r18, Y
    2362:	39 81       	ldd	r19, Y+1	; 0x01
    2364:	cc 52       	subi	r28, 0x2C	; 44
    2366:	d1 40       	sbci	r29, 0x01	; 1
    2368:	22 33       	cpi	r18, 0x32	; 50
    236a:	31 05       	cpc	r19, r1
    236c:	09 f4       	brne	.+2      	; 0x2370 <__stack+0x1b11>
    236e:	f8 c0       	rjmp	.+496    	; 0x2560 <__stack+0x1d01>
    2370:	fc c0       	rjmp	.+504    	; 0x256a <__stack+0x1d0b>
		case 0 :    play(zero);				break;
    2372:	ce 01       	movw	r24, r28
    2374:	01 96       	adiw	r24, 0x01	; 1
    2376:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    237a:	f7 c0       	rjmp	.+494    	; 0x256a <__stack+0x1d0b>
		case 1 :    play(jeden); 			break;
    237c:	ce 01       	movw	r24, r28
    237e:	07 96       	adiw	r24, 0x07	; 7
    2380:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    2384:	f2 c0       	rjmp	.+484    	; 0x256a <__stack+0x1d0b>
		case 2 :    play(dwa); 	 			break;
    2386:	ce 01       	movw	r24, r28
    2388:	0d 96       	adiw	r24, 0x0d	; 13
    238a:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    238e:	ed c0       	rjmp	.+474    	; 0x256a <__stack+0x1d0b>
		case 3 :    play(trzy); 			break;
    2390:	ce 01       	movw	r24, r28
    2392:	43 96       	adiw	r24, 0x13	; 19
    2394:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    2398:	e8 c0       	rjmp	.+464    	; 0x256a <__stack+0x1d0b>
		case 4 :    play(cztery); 			break;
    239a:	ce 01       	movw	r24, r28
    239c:	49 96       	adiw	r24, 0x19	; 25
    239e:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    23a2:	e3 c0       	rjmp	.+454    	; 0x256a <__stack+0x1d0b>
		case 5 :    play(piec);  			break;
    23a4:	ce 01       	movw	r24, r28
    23a6:	4f 96       	adiw	r24, 0x1f	; 31
    23a8:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    23ac:	de c0       	rjmp	.+444    	; 0x256a <__stack+0x1d0b>
		case 6 :    play(szesc);    		break;
    23ae:	ce 01       	movw	r24, r28
    23b0:	85 96       	adiw	r24, 0x25	; 37
    23b2:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    23b6:	d9 c0       	rjmp	.+434    	; 0x256a <__stack+0x1d0b>
		case 7 :    play(siedem); 			break;
    23b8:	ce 01       	movw	r24, r28
    23ba:	8b 96       	adiw	r24, 0x2b	; 43
    23bc:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    23c0:	d4 c0       	rjmp	.+424    	; 0x256a <__stack+0x1d0b>
		case 8 :    play(osiem); 			break;
    23c2:	ce 01       	movw	r24, r28
    23c4:	c1 96       	adiw	r24, 0x31	; 49
    23c6:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    23ca:	cf c0       	rjmp	.+414    	; 0x256a <__stack+0x1d0b>
		case 9 :    play(dziewiec); 		break;
    23cc:	ce 01       	movw	r24, r28
    23ce:	c7 96       	adiw	r24, 0x37	; 55
    23d0:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    23d4:	ca c0       	rjmp	.+404    	; 0x256a <__stack+0x1d0b>

		case 10:	play(start); 			break;
    23d6:	ce 01       	movw	r24, r28
    23d8:	cd 96       	adiw	r24, 0x3d	; 61
    23da:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    23de:	c5 c0       	rjmp	.+394    	; 0x256a <__stack+0x1d0b>
		case 11:	play(wprowadz_numer);	break;
    23e0:	ce 01       	movw	r24, r28
    23e2:	8c 5b       	subi	r24, 0xBC	; 188
    23e4:	9f 4f       	sbci	r25, 0xFF	; 255
    23e6:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    23ea:	bf c0       	rjmp	.+382    	; 0x256a <__stack+0x1d0b>
		case 12:	play(setki);			break;
    23ec:	ce 01       	movw	r24, r28
    23ee:	85 5b       	subi	r24, 0xB5	; 181
    23f0:	9f 4f       	sbci	r25, 0xFF	; 255
    23f2:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    23f6:	b9 c0       	rjmp	.+370    	; 0x256a <__stack+0x1d0b>
		case 13:	play(dziesiatki);		break;
    23f8:	ce 01       	movw	r24, r28
    23fa:	8e 5a       	subi	r24, 0xAE	; 174
    23fc:	9f 4f       	sbci	r25, 0xFF	; 255
    23fe:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    2402:	b3 c0       	rjmp	.+358    	; 0x256a <__stack+0x1d0b>
		case 14:	play(jednosci);			break;
    2404:	ce 01       	movw	r24, r28
    2406:	87 5a       	subi	r24, 0xA7	; 167
    2408:	9f 4f       	sbci	r25, 0xFF	; 255
    240a:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    240e:	ad c0       	rjmp	.+346    	; 0x256a <__stack+0x1d0b>
		case 15:	play(wybrano_linie);	break;
    2410:	ce 01       	movw	r24, r28
    2412:	80 5a       	subi	r24, 0xA0	; 160
    2414:	9f 4f       	sbci	r25, 0xFF	; 255
    2416:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    241a:	a7 c0       	rjmp	.+334    	; 0x256a <__stack+0x1d0b>
		case 16:	play(podjechala_linia); break;
    241c:	ce 01       	movw	r24, r28
    241e:	89 59       	subi	r24, 0x99	; 153
    2420:	9f 4f       	sbci	r25, 0xFF	; 255
    2422:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    2426:	a1 c0       	rjmp	.+322    	; 0x256a <__stack+0x1d0b>
		case 17:	play(koniec);			break;
    2428:	ce 01       	movw	r24, r28
    242a:	82 59       	subi	r24, 0x92	; 146
    242c:	9f 4f       	sbci	r25, 0xFF	; 255
    242e:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    2432:	9b c0       	rjmp	.+310    	; 0x256a <__stack+0x1d0b>
		case 18: 	play(enter);			break;
    2434:	ce 01       	movw	r24, r28
    2436:	8b 58       	subi	r24, 0x8B	; 139
    2438:	9f 4f       	sbci	r25, 0xFF	; 255
    243a:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    243e:	95 c0       	rjmp	.+298    	; 0x256a <__stack+0x1d0b>
		case 19: 	play(wprowadz_kierunek);break;
    2440:	ce 01       	movw	r24, r28
    2442:	84 58       	subi	r24, 0x84	; 132
    2444:	9f 4f       	sbci	r25, 0xFF	; 255
    2446:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    244a:	8f c0       	rjmp	.+286    	; 0x256a <__stack+0x1d0b>
		case 20: 	play(szukam);			break;
    244c:	ce 01       	movw	r24, r28
    244e:	8d 57       	subi	r24, 0x7D	; 125
    2450:	9f 4f       	sbci	r25, 0xFF	; 255
    2452:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    2456:	89 c0       	rjmp	.+274    	; 0x256a <__stack+0x1d0b>
		case 21:    play(inny_pojazd); 		break;
    2458:	ce 01       	movw	r24, r28
    245a:	86 57       	subi	r24, 0x76	; 118
    245c:	9f 4f       	sbci	r25, 0xFF	; 255
    245e:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    2462:	83 c0       	rjmp	.+262    	; 0x256a <__stack+0x1d0b>
		case 22:    play(zly_numer);		break;
    2464:	ce 01       	movw	r24, r28
    2466:	8f 56       	subi	r24, 0x6F	; 111
    2468:	9f 4f       	sbci	r25, 0xFF	; 255
    246a:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    246e:	7d c0       	rjmp	.+250    	; 0x256a <__stack+0x1d0b>

		case 30:   play(Stare_Bemowo);					break;
    2470:	ce 01       	movw	r24, r28
    2472:	88 56       	subi	r24, 0x68	; 104
    2474:	9f 4f       	sbci	r25, 0xFF	; 255
    2476:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    247a:	77 c0       	rjmp	.+238    	; 0x256a <__stack+0x1d0b>
		case 31:   play(PKP_Olszynka_Grochowska);		break;
    247c:	ce 01       	movw	r24, r28
    247e:	81 56       	subi	r24, 0x61	; 97
    2480:	9f 4f       	sbci	r25, 0xFF	; 255
    2482:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    2486:	71 c0       	rjmp	.+226    	; 0x256a <__stack+0x1d0b>
		case 32:   play(Osiedle_Gorczewska);			break;
    2488:	ce 01       	movw	r24, r28
    248a:	8a 55       	subi	r24, 0x5A	; 90
    248c:	9f 4f       	sbci	r25, 0xFF	; 255
    248e:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    2492:	6b c0       	rjmp	.+214    	; 0x256a <__stack+0x1d0b>
		case 33:   play(Gwiazdzista);					break;
    2494:	ce 01       	movw	r24, r28
    2496:	83 55       	subi	r24, 0x53	; 83
    2498:	9f 4f       	sbci	r25, 0xFF	; 255
    249a:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    249e:	65 c0       	rjmp	.+202    	; 0x256a <__stack+0x1d0b>
		case 34:   play(PR_Al_Krakowska);				break;
    24a0:	ce 01       	movw	r24, r28
    24a2:	8c 54       	subi	r24, 0x4C	; 76
    24a4:	9f 4f       	sbci	r25, 0xFF	; 255
    24a6:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    24aa:	5f c0       	rjmp	.+190    	; 0x256a <__stack+0x1d0b>
		case 35:   play(Boernerowo);					break;
    24ac:	ce 01       	movw	r24, r28
    24ae:	85 54       	subi	r24, 0x45	; 69
    24b0:	9f 4f       	sbci	r25, 0xFF	; 255
    24b2:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    24b6:	59 c0       	rjmp	.+178    	; 0x256a <__stack+0x1d0b>
		case 36:   play(Zeran_FSO);						break;
    24b8:	ce 01       	movw	r24, r28
    24ba:	8e 53       	subi	r24, 0x3E	; 62
    24bc:	9f 4f       	sbci	r25, 0xFF	; 255
    24be:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    24c2:	53 c0       	rjmp	.+166    	; 0x256a <__stack+0x1d0b>
		case 37:   play(Sadyba);						break;
    24c4:	ce 01       	movw	r24, r28
    24c6:	87 53       	subi	r24, 0x37	; 55
    24c8:	9f 4f       	sbci	r25, 0xFF	; 255
    24ca:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    24ce:	4d c0       	rjmp	.+154    	; 0x256a <__stack+0x1d0b>
		case 38:   play(Szczesliwice);					break;
    24d0:	ce 01       	movw	r24, r28
    24d2:	80 53       	subi	r24, 0x30	; 48
    24d4:	9f 4f       	sbci	r25, 0xFF	; 255
    24d6:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    24da:	47 c0       	rjmp	.+142    	; 0x256a <__stack+0x1d0b>
		case 39:   play(Nowodwory);						break;
    24dc:	ce 01       	movw	r24, r28
    24de:	89 52       	subi	r24, 0x29	; 41
    24e0:	9f 4f       	sbci	r25, 0xFF	; 255
    24e2:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    24e6:	41 c0       	rjmp	.+130    	; 0x256a <__stack+0x1d0b>
		case 40:   play(Metro_Mlociny);					break;
    24e8:	ce 01       	movw	r24, r28
    24ea:	82 52       	subi	r24, 0x22	; 34
    24ec:	9f 4f       	sbci	r25, 0xFF	; 255
    24ee:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    24f2:	3b c0       	rjmp	.+118    	; 0x256a <__stack+0x1d0b>
		case 41:   play(CH_Blue_City);					break;
    24f4:	ce 01       	movw	r24, r28
    24f6:	8b 51       	subi	r24, 0x1B	; 27
    24f8:	9f 4f       	sbci	r25, 0xFF	; 255
    24fa:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    24fe:	35 c0       	rjmp	.+106    	; 0x256a <__stack+0x1d0b>
		case 42:   play(CH_Reduta);						break;
    2500:	ce 01       	movw	r24, r28
    2502:	84 51       	subi	r24, 0x14	; 20
    2504:	9f 4f       	sbci	r25, 0xFF	; 255
    2506:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    250a:	2f c0       	rjmp	.+94     	; 0x256a <__stack+0x1d0b>
		case 43:   play(Witolin);						break;
    250c:	ce 01       	movw	r24, r28
    250e:	8d 50       	subi	r24, 0x0D	; 13
    2510:	9f 4f       	sbci	r25, 0xFF	; 255
    2512:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    2516:	29 c0       	rjmp	.+82     	; 0x256a <__stack+0x1d0b>
		case 44:   play(Natolin_Pln);					break;
    2518:	ce 01       	movw	r24, r28
    251a:	86 50       	subi	r24, 0x06	; 6
    251c:	9f 4f       	sbci	r25, 0xFF	; 255
    251e:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    2522:	23 c0       	rjmp	.+70     	; 0x256a <__stack+0x1d0b>
		case 45:   play(Konwiktorska);					break;
    2524:	ce 01       	movw	r24, r28
    2526:	8f 5f       	subi	r24, 0xFF	; 255
    2528:	9e 4f       	sbci	r25, 0xFE	; 254
    252a:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    252e:	1d c0       	rjmp	.+58     	; 0x256a <__stack+0x1d0b>
		case 46:   play(Metro_Marymont);				break;
    2530:	ce 01       	movw	r24, r28
    2532:	88 5f       	subi	r24, 0xF8	; 248
    2534:	9e 4f       	sbci	r25, 0xFE	; 254
    2536:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    253a:	17 c0       	rjmp	.+46     	; 0x256a <__stack+0x1d0b>
		case 47:   play(Dw_Wsch_Kijowska);				break;
    253c:	ce 01       	movw	r24, r28
    253e:	81 5f       	subi	r24, 0xF1	; 241
    2540:	9e 4f       	sbci	r25, 0xFE	; 254
    2542:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    2546:	11 c0       	rjmp	.+34     	; 0x256a <__stack+0x1d0b>
		case 48:   play(Annopol);						break;
    2548:	ce 01       	movw	r24, r28
    254a:	8a 5e       	subi	r24, 0xEA	; 234
    254c:	9e 4f       	sbci	r25, 0xFE	; 254
    254e:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    2552:	0b c0       	rjmp	.+22     	; 0x256a <__stack+0x1d0b>
		case 49:   play(Banacha);						break;
    2554:	ce 01       	movw	r24, r28
    2556:	83 5e       	subi	r24, 0xE3	; 227
    2558:	9e 4f       	sbci	r25, 0xFE	; 254
    255a:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
    255e:	05 c0       	rjmp	.+10     	; 0x256a <__stack+0x1d0b>
		case 50:   play(Lipkow_Muzeum);					break;
    2560:	ce 01       	movw	r24, r28
    2562:	8c 5d       	subi	r24, 0xDC	; 220
    2564:	9e 4f       	sbci	r25, 0xFE	; 254
    2566:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <play>
	}
}
    256a:	c7 5f       	subi	r28, 0xF7	; 247
    256c:	dd 4f       	sbci	r29, 0xFD	; 253
    256e:	0f b6       	in	r0, 0x3f	; 63
    2570:	f8 94       	cli
    2572:	de bf       	out	0x3e, r29	; 62
    2574:	0f be       	out	0x3f, r0	; 63
    2576:	cd bf       	out	0x3d, r28	; 61
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	08 95       	ret

0000257e <__vector_10>:


//***************** przerwanie TIMER0 - samplowanie ******************************************
ISR(TIMER0_COMP_vect) {
    257e:	1f 92       	push	r1
    2580:	0f 92       	push	r0
    2582:	0f b6       	in	r0, 0x3f	; 63
    2584:	0f 92       	push	r0
    2586:	11 24       	eor	r1, r1
    2588:	2f 93       	push	r18
    258a:	3f 93       	push	r19
    258c:	8f 93       	push	r24
    258e:	9f 93       	push	r25
    2590:	ef 93       	push	r30
    2592:	ff 93       	push	r31
    2594:	df 93       	push	r29
    2596:	cf 93       	push	r28
    2598:	00 d0       	rcall	.+0      	; 0x259a <__vector_10+0x1c>
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
#if USE44KHZ == 0
	static uint16_t buf_idx;		// indeks w pojedynczym buforze
	static uint8_t v1, v2;			// zmienne do przechowywania prÛbek
	static uint8_t efekt_cnt;		// zmienna pomocnicza dla uzyskiwania prostych efektÛw

	if( !efekt_cnt ) {
    259e:	80 91 1a 02 	lds	r24, 0x021A
    25a2:	88 23       	and	r24, r24
    25a4:	09 f0       	breq	.+2      	; 0x25a8 <__vector_10+0x2a>
    25a6:	cf c0       	rjmp	.+414    	; 0x2746 <__vector_10+0x1c8>
		if( 16 == FLAGS.resolution ) {				// jeúli rozdzielczoúÊ 16-bitÛw
    25a8:	80 91 67 06 	lds	r24, 0x0667
    25ac:	80 31       	cpi	r24, 0x10	; 16
    25ae:	09 f0       	breq	.+2      	; 0x25b2 <__vector_10+0x34>
    25b0:	75 c0       	rjmp	.+234    	; 0x269c <__vector_10+0x11e>
			if( FLAGS.stereo ) {					// jeúli prÛbki stereofoniczne
    25b2:	80 91 66 06 	lds	r24, 0x0666
    25b6:	81 70       	andi	r24, 0x01	; 1
    25b8:	88 23       	and	r24, r24
    25ba:	09 f4       	brne	.+2      	; 0x25be <__vector_10+0x40>
    25bc:	47 c0       	rjmp	.+142    	; 0x264c <__vector_10+0xce>
				buf_idx++;							// pomijamy m≥odszy bajt 16-bitowej prÛbki kana≥ L
    25be:	80 91 1d 02 	lds	r24, 0x021D
    25c2:	90 91 1e 02 	lds	r25, 0x021E
    25c6:	01 96       	adiw	r24, 0x01	; 1
    25c8:	90 93 1e 02 	sts	0x021E, r25
    25cc:	80 93 1d 02 	sts	0x021D, r24
				v1 = buf[nr_buf][buf_idx++]-128;	// -128 korekcja konwerji prÛbki 16-bitowej do 8-bitowej
    25d0:	80 91 50 02 	lds	r24, 0x0250
    25d4:	88 2f       	mov	r24, r24
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	20 91 1d 02 	lds	r18, 0x021D
    25dc:	30 91 1e 02 	lds	r19, 0x021E
    25e0:	98 2f       	mov	r25, r24
    25e2:	88 27       	eor	r24, r24
    25e4:	99 0f       	add	r25, r25
    25e6:	82 0f       	add	r24, r18
    25e8:	93 1f       	adc	r25, r19
    25ea:	fc 01       	movw	r30, r24
    25ec:	ea 59       	subi	r30, 0x9A	; 154
    25ee:	fd 4f       	sbci	r31, 0xFD	; 253
    25f0:	80 81       	ld	r24, Z
    25f2:	80 58       	subi	r24, 0x80	; 128
    25f4:	80 93 1c 02 	sts	0x021C, r24
    25f8:	c9 01       	movw	r24, r18
    25fa:	01 96       	adiw	r24, 0x01	; 1
    25fc:	90 93 1e 02 	sts	0x021E, r25
    2600:	80 93 1d 02 	sts	0x021D, r24
				buf_idx++;							// pomijamy m≥odszy bajt 16-bitowej prÛbki kana≥ R
    2604:	80 91 1d 02 	lds	r24, 0x021D
    2608:	90 91 1e 02 	lds	r25, 0x021E
    260c:	01 96       	adiw	r24, 0x01	; 1
    260e:	90 93 1e 02 	sts	0x021E, r25
    2612:	80 93 1d 02 	sts	0x021D, r24
				v2 = buf[nr_buf][buf_idx++]-128;	// -128 korekcja konwerji prÛbki 16-bitowej do 8-bitowej
    2616:	80 91 50 02 	lds	r24, 0x0250
    261a:	88 2f       	mov	r24, r24
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	20 91 1d 02 	lds	r18, 0x021D
    2622:	30 91 1e 02 	lds	r19, 0x021E
    2626:	98 2f       	mov	r25, r24
    2628:	88 27       	eor	r24, r24
    262a:	99 0f       	add	r25, r25
    262c:	82 0f       	add	r24, r18
    262e:	93 1f       	adc	r25, r19
    2630:	fc 01       	movw	r30, r24
    2632:	ea 59       	subi	r30, 0x9A	; 154
    2634:	fd 4f       	sbci	r31, 0xFD	; 253
    2636:	80 81       	ld	r24, Z
    2638:	80 58       	subi	r24, 0x80	; 128
    263a:	80 93 1b 02 	sts	0x021B, r24
    263e:	c9 01       	movw	r24, r18
    2640:	01 96       	adiw	r24, 0x01	; 1
    2642:	90 93 1e 02 	sts	0x021E, r25
    2646:	80 93 1d 02 	sts	0x021D, r24
    264a:	7d c0       	rjmp	.+250    	; 0x2746 <__vector_10+0x1c8>
			} else {								// jeúli prÛbki monofoniczne
				buf_idx++;							// pomijamy m≥odszy bajt 16-bitowej prÛbki MONO
    264c:	80 91 1d 02 	lds	r24, 0x021D
    2650:	90 91 1e 02 	lds	r25, 0x021E
    2654:	01 96       	adiw	r24, 0x01	; 1
    2656:	90 93 1e 02 	sts	0x021E, r25
    265a:	80 93 1d 02 	sts	0x021D, r24
				v1 = buf[nr_buf][buf_idx++]-128;	// -128 korekcja konwerji prÛbki 16-bitowej do 8-bitowej
    265e:	80 91 50 02 	lds	r24, 0x0250
    2662:	88 2f       	mov	r24, r24
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	20 91 1d 02 	lds	r18, 0x021D
    266a:	30 91 1e 02 	lds	r19, 0x021E
    266e:	98 2f       	mov	r25, r24
    2670:	88 27       	eor	r24, r24
    2672:	99 0f       	add	r25, r25
    2674:	82 0f       	add	r24, r18
    2676:	93 1f       	adc	r25, r19
    2678:	fc 01       	movw	r30, r24
    267a:	ea 59       	subi	r30, 0x9A	; 154
    267c:	fd 4f       	sbci	r31, 0xFD	; 253
    267e:	80 81       	ld	r24, Z
    2680:	80 58       	subi	r24, 0x80	; 128
    2682:	80 93 1c 02 	sts	0x021C, r24
    2686:	c9 01       	movw	r24, r18
    2688:	01 96       	adiw	r24, 0x01	; 1
    268a:	90 93 1e 02 	sts	0x021E, r25
    268e:	80 93 1d 02 	sts	0x021D, r24
				v2 = v1;							// to samo na dwa kana≥y/wyjúcia
    2692:	80 91 1c 02 	lds	r24, 0x021C
    2696:	80 93 1b 02 	sts	0x021B, r24
    269a:	55 c0       	rjmp	.+170    	; 0x2746 <__vector_10+0x1c8>
			}
		} else {									// jeúli rozdzielczoúÊ 8-bitÛw
			if( !FLAGS.stereo ) {					// jeúli prÛbki monofoniczne
    269c:	80 91 66 06 	lds	r24, 0x0666
    26a0:	81 70       	andi	r24, 0x01	; 1
    26a2:	88 23       	and	r24, r24
    26a4:	f1 f4       	brne	.+60     	; 0x26e2 <__vector_10+0x164>
				v1 = buf[nr_buf][buf_idx++];		// pobieramy prÛbkÍ MONO do zmiennej v1
    26a6:	80 91 50 02 	lds	r24, 0x0250
    26aa:	88 2f       	mov	r24, r24
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	20 91 1d 02 	lds	r18, 0x021D
    26b2:	30 91 1e 02 	lds	r19, 0x021E
    26b6:	98 2f       	mov	r25, r24
    26b8:	88 27       	eor	r24, r24
    26ba:	99 0f       	add	r25, r25
    26bc:	82 0f       	add	r24, r18
    26be:	93 1f       	adc	r25, r19
    26c0:	fc 01       	movw	r30, r24
    26c2:	ea 59       	subi	r30, 0x9A	; 154
    26c4:	fd 4f       	sbci	r31, 0xFD	; 253
    26c6:	80 81       	ld	r24, Z
    26c8:	80 93 1c 02 	sts	0x021C, r24
    26cc:	c9 01       	movw	r24, r18
    26ce:	01 96       	adiw	r24, 0x01	; 1
    26d0:	90 93 1e 02 	sts	0x021E, r25
    26d4:	80 93 1d 02 	sts	0x021D, r24
				v2 = v1;							// to samo na dwa kana≥y/wyjúcia
    26d8:	80 91 1c 02 	lds	r24, 0x021C
    26dc:	80 93 1b 02 	sts	0x021B, r24
    26e0:	32 c0       	rjmp	.+100    	; 0x2746 <__vector_10+0x1c8>
			} else {								// jeúli prÛbki stereofoniczne
				v1 = buf[nr_buf][buf_idx++];		// pobieramy prÛbkÍ kana≥ L
    26e2:	80 91 50 02 	lds	r24, 0x0250
    26e6:	88 2f       	mov	r24, r24
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	20 91 1d 02 	lds	r18, 0x021D
    26ee:	30 91 1e 02 	lds	r19, 0x021E
    26f2:	98 2f       	mov	r25, r24
    26f4:	88 27       	eor	r24, r24
    26f6:	99 0f       	add	r25, r25
    26f8:	82 0f       	add	r24, r18
    26fa:	93 1f       	adc	r25, r19
    26fc:	fc 01       	movw	r30, r24
    26fe:	ea 59       	subi	r30, 0x9A	; 154
    2700:	fd 4f       	sbci	r31, 0xFD	; 253
    2702:	80 81       	ld	r24, Z
    2704:	80 93 1c 02 	sts	0x021C, r24
    2708:	c9 01       	movw	r24, r18
    270a:	01 96       	adiw	r24, 0x01	; 1
    270c:	90 93 1e 02 	sts	0x021E, r25
    2710:	80 93 1d 02 	sts	0x021D, r24
				v2 = buf[nr_buf][buf_idx++];		// pobieramy prÛbkÍ kana≥ R
    2714:	80 91 50 02 	lds	r24, 0x0250
    2718:	88 2f       	mov	r24, r24
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	20 91 1d 02 	lds	r18, 0x021D
    2720:	30 91 1e 02 	lds	r19, 0x021E
    2724:	98 2f       	mov	r25, r24
    2726:	88 27       	eor	r24, r24
    2728:	99 0f       	add	r25, r25
    272a:	82 0f       	add	r24, r18
    272c:	93 1f       	adc	r25, r19
    272e:	fc 01       	movw	r30, r24
    2730:	ea 59       	subi	r30, 0x9A	; 154
    2732:	fd 4f       	sbci	r31, 0xFD	; 253
    2734:	80 81       	ld	r24, Z
    2736:	80 93 1b 02 	sts	0x021B, r24
    273a:	c9 01       	movw	r24, r18
    273c:	01 96       	adiw	r24, 0x01	; 1
    273e:	90 93 1e 02 	sts	0x021E, r25
    2742:	80 93 1d 02 	sts	0x021D, r24
			}
		}

	}

	if(sk1>-1) {
    2746:	80 91 60 00 	lds	r24, 0x0060
    274a:	88 23       	and	r24, r24
    274c:	5c f1       	brlt	.+86     	; 0x27a4 <__vector_10+0x226>
		if( efekt_cnt++ > sk1 ) {
    274e:	20 91 1a 02 	lds	r18, 0x021A
    2752:	2a 83       	std	Y+2, r18	; 0x02
    2754:	2a 81       	ldd	r18, Y+2	; 0x02
    2756:	82 2f       	mov	r24, r18
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	20 91 60 00 	lds	r18, 0x0060
    275e:	33 27       	eor	r19, r19
    2760:	27 fd       	sbrc	r18, 7
    2762:	30 95       	com	r19
    2764:	19 82       	std	Y+1, r1	; 0x01
    2766:	28 17       	cp	r18, r24
    2768:	39 07       	cpc	r19, r25
    276a:	14 f4       	brge	.+4      	; 0x2770 <__vector_10+0x1f2>
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	89 83       	std	Y+1, r24	; 0x01
    2770:	8a 81       	ldd	r24, Y+2	; 0x02
    2772:	8f 5f       	subi	r24, 0xFF	; 255
    2774:	80 93 1a 02 	sts	0x021A, r24
    2778:	29 81       	ldd	r18, Y+1	; 0x01
    277a:	22 23       	and	r18, r18
    277c:	c1 f0       	breq	.+48     	; 0x27ae <__vector_10+0x230>
			efekt_cnt=0;
    277e:	10 92 1a 02 	sts	0x021A, r1
			buf_idx+=sk2;
    2782:	80 91 61 00 	lds	r24, 0x0061
    2786:	28 2f       	mov	r18, r24
    2788:	33 27       	eor	r19, r19
    278a:	27 fd       	sbrc	r18, 7
    278c:	30 95       	com	r19
    278e:	80 91 1d 02 	lds	r24, 0x021D
    2792:	90 91 1e 02 	lds	r25, 0x021E
    2796:	82 0f       	add	r24, r18
    2798:	93 1f       	adc	r25, r19
    279a:	90 93 1e 02 	sts	0x021E, r25
    279e:	80 93 1d 02 	sts	0x021D, r24
    27a2:	05 c0       	rjmp	.+10     	; 0x27ae <__vector_10+0x230>
		}
	} else {
		efekt_cnt=0;
    27a4:	10 92 1a 02 	sts	0x021A, r1
		sk2=4;
    27a8:	84 e0       	ldi	r24, 0x04	; 4
    27aa:	80 93 61 00 	sts	0x0061, r24
	}

	OCR1A = v1;									// prÛbka na wyjúcie PWM1, kana≥ L
    27ae:	ea e4       	ldi	r30, 0x4A	; 74
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 91 1c 02 	lds	r24, 0x021C
    27b6:	88 2f       	mov	r24, r24
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	91 83       	std	Z+1, r25	; 0x01
    27bc:	80 83       	st	Z, r24
	OCR1B = v2;									// prÛbka na wyjúcie PWM2, kana≥ R
    27be:	e8 e4       	ldi	r30, 0x48	; 72
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	80 91 1b 02 	lds	r24, 0x021B
    27c6:	88 2f       	mov	r24, r24
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	91 83       	std	Z+1, r25	; 0x01
    27cc:	80 83       	st	Z, r24

	if( buf_idx > BUF_SIZE-1 ) {
    27ce:	80 91 1d 02 	lds	r24, 0x021D
    27d2:	90 91 1e 02 	lds	r25, 0x021E
    27d6:	22 e0       	ldi	r18, 0x02	; 2
    27d8:	80 30       	cpi	r24, 0x00	; 0
    27da:	92 07       	cpc	r25, r18
    27dc:	68 f0       	brcs	.+26     	; 0x27f8 <__vector_10+0x27a>
		buf_idx=0;								// reset indeksu bufora
    27de:	10 92 1e 02 	sts	0x021E, r1
    27e2:	10 92 1d 02 	sts	0x021D, r1
		can_read = 1;							// flaga = 1
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	80 93 65 02 	sts	0x0265, r24
		nr_buf ^= 0x01;							// zmiana bufora na kolejny
    27ec:	90 91 50 02 	lds	r25, 0x0250
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	89 27       	eor	r24, r25
    27f4:	80 93 50 02 	sts	0x0250, r24
	}

	tick++;										// podstawa czasu
    27f8:	80 91 63 02 	lds	r24, 0x0263
    27fc:	90 91 64 02 	lds	r25, 0x0264
    2800:	01 96       	adiw	r24, 0x01	; 1
    2802:	90 93 64 02 	sts	0x0264, r25
    2806:	80 93 63 02 	sts	0x0263, r24

	slupek = v1;								// zmienne na potrzeby wskaünika wysterowania
    280a:	80 91 1c 02 	lds	r24, 0x021C
    280e:	80 93 39 02 	sts	0x0239, r24
#endif
}
    2812:	0f 90       	pop	r0
    2814:	0f 90       	pop	r0
    2816:	cf 91       	pop	r28
    2818:	df 91       	pop	r29
    281a:	ff 91       	pop	r31
    281c:	ef 91       	pop	r30
    281e:	9f 91       	pop	r25
    2820:	8f 91       	pop	r24
    2822:	3f 91       	pop	r19
    2824:	2f 91       	pop	r18
    2826:	0f 90       	pop	r0
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	0f 90       	pop	r0
    282c:	1f 90       	pop	r1
    282e:	18 95       	reti

00002830 <load_header>:
// *************************** koniec przerwania ****************************************


/* 0:Invalid format, 1:I/O error, >1:Number of samples */
static DWORD load_header (void) {
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
    2838:	61 97       	sbiw	r28, 0x11	; 17
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	f8 94       	cli
    283e:	de bf       	out	0x3e, r29	; 62
    2840:	0f be       	out	0x3f, r0	; 63
    2842:	cd bf       	out	0x3d, r28	; 61
	DWORD sz;
	uint8_t *wsk_buf = &buf[0][0];
    2844:	86 e6       	ldi	r24, 0x66	; 102
    2846:	92 e0       	ldi	r25, 0x02	; 2
    2848:	9c 83       	std	Y+4, r25	; 0x04
    284a:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t ocrx;

	if (pf_read(wsk_buf, 12, &rb)) return 1;	/* Load file header (12 bytes) */
    284c:	8b 81       	ldd	r24, Y+3	; 0x03
    284e:	9c 81       	ldd	r25, Y+4	; 0x04
    2850:	21 e5       	ldi	r18, 0x51	; 81
    2852:	32 e0       	ldi	r19, 0x02	; 2
    2854:	6c e0       	ldi	r22, 0x0C	; 12
    2856:	70 e0       	ldi	r23, 0x00	; 0
    2858:	a9 01       	movw	r20, r18
    285a:	0e 94 2b 24 	call	0x4856	; 0x4856 <pf_read>
    285e:	88 23       	and	r24, r24
    2860:	49 f0       	breq	.+18     	; 0x2874 <load_header+0x44>
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	a0 e0       	ldi	r26, 0x00	; 0
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	8e 87       	std	Y+14, r24	; 0x0e
    286c:	9f 87       	std	Y+15, r25	; 0x0f
    286e:	a8 8b       	std	Y+16, r26	; 0x10
    2870:	b9 8b       	std	Y+17, r27	; 0x11
    2872:	74 c1       	rjmp	.+744    	; 0x2b5c <load_header+0x32c>

	if (rb != 12 || LD_DWORD(wsk_buf+8) != FCC('W','A','V','E')) return 0;
    2874:	80 91 51 02 	lds	r24, 0x0251
    2878:	90 91 52 02 	lds	r25, 0x0252
    287c:	8c 30       	cpi	r24, 0x0C	; 12
    287e:	91 05       	cpc	r25, r1
    2880:	81 f4       	brne	.+32     	; 0x28a2 <load_header+0x72>
    2882:	8b 81       	ldd	r24, Y+3	; 0x03
    2884:	9c 81       	ldd	r25, Y+4	; 0x04
    2886:	fc 01       	movw	r30, r24
    2888:	38 96       	adiw	r30, 0x08	; 8
    288a:	80 81       	ld	r24, Z
    288c:	91 81       	ldd	r25, Z+1	; 0x01
    288e:	a2 81       	ldd	r26, Z+2	; 0x02
    2890:	b3 81       	ldd	r27, Z+3	; 0x03
    2892:	87 35       	cpi	r24, 0x57	; 87
    2894:	21 e4       	ldi	r18, 0x41	; 65
    2896:	92 07       	cpc	r25, r18
    2898:	26 e5       	ldi	r18, 0x56	; 86
    289a:	a2 07       	cpc	r26, r18
    289c:	25 e4       	ldi	r18, 0x45	; 69
    289e:	b2 07       	cpc	r27, r18
    28a0:	29 f0       	breq	.+10     	; 0x28ac <load_header+0x7c>
    28a2:	1e 86       	std	Y+14, r1	; 0x0e
    28a4:	1f 86       	std	Y+15, r1	; 0x0f
    28a6:	18 8a       	std	Y+16, r1	; 0x10
    28a8:	19 8a       	std	Y+17, r1	; 0x11
    28aa:	58 c1       	rjmp	.+688    	; 0x2b5c <load_header+0x32c>

	for (;;) {
		pf_read(wsk_buf, 8, &rb);					/* Get Chunk ID and size */
    28ac:	8b 81       	ldd	r24, Y+3	; 0x03
    28ae:	9c 81       	ldd	r25, Y+4	; 0x04
    28b0:	21 e5       	ldi	r18, 0x51	; 81
    28b2:	32 e0       	ldi	r19, 0x02	; 2
    28b4:	68 e0       	ldi	r22, 0x08	; 8
    28b6:	70 e0       	ldi	r23, 0x00	; 0
    28b8:	a9 01       	movw	r20, r18
    28ba:	0e 94 2b 24 	call	0x4856	; 0x4856 <pf_read>
		if (rb != 8) return 0;
    28be:	80 91 51 02 	lds	r24, 0x0251
    28c2:	90 91 52 02 	lds	r25, 0x0252
    28c6:	88 30       	cpi	r24, 0x08	; 8
    28c8:	91 05       	cpc	r25, r1
    28ca:	29 f0       	breq	.+10     	; 0x28d6 <load_header+0xa6>
    28cc:	1e 86       	std	Y+14, r1	; 0x0e
    28ce:	1f 86       	std	Y+15, r1	; 0x0f
    28d0:	18 8a       	std	Y+16, r1	; 0x10
    28d2:	19 8a       	std	Y+17, r1	; 0x11
    28d4:	43 c1       	rjmp	.+646    	; 0x2b5c <load_header+0x32c>
		sz = LD_DWORD(&wsk_buf[4]);					/* Chunk size */
    28d6:	8b 81       	ldd	r24, Y+3	; 0x03
    28d8:	9c 81       	ldd	r25, Y+4	; 0x04
    28da:	fc 01       	movw	r30, r24
    28dc:	34 96       	adiw	r30, 0x04	; 4
    28de:	80 81       	ld	r24, Z
    28e0:	91 81       	ldd	r25, Z+1	; 0x01
    28e2:	a2 81       	ldd	r26, Z+2	; 0x02
    28e4:	b3 81       	ldd	r27, Z+3	; 0x03
    28e6:	8d 83       	std	Y+5, r24	; 0x05
    28e8:	9e 83       	std	Y+6, r25	; 0x06
    28ea:	af 83       	std	Y+7, r26	; 0x07
    28ec:	b8 87       	std	Y+8, r27	; 0x08

		switch (LD_DWORD(&wsk_buf[0])) {			/* FCC */
    28ee:	eb 81       	ldd	r30, Y+3	; 0x03
    28f0:	fc 81       	ldd	r31, Y+4	; 0x04
    28f2:	80 81       	ld	r24, Z
    28f4:	91 81       	ldd	r25, Z+1	; 0x01
    28f6:	a2 81       	ldd	r26, Z+2	; 0x02
    28f8:	b3 81       	ldd	r27, Z+3	; 0x03
    28fa:	8a 87       	std	Y+10, r24	; 0x0a
    28fc:	9b 87       	std	Y+11, r25	; 0x0b
    28fe:	ac 87       	std	Y+12, r26	; 0x0c
    2900:	bd 87       	std	Y+13, r27	; 0x0d
    2902:	8a 85       	ldd	r24, Y+10	; 0x0a
    2904:	9b 85       	ldd	r25, Y+11	; 0x0b
    2906:	ac 85       	ldd	r26, Y+12	; 0x0c
    2908:	bd 85       	ldd	r27, Y+13	; 0x0d
    290a:	8c 34       	cpi	r24, 0x4C	; 76
    290c:	29 e4       	ldi	r18, 0x49	; 73
    290e:	92 07       	cpc	r25, r18
    2910:	23 e5       	ldi	r18, 0x53	; 83
    2912:	a2 07       	cpc	r26, r18
    2914:	24 e5       	ldi	r18, 0x54	; 84
    2916:	b2 07       	cpc	r27, r18
    2918:	09 f4       	brne	.+2      	; 0x291c <load_header+0xec>
    291a:	07 c1       	rjmp	.+526    	; 0x2b2a <load_header+0x2fa>
    291c:	8a 85       	ldd	r24, Y+10	; 0x0a
    291e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2920:	ac 85       	ldd	r26, Y+12	; 0x0c
    2922:	bd 85       	ldd	r27, Y+13	; 0x0d
    2924:	8d 34       	cpi	r24, 0x4D	; 77
    2926:	29 e4       	ldi	r18, 0x49	; 73
    2928:	92 07       	cpc	r25, r18
    292a:	23 e5       	ldi	r18, 0x53	; 83
    292c:	a2 07       	cpc	r26, r18
    292e:	24 e5       	ldi	r18, 0x54	; 84
    2930:	b2 07       	cpc	r27, r18
    2932:	68 f4       	brcc	.+26     	; 0x294e <load_header+0x11e>
    2934:	8a 85       	ldd	r24, Y+10	; 0x0a
    2936:	9b 85       	ldd	r25, Y+11	; 0x0b
    2938:	ac 85       	ldd	r26, Y+12	; 0x0c
    293a:	bd 85       	ldd	r27, Y+13	; 0x0d
    293c:	86 36       	cpi	r24, 0x66	; 102
    293e:	2d e6       	ldi	r18, 0x6D	; 109
    2940:	92 07       	cpc	r25, r18
    2942:	24 e7       	ldi	r18, 0x74	; 116
    2944:	a2 07       	cpc	r26, r18
    2946:	20 e2       	ldi	r18, 0x20	; 32
    2948:	b2 07       	cpc	r27, r18
    294a:	e1 f0       	breq	.+56     	; 0x2984 <load_header+0x154>
    294c:	03 c1       	rjmp	.+518    	; 0x2b54 <load_header+0x324>
    294e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2950:	9b 85       	ldd	r25, Y+11	; 0x0b
    2952:	ac 85       	ldd	r26, Y+12	; 0x0c
    2954:	bd 85       	ldd	r27, Y+13	; 0x0d
    2956:	84 36       	cpi	r24, 0x64	; 100
    2958:	21 e6       	ldi	r18, 0x61	; 97
    295a:	92 07       	cpc	r25, r18
    295c:	24 e7       	ldi	r18, 0x74	; 116
    295e:	a2 07       	cpc	r26, r18
    2960:	21 e6       	ldi	r18, 0x61	; 97
    2962:	b2 07       	cpc	r27, r18
    2964:	09 f4       	brne	.+2      	; 0x2968 <load_header+0x138>
    2966:	d8 c0       	rjmp	.+432    	; 0x2b18 <load_header+0x2e8>
    2968:	8a 85       	ldd	r24, Y+10	; 0x0a
    296a:	9b 85       	ldd	r25, Y+11	; 0x0b
    296c:	ac 85       	ldd	r26, Y+12	; 0x0c
    296e:	bd 85       	ldd	r27, Y+13	; 0x0d
    2970:	86 36       	cpi	r24, 0x66	; 102
    2972:	21 e6       	ldi	r18, 0x61	; 97
    2974:	92 07       	cpc	r25, r18
    2976:	23 e6       	ldi	r18, 0x63	; 99
    2978:	a2 07       	cpc	r26, r18
    297a:	24 e7       	ldi	r18, 0x74	; 116
    297c:	b2 07       	cpc	r27, r18
    297e:	09 f4       	brne	.+2      	; 0x2982 <load_header+0x152>
    2980:	d4 c0       	rjmp	.+424    	; 0x2b2a <load_header+0x2fa>
    2982:	e8 c0       	rjmp	.+464    	; 0x2b54 <load_header+0x324>
		case FCC('f','m','t',' ') :					/* 'fmt ' chunk */
			if (sz > 100 || sz < 16) return 0;		/* Check chunk size */
    2984:	8d 81       	ldd	r24, Y+5	; 0x05
    2986:	9e 81       	ldd	r25, Y+6	; 0x06
    2988:	af 81       	ldd	r26, Y+7	; 0x07
    298a:	b8 85       	ldd	r27, Y+8	; 0x08
    298c:	85 36       	cpi	r24, 0x65	; 101
    298e:	91 05       	cpc	r25, r1
    2990:	a1 05       	cpc	r26, r1
    2992:	b1 05       	cpc	r27, r1
    2994:	48 f4       	brcc	.+18     	; 0x29a8 <load_header+0x178>
    2996:	8d 81       	ldd	r24, Y+5	; 0x05
    2998:	9e 81       	ldd	r25, Y+6	; 0x06
    299a:	af 81       	ldd	r26, Y+7	; 0x07
    299c:	b8 85       	ldd	r27, Y+8	; 0x08
    299e:	80 31       	cpi	r24, 0x10	; 16
    29a0:	91 05       	cpc	r25, r1
    29a2:	a1 05       	cpc	r26, r1
    29a4:	b1 05       	cpc	r27, r1
    29a6:	28 f4       	brcc	.+10     	; 0x29b2 <load_header+0x182>
    29a8:	1e 86       	std	Y+14, r1	; 0x0e
    29aa:	1f 86       	std	Y+15, r1	; 0x0f
    29ac:	18 8a       	std	Y+16, r1	; 0x10
    29ae:	19 8a       	std	Y+17, r1	; 0x11
    29b0:	d5 c0       	rjmp	.+426    	; 0x2b5c <load_header+0x32c>

			pf_read(wsk_buf, sz, &rb);				/* Get content */
    29b2:	4d 81       	ldd	r20, Y+5	; 0x05
    29b4:	5e 81       	ldd	r21, Y+6	; 0x06
    29b6:	8b 81       	ldd	r24, Y+3	; 0x03
    29b8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ba:	21 e5       	ldi	r18, 0x51	; 81
    29bc:	32 e0       	ldi	r19, 0x02	; 2
    29be:	ba 01       	movw	r22, r20
    29c0:	a9 01       	movw	r20, r18
    29c2:	0e 94 2b 24 	call	0x4856	; 0x4856 <pf_read>

			if (rb != sz) return 0;
    29c6:	80 91 51 02 	lds	r24, 0x0251
    29ca:	90 91 52 02 	lds	r25, 0x0252
    29ce:	9c 01       	movw	r18, r24
    29d0:	40 e0       	ldi	r20, 0x00	; 0
    29d2:	50 e0       	ldi	r21, 0x00	; 0
    29d4:	8d 81       	ldd	r24, Y+5	; 0x05
    29d6:	9e 81       	ldd	r25, Y+6	; 0x06
    29d8:	af 81       	ldd	r26, Y+7	; 0x07
    29da:	b8 85       	ldd	r27, Y+8	; 0x08
    29dc:	28 17       	cp	r18, r24
    29de:	39 07       	cpc	r19, r25
    29e0:	4a 07       	cpc	r20, r26
    29e2:	5b 07       	cpc	r21, r27
    29e4:	29 f0       	breq	.+10     	; 0x29f0 <load_header+0x1c0>
    29e6:	1e 86       	std	Y+14, r1	; 0x0e
    29e8:	1f 86       	std	Y+15, r1	; 0x0f
    29ea:	18 8a       	std	Y+16, r1	; 0x10
    29ec:	19 8a       	std	Y+17, r1	; 0x11
    29ee:	b6 c0       	rjmp	.+364    	; 0x2b5c <load_header+0x32c>

			if (wsk_buf[0] != 1) return 0;			/* Check coding type (1) */
    29f0:	eb 81       	ldd	r30, Y+3	; 0x03
    29f2:	fc 81       	ldd	r31, Y+4	; 0x04
    29f4:	80 81       	ld	r24, Z
    29f6:	81 30       	cpi	r24, 0x01	; 1
    29f8:	29 f0       	breq	.+10     	; 0x2a04 <load_header+0x1d4>
    29fa:	1e 86       	std	Y+14, r1	; 0x0e
    29fc:	1f 86       	std	Y+15, r1	; 0x0f
    29fe:	18 8a       	std	Y+16, r1	; 0x10
    2a00:	19 8a       	std	Y+17, r1	; 0x11
    2a02:	ac c0       	rjmp	.+344    	; 0x2b5c <load_header+0x32c>

			if (wsk_buf[2] != 1 && wsk_buf[2] != 2) /* Check channels (1/2) */
    2a04:	8b 81       	ldd	r24, Y+3	; 0x03
    2a06:	9c 81       	ldd	r25, Y+4	; 0x04
    2a08:	fc 01       	movw	r30, r24
    2a0a:	32 96       	adiw	r30, 0x02	; 2
    2a0c:	80 81       	ld	r24, Z
    2a0e:	81 30       	cpi	r24, 0x01	; 1
    2a10:	61 f0       	breq	.+24     	; 0x2a2a <load_header+0x1fa>
    2a12:	8b 81       	ldd	r24, Y+3	; 0x03
    2a14:	9c 81       	ldd	r25, Y+4	; 0x04
    2a16:	fc 01       	movw	r30, r24
    2a18:	32 96       	adiw	r30, 0x02	; 2
    2a1a:	80 81       	ld	r24, Z
    2a1c:	82 30       	cpi	r24, 0x02	; 2
    2a1e:	29 f0       	breq	.+10     	; 0x2a2a <load_header+0x1fa>
				return 0;
    2a20:	1e 86       	std	Y+14, r1	; 0x0e
    2a22:	1f 86       	std	Y+15, r1	; 0x0f
    2a24:	18 8a       	std	Y+16, r1	; 0x10
    2a26:	19 8a       	std	Y+17, r1	; 0x11
    2a28:	99 c0       	rjmp	.+306    	; 0x2b5c <load_header+0x32c>

			FLAGS.stereo = wsk_buf[2]==2;				/* Get channel flag */
    2a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a2e:	fc 01       	movw	r30, r24
    2a30:	32 96       	adiw	r30, 0x02	; 2
    2a32:	80 81       	ld	r24, Z
    2a34:	19 86       	std	Y+9, r1	; 0x09
    2a36:	82 30       	cpi	r24, 0x02	; 2
    2a38:	11 f4       	brne	.+4      	; 0x2a3e <load_header+0x20e>
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	89 87       	std	Y+9, r24	; 0x09
    2a3e:	99 85       	ldd	r25, Y+9	; 0x09
    2a40:	91 70       	andi	r25, 0x01	; 1
    2a42:	80 91 66 06 	lds	r24, 0x0666
    2a46:	8e 7f       	andi	r24, 0xFE	; 254
    2a48:	89 2b       	or	r24, r25
    2a4a:	80 93 66 06 	sts	0x0666, r24
			if (wsk_buf[14] != 8 && wsk_buf[14] != 16)	/* Check resolution (8/16) */
    2a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a50:	9c 81       	ldd	r25, Y+4	; 0x04
    2a52:	fc 01       	movw	r30, r24
    2a54:	3e 96       	adiw	r30, 0x0e	; 14
    2a56:	80 81       	ld	r24, Z
    2a58:	88 30       	cpi	r24, 0x08	; 8
    2a5a:	61 f0       	breq	.+24     	; 0x2a74 <load_header+0x244>
    2a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a60:	fc 01       	movw	r30, r24
    2a62:	3e 96       	adiw	r30, 0x0e	; 14
    2a64:	80 81       	ld	r24, Z
    2a66:	80 31       	cpi	r24, 0x10	; 16
    2a68:	29 f0       	breq	.+10     	; 0x2a74 <load_header+0x244>
				return 0;
    2a6a:	1e 86       	std	Y+14, r1	; 0x0e
    2a6c:	1f 86       	std	Y+15, r1	; 0x0f
    2a6e:	18 8a       	std	Y+16, r1	; 0x10
    2a70:	19 8a       	std	Y+17, r1	; 0x11
    2a72:	74 c0       	rjmp	.+232    	; 0x2b5c <load_header+0x32c>

			FLAGS.resolution = wsk_buf[14];			// ustalamy jaka rozdzielczoúÊ 16/8 - bitÛw
    2a74:	8b 81       	ldd	r24, Y+3	; 0x03
    2a76:	9c 81       	ldd	r25, Y+4	; 0x04
    2a78:	fc 01       	movw	r30, r24
    2a7a:	3e 96       	adiw	r30, 0x0e	; 14
    2a7c:	80 81       	ld	r24, Z
    2a7e:	80 93 67 06 	sts	0x0667, r24
			FLAGS.prescaler = 0;
    2a82:	80 91 66 06 	lds	r24, 0x0666
    2a86:	8d 7f       	andi	r24, 0xFD	; 253
    2a88:	80 93 66 06 	sts	0x0666, r24

			// obliczmy preskaler Timera0 w zaleønoúci od czÍstotliwoúci samplowania
			FLAGS.khz = LD_WORD(&wsk_buf[4]);
    2a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a90:	fc 01       	movw	r30, r24
    2a92:	34 96       	adiw	r30, 0x04	; 4
    2a94:	80 81       	ld	r24, Z
    2a96:	91 81       	ldd	r25, Z+1	; 0x01
    2a98:	90 93 69 06 	sts	0x0669, r25
    2a9c:	80 93 68 06 	sts	0x0668, r24
			ocrx = (uint16_t)(F_CPU/8/LD_WORD(&wsk_buf[4]))-1;
    2aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa4:	fc 01       	movw	r30, r24
    2aa6:	34 96       	adiw	r30, 0x04	; 4
    2aa8:	80 81       	ld	r24, Z
    2aaa:	91 81       	ldd	r25, Z+1	; 0x01
    2aac:	9c 01       	movw	r18, r24
    2aae:	40 e0       	ldi	r20, 0x00	; 0
    2ab0:	50 e0       	ldi	r21, 0x00	; 0
    2ab2:	80 e8       	ldi	r24, 0x80	; 128
    2ab4:	94 e8       	ldi	r25, 0x84	; 132
    2ab6:	ae e1       	ldi	r26, 0x1E	; 30
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	bc 01       	movw	r22, r24
    2abc:	cd 01       	movw	r24, r26
    2abe:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
    2ac2:	da 01       	movw	r26, r20
    2ac4:	c9 01       	movw	r24, r18
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	9a 83       	std	Y+2, r25	; 0x02
    2aca:	89 83       	std	Y+1, r24	; 0x01
			if( ocrx > 255 ) {
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad0:	8f 3f       	cpi	r24, 0xFF	; 255
    2ad2:	91 05       	cpc	r25, r1
    2ad4:	e1 f0       	breq	.+56     	; 0x2b0e <load_header+0x2de>
    2ad6:	d8 f0       	brcs	.+54     	; 0x2b0e <load_header+0x2de>
				ocrx = (uint16_t)(F_CPU/64/LD_WORD(&wsk_buf[4]))-1;
    2ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ada:	9c 81       	ldd	r25, Y+4	; 0x04
    2adc:	fc 01       	movw	r30, r24
    2ade:	34 96       	adiw	r30, 0x04	; 4
    2ae0:	80 81       	ld	r24, Z
    2ae2:	91 81       	ldd	r25, Z+1	; 0x01
    2ae4:	9c 01       	movw	r18, r24
    2ae6:	40 e0       	ldi	r20, 0x00	; 0
    2ae8:	50 e0       	ldi	r21, 0x00	; 0
    2aea:	80 e9       	ldi	r24, 0x90	; 144
    2aec:	90 ed       	ldi	r25, 0xD0	; 208
    2aee:	a3 e0       	ldi	r26, 0x03	; 3
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	bc 01       	movw	r22, r24
    2af4:	cd 01       	movw	r24, r26
    2af6:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
    2afa:	da 01       	movw	r26, r20
    2afc:	c9 01       	movw	r24, r18
    2afe:	01 97       	sbiw	r24, 0x01	; 1
    2b00:	9a 83       	std	Y+2, r25	; 0x02
    2b02:	89 83       	std	Y+1, r24	; 0x01
				FLAGS.prescaler = 1;
    2b04:	80 91 66 06 	lds	r24, 0x0666
    2b08:	82 60       	ori	r24, 0x02	; 2
    2b0a:	80 93 66 06 	sts	0x0666, r24
			}
			OCR0 = (uint8_t)ocrx;					// obliczona wartoúÊ OCR0
    2b0e:	ec e5       	ldi	r30, 0x5C	; 92
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	89 81       	ldd	r24, Y+1	; 0x01
    2b14:	80 83       	st	Z, r24
    2b16:	ca ce       	rjmp	.-620    	; 0x28ac <load_header+0x7c>
			break;

		case FCC('d','a','t','a') :				/* 'data' chunk (start to PLAY) */
			return sz;
    2b18:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b1c:	af 81       	ldd	r26, Y+7	; 0x07
    2b1e:	b8 85       	ldd	r27, Y+8	; 0x08
    2b20:	8e 87       	std	Y+14, r24	; 0x0e
    2b22:	9f 87       	std	Y+15, r25	; 0x0f
    2b24:	a8 8b       	std	Y+16, r26	; 0x10
    2b26:	b9 8b       	std	Y+17, r27	; 0x11
    2b28:	19 c0       	rjmp	.+50     	; 0x2b5c <load_header+0x32c>

		case FCC('L','I','S','T') :				/* 'LIST' chunk (skip) */
		case FCC('f','a','c','t') :				/* 'fact' chunk (skip) */
			pf_lseek(Fs.fptr + sz);
    2b2a:	80 91 82 06 	lds	r24, 0x0682
    2b2e:	90 91 83 06 	lds	r25, 0x0683
    2b32:	a0 91 84 06 	lds	r26, 0x0684
    2b36:	b0 91 85 06 	lds	r27, 0x0685
    2b3a:	2d 81       	ldd	r18, Y+5	; 0x05
    2b3c:	3e 81       	ldd	r19, Y+6	; 0x06
    2b3e:	4f 81       	ldd	r20, Y+7	; 0x07
    2b40:	58 85       	ldd	r21, Y+8	; 0x08
    2b42:	82 0f       	add	r24, r18
    2b44:	93 1f       	adc	r25, r19
    2b46:	a4 1f       	adc	r26, r20
    2b48:	b5 1f       	adc	r27, r21
    2b4a:	bc 01       	movw	r22, r24
    2b4c:	cd 01       	movw	r24, r26
    2b4e:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <pf_lseek>
    2b52:	ac ce       	rjmp	.-680    	; 0x28ac <load_header+0x7c>
			break;

		default :								/* Unknown chunk (error) */
			return 0;
    2b54:	1e 86       	std	Y+14, r1	; 0x0e
    2b56:	1f 86       	std	Y+15, r1	; 0x0f
    2b58:	18 8a       	std	Y+16, r1	; 0x10
    2b5a:	19 8a       	std	Y+17, r1	; 0x11
		}
	}
    2b5c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b5e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b60:	a8 89       	ldd	r26, Y+16	; 0x10
    2b62:	b9 89       	ldd	r27, Y+17	; 0x11

	return 0;
}
    2b64:	bc 01       	movw	r22, r24
    2b66:	cd 01       	movw	r24, r26
    2b68:	61 96       	adiw	r28, 0x11	; 17
    2b6a:	0f b6       	in	r0, 0x3f	; 63
    2b6c:	f8 94       	cli
    2b6e:	de bf       	out	0x3e, r29	; 62
    2b70:	0f be       	out	0x3f, r0	; 63
    2b72:	cd bf       	out	0x3d, r28	; 61
    2b74:	cf 91       	pop	r28
    2b76:	df 91       	pop	r29
    2b78:	08 95       	ret

00002b7a <play>:

// ******************  funkcja  P L A Y  ********************************
static UINT play ( const char *fn ) {
    2b7a:	df 93       	push	r29
    2b7c:	cf 93       	push	r28
    2b7e:	cd b7       	in	r28, 0x3d	; 61
    2b80:	de b7       	in	r29, 0x3e	; 62
    2b82:	a8 97       	sbiw	r28, 0x28	; 40
    2b84:	0f b6       	in	r0, 0x3f	; 63
    2b86:	f8 94       	cli
    2b88:	de bf       	out	0x3e, r29	; 62
    2b8a:	0f be       	out	0x3f, r0	; 63
    2b8c:	cd bf       	out	0x3d, r28	; 61
    2b8e:	99 a3       	std	Y+33, r25	; 0x21
    2b90:	88 a3       	std	Y+32, r24	; 0x20

	DWORD sz;
	FRESULT res;

	if ((res = pf_open(fn)) == FR_OK) {
    2b92:	88 a1       	ldd	r24, Y+32	; 0x20
    2b94:	99 a1       	ldd	r25, Y+33	; 0x21
    2b96:	0e 94 96 23 	call	0x472c	; 0x472c <pf_open>
    2b9a:	8b 8b       	std	Y+19, r24	; 0x13
    2b9c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b9e:	88 23       	and	r24, r24
    2ba0:	09 f0       	breq	.+2      	; 0x2ba4 <play+0x2a>
    2ba2:	55 c1       	rjmp	.+682    	; 0x2e4e <play+0x2d4>

		sz = load_header();						/* Load file header */
    2ba4:	0e 94 18 14 	call	0x2830	; 0x2830 <load_header>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	cb 01       	movw	r24, r22
    2bac:	8c 8b       	std	Y+20, r24	; 0x14
    2bae:	9d 8b       	std	Y+21, r25	; 0x15
    2bb0:	ae 8b       	std	Y+22, r26	; 0x16
    2bb2:	bf 8b       	std	Y+23, r27	; 0x17
		if (sz < 256) return (UINT)sz;
    2bb4:	8c 89       	ldd	r24, Y+20	; 0x14
    2bb6:	9d 89       	ldd	r25, Y+21	; 0x15
    2bb8:	ae 89       	ldd	r26, Y+22	; 0x16
    2bba:	bf 89       	ldd	r27, Y+23	; 0x17
    2bbc:	8f 3f       	cpi	r24, 0xFF	; 255
    2bbe:	91 05       	cpc	r25, r1
    2bc0:	a1 05       	cpc	r26, r1
    2bc2:	b1 05       	cpc	r27, r1
    2bc4:	09 f0       	breq	.+2      	; 0x2bc8 <play+0x4e>
    2bc6:	28 f4       	brcc	.+10     	; 0x2bd2 <play+0x58>
    2bc8:	2c 89       	ldd	r18, Y+20	; 0x14
    2bca:	3d 89       	ldd	r19, Y+21	; 0x15
    2bcc:	3b a3       	std	Y+35, r19	; 0x23
    2bce:	2a a3       	std	Y+34, r18	; 0x22
    2bd0:	43 c1       	rjmp	.+646    	; 0x2e58 <play+0x2de>

		pf_lseek(0);
    2bd2:	60 e0       	ldi	r22, 0x00	; 0
    2bd4:	70 e0       	ldi	r23, 0x00	; 0
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <pf_lseek>

		pf_read(&buf[0][0], BUF_SIZE , &rb);	// za≥aduj pierwszπ czÍúÊ bufora
    2bde:	86 e6       	ldi	r24, 0x66	; 102
    2be0:	92 e0       	ldi	r25, 0x02	; 2
    2be2:	21 e5       	ldi	r18, 0x51	; 81
    2be4:	32 e0       	ldi	r19, 0x02	; 2
    2be6:	60 e0       	ldi	r22, 0x00	; 0
    2be8:	72 e0       	ldi	r23, 0x02	; 2
    2bea:	a9 01       	movw	r20, r18
    2bec:	0e 94 2b 24 	call	0x4856	; 0x4856 <pf_read>
		pf_read(&buf[1][0], BUF_SIZE , &rb);	// za≥aduj drugπ czÍúÊ bufora
    2bf0:	86 e6       	ldi	r24, 0x66	; 102
    2bf2:	92 e0       	ldi	r25, 0x02	; 2
    2bf4:	80 50       	subi	r24, 0x00	; 0
    2bf6:	9e 4f       	sbci	r25, 0xFE	; 254
    2bf8:	21 e5       	ldi	r18, 0x51	; 81
    2bfa:	32 e0       	ldi	r19, 0x02	; 2
    2bfc:	60 e0       	ldi	r22, 0x00	; 0
    2bfe:	72 e0       	ldi	r23, 0x02	; 2
    2c00:	a9 01       	movw	r20, r18
    2c02:	0e 94 2b 24 	call	0x4856	; 0x4856 <pf_read>

		if( !FLAGS.prescaler ) TMR_START;		// start Timera0 (samplowanie) z
    2c06:	80 91 66 06 	lds	r24, 0x0666
    2c0a:	82 70       	andi	r24, 0x02	; 2
    2c0c:	88 23       	and	r24, r24
    2c0e:	41 f4       	brne	.+16     	; 0x2c20 <play+0xa6>
    2c10:	a3 e5       	ldi	r26, 0x53	; 83
    2c12:	b0 e0       	ldi	r27, 0x00	; 0
    2c14:	e3 e5       	ldi	r30, 0x53	; 83
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	80 81       	ld	r24, Z
    2c1a:	82 60       	ori	r24, 0x02	; 2
    2c1c:	8c 93       	st	X, r24
    2c1e:	07 c0       	rjmp	.+14     	; 0x2c2e <play+0xb4>
		else TMR64_START;						// preskalerem zaleønym od czÍstotliwoúci
    2c20:	a3 e5       	ldi	r26, 0x53	; 83
    2c22:	b0 e0       	ldi	r27, 0x00	; 0
    2c24:	e3 e5       	ldi	r30, 0x53	; 83
    2c26:	f0 e0       	ldi	r31, 0x00	; 0
    2c28:	80 81       	ld	r24, Z
    2c2a:	83 60       	ori	r24, 0x03	; 3
    2c2c:	8c 93       	st	X, r24

		DDRD  |= (1<<PD5)|(1<<PD4);			// ustaw piny PWM1 (OC1A) oraz PWM2 (OC1B) jako wyjúcia WAØNE !!!
    2c2e:	a1 e3       	ldi	r26, 0x31	; 49
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
    2c32:	e1 e3       	ldi	r30, 0x31	; 49
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	80 81       	ld	r24, Z
    2c38:	80 63       	ori	r24, 0x30	; 48
    2c3a:	8c 93       	st	X, r24

#if USE44KHZ == 0
		uint8_t ss=0,mm=0;
    2c3c:	1a 8a       	std	Y+18, r1	; 0x12
    2c3e:	19 8a       	std	Y+17, r1	; 0x11
		uint16_t kdelay = 0;					// zmienna pomocnicza do eliminacji drgaÒs stykÛw
    2c40:	18 8a       	std	Y+16, r1	; 0x10
    2c42:	1f 86       	std	Y+15, r1	; 0x0f
		uint8_t tab[8] = {0,1,3,7,15,31,63,127};// liniowa charakterystyka wsk. wysterowania
    2c44:	ce 01       	movw	r24, r28
    2c46:	48 96       	adiw	r24, 0x18	; 24
    2c48:	9d a3       	std	Y+37, r25	; 0x25
    2c4a:	8c a3       	std	Y+36, r24	; 0x24
    2c4c:	ec e8       	ldi	r30, 0x8C	; 140
    2c4e:	f1 e0       	ldi	r31, 0x01	; 1
    2c50:	ff a3       	std	Y+39, r31	; 0x27
    2c52:	ee a3       	std	Y+38, r30	; 0x26
    2c54:	f8 e0       	ldi	r31, 0x08	; 8
    2c56:	f8 a7       	std	Y+40, r31	; 0x28
    2c58:	ee a1       	ldd	r30, Y+38	; 0x26
    2c5a:	ff a1       	ldd	r31, Y+39	; 0x27
    2c5c:	00 80       	ld	r0, Z
    2c5e:	2e a1       	ldd	r18, Y+38	; 0x26
    2c60:	3f a1       	ldd	r19, Y+39	; 0x27
    2c62:	2f 5f       	subi	r18, 0xFF	; 255
    2c64:	3f 4f       	sbci	r19, 0xFF	; 255
    2c66:	3f a3       	std	Y+39, r19	; 0x27
    2c68:	2e a3       	std	Y+38, r18	; 0x26
    2c6a:	ec a1       	ldd	r30, Y+36	; 0x24
    2c6c:	fd a1       	ldd	r31, Y+37	; 0x25
    2c6e:	00 82       	st	Z, r0
    2c70:	2c a1       	ldd	r18, Y+36	; 0x24
    2c72:	3d a1       	ldd	r19, Y+37	; 0x25
    2c74:	2f 5f       	subi	r18, 0xFF	; 255
    2c76:	3f 4f       	sbci	r19, 0xFF	; 255
    2c78:	3d a3       	std	Y+37, r19	; 0x25
    2c7a:	2c a3       	std	Y+36, r18	; 0x24
    2c7c:	38 a5       	ldd	r19, Y+40	; 0x28
    2c7e:	31 50       	subi	r19, 0x01	; 1
    2c80:	38 a7       	std	Y+40, r19	; 0x28
    2c82:	88 a5       	ldd	r24, Y+40	; 0x28
    2c84:	88 23       	and	r24, r24
    2c86:	41 f7       	brne	.-48     	; 0x2c58 <play+0xde>
#endif


		while(1) {
			if( can_read ) {				// jeúli flaga ustawiona w obs≥udze przerwania
    2c88:	80 91 65 02 	lds	r24, 0x0265
    2c8c:	88 23       	and	r24, r24
    2c8e:	e1 f3       	breq	.-8      	; 0x2c88 <play+0x10e>

				pf_read(&buf[ nr_buf ^ 0x01 ][0], BUF_SIZE , &rb);	// odczytaj kolejny bufor
    2c90:	26 e6       	ldi	r18, 0x66	; 102
    2c92:	32 e0       	ldi	r19, 0x02	; 2
    2c94:	90 91 50 02 	lds	r25, 0x0250
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	89 27       	eor	r24, r25
    2c9c:	88 2f       	mov	r24, r24
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	98 2f       	mov	r25, r24
    2ca2:	88 27       	eor	r24, r24
    2ca4:	99 0f       	add	r25, r25
    2ca6:	82 0f       	add	r24, r18
    2ca8:	93 1f       	adc	r25, r19
    2caa:	21 e5       	ldi	r18, 0x51	; 81
    2cac:	32 e0       	ldi	r19, 0x02	; 2
    2cae:	60 e0       	ldi	r22, 0x00	; 0
    2cb0:	72 e0       	ldi	r23, 0x02	; 2
    2cb2:	a9 01       	movw	r20, r18
    2cb4:	0e 94 2b 24 	call	0x4856	; 0x4856 <pf_read>
				if( rb < BUF_SIZE ) break;		// jeúli koniec pliku przerwij pÍtlÍ while(1)
    2cb8:	80 91 51 02 	lds	r24, 0x0251
    2cbc:	90 91 52 02 	lds	r25, 0x0252
    2cc0:	e2 e0       	ldi	r30, 0x02	; 2
    2cc2:	80 30       	cpi	r24, 0x00	; 0
    2cc4:	9e 07       	cpc	r25, r30
    2cc6:	90 f1       	brcs	.+100    	; 0x2d2c <play+0x1b2>

#if USE44KHZ == 0
				PORTC = ~tab[slupek/33];		// obs≥uga wsk. wysterowania
    2cc8:	a5 e3       	ldi	r26, 0x35	; 53
    2cca:	b0 e0       	ldi	r27, 0x00	; 0
    2ccc:	80 91 39 02 	lds	r24, 0x0239
    2cd0:	91 e2       	ldi	r25, 0x21	; 33
    2cd2:	69 2f       	mov	r22, r25
    2cd4:	0e 94 72 48 	call	0x90e4	; 0x90e4 <__udivmodqi4>
    2cd8:	28 2f       	mov	r18, r24
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	ce 01       	movw	r24, r28
    2cde:	48 96       	adiw	r24, 0x18	; 24
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	e2 0f       	add	r30, r18
    2ce4:	f3 1f       	adc	r31, r19
    2ce6:	80 81       	ld	r24, Z
    2ce8:	80 95       	com	r24
    2cea:	8c 93       	st	X, r24

				// obliczanie czasu utworu
				if(tick>FLAGS.khz) {
    2cec:	20 91 68 06 	lds	r18, 0x0668
    2cf0:	30 91 69 06 	lds	r19, 0x0669
    2cf4:	80 91 63 02 	lds	r24, 0x0263
    2cf8:	90 91 64 02 	lds	r25, 0x0264
    2cfc:	28 17       	cp	r18, r24
    2cfe:	39 07       	cpc	r19, r25
    2d00:	90 f4       	brcc	.+36     	; 0x2d26 <play+0x1ac>
					ss++;
    2d02:	8a 89       	ldd	r24, Y+18	; 0x12
    2d04:	8f 5f       	subi	r24, 0xFF	; 255
    2d06:	8a 8b       	std	Y+18, r24	; 0x12
					if(ss>59) {
    2d08:	8a 89       	ldd	r24, Y+18	; 0x12
    2d0a:	8c 33       	cpi	r24, 0x3C	; 60
    2d0c:	40 f0       	brcs	.+16     	; 0x2d1e <play+0x1a4>
						ss=0;
    2d0e:	1a 8a       	std	Y+18, r1	; 0x12
						mm++;
    2d10:	89 89       	ldd	r24, Y+17	; 0x11
    2d12:	8f 5f       	subi	r24, 0xFF	; 255
    2d14:	89 8b       	std	Y+17, r24	; 0x11
						if(mm>59) mm=0;
    2d16:	89 89       	ldd	r24, Y+17	; 0x11
    2d18:	8c 33       	cpi	r24, 0x3C	; 60
    2d1a:	08 f0       	brcs	.+2      	; 0x2d1e <play+0x1a4>
    2d1c:	19 8a       	std	Y+17, r1	; 0x11
					}
					tick=0;
    2d1e:	10 92 64 02 	sts	0x0264, r1
    2d22:	10 92 63 02 	sts	0x0263, r1
				}

#endif
				can_read = 0;
    2d26:	10 92 65 02 	sts	0x0265, r1
    2d2a:	ae cf       	rjmp	.-164    	; 0x2c88 <play+0x10e>
			}
		}
		DDRD  &= ~((1<<PD5)|(1<<PD4));		// ustaw piny PWM1 (OC1A) oraz PWM2 (OC1B) jako wejúcia WAØNE !!!
    2d2c:	a1 e3       	ldi	r26, 0x31	; 49
    2d2e:	b0 e0       	ldi	r27, 0x00	; 0
    2d30:	e1 e3       	ldi	r30, 0x31	; 49
    2d32:	f0 e0       	ldi	r31, 0x00	; 0
    2d34:	80 81       	ld	r24, Z
    2d36:	8f 7c       	andi	r24, 0xCF	; 207
    2d38:	8c 93       	st	X, r24

		if( !FLAGS.prescaler ) TMR_STOP;	// wy≥πczenie Timera0 (samplowania)
    2d3a:	80 91 66 06 	lds	r24, 0x0666
    2d3e:	82 70       	andi	r24, 0x02	; 2
    2d40:	88 23       	and	r24, r24
    2d42:	41 f4       	brne	.+16     	; 0x2d54 <play+0x1da>
    2d44:	a3 e5       	ldi	r26, 0x53	; 83
    2d46:	b0 e0       	ldi	r27, 0x00	; 0
    2d48:	e3 e5       	ldi	r30, 0x53	; 83
    2d4a:	f0 e0       	ldi	r31, 0x00	; 0
    2d4c:	80 81       	ld	r24, Z
    2d4e:	8d 7f       	andi	r24, 0xFD	; 253
    2d50:	8c 93       	st	X, r24
    2d52:	07 c0       	rjmp	.+14     	; 0x2d62 <play+0x1e8>
		else TMR64_STOP;
    2d54:	a3 e5       	ldi	r26, 0x53	; 83
    2d56:	b0 e0       	ldi	r27, 0x00	; 0
    2d58:	e3 e5       	ldi	r30, 0x53	; 83
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	80 81       	ld	r24, Z
    2d5e:	8c 7f       	andi	r24, 0xFC	; 252
    2d60:	8c 93       	st	X, r24

		PORTC = 255;						// wyzerowanie wsk. wysterowania
    2d62:	e5 e3       	ldi	r30, 0x35	; 53
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	8f ef       	ldi	r24, 0xFF	; 255
    2d68:	80 83       	st	Z, r24
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	aa ef       	ldi	r26, 0xFA	; 250
    2d70:	b3 e4       	ldi	r27, 0x43	; 67
    2d72:	8b 87       	std	Y+11, r24	; 0x0b
    2d74:	9c 87       	std	Y+12, r25	; 0x0c
    2d76:	ad 87       	std	Y+13, r26	; 0x0d
    2d78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	4a e7       	ldi	r20, 0x7A	; 122
    2d88:	55 e4       	ldi	r21, 0x45	; 69
    2d8a:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    2d8e:	dc 01       	movw	r26, r24
    2d90:	cb 01       	movw	r24, r22
    2d92:	8f 83       	std	Y+7, r24	; 0x07
    2d94:	98 87       	std	Y+8, r25	; 0x08
    2d96:	a9 87       	std	Y+9, r26	; 0x09
    2d98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d9c:	78 85       	ldd	r23, Y+8	; 0x08
    2d9e:	89 85       	ldd	r24, Y+9	; 0x09
    2da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	40 e8       	ldi	r20, 0x80	; 128
    2da8:	5f e3       	ldi	r21, 0x3F	; 63
    2daa:	0e 94 29 46 	call	0x8c52	; 0x8c52 <__ltsf2>
    2dae:	88 23       	and	r24, r24
    2db0:	2c f4       	brge	.+10     	; 0x2dbc <play+0x242>
		__ticks = 1;
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	9e 83       	std	Y+6, r25	; 0x06
    2db8:	8d 83       	std	Y+5, r24	; 0x05
    2dba:	3f c0       	rjmp	.+126    	; 0x2e3a <play+0x2c0>
	else if (__tmp > 65535)
    2dbc:	6f 81       	ldd	r22, Y+7	; 0x07
    2dbe:	78 85       	ldd	r23, Y+8	; 0x08
    2dc0:	89 85       	ldd	r24, Y+9	; 0x09
    2dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc4:	20 e0       	ldi	r18, 0x00	; 0
    2dc6:	3f ef       	ldi	r19, 0xFF	; 255
    2dc8:	4f e7       	ldi	r20, 0x7F	; 127
    2dca:	57 e4       	ldi	r21, 0x47	; 71
    2dcc:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <__gtsf2>
    2dd0:	18 16       	cp	r1, r24
    2dd2:	4c f5       	brge	.+82     	; 0x2e26 <play+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dda:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	40 e2       	ldi	r20, 0x20	; 32
    2de2:	51 e4       	ldi	r21, 0x41	; 65
    2de4:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	bc 01       	movw	r22, r24
    2dee:	cd 01       	movw	r24, r26
    2df0:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	9e 83       	std	Y+6, r25	; 0x06
    2dfa:	8d 83       	std	Y+5, r24	; 0x05
    2dfc:	0f c0       	rjmp	.+30     	; 0x2e1c <play+0x2a2>
    2dfe:	80 e9       	ldi	r24, 0x90	; 144
    2e00:	91 e0       	ldi	r25, 0x01	; 1
    2e02:	9c 83       	std	Y+4, r25	; 0x04
    2e04:	8b 83       	std	Y+3, r24	; 0x03
    2e06:	8b 81       	ldd	r24, Y+3	; 0x03
    2e08:	9c 81       	ldd	r25, Y+4	; 0x04
    2e0a:	01 97       	sbiw	r24, 0x01	; 1
    2e0c:	f1 f7       	brne	.-4      	; 0x2e0a <play+0x290>
    2e0e:	9c 83       	std	Y+4, r25	; 0x04
    2e10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e12:	8d 81       	ldd	r24, Y+5	; 0x05
    2e14:	9e 81       	ldd	r25, Y+6	; 0x06
    2e16:	01 97       	sbiw	r24, 0x01	; 1
    2e18:	9e 83       	std	Y+6, r25	; 0x06
    2e1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e20:	00 97       	sbiw	r24, 0x00	; 0
    2e22:	69 f7       	brne	.-38     	; 0x2dfe <play+0x284>
    2e24:	14 c0       	rjmp	.+40     	; 0x2e4e <play+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e26:	6f 81       	ldd	r22, Y+7	; 0x07
    2e28:	78 85       	ldd	r23, Y+8	; 0x08
    2e2a:	89 85       	ldd	r24, Y+9	; 0x09
    2e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e2e:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    2e32:	dc 01       	movw	r26, r24
    2e34:	cb 01       	movw	r24, r22
    2e36:	9e 83       	std	Y+6, r25	; 0x06
    2e38:	8d 83       	std	Y+5, r24	; 0x05
    2e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3e:	9a 83       	std	Y+2, r25	; 0x02
    2e40:	89 83       	std	Y+1, r24	; 0x01
    2e42:	89 81       	ldd	r24, Y+1	; 0x01
    2e44:	9a 81       	ldd	r25, Y+2	; 0x02
    2e46:	01 97       	sbiw	r24, 0x01	; 1
    2e48:	f1 f7       	brne	.-4      	; 0x2e46 <play+0x2cc>
    2e4a:	9a 83       	std	Y+2, r25	; 0x02
    2e4c:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(500);						// przerwa 0,5s
	}

	return res;
    2e4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e50:	28 2f       	mov	r18, r24
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	3b a3       	std	Y+35, r19	; 0x23
    2e56:	2a a3       	std	Y+34, r18	; 0x22
    2e58:	8a a1       	ldd	r24, Y+34	; 0x22
    2e5a:	9b a1       	ldd	r25, Y+35	; 0x23
}
    2e5c:	a8 96       	adiw	r28, 0x28	; 40
    2e5e:	0f b6       	in	r0, 0x3f	; 63
    2e60:	f8 94       	cli
    2e62:	de bf       	out	0x3e, r29	; 62
    2e64:	0f be       	out	0x3f, r0	; 63
    2e66:	cd bf       	out	0x3d, r28	; 61
    2e68:	cf 91       	pop	r28
    2e6a:	df 91       	pop	r29
    2e6c:	08 95       	ret

00002e6e <rcv_spi>:

#define xmit_spi(dat) 	SPDR=(dat); loop_until_bit_is_set(SPSR,SPIF)

static
BYTE rcv_spi (void)
{
    2e6e:	df 93       	push	r29
    2e70:	cf 93       	push	r28
    2e72:	cd b7       	in	r28, 0x3d	; 61
    2e74:	de b7       	in	r29, 0x3e	; 62
	SPDR = 0xFF;
    2e76:	ef e2       	ldi	r30, 0x2F	; 47
    2e78:	f0 e0       	ldi	r31, 0x00	; 0
    2e7a:	8f ef       	ldi	r24, 0xFF	; 255
    2e7c:	80 83       	st	Z, r24
	loop_until_bit_is_set(SPSR, SPIF);
    2e7e:	ee e2       	ldi	r30, 0x2E	; 46
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	80 81       	ld	r24, Z
    2e84:	88 23       	and	r24, r24
    2e86:	dc f7       	brge	.-10     	; 0x2e7e <rcv_spi+0x10>
	return SPDR;
    2e88:	ef e2       	ldi	r30, 0x2F	; 47
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	80 81       	ld	r24, Z
}
    2e8e:	cf 91       	pop	r28
    2e90:	df 91       	pop	r29
    2e92:	08 95       	ret

00002e94 <release_spi>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
    2e94:	df 93       	push	r29
    2e96:	cf 93       	push	r28
    2e98:	cd b7       	in	r28, 0x3d	; 61
    2e9a:	de b7       	in	r29, 0x3e	; 62
	DESELECT();
    2e9c:	a8 e3       	ldi	r26, 0x38	; 56
    2e9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ea0:	e8 e3       	ldi	r30, 0x38	; 56
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	80 81       	ld	r24, Z
    2ea6:	80 61       	ori	r24, 0x10	; 16
    2ea8:	8c 93       	st	X, r24
	rcv_spi();
    2eaa:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <rcv_spi>
}
    2eae:	cf 91       	pop	r28
    2eb0:	df 91       	pop	r29
    2eb2:	08 95       	ret

00002eb4 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    2eb4:	df 93       	push	r29
    2eb6:	cf 93       	push	r28
    2eb8:	cd b7       	in	r28, 0x3d	; 61
    2eba:	de b7       	in	r29, 0x3e	; 62
    2ebc:	28 97       	sbiw	r28, 0x08	; 8
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	f8 94       	cli
    2ec2:	de bf       	out	0x3e, r29	; 62
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	cd bf       	out	0x3d, r28	; 61
    2ec8:	8b 83       	std	Y+3, r24	; 0x03
    2eca:	4c 83       	std	Y+4, r20	; 0x04
    2ecc:	5d 83       	std	Y+5, r21	; 0x05
    2ece:	6e 83       	std	Y+6, r22	; 0x06
    2ed0:	7f 83       	std	Y+7, r23	; 0x07
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    2ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed4:	88 23       	and	r24, r24
    2ed6:	8c f4       	brge	.+34     	; 0x2efa <send_cmd+0x46>
		cmd &= 0x7F;
    2ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eda:	8f 77       	andi	r24, 0x7F	; 127
    2edc:	8b 83       	std	Y+3, r24	; 0x03
		res = send_cmd(CMD55, 0);
    2ede:	87 e7       	ldi	r24, 0x77	; 119
    2ee0:	40 e0       	ldi	r20, 0x00	; 0
    2ee2:	50 e0       	ldi	r21, 0x00	; 0
    2ee4:	60 e0       	ldi	r22, 0x00	; 0
    2ee6:	70 e0       	ldi	r23, 0x00	; 0
    2ee8:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <send_cmd>
    2eec:	89 83       	std	Y+1, r24	; 0x01
		if (res > 1) return res;
    2eee:	89 81       	ldd	r24, Y+1	; 0x01
    2ef0:	82 30       	cpi	r24, 0x02	; 2
    2ef2:	18 f0       	brcs	.+6      	; 0x2efa <send_cmd+0x46>
    2ef4:	89 81       	ldd	r24, Y+1	; 0x01
    2ef6:	88 87       	std	Y+8, r24	; 0x08
    2ef8:	78 c0       	rjmp	.+240    	; 0x2fea <send_cmd+0x136>
	}

	/* Select the card */
	DESELECT();
    2efa:	a8 e3       	ldi	r26, 0x38	; 56
    2efc:	b0 e0       	ldi	r27, 0x00	; 0
    2efe:	e8 e3       	ldi	r30, 0x38	; 56
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	80 81       	ld	r24, Z
    2f04:	80 61       	ori	r24, 0x10	; 16
    2f06:	8c 93       	st	X, r24
	rcv_spi();
    2f08:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <rcv_spi>
	SELECT();
    2f0c:	a8 e3       	ldi	r26, 0x38	; 56
    2f0e:	b0 e0       	ldi	r27, 0x00	; 0
    2f10:	e8 e3       	ldi	r30, 0x38	; 56
    2f12:	f0 e0       	ldi	r31, 0x00	; 0
    2f14:	80 81       	ld	r24, Z
    2f16:	8f 7e       	andi	r24, 0xEF	; 239
    2f18:	8c 93       	st	X, r24
	rcv_spi();
    2f1a:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <rcv_spi>

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
    2f1e:	ef e2       	ldi	r30, 0x2F	; 47
    2f20:	f0 e0       	ldi	r31, 0x00	; 0
    2f22:	8b 81       	ldd	r24, Y+3	; 0x03
    2f24:	80 83       	st	Z, r24
    2f26:	ee e2       	ldi	r30, 0x2E	; 46
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	80 81       	ld	r24, Z
    2f2c:	88 23       	and	r24, r24
    2f2e:	dc f7       	brge	.-10     	; 0x2f26 <send_cmd+0x72>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    2f30:	ef e2       	ldi	r30, 0x2F	; 47
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	8c 81       	ldd	r24, Y+4	; 0x04
    2f36:	9d 81       	ldd	r25, Y+5	; 0x05
    2f38:	ae 81       	ldd	r26, Y+6	; 0x06
    2f3a:	bf 81       	ldd	r27, Y+7	; 0x07
    2f3c:	8b 2f       	mov	r24, r27
    2f3e:	99 27       	eor	r25, r25
    2f40:	aa 27       	eor	r26, r26
    2f42:	bb 27       	eor	r27, r27
    2f44:	80 83       	st	Z, r24
    2f46:	ee e2       	ldi	r30, 0x2E	; 46
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	80 81       	ld	r24, Z
    2f4c:	88 23       	and	r24, r24
    2f4e:	dc f7       	brge	.-10     	; 0x2f46 <send_cmd+0x92>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    2f50:	ef e2       	ldi	r30, 0x2F	; 47
    2f52:	f0 e0       	ldi	r31, 0x00	; 0
    2f54:	8c 81       	ldd	r24, Y+4	; 0x04
    2f56:	9d 81       	ldd	r25, Y+5	; 0x05
    2f58:	ae 81       	ldd	r26, Y+6	; 0x06
    2f5a:	bf 81       	ldd	r27, Y+7	; 0x07
    2f5c:	cd 01       	movw	r24, r26
    2f5e:	aa 27       	eor	r26, r26
    2f60:	bb 27       	eor	r27, r27
    2f62:	80 83       	st	Z, r24
    2f64:	ee e2       	ldi	r30, 0x2E	; 46
    2f66:	f0 e0       	ldi	r31, 0x00	; 0
    2f68:	80 81       	ld	r24, Z
    2f6a:	88 23       	and	r24, r24
    2f6c:	dc f7       	brge	.-10     	; 0x2f64 <send_cmd+0xb0>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    2f6e:	ef e2       	ldi	r30, 0x2F	; 47
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	8c 81       	ldd	r24, Y+4	; 0x04
    2f74:	9d 81       	ldd	r25, Y+5	; 0x05
    2f76:	ae 81       	ldd	r26, Y+6	; 0x06
    2f78:	bf 81       	ldd	r27, Y+7	; 0x07
    2f7a:	89 2f       	mov	r24, r25
    2f7c:	9a 2f       	mov	r25, r26
    2f7e:	ab 2f       	mov	r26, r27
    2f80:	bb 27       	eor	r27, r27
    2f82:	80 83       	st	Z, r24
    2f84:	ee e2       	ldi	r30, 0x2E	; 46
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	80 81       	ld	r24, Z
    2f8a:	88 23       	and	r24, r24
    2f8c:	dc f7       	brge	.-10     	; 0x2f84 <send_cmd+0xd0>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    2f8e:	ef e2       	ldi	r30, 0x2F	; 47
    2f90:	f0 e0       	ldi	r31, 0x00	; 0
    2f92:	8c 81       	ldd	r24, Y+4	; 0x04
    2f94:	80 83       	st	Z, r24
    2f96:	ee e2       	ldi	r30, 0x2E	; 46
    2f98:	f0 e0       	ldi	r31, 0x00	; 0
    2f9a:	80 81       	ld	r24, Z
    2f9c:	88 23       	and	r24, r24
    2f9e:	dc f7       	brge	.-10     	; 0x2f96 <send_cmd+0xe2>
	n = 0x01;							/* Dummy CRC + Stop */
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	8a 83       	std	Y+2, r24	; 0x02
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    2fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa6:	80 34       	cpi	r24, 0x40	; 64
    2fa8:	11 f4       	brne	.+4      	; 0x2fae <send_cmd+0xfa>
    2faa:	85 e9       	ldi	r24, 0x95	; 149
    2fac:	8a 83       	std	Y+2, r24	; 0x02
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    2fae:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb0:	88 34       	cpi	r24, 0x48	; 72
    2fb2:	11 f4       	brne	.+4      	; 0x2fb8 <send_cmd+0x104>
    2fb4:	87 e8       	ldi	r24, 0x87	; 135
    2fb6:	8a 83       	std	Y+2, r24	; 0x02
	xmit_spi(n);
    2fb8:	ef e2       	ldi	r30, 0x2F	; 47
    2fba:	f0 e0       	ldi	r31, 0x00	; 0
    2fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbe:	80 83       	st	Z, r24
    2fc0:	ee e2       	ldi	r30, 0x2E	; 46
    2fc2:	f0 e0       	ldi	r31, 0x00	; 0
    2fc4:	80 81       	ld	r24, Z
    2fc6:	88 23       	and	r24, r24
    2fc8:	dc f7       	brge	.-10     	; 0x2fc0 <send_cmd+0x10c>

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
    2fca:	8a e0       	ldi	r24, 0x0A	; 10
    2fcc:	8a 83       	std	Y+2, r24	; 0x02
	do {
		res = rcv_spi();
    2fce:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <rcv_spi>
    2fd2:	89 83       	std	Y+1, r24	; 0x01
	} while ((res & 0x80) && --n);
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
    2fd6:	88 23       	and	r24, r24
    2fd8:	34 f4       	brge	.+12     	; 0x2fe6 <send_cmd+0x132>
    2fda:	8a 81       	ldd	r24, Y+2	; 0x02
    2fdc:	81 50       	subi	r24, 0x01	; 1
    2fde:	8a 83       	std	Y+2, r24	; 0x02
    2fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe2:	88 23       	and	r24, r24
    2fe4:	a1 f7       	brne	.-24     	; 0x2fce <send_cmd+0x11a>

	return res;			/* Return with the response value */
    2fe6:	89 81       	ldd	r24, Y+1	; 0x01
    2fe8:	88 87       	std	Y+8, r24	; 0x08
    2fea:	88 85       	ldd	r24, Y+8	; 0x08
}
    2fec:	28 96       	adiw	r28, 0x08	; 8
    2fee:	0f b6       	in	r0, 0x3f	; 63
    2ff0:	f8 94       	cli
    2ff2:	de bf       	out	0x3e, r29	; 62
    2ff4:	0f be       	out	0x3f, r0	; 63
    2ff6:	cd bf       	out	0x3d, r28	; 61
    2ff8:	cf 91       	pop	r28
    2ffa:	df 91       	pop	r29
    2ffc:	08 95       	ret

00002ffe <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
    2ffe:	0f 93       	push	r16
    3000:	1f 93       	push	r17
    3002:	df 93       	push	r29
    3004:	cf 93       	push	r28
    3006:	cd b7       	in	r28, 0x3d	; 61
    3008:	de b7       	in	r29, 0x3e	; 62
    300a:	2b 97       	sbiw	r28, 0x0b	; 11
    300c:	0f b6       	in	r0, 0x3f	; 63
    300e:	f8 94       	cli
    3010:	de bf       	out	0x3e, r29	; 62
    3012:	0f be       	out	0x3f, r0	; 63
    3014:	cd bf       	out	0x3d, r28	; 61
	BYTE n, cmd, ty, ocr[4];
	WORD tmr;

#if _WRITE_FUNC
	if (MMC_SEL) disk_writep(0, 0);		/* Finalize write process if it is in progress */
    3016:	e8 e3       	ldi	r30, 0x38	; 56
    3018:	f0 e0       	ldi	r31, 0x00	; 0
    301a:	80 81       	ld	r24, Z
    301c:	88 2f       	mov	r24, r24
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	80 71       	andi	r24, 0x10	; 16
    3022:	90 70       	andi	r25, 0x00	; 0
    3024:	00 97       	sbiw	r24, 0x00	; 0
    3026:	41 f4       	brne	.+16     	; 0x3038 <disk_initialize+0x3a>
    3028:	80 e0       	ldi	r24, 0x00	; 0
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	40 e0       	ldi	r20, 0x00	; 0
    302e:	50 e0       	ldi	r21, 0x00	; 0
    3030:	60 e0       	ldi	r22, 0x00	; 0
    3032:	70 e0       	ldi	r23, 0x00	; 0
    3034:	0e 94 93 19 	call	0x3326	; 0x3326 <disk_writep>
#endif
	for (n = 100; n; n--) rcv_spi();	/* Dummy clocks */
    3038:	84 e6       	ldi	r24, 0x64	; 100
    303a:	8d 83       	std	Y+5, r24	; 0x05
    303c:	05 c0       	rjmp	.+10     	; 0x3048 <disk_initialize+0x4a>
    303e:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <rcv_spi>
    3042:	8d 81       	ldd	r24, Y+5	; 0x05
    3044:	81 50       	subi	r24, 0x01	; 1
    3046:	8d 83       	std	Y+5, r24	; 0x05
    3048:	8d 81       	ldd	r24, Y+5	; 0x05
    304a:	88 23       	and	r24, r24
    304c:	c1 f7       	brne	.-16     	; 0x303e <disk_initialize+0x40>


	ty = 0;
    304e:	1b 82       	std	Y+3, r1	; 0x03
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    3050:	80 e4       	ldi	r24, 0x40	; 64
    3052:	40 e0       	ldi	r20, 0x00	; 0
    3054:	50 e0       	ldi	r21, 0x00	; 0
    3056:	60 e0       	ldi	r22, 0x00	; 0
    3058:	70 e0       	ldi	r23, 0x00	; 0
    305a:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <send_cmd>
    305e:	81 30       	cpi	r24, 0x01	; 1
    3060:	09 f0       	breq	.+2      	; 0x3064 <disk_initialize+0x66>
    3062:	a6 c0       	rjmp	.+332    	; 0x31b0 <disk_initialize+0x1b2>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
    3064:	88 e4       	ldi	r24, 0x48	; 72
    3066:	4a ea       	ldi	r20, 0xAA	; 170
    3068:	51 e0       	ldi	r21, 0x01	; 1
    306a:	60 e0       	ldi	r22, 0x00	; 0
    306c:	70 e0       	ldi	r23, 0x00	; 0
    306e:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <send_cmd>
    3072:	81 30       	cpi	r24, 0x01	; 1
    3074:	09 f0       	breq	.+2      	; 0x3078 <disk_initialize+0x7a>
    3076:	65 c0       	rjmp	.+202    	; 0x3142 <disk_initialize+0x144>
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
    3078:	1d 82       	std	Y+5, r1	; 0x05
    307a:	0f c0       	rjmp	.+30     	; 0x309a <disk_initialize+0x9c>
    307c:	8d 81       	ldd	r24, Y+5	; 0x05
    307e:	08 2f       	mov	r16, r24
    3080:	10 e0       	ldi	r17, 0x00	; 0
    3082:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <rcv_spi>
    3086:	28 2f       	mov	r18, r24
    3088:	ce 01       	movw	r24, r28
    308a:	06 96       	adiw	r24, 0x06	; 6
    308c:	fc 01       	movw	r30, r24
    308e:	e0 0f       	add	r30, r16
    3090:	f1 1f       	adc	r31, r17
    3092:	20 83       	st	Z, r18
    3094:	8d 81       	ldd	r24, Y+5	; 0x05
    3096:	8f 5f       	subi	r24, 0xFF	; 255
    3098:	8d 83       	std	Y+5, r24	; 0x05
    309a:	8d 81       	ldd	r24, Y+5	; 0x05
    309c:	84 30       	cpi	r24, 0x04	; 4
    309e:	70 f3       	brcs	.-36     	; 0x307c <disk_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    30a0:	88 85       	ldd	r24, Y+8	; 0x08
    30a2:	81 30       	cpi	r24, 0x01	; 1
    30a4:	09 f0       	breq	.+2      	; 0x30a8 <disk_initialize+0xaa>
    30a6:	84 c0       	rjmp	.+264    	; 0x31b0 <disk_initialize+0x1b2>
    30a8:	89 85       	ldd	r24, Y+9	; 0x09
    30aa:	8a 3a       	cpi	r24, 0xAA	; 170
    30ac:	09 f0       	breq	.+2      	; 0x30b0 <disk_initialize+0xb2>
    30ae:	80 c0       	rjmp	.+256    	; 0x31b0 <disk_initialize+0x1b2>
				for (tmr = 12000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    30b0:	80 ee       	ldi	r24, 0xE0	; 224
    30b2:	9e e2       	ldi	r25, 0x2E	; 46
    30b4:	9a 83       	std	Y+2, r25	; 0x02
    30b6:	89 83       	std	Y+1, r24	; 0x01
    30b8:	05 c0       	rjmp	.+10     	; 0x30c4 <disk_initialize+0xc6>
    30ba:	89 81       	ldd	r24, Y+1	; 0x01
    30bc:	9a 81       	ldd	r25, Y+2	; 0x02
    30be:	01 97       	sbiw	r24, 0x01	; 1
    30c0:	9a 83       	std	Y+2, r25	; 0x02
    30c2:	89 83       	std	Y+1, r24	; 0x01
    30c4:	89 81       	ldd	r24, Y+1	; 0x01
    30c6:	9a 81       	ldd	r25, Y+2	; 0x02
    30c8:	00 97       	sbiw	r24, 0x00	; 0
    30ca:	49 f0       	breq	.+18     	; 0x30de <disk_initialize+0xe0>
    30cc:	89 ee       	ldi	r24, 0xE9	; 233
    30ce:	40 e0       	ldi	r20, 0x00	; 0
    30d0:	50 e0       	ldi	r21, 0x00	; 0
    30d2:	60 e0       	ldi	r22, 0x00	; 0
    30d4:	70 e4       	ldi	r23, 0x40	; 64
    30d6:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <send_cmd>
    30da:	88 23       	and	r24, r24
    30dc:	71 f7       	brne	.-36     	; 0x30ba <disk_initialize+0xbc>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    30de:	89 81       	ldd	r24, Y+1	; 0x01
    30e0:	9a 81       	ldd	r25, Y+2	; 0x02
    30e2:	00 97       	sbiw	r24, 0x00	; 0
    30e4:	09 f4       	brne	.+2      	; 0x30e8 <disk_initialize+0xea>
    30e6:	64 c0       	rjmp	.+200    	; 0x31b0 <disk_initialize+0x1b2>
    30e8:	8a e7       	ldi	r24, 0x7A	; 122
    30ea:	40 e0       	ldi	r20, 0x00	; 0
    30ec:	50 e0       	ldi	r21, 0x00	; 0
    30ee:	60 e0       	ldi	r22, 0x00	; 0
    30f0:	70 e0       	ldi	r23, 0x00	; 0
    30f2:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <send_cmd>
    30f6:	88 23       	and	r24, r24
    30f8:	09 f0       	breq	.+2      	; 0x30fc <disk_initialize+0xfe>
    30fa:	5a c0       	rjmp	.+180    	; 0x31b0 <disk_initialize+0x1b2>
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
    30fc:	1d 82       	std	Y+5, r1	; 0x05
    30fe:	0f c0       	rjmp	.+30     	; 0x311e <disk_initialize+0x120>
    3100:	8d 81       	ldd	r24, Y+5	; 0x05
    3102:	08 2f       	mov	r16, r24
    3104:	10 e0       	ldi	r17, 0x00	; 0
    3106:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <rcv_spi>
    310a:	28 2f       	mov	r18, r24
    310c:	ce 01       	movw	r24, r28
    310e:	06 96       	adiw	r24, 0x06	; 6
    3110:	fc 01       	movw	r30, r24
    3112:	e0 0f       	add	r30, r16
    3114:	f1 1f       	adc	r31, r17
    3116:	20 83       	st	Z, r18
    3118:	8d 81       	ldd	r24, Y+5	; 0x05
    311a:	8f 5f       	subi	r24, 0xFF	; 255
    311c:	8d 83       	std	Y+5, r24	; 0x05
    311e:	8d 81       	ldd	r24, Y+5	; 0x05
    3120:	84 30       	cpi	r24, 0x04	; 4
    3122:	70 f3       	brcs	.-36     	; 0x3100 <disk_initialize+0x102>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
    3124:	8e 81       	ldd	r24, Y+6	; 0x06
    3126:	88 2f       	mov	r24, r24
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	80 74       	andi	r24, 0x40	; 64
    312c:	90 70       	andi	r25, 0x00	; 0
    312e:	00 97       	sbiw	r24, 0x00	; 0
    3130:	19 f0       	breq	.+6      	; 0x3138 <disk_initialize+0x13a>
    3132:	8c e0       	ldi	r24, 0x0C	; 12
    3134:	8b 87       	std	Y+11, r24	; 0x0b
    3136:	02 c0       	rjmp	.+4      	; 0x313c <disk_initialize+0x13e>
    3138:	84 e0       	ldi	r24, 0x04	; 4
    313a:	8b 87       	std	Y+11, r24	; 0x0b
    313c:	8b 85       	ldd	r24, Y+11	; 0x0b
    313e:	8b 83       	std	Y+3, r24	; 0x03
    3140:	37 c0       	rjmp	.+110    	; 0x31b0 <disk_initialize+0x1b2>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    3142:	89 ee       	ldi	r24, 0xE9	; 233
    3144:	40 e0       	ldi	r20, 0x00	; 0
    3146:	50 e0       	ldi	r21, 0x00	; 0
    3148:	60 e0       	ldi	r22, 0x00	; 0
    314a:	70 e0       	ldi	r23, 0x00	; 0
    314c:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <send_cmd>
    3150:	82 30       	cpi	r24, 0x02	; 2
    3152:	28 f4       	brcc	.+10     	; 0x315e <disk_initialize+0x160>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    3154:	82 e0       	ldi	r24, 0x02	; 2
    3156:	8b 83       	std	Y+3, r24	; 0x03
    3158:	89 ee       	ldi	r24, 0xE9	; 233
    315a:	8c 83       	std	Y+4, r24	; 0x04
    315c:	04 c0       	rjmp	.+8      	; 0x3166 <disk_initialize+0x168>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    315e:	81 e0       	ldi	r24, 0x01	; 1
    3160:	8b 83       	std	Y+3, r24	; 0x03
    3162:	81 e4       	ldi	r24, 0x41	; 65
    3164:	8c 83       	std	Y+4, r24	; 0x04
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	/* Wait for leaving idle state */
    3166:	88 ea       	ldi	r24, 0xA8	; 168
    3168:	91 e6       	ldi	r25, 0x61	; 97
    316a:	9a 83       	std	Y+2, r25	; 0x02
    316c:	89 83       	std	Y+1, r24	; 0x01
    316e:	05 c0       	rjmp	.+10     	; 0x317a <disk_initialize+0x17c>
    3170:	89 81       	ldd	r24, Y+1	; 0x01
    3172:	9a 81       	ldd	r25, Y+2	; 0x02
    3174:	01 97       	sbiw	r24, 0x01	; 1
    3176:	9a 83       	std	Y+2, r25	; 0x02
    3178:	89 83       	std	Y+1, r24	; 0x01
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	9a 81       	ldd	r25, Y+2	; 0x02
    317e:	00 97       	sbiw	r24, 0x00	; 0
    3180:	49 f0       	breq	.+18     	; 0x3194 <disk_initialize+0x196>
    3182:	8c 81       	ldd	r24, Y+4	; 0x04
    3184:	40 e0       	ldi	r20, 0x00	; 0
    3186:	50 e0       	ldi	r21, 0x00	; 0
    3188:	60 e0       	ldi	r22, 0x00	; 0
    318a:	70 e0       	ldi	r23, 0x00	; 0
    318c:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <send_cmd>
    3190:	88 23       	and	r24, r24
    3192:	71 f7       	brne	.-36     	; 0x3170 <disk_initialize+0x172>
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
    3194:	89 81       	ldd	r24, Y+1	; 0x01
    3196:	9a 81       	ldd	r25, Y+2	; 0x02
    3198:	00 97       	sbiw	r24, 0x00	; 0
    319a:	49 f0       	breq	.+18     	; 0x31ae <disk_initialize+0x1b0>
    319c:	80 e5       	ldi	r24, 0x50	; 80
    319e:	40 e0       	ldi	r20, 0x00	; 0
    31a0:	52 e0       	ldi	r21, 0x02	; 2
    31a2:	60 e0       	ldi	r22, 0x00	; 0
    31a4:	70 e0       	ldi	r23, 0x00	; 0
    31a6:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <send_cmd>
    31aa:	88 23       	and	r24, r24
    31ac:	09 f0       	breq	.+2      	; 0x31b0 <disk_initialize+0x1b2>
				ty = 0;
    31ae:	1b 82       	std	Y+3, r1	; 0x03
		}
	}
	CardType = ty;
    31b0:	8b 81       	ldd	r24, Y+3	; 0x03
    31b2:	80 93 21 02 	sts	0x0221, r24
	release_spi();
    31b6:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <release_spi>

	return ty ? 0 : STA_NOINIT;
    31ba:	1a 86       	std	Y+10, r1	; 0x0a
    31bc:	8b 81       	ldd	r24, Y+3	; 0x03
    31be:	88 23       	and	r24, r24
    31c0:	11 f4       	brne	.+4      	; 0x31c6 <disk_initialize+0x1c8>
    31c2:	81 e0       	ldi	r24, 0x01	; 1
    31c4:	8a 87       	std	Y+10, r24	; 0x0a
    31c6:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    31c8:	2b 96       	adiw	r28, 0x0b	; 11
    31ca:	0f b6       	in	r0, 0x3f	; 63
    31cc:	f8 94       	cli
    31ce:	de bf       	out	0x3e, r29	; 62
    31d0:	0f be       	out	0x3f, r0	; 63
    31d2:	cd bf       	out	0x3d, r28	; 61
    31d4:	cf 91       	pop	r28
    31d6:	df 91       	pop	r29
    31d8:	1f 91       	pop	r17
    31da:	0f 91       	pop	r16
    31dc:	08 95       	ret

000031de <disk_readp>:
	BYTE *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
	DWORD lba,		/* Sector number (LBA) */
	WORD ofs,		/* Byte offset to read from (0..511) */
	WORD cnt		/* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
    31de:	0f 93       	push	r16
    31e0:	1f 93       	push	r17
    31e2:	df 93       	push	r29
    31e4:	cf 93       	push	r28
    31e6:	cd b7       	in	r28, 0x3d	; 61
    31e8:	de b7       	in	r29, 0x3e	; 62
    31ea:	2e 97       	sbiw	r28, 0x0e	; 14
    31ec:	0f b6       	in	r0, 0x3f	; 63
    31ee:	f8 94       	cli
    31f0:	de bf       	out	0x3e, r29	; 62
    31f2:	0f be       	out	0x3f, r0	; 63
    31f4:	cd bf       	out	0x3d, r28	; 61
    31f6:	9e 83       	std	Y+6, r25	; 0x06
    31f8:	8d 83       	std	Y+5, r24	; 0x05
    31fa:	4f 83       	std	Y+7, r20	; 0x07
    31fc:	58 87       	std	Y+8, r21	; 0x08
    31fe:	69 87       	std	Y+9, r22	; 0x09
    3200:	7a 87       	std	Y+10, r23	; 0x0a
    3202:	3c 87       	std	Y+12, r19	; 0x0c
    3204:	2b 87       	std	Y+11, r18	; 0x0b
    3206:	1e 87       	std	Y+14, r17	; 0x0e
    3208:	0d 87       	std	Y+13, r16	; 0x0d
	DRESULT res;
	BYTE rc;
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */
    320a:	80 91 21 02 	lds	r24, 0x0221
    320e:	88 2f       	mov	r24, r24
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	88 70       	andi	r24, 0x08	; 8
    3214:	90 70       	andi	r25, 0x00	; 0
    3216:	00 97       	sbiw	r24, 0x00	; 0
    3218:	89 f4       	brne	.+34     	; 0x323c <disk_readp+0x5e>
    321a:	8f 81       	ldd	r24, Y+7	; 0x07
    321c:	98 85       	ldd	r25, Y+8	; 0x08
    321e:	a9 85       	ldd	r26, Y+9	; 0x09
    3220:	ba 85       	ldd	r27, Y+10	; 0x0a
    3222:	07 2e       	mov	r0, r23
    3224:	79 e0       	ldi	r23, 0x09	; 9
    3226:	88 0f       	add	r24, r24
    3228:	99 1f       	adc	r25, r25
    322a:	aa 1f       	adc	r26, r26
    322c:	bb 1f       	adc	r27, r27
    322e:	7a 95       	dec	r23
    3230:	d1 f7       	brne	.-12     	; 0x3226 <disk_readp+0x48>
    3232:	70 2d       	mov	r23, r0
    3234:	8f 83       	std	Y+7, r24	; 0x07
    3236:	98 87       	std	Y+8, r25	; 0x08
    3238:	a9 87       	std	Y+9, r26	; 0x09
    323a:	ba 87       	std	Y+10, r27	; 0x0a

	res = RES_ERROR;
    323c:	81 e0       	ldi	r24, 0x01	; 1
    323e:	8c 83       	std	Y+4, r24	; 0x04
	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
    3240:	2f 81       	ldd	r18, Y+7	; 0x07
    3242:	38 85       	ldd	r19, Y+8	; 0x08
    3244:	49 85       	ldd	r20, Y+9	; 0x09
    3246:	5a 85       	ldd	r21, Y+10	; 0x0a
    3248:	81 e5       	ldi	r24, 0x51	; 81
    324a:	ba 01       	movw	r22, r20
    324c:	a9 01       	movw	r20, r18
    324e:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <send_cmd>
    3252:	88 23       	and	r24, r24
    3254:	09 f0       	breq	.+2      	; 0x3258 <disk_readp+0x7a>
    3256:	59 c0       	rjmp	.+178    	; 0x330a <disk_readp+0x12c>

		bc = 30000;
    3258:	80 e3       	ldi	r24, 0x30	; 48
    325a:	95 e7       	ldi	r25, 0x75	; 117
    325c:	9a 83       	std	Y+2, r25	; 0x02
    325e:	89 83       	std	Y+1, r24	; 0x01
		do {							/* Wait for data packet in timeout of 100ms */
			rc = rcv_spi();
    3260:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <rcv_spi>
    3264:	8b 83       	std	Y+3, r24	; 0x03
		} while (rc == 0xFF && --bc);
    3266:	8b 81       	ldd	r24, Y+3	; 0x03
    3268:	8f 3f       	cpi	r24, 0xFF	; 255
    326a:	49 f4       	brne	.+18     	; 0x327e <disk_readp+0xa0>
    326c:	89 81       	ldd	r24, Y+1	; 0x01
    326e:	9a 81       	ldd	r25, Y+2	; 0x02
    3270:	01 97       	sbiw	r24, 0x01	; 1
    3272:	9a 83       	std	Y+2, r25	; 0x02
    3274:	89 83       	std	Y+1, r24	; 0x01
    3276:	89 81       	ldd	r24, Y+1	; 0x01
    3278:	9a 81       	ldd	r25, Y+2	; 0x02
    327a:	00 97       	sbiw	r24, 0x00	; 0
    327c:	89 f7       	brne	.-30     	; 0x3260 <disk_readp+0x82>

		if (rc == 0xFE) {				/* A data packet arrived */
    327e:	8b 81       	ldd	r24, Y+3	; 0x03
    3280:	8e 3f       	cpi	r24, 0xFE	; 254
    3282:	09 f0       	breq	.+2      	; 0x3286 <disk_readp+0xa8>
    3284:	42 c0       	rjmp	.+132    	; 0x330a <disk_readp+0x12c>
			bc = 514 - ofs - cnt;
    3286:	8b 85       	ldd	r24, Y+11	; 0x0b
    3288:	9c 85       	ldd	r25, Y+12	; 0x0c
    328a:	22 27       	eor	r18, r18
    328c:	33 27       	eor	r19, r19
    328e:	28 1b       	sub	r18, r24
    3290:	39 0b       	sbc	r19, r25
    3292:	8d 85       	ldd	r24, Y+13	; 0x0d
    3294:	9e 85       	ldd	r25, Y+14	; 0x0e
    3296:	a9 01       	movw	r20, r18
    3298:	48 1b       	sub	r20, r24
    329a:	59 0b       	sbc	r21, r25
    329c:	ca 01       	movw	r24, r20
    329e:	8e 5f       	subi	r24, 0xFE	; 254
    32a0:	9d 4f       	sbci	r25, 0xFD	; 253
    32a2:	9a 83       	std	Y+2, r25	; 0x02
    32a4:	89 83       	std	Y+1, r24	; 0x01

			/* Skip leading bytes */
			if (ofs) {
    32a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    32a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    32aa:	00 97       	sbiw	r24, 0x00	; 0
    32ac:	59 f0       	breq	.+22     	; 0x32c4 <disk_readp+0xe6>
				do rcv_spi(); while (--ofs);
    32ae:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <rcv_spi>
    32b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    32b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    32b6:	01 97       	sbiw	r24, 0x01	; 1
    32b8:	9c 87       	std	Y+12, r25	; 0x0c
    32ba:	8b 87       	std	Y+11, r24	; 0x0b
    32bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    32be:	9c 85       	ldd	r25, Y+12	; 0x0c
    32c0:	00 97       	sbiw	r24, 0x00	; 0
    32c2:	a9 f7       	brne	.-22     	; 0x32ae <disk_readp+0xd0>
			}

			/* Receive a part of the sector */
			if (buff) {	/* Store data to the memory */
    32c4:	8d 81       	ldd	r24, Y+5	; 0x05
    32c6:	9e 81       	ldd	r25, Y+6	; 0x06
    32c8:	00 97       	sbiw	r24, 0x00	; 0
    32ca:	99 f0       	breq	.+38     	; 0x32f2 <disk_readp+0x114>
				do
					*buff++ = rcv_spi();
    32cc:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <rcv_spi>
    32d0:	ed 81       	ldd	r30, Y+5	; 0x05
    32d2:	fe 81       	ldd	r31, Y+6	; 0x06
    32d4:	80 83       	st	Z, r24
    32d6:	8d 81       	ldd	r24, Y+5	; 0x05
    32d8:	9e 81       	ldd	r25, Y+6	; 0x06
    32da:	01 96       	adiw	r24, 0x01	; 1
    32dc:	9e 83       	std	Y+6, r25	; 0x06
    32de:	8d 83       	std	Y+5, r24	; 0x05
				while (--cnt);
    32e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    32e4:	01 97       	sbiw	r24, 0x01	; 1
    32e6:	9e 87       	std	Y+14, r25	; 0x0e
    32e8:	8d 87       	std	Y+13, r24	; 0x0d
    32ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    32ee:	00 97       	sbiw	r24, 0x00	; 0
    32f0:	69 f7       	brne	.-38     	; 0x32cc <disk_readp+0xee>
			}

			/* Skip trailing bytes and CRC */
			do rcv_spi(); while (--bc);
    32f2:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <rcv_spi>
    32f6:	89 81       	ldd	r24, Y+1	; 0x01
    32f8:	9a 81       	ldd	r25, Y+2	; 0x02
    32fa:	01 97       	sbiw	r24, 0x01	; 1
    32fc:	9a 83       	std	Y+2, r25	; 0x02
    32fe:	89 83       	std	Y+1, r24	; 0x01
    3300:	89 81       	ldd	r24, Y+1	; 0x01
    3302:	9a 81       	ldd	r25, Y+2	; 0x02
    3304:	00 97       	sbiw	r24, 0x00	; 0
    3306:	a9 f7       	brne	.-22     	; 0x32f2 <disk_readp+0x114>

			res = RES_OK;
    3308:	1c 82       	std	Y+4, r1	; 0x04
		}
	}

	release_spi();
    330a:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <release_spi>

	return res;
    330e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3310:	2e 96       	adiw	r28, 0x0e	; 14
    3312:	0f b6       	in	r0, 0x3f	; 63
    3314:	f8 94       	cli
    3316:	de bf       	out	0x3e, r29	; 62
    3318:	0f be       	out	0x3f, r0	; 63
    331a:	cd bf       	out	0x3d, r28	; 61
    331c:	cf 91       	pop	r28
    331e:	df 91       	pop	r29
    3320:	1f 91       	pop	r17
    3322:	0f 91       	pop	r16
    3324:	08 95       	ret

00003326 <disk_writep>:

DRESULT disk_writep (
	const BYTE *buff,	/* Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) */
	DWORD sa			/* Number of bytes to send, Sector number (LBA) or zero */
)
{
    3326:	df 93       	push	r29
    3328:	cf 93       	push	r28
    332a:	cd b7       	in	r28, 0x3d	; 61
    332c:	de b7       	in	r29, 0x3e	; 62
    332e:	2a 97       	sbiw	r28, 0x0a	; 10
    3330:	0f b6       	in	r0, 0x3f	; 63
    3332:	f8 94       	cli
    3334:	de bf       	out	0x3e, r29	; 62
    3336:	0f be       	out	0x3f, r0	; 63
    3338:	cd bf       	out	0x3d, r28	; 61
    333a:	9d 83       	std	Y+5, r25	; 0x05
    333c:	8c 83       	std	Y+4, r24	; 0x04
    333e:	4e 83       	std	Y+6, r20	; 0x06
    3340:	5f 83       	std	Y+7, r21	; 0x07
    3342:	68 87       	std	Y+8, r22	; 0x08
    3344:	79 87       	std	Y+9, r23	; 0x09
	DRESULT res;
	WORD bc;
	static WORD wc;


	res = RES_ERROR;
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	8b 83       	std	Y+3, r24	; 0x03

	if (buff) {		/* Send data bytes */
    334a:	8c 81       	ldd	r24, Y+4	; 0x04
    334c:	9d 81       	ldd	r25, Y+5	; 0x05
    334e:	00 97       	sbiw	r24, 0x00	; 0
    3350:	79 f1       	breq	.+94     	; 0x33b0 <disk_writep+0x8a>
		bc = (WORD)sa;
    3352:	8e 81       	ldd	r24, Y+6	; 0x06
    3354:	9f 81       	ldd	r25, Y+7	; 0x07
    3356:	9a 83       	std	Y+2, r25	; 0x02
    3358:	89 83       	std	Y+1, r24	; 0x01
    335a:	1e c0       	rjmp	.+60     	; 0x3398 <disk_writep+0x72>
		while (bc && wc) {		/* Send data bytes to the card */
			xmit_spi(*buff++);
    335c:	af e2       	ldi	r26, 0x2F	; 47
    335e:	b0 e0       	ldi	r27, 0x00	; 0
    3360:	ec 81       	ldd	r30, Y+4	; 0x04
    3362:	fd 81       	ldd	r31, Y+5	; 0x05
    3364:	80 81       	ld	r24, Z
    3366:	8c 93       	st	X, r24
    3368:	8c 81       	ldd	r24, Y+4	; 0x04
    336a:	9d 81       	ldd	r25, Y+5	; 0x05
    336c:	01 96       	adiw	r24, 0x01	; 1
    336e:	9d 83       	std	Y+5, r25	; 0x05
    3370:	8c 83       	std	Y+4, r24	; 0x04
    3372:	ee e2       	ldi	r30, 0x2E	; 46
    3374:	f0 e0       	ldi	r31, 0x00	; 0
    3376:	80 81       	ld	r24, Z
    3378:	88 23       	and	r24, r24
    337a:	dc f7       	brge	.-10     	; 0x3372 <disk_writep+0x4c>
			wc--; bc--;
    337c:	80 91 1f 02 	lds	r24, 0x021F
    3380:	90 91 20 02 	lds	r25, 0x0220
    3384:	01 97       	sbiw	r24, 0x01	; 1
    3386:	90 93 20 02 	sts	0x0220, r25
    338a:	80 93 1f 02 	sts	0x021F, r24
    338e:	89 81       	ldd	r24, Y+1	; 0x01
    3390:	9a 81       	ldd	r25, Y+2	; 0x02
    3392:	01 97       	sbiw	r24, 0x01	; 1
    3394:	9a 83       	std	Y+2, r25	; 0x02
    3396:	89 83       	std	Y+1, r24	; 0x01

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
		bc = (WORD)sa;
		while (bc && wc) {		/* Send data bytes to the card */
    3398:	89 81       	ldd	r24, Y+1	; 0x01
    339a:	9a 81       	ldd	r25, Y+2	; 0x02
    339c:	00 97       	sbiw	r24, 0x00	; 0
    339e:	31 f0       	breq	.+12     	; 0x33ac <disk_writep+0x86>
    33a0:	80 91 1f 02 	lds	r24, 0x021F
    33a4:	90 91 20 02 	lds	r25, 0x0220
    33a8:	00 97       	sbiw	r24, 0x00	; 0
    33aa:	c1 f6       	brne	.-80     	; 0x335c <disk_writep+0x36>
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
    33ac:	1b 82       	std	Y+3, r1	; 0x03
    33ae:	89 c0       	rjmp	.+274    	; 0x34c2 <disk_writep+0x19c>
	} else {
		if (sa) {	/* Initiate sector write process */
    33b0:	8e 81       	ldd	r24, Y+6	; 0x06
    33b2:	9f 81       	ldd	r25, Y+7	; 0x07
    33b4:	a8 85       	ldd	r26, Y+8	; 0x08
    33b6:	b9 85       	ldd	r27, Y+9	; 0x09
    33b8:	00 97       	sbiw	r24, 0x00	; 0
    33ba:	a1 05       	cpc	r26, r1
    33bc:	b1 05       	cpc	r27, r1
    33be:	09 f4       	brne	.+2      	; 0x33c2 <disk_writep+0x9c>
    33c0:	3f c0       	rjmp	.+126    	; 0x3440 <disk_writep+0x11a>
			if (!(CardType & CT_BLOCK)) sa *= 512;	/* Convert to byte address if needed */
    33c2:	80 91 21 02 	lds	r24, 0x0221
    33c6:	88 2f       	mov	r24, r24
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	88 70       	andi	r24, 0x08	; 8
    33cc:	90 70       	andi	r25, 0x00	; 0
    33ce:	00 97       	sbiw	r24, 0x00	; 0
    33d0:	89 f4       	brne	.+34     	; 0x33f4 <disk_writep+0xce>
    33d2:	8e 81       	ldd	r24, Y+6	; 0x06
    33d4:	9f 81       	ldd	r25, Y+7	; 0x07
    33d6:	a8 85       	ldd	r26, Y+8	; 0x08
    33d8:	b9 85       	ldd	r27, Y+9	; 0x09
    33da:	07 2e       	mov	r0, r23
    33dc:	79 e0       	ldi	r23, 0x09	; 9
    33de:	88 0f       	add	r24, r24
    33e0:	99 1f       	adc	r25, r25
    33e2:	aa 1f       	adc	r26, r26
    33e4:	bb 1f       	adc	r27, r27
    33e6:	7a 95       	dec	r23
    33e8:	d1 f7       	brne	.-12     	; 0x33de <disk_writep+0xb8>
    33ea:	70 2d       	mov	r23, r0
    33ec:	8e 83       	std	Y+6, r24	; 0x06
    33ee:	9f 83       	std	Y+7, r25	; 0x07
    33f0:	a8 87       	std	Y+8, r26	; 0x08
    33f2:	b9 87       	std	Y+9, r27	; 0x09
			if (send_cmd(CMD24, sa) == 0) {			/* WRITE_SINGLE_BLOCK */
    33f4:	2e 81       	ldd	r18, Y+6	; 0x06
    33f6:	3f 81       	ldd	r19, Y+7	; 0x07
    33f8:	48 85       	ldd	r20, Y+8	; 0x08
    33fa:	59 85       	ldd	r21, Y+9	; 0x09
    33fc:	88 e5       	ldi	r24, 0x58	; 88
    33fe:	ba 01       	movw	r22, r20
    3400:	a9 01       	movw	r20, r18
    3402:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <send_cmd>
    3406:	88 23       	and	r24, r24
    3408:	09 f0       	breq	.+2      	; 0x340c <disk_writep+0xe6>
    340a:	5b c0       	rjmp	.+182    	; 0x34c2 <disk_writep+0x19c>
				xmit_spi(0xFF); xmit_spi(0xFE);		/* Data block header */
    340c:	ef e2       	ldi	r30, 0x2F	; 47
    340e:	f0 e0       	ldi	r31, 0x00	; 0
    3410:	8f ef       	ldi	r24, 0xFF	; 255
    3412:	80 83       	st	Z, r24
    3414:	ee e2       	ldi	r30, 0x2E	; 46
    3416:	f0 e0       	ldi	r31, 0x00	; 0
    3418:	80 81       	ld	r24, Z
    341a:	88 23       	and	r24, r24
    341c:	dc f7       	brge	.-10     	; 0x3414 <disk_writep+0xee>
    341e:	ef e2       	ldi	r30, 0x2F	; 47
    3420:	f0 e0       	ldi	r31, 0x00	; 0
    3422:	8e ef       	ldi	r24, 0xFE	; 254
    3424:	80 83       	st	Z, r24
    3426:	ee e2       	ldi	r30, 0x2E	; 46
    3428:	f0 e0       	ldi	r31, 0x00	; 0
    342a:	80 81       	ld	r24, Z
    342c:	88 23       	and	r24, r24
    342e:	dc f7       	brge	.-10     	; 0x3426 <disk_writep+0x100>
				wc = 512;							/* Set byte counter */
    3430:	80 e0       	ldi	r24, 0x00	; 0
    3432:	92 e0       	ldi	r25, 0x02	; 2
    3434:	90 93 20 02 	sts	0x0220, r25
    3438:	80 93 1f 02 	sts	0x021F, r24
				res = RES_OK;
    343c:	1b 82       	std	Y+3, r1	; 0x03
    343e:	41 c0       	rjmp	.+130    	; 0x34c2 <disk_writep+0x19c>
			}
		} else {	/* Finalize sector write process */
			bc = wc + 2;
    3440:	80 91 1f 02 	lds	r24, 0x021F
    3444:	90 91 20 02 	lds	r25, 0x0220
    3448:	02 96       	adiw	r24, 0x02	; 2
    344a:	9a 83       	std	Y+2, r25	; 0x02
    344c:	89 83       	std	Y+1, r24	; 0x01
    344e:	03 c0       	rjmp	.+6      	; 0x3456 <disk_writep+0x130>
			while (bc--) xmit_spi(0);	/* Fill left bytes and CRC with zeros */
    3450:	ef e2       	ldi	r30, 0x2F	; 47
    3452:	f0 e0       	ldi	r31, 0x00	; 0
    3454:	10 82       	st	Z, r1
    3456:	1a 86       	std	Y+10, r1	; 0x0a
    3458:	89 81       	ldd	r24, Y+1	; 0x01
    345a:	9a 81       	ldd	r25, Y+2	; 0x02
    345c:	00 97       	sbiw	r24, 0x00	; 0
    345e:	11 f0       	breq	.+4      	; 0x3464 <disk_writep+0x13e>
    3460:	81 e0       	ldi	r24, 0x01	; 1
    3462:	8a 87       	std	Y+10, r24	; 0x0a
    3464:	89 81       	ldd	r24, Y+1	; 0x01
    3466:	9a 81       	ldd	r25, Y+2	; 0x02
    3468:	01 97       	sbiw	r24, 0x01	; 1
    346a:	9a 83       	std	Y+2, r25	; 0x02
    346c:	89 83       	std	Y+1, r24	; 0x01
    346e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3470:	88 23       	and	r24, r24
    3472:	71 f7       	brne	.-36     	; 0x3450 <disk_writep+0x12a>
    3474:	ee e2       	ldi	r30, 0x2E	; 46
    3476:	f0 e0       	ldi	r31, 0x00	; 0
    3478:	80 81       	ld	r24, Z
    347a:	88 23       	and	r24, r24
    347c:	dc f7       	brge	.-10     	; 0x3474 <disk_writep+0x14e>
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 300ms */
    347e:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <rcv_spi>
    3482:	88 2f       	mov	r24, r24
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	8f 71       	andi	r24, 0x1F	; 31
    3488:	90 70       	andi	r25, 0x00	; 0
    348a:	85 30       	cpi	r24, 0x05	; 5
    348c:	91 05       	cpc	r25, r1
    348e:	b9 f4       	brne	.+46     	; 0x34be <disk_writep+0x198>
				for (bc = 65000; rcv_spi() != 0xFF && bc; bc--) ;	/* Wait ready */
    3490:	88 ee       	ldi	r24, 0xE8	; 232
    3492:	9d ef       	ldi	r25, 0xFD	; 253
    3494:	9a 83       	std	Y+2, r25	; 0x02
    3496:	89 83       	std	Y+1, r24	; 0x01
    3498:	05 c0       	rjmp	.+10     	; 0x34a4 <disk_writep+0x17e>
    349a:	89 81       	ldd	r24, Y+1	; 0x01
    349c:	9a 81       	ldd	r25, Y+2	; 0x02
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	9a 83       	std	Y+2, r25	; 0x02
    34a2:	89 83       	std	Y+1, r24	; 0x01
    34a4:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <rcv_spi>
    34a8:	8f 3f       	cpi	r24, 0xFF	; 255
    34aa:	21 f0       	breq	.+8      	; 0x34b4 <disk_writep+0x18e>
    34ac:	89 81       	ldd	r24, Y+1	; 0x01
    34ae:	9a 81       	ldd	r25, Y+2	; 0x02
    34b0:	00 97       	sbiw	r24, 0x00	; 0
    34b2:	99 f7       	brne	.-26     	; 0x349a <disk_writep+0x174>
				if (bc) res = RES_OK;
    34b4:	89 81       	ldd	r24, Y+1	; 0x01
    34b6:	9a 81       	ldd	r25, Y+2	; 0x02
    34b8:	00 97       	sbiw	r24, 0x00	; 0
    34ba:	09 f0       	breq	.+2      	; 0x34be <disk_writep+0x198>
    34bc:	1b 82       	std	Y+3, r1	; 0x03
			}
			release_spi();
    34be:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <release_spi>
		}
	}

	return res;
    34c2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    34c4:	2a 96       	adiw	r28, 0x0a	; 10
    34c6:	0f b6       	in	r0, 0x3f	; 63
    34c8:	f8 94       	cli
    34ca:	de bf       	out	0x3e, r29	; 62
    34cc:	0f be       	out	0x3f, r0	; 63
    34ce:	cd bf       	out	0x3d, r28	; 61
    34d0:	cf 91       	pop	r28
    34d2:	df 91       	pop	r29
    34d4:	08 95       	ret

000034d6 <write_close>:

void write_close(void) {
    34d6:	df 93       	push	r29
    34d8:	cf 93       	push	r28
    34da:	00 d0       	rcall	.+0      	; 0x34dc <write_close+0x6>
    34dc:	cd b7       	in	r28, 0x3d	; 61
    34de:	de b7       	in	r29, 0x3e	; 62
	BYTE res = disk_writep(0, 0);
    34e0:	80 e0       	ldi	r24, 0x00	; 0
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	40 e0       	ldi	r20, 0x00	; 0
    34e6:	50 e0       	ldi	r21, 0x00	; 0
    34e8:	60 e0       	ldi	r22, 0x00	; 0
    34ea:	70 e0       	ldi	r23, 0x00	; 0
    34ec:	0e 94 93 19 	call	0x3326	; 0x3326 <disk_writep>
    34f0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i;
	for(i=0; i<100 && res; i++) res = disk_writep(0, 0);
    34f2:	19 82       	std	Y+1, r1	; 0x01
    34f4:	0c c0       	rjmp	.+24     	; 0x350e <write_close+0x38>
    34f6:	80 e0       	ldi	r24, 0x00	; 0
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	40 e0       	ldi	r20, 0x00	; 0
    34fc:	50 e0       	ldi	r21, 0x00	; 0
    34fe:	60 e0       	ldi	r22, 0x00	; 0
    3500:	70 e0       	ldi	r23, 0x00	; 0
    3502:	0e 94 93 19 	call	0x3326	; 0x3326 <disk_writep>
    3506:	8a 83       	std	Y+2, r24	; 0x02
    3508:	89 81       	ldd	r24, Y+1	; 0x01
    350a:	8f 5f       	subi	r24, 0xFF	; 255
    350c:	89 83       	std	Y+1, r24	; 0x01
    350e:	89 81       	ldd	r24, Y+1	; 0x01
    3510:	84 36       	cpi	r24, 0x64	; 100
    3512:	18 f4       	brcc	.+6      	; 0x351a <write_close+0x44>
    3514:	8a 81       	ldd	r24, Y+2	; 0x02
    3516:	88 23       	and	r24, r24
    3518:	71 f7       	brne	.-36     	; 0x34f6 <write_close+0x20>
}
    351a:	0f 90       	pop	r0
    351c:	0f 90       	pop	r0
    351e:	cf 91       	pop	r28
    3520:	df 91       	pop	r29
    3522:	08 95       	ret

00003524 <mem_set>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
    3524:	df 93       	push	r29
    3526:	cf 93       	push	r28
    3528:	cd b7       	in	r28, 0x3d	; 61
    352a:	de b7       	in	r29, 0x3e	; 62
    352c:	29 97       	sbiw	r28, 0x09	; 9
    352e:	0f b6       	in	r0, 0x3f	; 63
    3530:	f8 94       	cli
    3532:	de bf       	out	0x3e, r29	; 62
    3534:	0f be       	out	0x3f, r0	; 63
    3536:	cd bf       	out	0x3d, r28	; 61
    3538:	9c 83       	std	Y+4, r25	; 0x04
    353a:	8b 83       	std	Y+3, r24	; 0x03
    353c:	7e 83       	std	Y+6, r23	; 0x06
    353e:	6d 83       	std	Y+5, r22	; 0x05
    3540:	58 87       	std	Y+8, r21	; 0x08
    3542:	4f 83       	std	Y+7, r20	; 0x07
	char *d = (char*)dst;
    3544:	8b 81       	ldd	r24, Y+3	; 0x03
    3546:	9c 81       	ldd	r25, Y+4	; 0x04
    3548:	9a 83       	std	Y+2, r25	; 0x02
    354a:	89 83       	std	Y+1, r24	; 0x01
    354c:	09 c0       	rjmp	.+18     	; 0x3560 <mem_set+0x3c>
	while (cnt--) *d++ = (char)val;
    354e:	8d 81       	ldd	r24, Y+5	; 0x05
    3550:	e9 81       	ldd	r30, Y+1	; 0x01
    3552:	fa 81       	ldd	r31, Y+2	; 0x02
    3554:	80 83       	st	Z, r24
    3556:	89 81       	ldd	r24, Y+1	; 0x01
    3558:	9a 81       	ldd	r25, Y+2	; 0x02
    355a:	01 96       	adiw	r24, 0x01	; 1
    355c:	9a 83       	std	Y+2, r25	; 0x02
    355e:	89 83       	std	Y+1, r24	; 0x01
    3560:	19 86       	std	Y+9, r1	; 0x09
    3562:	8f 81       	ldd	r24, Y+7	; 0x07
    3564:	98 85       	ldd	r25, Y+8	; 0x08
    3566:	00 97       	sbiw	r24, 0x00	; 0
    3568:	11 f0       	breq	.+4      	; 0x356e <mem_set+0x4a>
    356a:	81 e0       	ldi	r24, 0x01	; 1
    356c:	89 87       	std	Y+9, r24	; 0x09
    356e:	8f 81       	ldd	r24, Y+7	; 0x07
    3570:	98 85       	ldd	r25, Y+8	; 0x08
    3572:	01 97       	sbiw	r24, 0x01	; 1
    3574:	98 87       	std	Y+8, r25	; 0x08
    3576:	8f 83       	std	Y+7, r24	; 0x07
    3578:	89 85       	ldd	r24, Y+9	; 0x09
    357a:	88 23       	and	r24, r24
    357c:	41 f7       	brne	.-48     	; 0x354e <mem_set+0x2a>
}
    357e:	29 96       	adiw	r28, 0x09	; 9
    3580:	0f b6       	in	r0, 0x3f	; 63
    3582:	f8 94       	cli
    3584:	de bf       	out	0x3e, r29	; 62
    3586:	0f be       	out	0x3f, r0	; 63
    3588:	cd bf       	out	0x3d, r28	; 61
    358a:	cf 91       	pop	r28
    358c:	df 91       	pop	r29
    358e:	08 95       	ret

00003590 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
    3590:	df 93       	push	r29
    3592:	cf 93       	push	r28
    3594:	cd b7       	in	r28, 0x3d	; 61
    3596:	de b7       	in	r29, 0x3e	; 62
    3598:	2e 97       	sbiw	r28, 0x0e	; 14
    359a:	0f b6       	in	r0, 0x3f	; 63
    359c:	f8 94       	cli
    359e:	de bf       	out	0x3e, r29	; 62
    35a0:	0f be       	out	0x3f, r0	; 63
    35a2:	cd bf       	out	0x3d, r28	; 61
    35a4:	98 87       	std	Y+8, r25	; 0x08
    35a6:	8f 83       	std	Y+7, r24	; 0x07
    35a8:	7a 87       	std	Y+10, r23	; 0x0a
    35aa:	69 87       	std	Y+9, r22	; 0x09
    35ac:	5c 87       	std	Y+12, r21	; 0x0c
    35ae:	4b 87       	std	Y+11, r20	; 0x0b
	const char *d = (const char *)dst, *s = (const char *)src;
    35b0:	8f 81       	ldd	r24, Y+7	; 0x07
    35b2:	98 85       	ldd	r25, Y+8	; 0x08
    35b4:	9e 83       	std	Y+6, r25	; 0x06
    35b6:	8d 83       	std	Y+5, r24	; 0x05
    35b8:	89 85       	ldd	r24, Y+9	; 0x09
    35ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    35bc:	9c 83       	std	Y+4, r25	; 0x04
    35be:	8b 83       	std	Y+3, r24	; 0x03
	int r = 0;
    35c0:	1a 82       	std	Y+2, r1	; 0x02
    35c2:	19 82       	std	Y+1, r1	; 0x01
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    35c4:	1e 86       	std	Y+14, r1	; 0x0e
    35c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    35c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    35ca:	00 97       	sbiw	r24, 0x00	; 0
    35cc:	11 f0       	breq	.+4      	; 0x35d2 <mem_cmp+0x42>
    35ce:	41 e0       	ldi	r20, 0x01	; 1
    35d0:	4e 87       	std	Y+14, r20	; 0x0e
    35d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    35d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    35d6:	01 97       	sbiw	r24, 0x01	; 1
    35d8:	9c 87       	std	Y+12, r25	; 0x0c
    35da:	8b 87       	std	Y+11, r24	; 0x0b
    35dc:	81 e0       	ldi	r24, 0x01	; 1
    35de:	5e 85       	ldd	r21, Y+14	; 0x0e
    35e0:	85 27       	eor	r24, r21
    35e2:	88 23       	and	r24, r24
    35e4:	21 f5       	brne	.+72     	; 0x362e <mem_cmp+0x9e>
    35e6:	ed 81       	ldd	r30, Y+5	; 0x05
    35e8:	fe 81       	ldd	r31, Y+6	; 0x06
    35ea:	80 81       	ld	r24, Z
    35ec:	28 2f       	mov	r18, r24
    35ee:	30 e0       	ldi	r19, 0x00	; 0
    35f0:	eb 81       	ldd	r30, Y+3	; 0x03
    35f2:	fc 81       	ldd	r31, Y+4	; 0x04
    35f4:	80 81       	ld	r24, Z
    35f6:	88 2f       	mov	r24, r24
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	a9 01       	movw	r20, r18
    35fc:	48 1b       	sub	r20, r24
    35fe:	59 0b       	sbc	r21, r25
    3600:	ca 01       	movw	r24, r20
    3602:	9a 83       	std	Y+2, r25	; 0x02
    3604:	89 83       	std	Y+1, r24	; 0x01
    3606:	1d 86       	std	Y+13, r1	; 0x0d
    3608:	89 81       	ldd	r24, Y+1	; 0x01
    360a:	9a 81       	ldd	r25, Y+2	; 0x02
    360c:	00 97       	sbiw	r24, 0x00	; 0
    360e:	11 f4       	brne	.+4      	; 0x3614 <mem_cmp+0x84>
    3610:	51 e0       	ldi	r21, 0x01	; 1
    3612:	5d 87       	std	Y+13, r21	; 0x0d
    3614:	8d 81       	ldd	r24, Y+5	; 0x05
    3616:	9e 81       	ldd	r25, Y+6	; 0x06
    3618:	01 96       	adiw	r24, 0x01	; 1
    361a:	9e 83       	std	Y+6, r25	; 0x06
    361c:	8d 83       	std	Y+5, r24	; 0x05
    361e:	8b 81       	ldd	r24, Y+3	; 0x03
    3620:	9c 81       	ldd	r25, Y+4	; 0x04
    3622:	01 96       	adiw	r24, 0x01	; 1
    3624:	9c 83       	std	Y+4, r25	; 0x04
    3626:	8b 83       	std	Y+3, r24	; 0x03
    3628:	8d 85       	ldd	r24, Y+13	; 0x0d
    362a:	88 23       	and	r24, r24
    362c:	59 f6       	brne	.-106    	; 0x35c4 <mem_cmp+0x34>
	return r;
    362e:	89 81       	ldd	r24, Y+1	; 0x01
    3630:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3632:	2e 96       	adiw	r28, 0x0e	; 14
    3634:	0f b6       	in	r0, 0x3f	; 63
    3636:	f8 94       	cli
    3638:	de bf       	out	0x3e, r29	; 62
    363a:	0f be       	out	0x3f, r0	; 63
    363c:	cd bf       	out	0x3d, r28	; 61
    363e:	cf 91       	pop	r28
    3640:	df 91       	pop	r29
    3642:	08 95       	ret

00003644 <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
    3644:	0f 93       	push	r16
    3646:	1f 93       	push	r17
    3648:	df 93       	push	r29
    364a:	cf 93       	push	r28
    364c:	cd b7       	in	r28, 0x3d	; 61
    364e:	de b7       	in	r29, 0x3e	; 62
    3650:	6a 97       	sbiw	r28, 0x1a	; 26
    3652:	0f b6       	in	r0, 0x3f	; 63
    3654:	f8 94       	cli
    3656:	de bf       	out	0x3e, r29	; 62
    3658:	0f be       	out	0x3f, r0	; 63
    365a:	cd bf       	out	0x3d, r28	; 61
    365c:	6d 87       	std	Y+13, r22	; 0x0d
    365e:	7e 87       	std	Y+14, r23	; 0x0e
    3660:	8f 87       	std	Y+15, r24	; 0x0f
    3662:	98 8b       	std	Y+16, r25	; 0x10
	WORD wc, bc, ofs;
	BYTE buf[4];
	FATFS *fs = FatFs;
    3664:	80 91 22 02 	lds	r24, 0x0222
    3668:	90 91 23 02 	lds	r25, 0x0223
    366c:	9a 83       	std	Y+2, r25	; 0x02
    366e:	89 83       	std	Y+1, r24	; 0x01


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
    3670:	8d 85       	ldd	r24, Y+13	; 0x0d
    3672:	9e 85       	ldd	r25, Y+14	; 0x0e
    3674:	af 85       	ldd	r26, Y+15	; 0x0f
    3676:	b8 89       	ldd	r27, Y+16	; 0x10
    3678:	82 30       	cpi	r24, 0x02	; 2
    367a:	91 05       	cpc	r25, r1
    367c:	a1 05       	cpc	r26, r1
    367e:	b1 05       	cpc	r27, r1
    3680:	78 f0       	brcs	.+30     	; 0x36a0 <get_fat+0x5c>
    3682:	e9 81       	ldd	r30, Y+1	; 0x01
    3684:	fa 81       	ldd	r31, Y+2	; 0x02
    3686:	20 85       	ldd	r18, Z+8	; 0x08
    3688:	31 85       	ldd	r19, Z+9	; 0x09
    368a:	42 85       	ldd	r20, Z+10	; 0x0a
    368c:	53 85       	ldd	r21, Z+11	; 0x0b
    368e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3690:	9e 85       	ldd	r25, Y+14	; 0x0e
    3692:	af 85       	ldd	r26, Y+15	; 0x0f
    3694:	b8 89       	ldd	r27, Y+16	; 0x10
    3696:	82 17       	cp	r24, r18
    3698:	93 07       	cpc	r25, r19
    369a:	a4 07       	cpc	r26, r20
    369c:	b5 07       	cpc	r27, r21
    369e:	48 f0       	brcs	.+18     	; 0x36b2 <get_fat+0x6e>
		return 1;
    36a0:	21 e0       	ldi	r18, 0x01	; 1
    36a2:	30 e0       	ldi	r19, 0x00	; 0
    36a4:	40 e0       	ldi	r20, 0x00	; 0
    36a6:	50 e0       	ldi	r21, 0x00	; 0
    36a8:	2f 8b       	std	Y+23, r18	; 0x17
    36aa:	38 8f       	std	Y+24, r19	; 0x18
    36ac:	49 8f       	std	Y+25, r20	; 0x19
    36ae:	5a 8f       	std	Y+26, r21	; 0x1a
    36b0:	3a c1       	rjmp	.+628    	; 0x3926 <get_fat+0x2e2>

	switch (fs->fs_type) {
    36b2:	e9 81       	ldd	r30, Y+1	; 0x01
    36b4:	fa 81       	ldd	r31, Y+2	; 0x02
    36b6:	80 81       	ld	r24, Z
    36b8:	48 2f       	mov	r20, r24
    36ba:	50 e0       	ldi	r21, 0x00	; 0
    36bc:	5e 8b       	std	Y+22, r21	; 0x16
    36be:	4d 8b       	std	Y+21, r20	; 0x15
    36c0:	8d 89       	ldd	r24, Y+21	; 0x15
    36c2:	9e 89       	ldd	r25, Y+22	; 0x16
    36c4:	82 30       	cpi	r24, 0x02	; 2
    36c6:	91 05       	cpc	r25, r1
    36c8:	09 f4       	brne	.+2      	; 0x36cc <get_fat+0x88>
    36ca:	bd c0       	rjmp	.+378    	; 0x3846 <get_fat+0x202>
    36cc:	ad 89       	ldd	r26, Y+21	; 0x15
    36ce:	be 89       	ldd	r27, Y+22	; 0x16
    36d0:	a3 30       	cpi	r26, 0x03	; 3
    36d2:	b1 05       	cpc	r27, r1
    36d4:	09 f4       	brne	.+2      	; 0x36d8 <get_fat+0x94>
    36d6:	e7 c0       	rjmp	.+462    	; 0x38a6 <get_fat+0x262>
    36d8:	2d 89       	ldd	r18, Y+21	; 0x15
    36da:	3e 89       	ldd	r19, Y+22	; 0x16
    36dc:	21 30       	cpi	r18, 0x01	; 1
    36de:	31 05       	cpc	r19, r1
    36e0:	09 f0       	breq	.+2      	; 0x36e4 <get_fat+0xa0>
    36e2:	19 c1       	rjmp	.+562    	; 0x3916 <get_fat+0x2d2>
	case FS_FAT12 :
		bc = (WORD)clst; bc += bc / 2;
    36e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    36e8:	9e 83       	std	Y+6, r25	; 0x06
    36ea:	8d 83       	std	Y+5, r24	; 0x05
    36ec:	8d 81       	ldd	r24, Y+5	; 0x05
    36ee:	9e 81       	ldd	r25, Y+6	; 0x06
    36f0:	9c 01       	movw	r18, r24
    36f2:	36 95       	lsr	r19
    36f4:	27 95       	ror	r18
    36f6:	8d 81       	ldd	r24, Y+5	; 0x05
    36f8:	9e 81       	ldd	r25, Y+6	; 0x06
    36fa:	82 0f       	add	r24, r18
    36fc:	93 1f       	adc	r25, r19
    36fe:	9e 83       	std	Y+6, r25	; 0x06
    3700:	8d 83       	std	Y+5, r24	; 0x05
		ofs = bc % 512; bc /= 512;
    3702:	8d 81       	ldd	r24, Y+5	; 0x05
    3704:	9e 81       	ldd	r25, Y+6	; 0x06
    3706:	91 70       	andi	r25, 0x01	; 1
    3708:	9c 83       	std	Y+4, r25	; 0x04
    370a:	8b 83       	std	Y+3, r24	; 0x03
    370c:	8d 81       	ldd	r24, Y+5	; 0x05
    370e:	9e 81       	ldd	r25, Y+6	; 0x06
    3710:	89 2f       	mov	r24, r25
    3712:	99 27       	eor	r25, r25
    3714:	86 95       	lsr	r24
    3716:	9e 83       	std	Y+6, r25	; 0x06
    3718:	8d 83       	std	Y+5, r24	; 0x05
		if (ofs != 511) {
    371a:	8b 81       	ldd	r24, Y+3	; 0x03
    371c:	9c 81       	ldd	r25, Y+4	; 0x04
    371e:	31 e0       	ldi	r19, 0x01	; 1
    3720:	8f 3f       	cpi	r24, 0xFF	; 255
    3722:	93 07       	cpc	r25, r19
    3724:	f1 f0       	breq	.+60     	; 0x3762 <get_fat+0x11e>
			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
    3726:	e9 81       	ldd	r30, Y+1	; 0x01
    3728:	fa 81       	ldd	r31, Y+2	; 0x02
    372a:	24 85       	ldd	r18, Z+12	; 0x0c
    372c:	35 85       	ldd	r19, Z+13	; 0x0d
    372e:	46 85       	ldd	r20, Z+14	; 0x0e
    3730:	57 85       	ldd	r21, Z+15	; 0x0f
    3732:	8d 81       	ldd	r24, Y+5	; 0x05
    3734:	9e 81       	ldd	r25, Y+6	; 0x06
    3736:	cc 01       	movw	r24, r24
    3738:	a0 e0       	ldi	r26, 0x00	; 0
    373a:	b0 e0       	ldi	r27, 0x00	; 0
    373c:	28 0f       	add	r18, r24
    373e:	39 1f       	adc	r19, r25
    3740:	4a 1f       	adc	r20, r26
    3742:	5b 1f       	adc	r21, r27
    3744:	ce 01       	movw	r24, r28
    3746:	09 96       	adiw	r24, 0x09	; 9
    3748:	eb 81       	ldd	r30, Y+3	; 0x03
    374a:	fc 81       	ldd	r31, Y+4	; 0x04
    374c:	ba 01       	movw	r22, r20
    374e:	a9 01       	movw	r20, r18
    3750:	9f 01       	movw	r18, r30
    3752:	02 e0       	ldi	r16, 0x02	; 2
    3754:	10 e0       	ldi	r17, 0x00	; 0
    3756:	0e 94 ef 18 	call	0x31de	; 0x31de <disk_readp>
    375a:	88 23       	and	r24, r24
    375c:	09 f0       	breq	.+2      	; 0x3760 <get_fat+0x11c>
    375e:	db c0       	rjmp	.+438    	; 0x3916 <get_fat+0x2d2>
    3760:	3f c0       	rjmp	.+126    	; 0x37e0 <get_fat+0x19c>
		} else {
			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
    3762:	e9 81       	ldd	r30, Y+1	; 0x01
    3764:	fa 81       	ldd	r31, Y+2	; 0x02
    3766:	24 85       	ldd	r18, Z+12	; 0x0c
    3768:	35 85       	ldd	r19, Z+13	; 0x0d
    376a:	46 85       	ldd	r20, Z+14	; 0x0e
    376c:	57 85       	ldd	r21, Z+15	; 0x0f
    376e:	8d 81       	ldd	r24, Y+5	; 0x05
    3770:	9e 81       	ldd	r25, Y+6	; 0x06
    3772:	cc 01       	movw	r24, r24
    3774:	a0 e0       	ldi	r26, 0x00	; 0
    3776:	b0 e0       	ldi	r27, 0x00	; 0
    3778:	28 0f       	add	r18, r24
    377a:	39 1f       	adc	r19, r25
    377c:	4a 1f       	adc	r20, r26
    377e:	5b 1f       	adc	r21, r27
    3780:	ce 01       	movw	r24, r28
    3782:	09 96       	adiw	r24, 0x09	; 9
    3784:	ba 01       	movw	r22, r20
    3786:	a9 01       	movw	r20, r18
    3788:	2f ef       	ldi	r18, 0xFF	; 255
    378a:	31 e0       	ldi	r19, 0x01	; 1
    378c:	01 e0       	ldi	r16, 0x01	; 1
    378e:	10 e0       	ldi	r17, 0x00	; 0
    3790:	0e 94 ef 18 	call	0x31de	; 0x31de <disk_readp>
    3794:	88 23       	and	r24, r24
    3796:	09 f0       	breq	.+2      	; 0x379a <get_fat+0x156>
    3798:	be c0       	rjmp	.+380    	; 0x3916 <get_fat+0x2d2>
			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
    379a:	e9 81       	ldd	r30, Y+1	; 0x01
    379c:	fa 81       	ldd	r31, Y+2	; 0x02
    379e:	24 85       	ldd	r18, Z+12	; 0x0c
    37a0:	35 85       	ldd	r19, Z+13	; 0x0d
    37a2:	46 85       	ldd	r20, Z+14	; 0x0e
    37a4:	57 85       	ldd	r21, Z+15	; 0x0f
    37a6:	8d 81       	ldd	r24, Y+5	; 0x05
    37a8:	9e 81       	ldd	r25, Y+6	; 0x06
    37aa:	cc 01       	movw	r24, r24
    37ac:	a0 e0       	ldi	r26, 0x00	; 0
    37ae:	b0 e0       	ldi	r27, 0x00	; 0
    37b0:	82 0f       	add	r24, r18
    37b2:	93 1f       	adc	r25, r19
    37b4:	a4 1f       	adc	r26, r20
    37b6:	b5 1f       	adc	r27, r21
    37b8:	9c 01       	movw	r18, r24
    37ba:	ad 01       	movw	r20, r26
    37bc:	2f 5f       	subi	r18, 0xFF	; 255
    37be:	3f 4f       	sbci	r19, 0xFF	; 255
    37c0:	4f 4f       	sbci	r20, 0xFF	; 255
    37c2:	5f 4f       	sbci	r21, 0xFF	; 255
    37c4:	ce 01       	movw	r24, r28
    37c6:	09 96       	adiw	r24, 0x09	; 9
    37c8:	01 96       	adiw	r24, 0x01	; 1
    37ca:	ba 01       	movw	r22, r20
    37cc:	a9 01       	movw	r20, r18
    37ce:	20 e0       	ldi	r18, 0x00	; 0
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	01 e0       	ldi	r16, 0x01	; 1
    37d4:	10 e0       	ldi	r17, 0x00	; 0
    37d6:	0e 94 ef 18 	call	0x31de	; 0x31de <disk_readp>
    37da:	88 23       	and	r24, r24
    37dc:	09 f0       	breq	.+2      	; 0x37e0 <get_fat+0x19c>
    37de:	9b c0       	rjmp	.+310    	; 0x3916 <get_fat+0x2d2>
		}
		wc = LD_WORD(buf);
    37e0:	fe 01       	movw	r30, r28
    37e2:	39 96       	adiw	r30, 0x09	; 9
    37e4:	80 81       	ld	r24, Z
    37e6:	91 81       	ldd	r25, Z+1	; 0x01
    37e8:	98 87       	std	Y+8, r25	; 0x08
    37ea:	8f 83       	std	Y+7, r24	; 0x07
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    37ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    37ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    37f0:	81 70       	andi	r24, 0x01	; 1
    37f2:	90 70       	andi	r25, 0x00	; 0
    37f4:	88 23       	and	r24, r24
    37f6:	81 f0       	breq	.+32     	; 0x3818 <get_fat+0x1d4>
    37f8:	8f 81       	ldd	r24, Y+7	; 0x07
    37fa:	98 85       	ldd	r25, Y+8	; 0x08
    37fc:	92 95       	swap	r25
    37fe:	82 95       	swap	r24
    3800:	8f 70       	andi	r24, 0x0F	; 15
    3802:	89 27       	eor	r24, r25
    3804:	9f 70       	andi	r25, 0x0F	; 15
    3806:	89 27       	eor	r24, r25
    3808:	9c 01       	movw	r18, r24
    380a:	40 e0       	ldi	r20, 0x00	; 0
    380c:	50 e0       	ldi	r21, 0x00	; 0
    380e:	29 8b       	std	Y+17, r18	; 0x11
    3810:	3a 8b       	std	Y+18, r19	; 0x12
    3812:	4b 8b       	std	Y+19, r20	; 0x13
    3814:	5c 8b       	std	Y+20, r21	; 0x14
    3816:	0e c0       	rjmp	.+28     	; 0x3834 <get_fat+0x1f0>
    3818:	8f 81       	ldd	r24, Y+7	; 0x07
    381a:	98 85       	ldd	r25, Y+8	; 0x08
    381c:	cc 01       	movw	r24, r24
    381e:	a0 e0       	ldi	r26, 0x00	; 0
    3820:	b0 e0       	ldi	r27, 0x00	; 0
    3822:	9c 01       	movw	r18, r24
    3824:	ad 01       	movw	r20, r26
    3826:	3f 70       	andi	r19, 0x0F	; 15
    3828:	40 70       	andi	r20, 0x00	; 0
    382a:	50 70       	andi	r21, 0x00	; 0
    382c:	29 8b       	std	Y+17, r18	; 0x11
    382e:	3a 8b       	std	Y+18, r19	; 0x12
    3830:	4b 8b       	std	Y+19, r20	; 0x13
    3832:	5c 8b       	std	Y+20, r21	; 0x14
    3834:	89 89       	ldd	r24, Y+17	; 0x11
    3836:	9a 89       	ldd	r25, Y+18	; 0x12
    3838:	ab 89       	ldd	r26, Y+19	; 0x13
    383a:	bc 89       	ldd	r27, Y+20	; 0x14
    383c:	8f 8b       	std	Y+23, r24	; 0x17
    383e:	98 8f       	std	Y+24, r25	; 0x18
    3840:	a9 8f       	std	Y+25, r26	; 0x19
    3842:	ba 8f       	std	Y+26, r27	; 0x1a
    3844:	70 c0       	rjmp	.+224    	; 0x3926 <get_fat+0x2e2>

	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
    3846:	e9 81       	ldd	r30, Y+1	; 0x01
    3848:	fa 81       	ldd	r31, Y+2	; 0x02
    384a:	24 85       	ldd	r18, Z+12	; 0x0c
    384c:	35 85       	ldd	r19, Z+13	; 0x0d
    384e:	46 85       	ldd	r20, Z+14	; 0x0e
    3850:	57 85       	ldd	r21, Z+15	; 0x0f
    3852:	8d 85       	ldd	r24, Y+13	; 0x0d
    3854:	9e 85       	ldd	r25, Y+14	; 0x0e
    3856:	af 85       	ldd	r26, Y+15	; 0x0f
    3858:	b8 89       	ldd	r27, Y+16	; 0x10
    385a:	89 2f       	mov	r24, r25
    385c:	9a 2f       	mov	r25, r26
    385e:	ab 2f       	mov	r26, r27
    3860:	bb 27       	eor	r27, r27
    3862:	28 0f       	add	r18, r24
    3864:	39 1f       	adc	r19, r25
    3866:	4a 1f       	adc	r20, r26
    3868:	5b 1f       	adc	r21, r27
    386a:	8d 85       	ldd	r24, Y+13	; 0x0d
    386c:	9e 85       	ldd	r25, Y+14	; 0x0e
    386e:	90 70       	andi	r25, 0x00	; 0
    3870:	fc 01       	movw	r30, r24
    3872:	ee 0f       	add	r30, r30
    3874:	ff 1f       	adc	r31, r31
    3876:	ce 01       	movw	r24, r28
    3878:	09 96       	adiw	r24, 0x09	; 9
    387a:	ba 01       	movw	r22, r20
    387c:	a9 01       	movw	r20, r18
    387e:	9f 01       	movw	r18, r30
    3880:	02 e0       	ldi	r16, 0x02	; 2
    3882:	10 e0       	ldi	r17, 0x00	; 0
    3884:	0e 94 ef 18 	call	0x31de	; 0x31de <disk_readp>
    3888:	88 23       	and	r24, r24
    388a:	09 f0       	breq	.+2      	; 0x388e <get_fat+0x24a>
    388c:	44 c0       	rjmp	.+136    	; 0x3916 <get_fat+0x2d2>
		return LD_WORD(buf);
    388e:	fe 01       	movw	r30, r28
    3890:	39 96       	adiw	r30, 0x09	; 9
    3892:	80 81       	ld	r24, Z
    3894:	91 81       	ldd	r25, Z+1	; 0x01
    3896:	9c 01       	movw	r18, r24
    3898:	40 e0       	ldi	r20, 0x00	; 0
    389a:	50 e0       	ldi	r21, 0x00	; 0
    389c:	2f 8b       	std	Y+23, r18	; 0x17
    389e:	38 8f       	std	Y+24, r19	; 0x18
    38a0:	49 8f       	std	Y+25, r20	; 0x19
    38a2:	5a 8f       	std	Y+26, r21	; 0x1a
    38a4:	40 c0       	rjmp	.+128    	; 0x3926 <get_fat+0x2e2>
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
    38a6:	e9 81       	ldd	r30, Y+1	; 0x01
    38a8:	fa 81       	ldd	r31, Y+2	; 0x02
    38aa:	24 85       	ldd	r18, Z+12	; 0x0c
    38ac:	35 85       	ldd	r19, Z+13	; 0x0d
    38ae:	46 85       	ldd	r20, Z+14	; 0x0e
    38b0:	57 85       	ldd	r21, Z+15	; 0x0f
    38b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    38b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    38b6:	af 85       	ldd	r26, Y+15	; 0x0f
    38b8:	b8 89       	ldd	r27, Y+16	; 0x10
    38ba:	68 94       	set
    38bc:	16 f8       	bld	r1, 6
    38be:	b6 95       	lsr	r27
    38c0:	a7 95       	ror	r26
    38c2:	97 95       	ror	r25
    38c4:	87 95       	ror	r24
    38c6:	16 94       	lsr	r1
    38c8:	d1 f7       	brne	.-12     	; 0x38be <get_fat+0x27a>
    38ca:	28 0f       	add	r18, r24
    38cc:	39 1f       	adc	r19, r25
    38ce:	4a 1f       	adc	r20, r26
    38d0:	5b 1f       	adc	r21, r27
    38d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    38d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    38d6:	8f 77       	andi	r24, 0x7F	; 127
    38d8:	90 70       	andi	r25, 0x00	; 0
    38da:	fc 01       	movw	r30, r24
    38dc:	ee 0f       	add	r30, r30
    38de:	ff 1f       	adc	r31, r31
    38e0:	ee 0f       	add	r30, r30
    38e2:	ff 1f       	adc	r31, r31
    38e4:	ce 01       	movw	r24, r28
    38e6:	09 96       	adiw	r24, 0x09	; 9
    38e8:	ba 01       	movw	r22, r20
    38ea:	a9 01       	movw	r20, r18
    38ec:	9f 01       	movw	r18, r30
    38ee:	04 e0       	ldi	r16, 0x04	; 4
    38f0:	10 e0       	ldi	r17, 0x00	; 0
    38f2:	0e 94 ef 18 	call	0x31de	; 0x31de <disk_readp>
    38f6:	88 23       	and	r24, r24
    38f8:	71 f4       	brne	.+28     	; 0x3916 <get_fat+0x2d2>
		return LD_DWORD(buf) & 0x0FFFFFFF;
    38fa:	fe 01       	movw	r30, r28
    38fc:	39 96       	adiw	r30, 0x09	; 9
    38fe:	80 81       	ld	r24, Z
    3900:	91 81       	ldd	r25, Z+1	; 0x01
    3902:	a2 81       	ldd	r26, Z+2	; 0x02
    3904:	b3 81       	ldd	r27, Z+3	; 0x03
    3906:	9c 01       	movw	r18, r24
    3908:	ad 01       	movw	r20, r26
    390a:	5f 70       	andi	r21, 0x0F	; 15
    390c:	2f 8b       	std	Y+23, r18	; 0x17
    390e:	38 8f       	std	Y+24, r19	; 0x18
    3910:	49 8f       	std	Y+25, r20	; 0x19
    3912:	5a 8f       	std	Y+26, r21	; 0x1a
    3914:	08 c0       	rjmp	.+16     	; 0x3926 <get_fat+0x2e2>
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
    3916:	81 e0       	ldi	r24, 0x01	; 1
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	a0 e0       	ldi	r26, 0x00	; 0
    391c:	b0 e0       	ldi	r27, 0x00	; 0
    391e:	8f 8b       	std	Y+23, r24	; 0x17
    3920:	98 8f       	std	Y+24, r25	; 0x18
    3922:	a9 8f       	std	Y+25, r26	; 0x19
    3924:	ba 8f       	std	Y+26, r27	; 0x1a
    3926:	8f 89       	ldd	r24, Y+23	; 0x17
    3928:	98 8d       	ldd	r25, Y+24	; 0x18
    392a:	a9 8d       	ldd	r26, Y+25	; 0x19
    392c:	ba 8d       	ldd	r27, Y+26	; 0x1a
}
    392e:	bc 01       	movw	r22, r24
    3930:	cd 01       	movw	r24, r26
    3932:	6a 96       	adiw	r28, 0x1a	; 26
    3934:	0f b6       	in	r0, 0x3f	; 63
    3936:	f8 94       	cli
    3938:	de bf       	out	0x3e, r29	; 62
    393a:	0f be       	out	0x3f, r0	; 63
    393c:	cd bf       	out	0x3d, r28	; 61
    393e:	cf 91       	pop	r28
    3940:	df 91       	pop	r29
    3942:	1f 91       	pop	r17
    3944:	0f 91       	pop	r16
    3946:	08 95       	ret

00003948 <clust2sect>:

static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
    3948:	ef 92       	push	r14
    394a:	ff 92       	push	r15
    394c:	0f 93       	push	r16
    394e:	1f 93       	push	r17
    3950:	df 93       	push	r29
    3952:	cf 93       	push	r28
    3954:	cd b7       	in	r28, 0x3d	; 61
    3956:	de b7       	in	r29, 0x3e	; 62
    3958:	2a 97       	sbiw	r28, 0x0a	; 10
    395a:	0f b6       	in	r0, 0x3f	; 63
    395c:	f8 94       	cli
    395e:	de bf       	out	0x3e, r29	; 62
    3960:	0f be       	out	0x3f, r0	; 63
    3962:	cd bf       	out	0x3d, r28	; 61
    3964:	6b 83       	std	Y+3, r22	; 0x03
    3966:	7c 83       	std	Y+4, r23	; 0x04
    3968:	8d 83       	std	Y+5, r24	; 0x05
    396a:	9e 83       	std	Y+6, r25	; 0x06
	FATFS *fs = FatFs;
    396c:	80 91 22 02 	lds	r24, 0x0222
    3970:	90 91 23 02 	lds	r25, 0x0223
    3974:	9a 83       	std	Y+2, r25	; 0x02
    3976:	89 83       	std	Y+1, r24	; 0x01


	clst -= 2;
    3978:	8b 81       	ldd	r24, Y+3	; 0x03
    397a:	9c 81       	ldd	r25, Y+4	; 0x04
    397c:	ad 81       	ldd	r26, Y+5	; 0x05
    397e:	be 81       	ldd	r27, Y+6	; 0x06
    3980:	02 97       	sbiw	r24, 0x02	; 2
    3982:	a1 09       	sbc	r26, r1
    3984:	b1 09       	sbc	r27, r1
    3986:	8b 83       	std	Y+3, r24	; 0x03
    3988:	9c 83       	std	Y+4, r25	; 0x04
    398a:	ad 83       	std	Y+5, r26	; 0x05
    398c:	be 83       	std	Y+6, r27	; 0x06
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    398e:	e9 81       	ldd	r30, Y+1	; 0x01
    3990:	fa 81       	ldd	r31, Y+2	; 0x02
    3992:	80 85       	ldd	r24, Z+8	; 0x08
    3994:	91 85       	ldd	r25, Z+9	; 0x09
    3996:	a2 85       	ldd	r26, Z+10	; 0x0a
    3998:	b3 85       	ldd	r27, Z+11	; 0x0b
    399a:	9c 01       	movw	r18, r24
    399c:	ad 01       	movw	r20, r26
    399e:	22 50       	subi	r18, 0x02	; 2
    39a0:	30 40       	sbci	r19, 0x00	; 0
    39a2:	40 40       	sbci	r20, 0x00	; 0
    39a4:	50 40       	sbci	r21, 0x00	; 0
    39a6:	8b 81       	ldd	r24, Y+3	; 0x03
    39a8:	9c 81       	ldd	r25, Y+4	; 0x04
    39aa:	ad 81       	ldd	r26, Y+5	; 0x05
    39ac:	be 81       	ldd	r27, Y+6	; 0x06
    39ae:	82 17       	cp	r24, r18
    39b0:	93 07       	cpc	r25, r19
    39b2:	a4 07       	cpc	r26, r20
    39b4:	b5 07       	cpc	r27, r21
    39b6:	28 f0       	brcs	.+10     	; 0x39c2 <clust2sect+0x7a>
    39b8:	1f 82       	std	Y+7, r1	; 0x07
    39ba:	18 86       	std	Y+8, r1	; 0x08
    39bc:	19 86       	std	Y+9, r1	; 0x09
    39be:	1a 86       	std	Y+10, r1	; 0x0a
    39c0:	21 c0       	rjmp	.+66     	; 0x3a04 <clust2sect+0xbc>
	return (DWORD)clst * fs->csize + fs->database;
    39c2:	e9 81       	ldd	r30, Y+1	; 0x01
    39c4:	fa 81       	ldd	r31, Y+2	; 0x02
    39c6:	81 81       	ldd	r24, Z+1	; 0x01
    39c8:	88 2f       	mov	r24, r24
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	a0 e0       	ldi	r26, 0x00	; 0
    39ce:	b0 e0       	ldi	r27, 0x00	; 0
    39d0:	2b 81       	ldd	r18, Y+3	; 0x03
    39d2:	3c 81       	ldd	r19, Y+4	; 0x04
    39d4:	4d 81       	ldd	r20, Y+5	; 0x05
    39d6:	5e 81       	ldd	r21, Y+6	; 0x06
    39d8:	bc 01       	movw	r22, r24
    39da:	cd 01       	movw	r24, r26
    39dc:	0e 94 53 48 	call	0x90a6	; 0x90a6 <__mulsi3>
    39e0:	9b 01       	movw	r18, r22
    39e2:	ac 01       	movw	r20, r24
    39e4:	e9 81       	ldd	r30, Y+1	; 0x01
    39e6:	fa 81       	ldd	r31, Y+2	; 0x02
    39e8:	84 89       	ldd	r24, Z+20	; 0x14
    39ea:	95 89       	ldd	r25, Z+21	; 0x15
    39ec:	a6 89       	ldd	r26, Z+22	; 0x16
    39ee:	b7 89       	ldd	r27, Z+23	; 0x17
    39f0:	79 01       	movw	r14, r18
    39f2:	8a 01       	movw	r16, r20
    39f4:	e8 0e       	add	r14, r24
    39f6:	f9 1e       	adc	r15, r25
    39f8:	0a 1f       	adc	r16, r26
    39fa:	1b 1f       	adc	r17, r27
    39fc:	ef 82       	std	Y+7, r14	; 0x07
    39fe:	f8 86       	std	Y+8, r15	; 0x08
    3a00:	09 87       	std	Y+9, r16	; 0x09
    3a02:	1a 87       	std	Y+10, r17	; 0x0a
    3a04:	8f 81       	ldd	r24, Y+7	; 0x07
    3a06:	98 85       	ldd	r25, Y+8	; 0x08
    3a08:	a9 85       	ldd	r26, Y+9	; 0x09
    3a0a:	ba 85       	ldd	r27, Y+10	; 0x0a
}
    3a0c:	bc 01       	movw	r22, r24
    3a0e:	cd 01       	movw	r24, r26
    3a10:	2a 96       	adiw	r28, 0x0a	; 10
    3a12:	0f b6       	in	r0, 0x3f	; 63
    3a14:	f8 94       	cli
    3a16:	de bf       	out	0x3e, r29	; 62
    3a18:	0f be       	out	0x3f, r0	; 63
    3a1a:	cd bf       	out	0x3d, r28	; 61
    3a1c:	cf 91       	pop	r28
    3a1e:	df 91       	pop	r29
    3a20:	1f 91       	pop	r17
    3a22:	0f 91       	pop	r16
    3a24:	ff 90       	pop	r15
    3a26:	ef 90       	pop	r14
    3a28:	08 95       	ret

00003a2a <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
    3a2a:	df 93       	push	r29
    3a2c:	cf 93       	push	r28
    3a2e:	cd b7       	in	r28, 0x3d	; 61
    3a30:	de b7       	in	r29, 0x3e	; 62
    3a32:	2d 97       	sbiw	r28, 0x0d	; 13
    3a34:	0f b6       	in	r0, 0x3f	; 63
    3a36:	f8 94       	cli
    3a38:	de bf       	out	0x3e, r29	; 62
    3a3a:	0f be       	out	0x3f, r0	; 63
    3a3c:	cd bf       	out	0x3d, r28	; 61
    3a3e:	98 87       	std	Y+8, r25	; 0x08
    3a40:	8f 83       	std	Y+7, r24	; 0x07
	CLUST clst;
	FATFS *fs = FatFs;
    3a42:	80 91 22 02 	lds	r24, 0x0222
    3a46:	90 91 23 02 	lds	r25, 0x0223
    3a4a:	9a 83       	std	Y+2, r25	; 0x02
    3a4c:	89 83       	std	Y+1, r24	; 0x01


	dj->index = 0;
    3a4e:	ef 81       	ldd	r30, Y+7	; 0x07
    3a50:	f8 85       	ldd	r31, Y+8	; 0x08
    3a52:	11 82       	std	Z+1, r1	; 0x01
    3a54:	10 82       	st	Z, r1
	clst = dj->sclust;
    3a56:	ef 81       	ldd	r30, Y+7	; 0x07
    3a58:	f8 85       	ldd	r31, Y+8	; 0x08
    3a5a:	84 81       	ldd	r24, Z+4	; 0x04
    3a5c:	95 81       	ldd	r25, Z+5	; 0x05
    3a5e:	a6 81       	ldd	r26, Z+6	; 0x06
    3a60:	b7 81       	ldd	r27, Z+7	; 0x07
    3a62:	8b 83       	std	Y+3, r24	; 0x03
    3a64:	9c 83       	std	Y+4, r25	; 0x04
    3a66:	ad 83       	std	Y+5, r26	; 0x05
    3a68:	be 83       	std	Y+6, r27	; 0x06
	if (clst == 1 || clst >= fs->max_clust)	/* Check start cluster range */
    3a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a6e:	ad 81       	ldd	r26, Y+5	; 0x05
    3a70:	be 81       	ldd	r27, Y+6	; 0x06
    3a72:	81 30       	cpi	r24, 0x01	; 1
    3a74:	91 05       	cpc	r25, r1
    3a76:	a1 05       	cpc	r26, r1
    3a78:	b1 05       	cpc	r27, r1
    3a7a:	79 f0       	breq	.+30     	; 0x3a9a <dir_rewind+0x70>
    3a7c:	e9 81       	ldd	r30, Y+1	; 0x01
    3a7e:	fa 81       	ldd	r31, Y+2	; 0x02
    3a80:	20 85       	ldd	r18, Z+8	; 0x08
    3a82:	31 85       	ldd	r19, Z+9	; 0x09
    3a84:	42 85       	ldd	r20, Z+10	; 0x0a
    3a86:	53 85       	ldd	r21, Z+11	; 0x0b
    3a88:	8b 81       	ldd	r24, Y+3	; 0x03
    3a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a8c:	ad 81       	ldd	r26, Y+5	; 0x05
    3a8e:	be 81       	ldd	r27, Y+6	; 0x06
    3a90:	82 17       	cp	r24, r18
    3a92:	93 07       	cpc	r25, r19
    3a94:	a4 07       	cpc	r26, r20
    3a96:	b5 07       	cpc	r27, r21
    3a98:	18 f0       	brcs	.+6      	; 0x3aa0 <dir_rewind+0x76>
		return FR_DISK_ERR;
    3a9a:	81 e0       	ldi	r24, 0x01	; 1
    3a9c:	8d 87       	std	Y+13, r24	; 0x0d
    3a9e:	4d c0       	rjmp	.+154    	; 0x3b3a <dir_rewind+0x110>
#if _FS_FAT32
	if (!clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    3aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    3aa4:	ad 81       	ldd	r26, Y+5	; 0x05
    3aa6:	be 81       	ldd	r27, Y+6	; 0x06
    3aa8:	00 97       	sbiw	r24, 0x00	; 0
    3aaa:	a1 05       	cpc	r26, r1
    3aac:	b1 05       	cpc	r27, r1
    3aae:	79 f4       	brne	.+30     	; 0x3ace <dir_rewind+0xa4>
    3ab0:	e9 81       	ldd	r30, Y+1	; 0x01
    3ab2:	fa 81       	ldd	r31, Y+2	; 0x02
    3ab4:	80 81       	ld	r24, Z
    3ab6:	83 30       	cpi	r24, 0x03	; 3
    3ab8:	51 f4       	brne	.+20     	; 0x3ace <dir_rewind+0xa4>
		clst = fs->dirbase;
    3aba:	e9 81       	ldd	r30, Y+1	; 0x01
    3abc:	fa 81       	ldd	r31, Y+2	; 0x02
    3abe:	80 89       	ldd	r24, Z+16	; 0x10
    3ac0:	91 89       	ldd	r25, Z+17	; 0x11
    3ac2:	a2 89       	ldd	r26, Z+18	; 0x12
    3ac4:	b3 89       	ldd	r27, Z+19	; 0x13
    3ac6:	8b 83       	std	Y+3, r24	; 0x03
    3ac8:	9c 83       	std	Y+4, r25	; 0x04
    3aca:	ad 83       	std	Y+5, r26	; 0x05
    3acc:	be 83       	std	Y+6, r27	; 0x06
#endif
	dj->clust = clst;						/* Current cluster */
    3ace:	ef 81       	ldd	r30, Y+7	; 0x07
    3ad0:	f8 85       	ldd	r31, Y+8	; 0x08
    3ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ad6:	ad 81       	ldd	r26, Y+5	; 0x05
    3ad8:	be 81       	ldd	r27, Y+6	; 0x06
    3ada:	80 87       	std	Z+8, r24	; 0x08
    3adc:	91 87       	std	Z+9, r25	; 0x09
    3ade:	a2 87       	std	Z+10, r26	; 0x0a
    3ae0:	b3 87       	std	Z+11, r27	; 0x0b
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
    3ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ae6:	ad 81       	ldd	r26, Y+5	; 0x05
    3ae8:	be 81       	ldd	r27, Y+6	; 0x06
    3aea:	00 97       	sbiw	r24, 0x00	; 0
    3aec:	a1 05       	cpc	r26, r1
    3aee:	b1 05       	cpc	r27, r1
    3af0:	79 f0       	breq	.+30     	; 0x3b10 <dir_rewind+0xe6>
    3af2:	8b 81       	ldd	r24, Y+3	; 0x03
    3af4:	9c 81       	ldd	r25, Y+4	; 0x04
    3af6:	ad 81       	ldd	r26, Y+5	; 0x05
    3af8:	be 81       	ldd	r27, Y+6	; 0x06
    3afa:	bc 01       	movw	r22, r24
    3afc:	cd 01       	movw	r24, r26
    3afe:	0e 94 a4 1c 	call	0x3948	; 0x3948 <clust2sect>
    3b02:	dc 01       	movw	r26, r24
    3b04:	cb 01       	movw	r24, r22
    3b06:	89 87       	std	Y+9, r24	; 0x09
    3b08:	9a 87       	std	Y+10, r25	; 0x0a
    3b0a:	ab 87       	std	Y+11, r26	; 0x0b
    3b0c:	bc 87       	std	Y+12, r27	; 0x0c
    3b0e:	0a c0       	rjmp	.+20     	; 0x3b24 <dir_rewind+0xfa>
    3b10:	e9 81       	ldd	r30, Y+1	; 0x01
    3b12:	fa 81       	ldd	r31, Y+2	; 0x02
    3b14:	80 89       	ldd	r24, Z+16	; 0x10
    3b16:	91 89       	ldd	r25, Z+17	; 0x11
    3b18:	a2 89       	ldd	r26, Z+18	; 0x12
    3b1a:	b3 89       	ldd	r27, Z+19	; 0x13
    3b1c:	89 87       	std	Y+9, r24	; 0x09
    3b1e:	9a 87       	std	Y+10, r25	; 0x0a
    3b20:	ab 87       	std	Y+11, r26	; 0x0b
    3b22:	bc 87       	std	Y+12, r27	; 0x0c
    3b24:	ef 81       	ldd	r30, Y+7	; 0x07
    3b26:	f8 85       	ldd	r31, Y+8	; 0x08
    3b28:	89 85       	ldd	r24, Y+9	; 0x09
    3b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b2c:	ab 85       	ldd	r26, Y+11	; 0x0b
    3b2e:	bc 85       	ldd	r27, Y+12	; 0x0c
    3b30:	84 87       	std	Z+12, r24	; 0x0c
    3b32:	95 87       	std	Z+13, r25	; 0x0d
    3b34:	a6 87       	std	Z+14, r26	; 0x0e
    3b36:	b7 87       	std	Z+15, r27	; 0x0f

	return FR_OK;	/* Seek succeeded */
    3b38:	1d 86       	std	Y+13, r1	; 0x0d
    3b3a:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    3b3c:	2d 96       	adiw	r28, 0x0d	; 13
    3b3e:	0f b6       	in	r0, 0x3f	; 63
    3b40:	f8 94       	cli
    3b42:	de bf       	out	0x3e, r29	; 62
    3b44:	0f be       	out	0x3f, r0	; 63
    3b46:	cd bf       	out	0x3d, r28	; 61
    3b48:	cf 91       	pop	r28
    3b4a:	df 91       	pop	r29
    3b4c:	08 95       	ret

00003b4e <dir_next>:

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
	DIR *dj			/* Pointer to directory object */
)
{
    3b4e:	df 93       	push	r29
    3b50:	cf 93       	push	r28
    3b52:	cd b7       	in	r28, 0x3d	; 61
    3b54:	de b7       	in	r29, 0x3e	; 62
    3b56:	2b 97       	sbiw	r28, 0x0b	; 11
    3b58:	0f b6       	in	r0, 0x3f	; 63
    3b5a:	f8 94       	cli
    3b5c:	de bf       	out	0x3e, r29	; 62
    3b5e:	0f be       	out	0x3f, r0	; 63
    3b60:	cd bf       	out	0x3d, r28	; 61
    3b62:	9a 87       	std	Y+10, r25	; 0x0a
    3b64:	89 87       	std	Y+9, r24	; 0x09
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
    3b66:	80 91 22 02 	lds	r24, 0x0222
    3b6a:	90 91 23 02 	lds	r25, 0x0223
    3b6e:	9a 83       	std	Y+2, r25	; 0x02
    3b70:	89 83       	std	Y+1, r24	; 0x01


	i = dj->index + 1;
    3b72:	e9 85       	ldd	r30, Y+9	; 0x09
    3b74:	fa 85       	ldd	r31, Y+10	; 0x0a
    3b76:	80 81       	ld	r24, Z
    3b78:	91 81       	ldd	r25, Z+1	; 0x01
    3b7a:	01 96       	adiw	r24, 0x01	; 1
    3b7c:	9c 83       	std	Y+4, r25	; 0x04
    3b7e:	8b 83       	std	Y+3, r24	; 0x03
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    3b80:	8b 81       	ldd	r24, Y+3	; 0x03
    3b82:	9c 81       	ldd	r25, Y+4	; 0x04
    3b84:	00 97       	sbiw	r24, 0x00	; 0
    3b86:	51 f0       	breq	.+20     	; 0x3b9c <dir_next+0x4e>
    3b88:	e9 85       	ldd	r30, Y+9	; 0x09
    3b8a:	fa 85       	ldd	r31, Y+10	; 0x0a
    3b8c:	84 85       	ldd	r24, Z+12	; 0x0c
    3b8e:	95 85       	ldd	r25, Z+13	; 0x0d
    3b90:	a6 85       	ldd	r26, Z+14	; 0x0e
    3b92:	b7 85       	ldd	r27, Z+15	; 0x0f
    3b94:	00 97       	sbiw	r24, 0x00	; 0
    3b96:	a1 05       	cpc	r26, r1
    3b98:	b1 05       	cpc	r27, r1
    3b9a:	19 f4       	brne	.+6      	; 0x3ba2 <dir_next+0x54>
		return FR_NO_FILE;
    3b9c:	83 e0       	ldi	r24, 0x03	; 3
    3b9e:	8b 87       	std	Y+11, r24	; 0x0b
    3ba0:	90 c0       	rjmp	.+288    	; 0x3cc2 <dir_next+0x174>

	if (!(i & (16-1))) {	/* Sector changed? */
    3ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ba6:	8f 70       	andi	r24, 0x0F	; 15
    3ba8:	90 70       	andi	r25, 0x00	; 0
    3baa:	00 97       	sbiw	r24, 0x00	; 0
    3bac:	09 f0       	breq	.+2      	; 0x3bb0 <dir_next+0x62>
    3bae:	82 c0       	rjmp	.+260    	; 0x3cb4 <dir_next+0x166>
		dj->sect++;			/* Next sector */
    3bb0:	e9 85       	ldd	r30, Y+9	; 0x09
    3bb2:	fa 85       	ldd	r31, Y+10	; 0x0a
    3bb4:	84 85       	ldd	r24, Z+12	; 0x0c
    3bb6:	95 85       	ldd	r25, Z+13	; 0x0d
    3bb8:	a6 85       	ldd	r26, Z+14	; 0x0e
    3bba:	b7 85       	ldd	r27, Z+15	; 0x0f
    3bbc:	01 96       	adiw	r24, 0x01	; 1
    3bbe:	a1 1d       	adc	r26, r1
    3bc0:	b1 1d       	adc	r27, r1
    3bc2:	e9 85       	ldd	r30, Y+9	; 0x09
    3bc4:	fa 85       	ldd	r31, Y+10	; 0x0a
    3bc6:	84 87       	std	Z+12, r24	; 0x0c
    3bc8:	95 87       	std	Z+13, r25	; 0x0d
    3bca:	a6 87       	std	Z+14, r26	; 0x0e
    3bcc:	b7 87       	std	Z+15, r27	; 0x0f

		if (dj->clust == 0) {	/* Static table */
    3bce:	e9 85       	ldd	r30, Y+9	; 0x09
    3bd0:	fa 85       	ldd	r31, Y+10	; 0x0a
    3bd2:	80 85       	ldd	r24, Z+8	; 0x08
    3bd4:	91 85       	ldd	r25, Z+9	; 0x09
    3bd6:	a2 85       	ldd	r26, Z+10	; 0x0a
    3bd8:	b3 85       	ldd	r27, Z+11	; 0x0b
    3bda:	00 97       	sbiw	r24, 0x00	; 0
    3bdc:	a1 05       	cpc	r26, r1
    3bde:	b1 05       	cpc	r27, r1
    3be0:	69 f4       	brne	.+26     	; 0x3bfc <dir_next+0xae>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
    3be2:	e9 81       	ldd	r30, Y+1	; 0x01
    3be4:	fa 81       	ldd	r31, Y+2	; 0x02
    3be6:	24 81       	ldd	r18, Z+4	; 0x04
    3be8:	35 81       	ldd	r19, Z+5	; 0x05
    3bea:	8b 81       	ldd	r24, Y+3	; 0x03
    3bec:	9c 81       	ldd	r25, Y+4	; 0x04
    3bee:	82 17       	cp	r24, r18
    3bf0:	93 07       	cpc	r25, r19
    3bf2:	08 f4       	brcc	.+2      	; 0x3bf6 <dir_next+0xa8>
    3bf4:	5f c0       	rjmp	.+190    	; 0x3cb4 <dir_next+0x166>
				return FR_NO_FILE;
    3bf6:	83 e0       	ldi	r24, 0x03	; 3
    3bf8:	8b 87       	std	Y+11, r24	; 0x0b
    3bfa:	63 c0       	rjmp	.+198    	; 0x3cc2 <dir_next+0x174>
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
    3bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    3bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    3c00:	9c 01       	movw	r18, r24
    3c02:	32 95       	swap	r19
    3c04:	22 95       	swap	r18
    3c06:	2f 70       	andi	r18, 0x0F	; 15
    3c08:	23 27       	eor	r18, r19
    3c0a:	3f 70       	andi	r19, 0x0F	; 15
    3c0c:	23 27       	eor	r18, r19
    3c0e:	e9 81       	ldd	r30, Y+1	; 0x01
    3c10:	fa 81       	ldd	r31, Y+2	; 0x02
    3c12:	81 81       	ldd	r24, Z+1	; 0x01
    3c14:	88 2f       	mov	r24, r24
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	01 97       	sbiw	r24, 0x01	; 1
    3c1a:	82 23       	and	r24, r18
    3c1c:	93 23       	and	r25, r19
    3c1e:	00 97       	sbiw	r24, 0x00	; 0
    3c20:	09 f0       	breq	.+2      	; 0x3c24 <dir_next+0xd6>
    3c22:	48 c0       	rjmp	.+144    	; 0x3cb4 <dir_next+0x166>
				clst = get_fat(dj->clust);		/* Get next cluster */
    3c24:	e9 85       	ldd	r30, Y+9	; 0x09
    3c26:	fa 85       	ldd	r31, Y+10	; 0x0a
    3c28:	80 85       	ldd	r24, Z+8	; 0x08
    3c2a:	91 85       	ldd	r25, Z+9	; 0x09
    3c2c:	a2 85       	ldd	r26, Z+10	; 0x0a
    3c2e:	b3 85       	ldd	r27, Z+11	; 0x0b
    3c30:	bc 01       	movw	r22, r24
    3c32:	cd 01       	movw	r24, r26
    3c34:	0e 94 22 1b 	call	0x3644	; 0x3644 <get_fat>
    3c38:	dc 01       	movw	r26, r24
    3c3a:	cb 01       	movw	r24, r22
    3c3c:	8d 83       	std	Y+5, r24	; 0x05
    3c3e:	9e 83       	std	Y+6, r25	; 0x06
    3c40:	af 83       	std	Y+7, r26	; 0x07
    3c42:	b8 87       	std	Y+8, r27	; 0x08
				if (clst <= 1) return FR_DISK_ERR;
    3c44:	8d 81       	ldd	r24, Y+5	; 0x05
    3c46:	9e 81       	ldd	r25, Y+6	; 0x06
    3c48:	af 81       	ldd	r26, Y+7	; 0x07
    3c4a:	b8 85       	ldd	r27, Y+8	; 0x08
    3c4c:	82 30       	cpi	r24, 0x02	; 2
    3c4e:	91 05       	cpc	r25, r1
    3c50:	a1 05       	cpc	r26, r1
    3c52:	b1 05       	cpc	r27, r1
    3c54:	18 f4       	brcc	.+6      	; 0x3c5c <dir_next+0x10e>
    3c56:	81 e0       	ldi	r24, 0x01	; 1
    3c58:	8b 87       	std	Y+11, r24	; 0x0b
    3c5a:	33 c0       	rjmp	.+102    	; 0x3cc2 <dir_next+0x174>
				if (clst >= fs->max_clust)		/* When it reached end of dynamic table */
    3c5c:	e9 81       	ldd	r30, Y+1	; 0x01
    3c5e:	fa 81       	ldd	r31, Y+2	; 0x02
    3c60:	20 85       	ldd	r18, Z+8	; 0x08
    3c62:	31 85       	ldd	r19, Z+9	; 0x09
    3c64:	42 85       	ldd	r20, Z+10	; 0x0a
    3c66:	53 85       	ldd	r21, Z+11	; 0x0b
    3c68:	8d 81       	ldd	r24, Y+5	; 0x05
    3c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c6c:	af 81       	ldd	r26, Y+7	; 0x07
    3c6e:	b8 85       	ldd	r27, Y+8	; 0x08
    3c70:	82 17       	cp	r24, r18
    3c72:	93 07       	cpc	r25, r19
    3c74:	a4 07       	cpc	r26, r20
    3c76:	b5 07       	cpc	r27, r21
    3c78:	18 f0       	brcs	.+6      	; 0x3c80 <dir_next+0x132>
					return FR_NO_FILE;			/* Report EOT */
    3c7a:	83 e0       	ldi	r24, 0x03	; 3
    3c7c:	8b 87       	std	Y+11, r24	; 0x0b
    3c7e:	21 c0       	rjmp	.+66     	; 0x3cc2 <dir_next+0x174>
				dj->clust = clst;				/* Initialize data for new cluster */
    3c80:	e9 85       	ldd	r30, Y+9	; 0x09
    3c82:	fa 85       	ldd	r31, Y+10	; 0x0a
    3c84:	8d 81       	ldd	r24, Y+5	; 0x05
    3c86:	9e 81       	ldd	r25, Y+6	; 0x06
    3c88:	af 81       	ldd	r26, Y+7	; 0x07
    3c8a:	b8 85       	ldd	r27, Y+8	; 0x08
    3c8c:	80 87       	std	Z+8, r24	; 0x08
    3c8e:	91 87       	std	Z+9, r25	; 0x09
    3c90:	a2 87       	std	Z+10, r26	; 0x0a
    3c92:	b3 87       	std	Z+11, r27	; 0x0b
				dj->sect = clust2sect(clst);
    3c94:	8d 81       	ldd	r24, Y+5	; 0x05
    3c96:	9e 81       	ldd	r25, Y+6	; 0x06
    3c98:	af 81       	ldd	r26, Y+7	; 0x07
    3c9a:	b8 85       	ldd	r27, Y+8	; 0x08
    3c9c:	bc 01       	movw	r22, r24
    3c9e:	cd 01       	movw	r24, r26
    3ca0:	0e 94 a4 1c 	call	0x3948	; 0x3948 <clust2sect>
    3ca4:	dc 01       	movw	r26, r24
    3ca6:	cb 01       	movw	r24, r22
    3ca8:	e9 85       	ldd	r30, Y+9	; 0x09
    3caa:	fa 85       	ldd	r31, Y+10	; 0x0a
    3cac:	84 87       	std	Z+12, r24	; 0x0c
    3cae:	95 87       	std	Z+13, r25	; 0x0d
    3cb0:	a6 87       	std	Z+14, r26	; 0x0e
    3cb2:	b7 87       	std	Z+15, r27	; 0x0f
			}
		}
	}

	dj->index = i;
    3cb4:	e9 85       	ldd	r30, Y+9	; 0x09
    3cb6:	fa 85       	ldd	r31, Y+10	; 0x0a
    3cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cba:	9c 81       	ldd	r25, Y+4	; 0x04
    3cbc:	91 83       	std	Z+1, r25	; 0x01
    3cbe:	80 83       	st	Z, r24

	return FR_OK;
    3cc0:	1b 86       	std	Y+11, r1	; 0x0b
    3cc2:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    3cc4:	2b 96       	adiw	r28, 0x0b	; 11
    3cc6:	0f b6       	in	r0, 0x3f	; 63
    3cc8:	f8 94       	cli
    3cca:	de bf       	out	0x3e, r29	; 62
    3ccc:	0f be       	out	0x3f, r0	; 63
    3cce:	cd bf       	out	0x3d, r28	; 61
    3cd0:	cf 91       	pop	r28
    3cd2:	df 91       	pop	r29
    3cd4:	08 95       	ret

00003cd6 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
    3cd6:	0f 93       	push	r16
    3cd8:	1f 93       	push	r17
    3cda:	df 93       	push	r29
    3cdc:	cf 93       	push	r28
    3cde:	cd b7       	in	r28, 0x3d	; 61
    3ce0:	de b7       	in	r29, 0x3e	; 62
    3ce2:	27 97       	sbiw	r28, 0x07	; 7
    3ce4:	0f b6       	in	r0, 0x3f	; 63
    3ce6:	f8 94       	cli
    3ce8:	de bf       	out	0x3e, r29	; 62
    3cea:	0f be       	out	0x3f, r0	; 63
    3cec:	cd bf       	out	0x3d, r28	; 61
    3cee:	9e 83       	std	Y+6, r25	; 0x06
    3cf0:	8d 83       	std	Y+5, r24	; 0x05
	FRESULT res;
	BYTE c, *dir;


	res = dir_rewind(dj);			/* Rewind directory object */
    3cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    3cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    3cf6:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <dir_rewind>
    3cfa:	8c 83       	std	Y+4, r24	; 0x04
	if (res != FR_OK) return res;
    3cfc:	8c 81       	ldd	r24, Y+4	; 0x04
    3cfe:	88 23       	and	r24, r24
    3d00:	19 f0       	breq	.+6      	; 0x3d08 <dir_find+0x32>
    3d02:	8c 81       	ldd	r24, Y+4	; 0x04
    3d04:	8f 83       	std	Y+7, r24	; 0x07
    3d06:	5b c0       	rjmp	.+182    	; 0x3dbe <dir_find+0xe8>

	dir = FatFs->buf;
    3d08:	e0 91 22 02 	lds	r30, 0x0222
    3d0c:	f0 91 23 02 	lds	r31, 0x0223
    3d10:	86 81       	ldd	r24, Z+6	; 0x06
    3d12:	97 81       	ldd	r25, Z+7	; 0x07
    3d14:	9a 83       	std	Y+2, r25	; 0x02
    3d16:	89 83       	std	Y+1, r24	; 0x01
	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    3d18:	ed 81       	ldd	r30, Y+5	; 0x05
    3d1a:	fe 81       	ldd	r31, Y+6	; 0x06
    3d1c:	24 85       	ldd	r18, Z+12	; 0x0c
    3d1e:	35 85       	ldd	r19, Z+13	; 0x0d
    3d20:	46 85       	ldd	r20, Z+14	; 0x0e
    3d22:	57 85       	ldd	r21, Z+15	; 0x0f
    3d24:	ed 81       	ldd	r30, Y+5	; 0x05
    3d26:	fe 81       	ldd	r31, Y+6	; 0x06
    3d28:	80 81       	ld	r24, Z
    3d2a:	91 81       	ldd	r25, Z+1	; 0x01
    3d2c:	8f 70       	andi	r24, 0x0F	; 15
    3d2e:	90 70       	andi	r25, 0x00	; 0
    3d30:	fc 01       	movw	r30, r24
    3d32:	ee 0f       	add	r30, r30
    3d34:	ff 1f       	adc	r31, r31
    3d36:	e2 95       	swap	r30
    3d38:	f2 95       	swap	r31
    3d3a:	f0 7f       	andi	r31, 0xF0	; 240
    3d3c:	fe 27       	eor	r31, r30
    3d3e:	e0 7f       	andi	r30, 0xF0	; 240
    3d40:	fe 27       	eor	r31, r30
    3d42:	89 81       	ldd	r24, Y+1	; 0x01
    3d44:	9a 81       	ldd	r25, Y+2	; 0x02
    3d46:	ba 01       	movw	r22, r20
    3d48:	a9 01       	movw	r20, r18
    3d4a:	9f 01       	movw	r18, r30
    3d4c:	00 e2       	ldi	r16, 0x20	; 32
    3d4e:	10 e0       	ldi	r17, 0x00	; 0
    3d50:	0e 94 ef 18 	call	0x31de	; 0x31de <disk_readp>
    3d54:	1c 82       	std	Y+4, r1	; 0x04
    3d56:	88 23       	and	r24, r24
    3d58:	11 f0       	breq	.+4      	; 0x3d5e <dir_find+0x88>
    3d5a:	81 e0       	ldi	r24, 0x01	; 1
    3d5c:	8c 83       	std	Y+4, r24	; 0x04
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    3d5e:	8c 81       	ldd	r24, Y+4	; 0x04
    3d60:	88 23       	and	r24, r24
    3d62:	59 f5       	brne	.+86     	; 0x3dba <dir_find+0xe4>
		c = dir[DIR_Name];	/* First character */
    3d64:	e9 81       	ldd	r30, Y+1	; 0x01
    3d66:	fa 81       	ldd	r31, Y+2	; 0x02
    3d68:	80 81       	ld	r24, Z
    3d6a:	8b 83       	std	Y+3, r24	; 0x03
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    3d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d6e:	88 23       	and	r24, r24
    3d70:	19 f4       	brne	.+6      	; 0x3d78 <dir_find+0xa2>
    3d72:	83 e0       	ldi	r24, 0x03	; 3
    3d74:	8c 83       	std	Y+4, r24	; 0x04
    3d76:	21 c0       	rjmp	.+66     	; 0x3dba <dir_find+0xe4>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    3d78:	89 81       	ldd	r24, Y+1	; 0x01
    3d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d7c:	fc 01       	movw	r30, r24
    3d7e:	3b 96       	adiw	r30, 0x0b	; 11
    3d80:	80 81       	ld	r24, Z
    3d82:	88 2f       	mov	r24, r24
    3d84:	90 e0       	ldi	r25, 0x00	; 0
    3d86:	88 70       	andi	r24, 0x08	; 8
    3d88:	90 70       	andi	r25, 0x00	; 0
    3d8a:	00 97       	sbiw	r24, 0x00	; 0
    3d8c:	69 f4       	brne	.+26     	; 0x3da8 <dir_find+0xd2>
    3d8e:	ed 81       	ldd	r30, Y+5	; 0x05
    3d90:	fe 81       	ldd	r31, Y+6	; 0x06
    3d92:	22 81       	ldd	r18, Z+2	; 0x02
    3d94:	33 81       	ldd	r19, Z+3	; 0x03
    3d96:	89 81       	ldd	r24, Y+1	; 0x01
    3d98:	9a 81       	ldd	r25, Y+2	; 0x02
    3d9a:	b9 01       	movw	r22, r18
    3d9c:	4b e0       	ldi	r20, 0x0B	; 11
    3d9e:	50 e0       	ldi	r21, 0x00	; 0
    3da0:	0e 94 c8 1a 	call	0x3590	; 0x3590 <mem_cmp>
    3da4:	00 97       	sbiw	r24, 0x00	; 0
    3da6:	49 f0       	breq	.+18     	; 0x3dba <dir_find+0xe4>
			break;
		res = dir_next(dj);							/* Next entry */
    3da8:	8d 81       	ldd	r24, Y+5	; 0x05
    3daa:	9e 81       	ldd	r25, Y+6	; 0x06
    3dac:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <dir_next>
    3db0:	8c 83       	std	Y+4, r24	; 0x04
	} while (res == FR_OK);
    3db2:	8c 81       	ldd	r24, Y+4	; 0x04
    3db4:	88 23       	and	r24, r24
    3db6:	09 f4       	brne	.+2      	; 0x3dba <dir_find+0xe4>
    3db8:	af cf       	rjmp	.-162    	; 0x3d18 <dir_find+0x42>

	return res;
    3dba:	8c 81       	ldd	r24, Y+4	; 0x04
    3dbc:	8f 83       	std	Y+7, r24	; 0x07
    3dbe:	8f 81       	ldd	r24, Y+7	; 0x07
}
    3dc0:	27 96       	adiw	r28, 0x07	; 7
    3dc2:	0f b6       	in	r0, 0x3f	; 63
    3dc4:	f8 94       	cli
    3dc6:	de bf       	out	0x3e, r29	; 62
    3dc8:	0f be       	out	0x3f, r0	; 63
    3dca:	cd bf       	out	0x3d, r28	; 61
    3dcc:	cf 91       	pop	r28
    3dce:	df 91       	pop	r29
    3dd0:	1f 91       	pop	r17
    3dd2:	0f 91       	pop	r16
    3dd4:	08 95       	ret

00003dd6 <dir_read>:
#if _USE_DIR
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object to store read object name */
)
{
    3dd6:	0f 93       	push	r16
    3dd8:	1f 93       	push	r17
    3dda:	df 93       	push	r29
    3ddc:	cf 93       	push	r28
    3dde:	cd b7       	in	r28, 0x3d	; 61
    3de0:	de b7       	in	r29, 0x3e	; 62
    3de2:	27 97       	sbiw	r28, 0x07	; 7
    3de4:	0f b6       	in	r0, 0x3f	; 63
    3de6:	f8 94       	cli
    3de8:	de bf       	out	0x3e, r29	; 62
    3dea:	0f be       	out	0x3f, r0	; 63
    3dec:	cd bf       	out	0x3d, r28	; 61
    3dee:	9f 83       	std	Y+7, r25	; 0x07
    3df0:	8e 83       	std	Y+6, r24	; 0x06
	FRESULT res;
	BYTE a, c, *dir;


	res = FR_NO_FILE;
    3df2:	83 e0       	ldi	r24, 0x03	; 3
    3df4:	8d 83       	std	Y+5, r24	; 0x05
	dir = FatFs->buf;
    3df6:	e0 91 22 02 	lds	r30, 0x0222
    3dfa:	f0 91 23 02 	lds	r31, 0x0223
    3dfe:	86 81       	ldd	r24, Z+6	; 0x06
    3e00:	97 81       	ldd	r25, Z+7	; 0x07
    3e02:	9a 83       	std	Y+2, r25	; 0x02
    3e04:	89 83       	std	Y+1, r24	; 0x01
    3e06:	4c c0       	rjmp	.+152    	; 0x3ea0 <dir_read+0xca>
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    3e08:	ee 81       	ldd	r30, Y+6	; 0x06
    3e0a:	ff 81       	ldd	r31, Y+7	; 0x07
    3e0c:	24 85       	ldd	r18, Z+12	; 0x0c
    3e0e:	35 85       	ldd	r19, Z+13	; 0x0d
    3e10:	46 85       	ldd	r20, Z+14	; 0x0e
    3e12:	57 85       	ldd	r21, Z+15	; 0x0f
    3e14:	ee 81       	ldd	r30, Y+6	; 0x06
    3e16:	ff 81       	ldd	r31, Y+7	; 0x07
    3e18:	80 81       	ld	r24, Z
    3e1a:	91 81       	ldd	r25, Z+1	; 0x01
    3e1c:	8f 70       	andi	r24, 0x0F	; 15
    3e1e:	90 70       	andi	r25, 0x00	; 0
    3e20:	fc 01       	movw	r30, r24
    3e22:	ee 0f       	add	r30, r30
    3e24:	ff 1f       	adc	r31, r31
    3e26:	e2 95       	swap	r30
    3e28:	f2 95       	swap	r31
    3e2a:	f0 7f       	andi	r31, 0xF0	; 240
    3e2c:	fe 27       	eor	r31, r30
    3e2e:	e0 7f       	andi	r30, 0xF0	; 240
    3e30:	fe 27       	eor	r31, r30
    3e32:	89 81       	ldd	r24, Y+1	; 0x01
    3e34:	9a 81       	ldd	r25, Y+2	; 0x02
    3e36:	ba 01       	movw	r22, r20
    3e38:	a9 01       	movw	r20, r18
    3e3a:	9f 01       	movw	r18, r30
    3e3c:	00 e2       	ldi	r16, 0x20	; 32
    3e3e:	10 e0       	ldi	r17, 0x00	; 0
    3e40:	0e 94 ef 18 	call	0x31de	; 0x31de <disk_readp>
    3e44:	1d 82       	std	Y+5, r1	; 0x05
    3e46:	88 23       	and	r24, r24
    3e48:	11 f0       	breq	.+4      	; 0x3e4e <dir_read+0x78>
    3e4a:	81 e0       	ldi	r24, 0x01	; 1
    3e4c:	8d 83       	std	Y+5, r24	; 0x05
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    3e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e50:	88 23       	and	r24, r24
    3e52:	89 f5       	brne	.+98     	; 0x3eb6 <dir_read+0xe0>
		c = dir[DIR_Name];
    3e54:	e9 81       	ldd	r30, Y+1	; 0x01
    3e56:	fa 81       	ldd	r31, Y+2	; 0x02
    3e58:	80 81       	ld	r24, Z
    3e5a:	8b 83       	std	Y+3, r24	; 0x03
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    3e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e5e:	88 23       	and	r24, r24
    3e60:	19 f4       	brne	.+6      	; 0x3e68 <dir_read+0x92>
    3e62:	83 e0       	ldi	r24, 0x03	; 3
    3e64:	8d 83       	std	Y+5, r24	; 0x05
    3e66:	27 c0       	rjmp	.+78     	; 0x3eb6 <dir_read+0xe0>
		a = dir[DIR_Attr] & AM_MASK;
    3e68:	89 81       	ldd	r24, Y+1	; 0x01
    3e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e6c:	fc 01       	movw	r30, r24
    3e6e:	3b 96       	adiw	r30, 0x0b	; 11
    3e70:	80 81       	ld	r24, Z
    3e72:	8f 73       	andi	r24, 0x3F	; 63
    3e74:	8c 83       	std	Y+4, r24	; 0x04
		if (c != 0xE5 && c != '.' && !(a & AM_VOL))	/* Is it a valid entry? */
    3e76:	8b 81       	ldd	r24, Y+3	; 0x03
    3e78:	85 3e       	cpi	r24, 0xE5	; 229
    3e7a:	51 f0       	breq	.+20     	; 0x3e90 <dir_read+0xba>
    3e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e7e:	8e 32       	cpi	r24, 0x2E	; 46
    3e80:	39 f0       	breq	.+14     	; 0x3e90 <dir_read+0xba>
    3e82:	8c 81       	ldd	r24, Y+4	; 0x04
    3e84:	88 2f       	mov	r24, r24
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	88 70       	andi	r24, 0x08	; 8
    3e8a:	90 70       	andi	r25, 0x00	; 0
    3e8c:	00 97       	sbiw	r24, 0x00	; 0
    3e8e:	99 f0       	breq	.+38     	; 0x3eb6 <dir_read+0xe0>
			break;
		res = dir_next(dj);				/* Next entry */
    3e90:	8e 81       	ldd	r24, Y+6	; 0x06
    3e92:	9f 81       	ldd	r25, Y+7	; 0x07
    3e94:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <dir_next>
    3e98:	8d 83       	std	Y+5, r24	; 0x05
		if (res != FR_OK) break;
    3e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e9c:	88 23       	and	r24, r24
    3e9e:	59 f4       	brne	.+22     	; 0x3eb6 <dir_read+0xe0>
	BYTE a, c, *dir;


	res = FR_NO_FILE;
	dir = FatFs->buf;
	while (dj->sect) {
    3ea0:	ee 81       	ldd	r30, Y+6	; 0x06
    3ea2:	ff 81       	ldd	r31, Y+7	; 0x07
    3ea4:	84 85       	ldd	r24, Z+12	; 0x0c
    3ea6:	95 85       	ldd	r25, Z+13	; 0x0d
    3ea8:	a6 85       	ldd	r26, Z+14	; 0x0e
    3eaa:	b7 85       	ldd	r27, Z+15	; 0x0f
    3eac:	00 97       	sbiw	r24, 0x00	; 0
    3eae:	a1 05       	cpc	r26, r1
    3eb0:	b1 05       	cpc	r27, r1
    3eb2:	09 f0       	breq	.+2      	; 0x3eb6 <dir_read+0xe0>
    3eb4:	a9 cf       	rjmp	.-174    	; 0x3e08 <dir_read+0x32>
			break;
		res = dir_next(dj);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    3eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    3eb8:	88 23       	and	r24, r24
    3eba:	31 f0       	breq	.+12     	; 0x3ec8 <dir_read+0xf2>
    3ebc:	ee 81       	ldd	r30, Y+6	; 0x06
    3ebe:	ff 81       	ldd	r31, Y+7	; 0x07
    3ec0:	14 86       	std	Z+12, r1	; 0x0c
    3ec2:	15 86       	std	Z+13, r1	; 0x0d
    3ec4:	16 86       	std	Z+14, r1	; 0x0e
    3ec6:	17 86       	std	Z+15, r1	; 0x0f

	return res;
    3ec8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3eca:	27 96       	adiw	r28, 0x07	; 7
    3ecc:	0f b6       	in	r0, 0x3f	; 63
    3ece:	f8 94       	cli
    3ed0:	de bf       	out	0x3e, r29	; 62
    3ed2:	0f be       	out	0x3f, r0	; 63
    3ed4:	cd bf       	out	0x3d, r28	; 61
    3ed6:	cf 91       	pop	r28
    3ed8:	df 91       	pop	r29
    3eda:	1f 91       	pop	r17
    3edc:	0f 91       	pop	r16
    3ede:	08 95       	ret

00003ee0 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const char **path	/* Pointer to pointer to the segment in the path string */
)
{
    3ee0:	df 93       	push	r29
    3ee2:	cf 93       	push	r28
    3ee4:	cd b7       	in	r28, 0x3d	; 61
    3ee6:	de b7       	in	r29, 0x3e	; 62
    3ee8:	60 97       	sbiw	r28, 0x10	; 16
    3eea:	0f b6       	in	r0, 0x3f	; 63
    3eec:	f8 94       	cli
    3eee:	de bf       	out	0x3e, r29	; 62
    3ef0:	0f be       	out	0x3f, r0	; 63
    3ef2:	cd bf       	out	0x3d, r28	; 61
    3ef4:	9b 87       	std	Y+11, r25	; 0x0b
    3ef6:	8a 87       	std	Y+10, r24	; 0x0a
    3ef8:	7d 87       	std	Y+13, r23	; 0x0d
    3efa:	6c 87       	std	Y+12, r22	; 0x0c
	BYTE c, d, ni, si, i, *sfn;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    3efc:	ea 85       	ldd	r30, Y+10	; 0x0a
    3efe:	fb 85       	ldd	r31, Y+11	; 0x0b
    3f00:	82 81       	ldd	r24, Z+2	; 0x02
    3f02:	93 81       	ldd	r25, Z+3	; 0x03
    3f04:	9c 83       	std	Y+4, r25	; 0x04
    3f06:	8b 83       	std	Y+3, r24	; 0x03
	mem_set(sfn, ' ', 11);
    3f08:	8b 81       	ldd	r24, Y+3	; 0x03
    3f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f0c:	60 e2       	ldi	r22, 0x20	; 32
    3f0e:	70 e0       	ldi	r23, 0x00	; 0
    3f10:	4b e0       	ldi	r20, 0x0B	; 11
    3f12:	50 e0       	ldi	r21, 0x00	; 0
    3f14:	0e 94 92 1a 	call	0x3524	; 0x3524 <mem_set>
	si = i = 0; ni = 8;
    3f18:	1d 82       	std	Y+5, r1	; 0x05
    3f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f1c:	8e 83       	std	Y+6, r24	; 0x06
    3f1e:	88 e0       	ldi	r24, 0x08	; 8
    3f20:	8f 83       	std	Y+7, r24	; 0x07
	p = *path;
    3f22:	ec 85       	ldd	r30, Y+12	; 0x0c
    3f24:	fd 85       	ldd	r31, Y+13	; 0x0d
    3f26:	80 81       	ld	r24, Z
    3f28:	91 81       	ldd	r25, Z+1	; 0x01
    3f2a:	9a 83       	std	Y+2, r25	; 0x02
    3f2c:	89 83       	std	Y+1, r24	; 0x01
	for (;;) {
		c = p[si++];
    3f2e:	8e 81       	ldd	r24, Y+6	; 0x06
    3f30:	28 2f       	mov	r18, r24
    3f32:	30 e0       	ldi	r19, 0x00	; 0
    3f34:	89 81       	ldd	r24, Y+1	; 0x01
    3f36:	9a 81       	ldd	r25, Y+2	; 0x02
    3f38:	fc 01       	movw	r30, r24
    3f3a:	e2 0f       	add	r30, r18
    3f3c:	f3 1f       	adc	r31, r19
    3f3e:	80 81       	ld	r24, Z
    3f40:	89 87       	std	Y+9, r24	; 0x09
    3f42:	8e 81       	ldd	r24, Y+6	; 0x06
    3f44:	8f 5f       	subi	r24, 0xFF	; 255
    3f46:	8e 83       	std	Y+6, r24	; 0x06
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
    3f48:	89 85       	ldd	r24, Y+9	; 0x09
    3f4a:	81 32       	cpi	r24, 0x21	; 33
    3f4c:	60 f1       	brcs	.+88     	; 0x3fa6 <create_name+0xc6>
    3f4e:	89 85       	ldd	r24, Y+9	; 0x09
    3f50:	8f 32       	cpi	r24, 0x2F	; 47
    3f52:	49 f1       	breq	.+82     	; 0x3fa6 <create_name+0xc6>
		if (c == '.' || i >= ni) {
    3f54:	89 85       	ldd	r24, Y+9	; 0x09
    3f56:	8e 32       	cpi	r24, 0x2E	; 46
    3f58:	21 f0       	breq	.+8      	; 0x3f62 <create_name+0x82>
    3f5a:	9d 81       	ldd	r25, Y+5	; 0x05
    3f5c:	8f 81       	ldd	r24, Y+7	; 0x07
    3f5e:	98 17       	cp	r25, r24
    3f60:	58 f0       	brcs	.+22     	; 0x3f78 <create_name+0x98>
			if (ni != 8 || c != '.') break;
    3f62:	8f 81       	ldd	r24, Y+7	; 0x07
    3f64:	88 30       	cpi	r24, 0x08	; 8
    3f66:	f9 f4       	brne	.+62     	; 0x3fa6 <create_name+0xc6>
    3f68:	89 85       	ldd	r24, Y+9	; 0x09
    3f6a:	8e 32       	cpi	r24, 0x2E	; 46
    3f6c:	e1 f4       	brne	.+56     	; 0x3fa6 <create_name+0xc6>
			i = 8; ni = 11;
    3f6e:	88 e0       	ldi	r24, 0x08	; 8
    3f70:	8d 83       	std	Y+5, r24	; 0x05
    3f72:	8b e0       	ldi	r24, 0x0B	; 11
    3f74:	8f 83       	std	Y+7, r24	; 0x07
    3f76:	db cf       	rjmp	.-74     	; 0x3f2e <create_name+0x4e>
		if (IsDBCS1(c) && i >= ni - 1) {	/* DBC 1st byte? */
			d = p[si++];					/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
    3f78:	89 85       	ldd	r24, Y+9	; 0x09
    3f7a:	81 36       	cpi	r24, 0x61	; 97
    3f7c:	30 f0       	brcs	.+12     	; 0x3f8a <create_name+0xaa>
    3f7e:	89 85       	ldd	r24, Y+9	; 0x09
    3f80:	8b 37       	cpi	r24, 0x7B	; 123
    3f82:	18 f4       	brcc	.+6      	; 0x3f8a <create_name+0xaa>
    3f84:	89 85       	ldd	r24, Y+9	; 0x09
    3f86:	80 52       	subi	r24, 0x20	; 32
    3f88:	89 87       	std	Y+9, r24	; 0x09
			sfn[i++] = c;
    3f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f8c:	28 2f       	mov	r18, r24
    3f8e:	30 e0       	ldi	r19, 0x00	; 0
    3f90:	8b 81       	ldd	r24, Y+3	; 0x03
    3f92:	9c 81       	ldd	r25, Y+4	; 0x04
    3f94:	fc 01       	movw	r30, r24
    3f96:	e2 0f       	add	r30, r18
    3f98:	f3 1f       	adc	r31, r19
    3f9a:	89 85       	ldd	r24, Y+9	; 0x09
    3f9c:	80 83       	st	Z, r24
    3f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3fa0:	8f 5f       	subi	r24, 0xFF	; 255
    3fa2:	8d 83       	std	Y+5, r24	; 0x05
    3fa4:	c4 cf       	rjmp	.-120    	; 0x3f2e <create_name+0x4e>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    3fa6:	8e 81       	ldd	r24, Y+6	; 0x06
    3fa8:	28 2f       	mov	r18, r24
    3faa:	30 e0       	ldi	r19, 0x00	; 0
    3fac:	89 81       	ldd	r24, Y+1	; 0x01
    3fae:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb0:	82 0f       	add	r24, r18
    3fb2:	93 1f       	adc	r25, r19
    3fb4:	ec 85       	ldd	r30, Y+12	; 0x0c
    3fb6:	fd 85       	ldd	r31, Y+13	; 0x0d
    3fb8:	91 83       	std	Z+1, r25	; 0x01
    3fba:	80 83       	st	Z, r24

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    3fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    3fbe:	9c 81       	ldd	r25, Y+4	; 0x04
    3fc0:	9c 01       	movw	r18, r24
    3fc2:	25 5f       	subi	r18, 0xF5	; 245
    3fc4:	3f 4f       	sbci	r19, 0xFF	; 255
    3fc6:	38 8b       	std	Y+16, r19	; 0x10
    3fc8:	2f 87       	std	Y+15, r18	; 0x0f
    3fca:	1e 86       	std	Y+14, r1	; 0x0e
    3fcc:	89 85       	ldd	r24, Y+9	; 0x09
    3fce:	81 32       	cpi	r24, 0x21	; 33
    3fd0:	10 f4       	brcc	.+4      	; 0x3fd6 <create_name+0xf6>
    3fd2:	31 e0       	ldi	r19, 0x01	; 1
    3fd4:	3e 87       	std	Y+14, r19	; 0x0e
    3fd6:	2e 85       	ldd	r18, Y+14	; 0x0e
    3fd8:	ef 85       	ldd	r30, Y+15	; 0x0f
    3fda:	f8 89       	ldd	r31, Y+16	; 0x10
    3fdc:	20 83       	st	Z, r18

	return FR_OK;
    3fde:	80 e0       	ldi	r24, 0x00	; 0
}
    3fe0:	60 96       	adiw	r28, 0x10	; 16
    3fe2:	0f b6       	in	r0, 0x3f	; 63
    3fe4:	f8 94       	cli
    3fe6:	de bf       	out	0x3e, r29	; 62
    3fe8:	0f be       	out	0x3f, r0	; 63
    3fea:	cd bf       	out	0x3d, r28	; 61
    3fec:	cf 91       	pop	r28
    3fee:	df 91       	pop	r29
    3ff0:	08 95       	ret

00003ff2 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to store the file information */
)
{
    3ff2:	df 93       	push	r29
    3ff4:	cf 93       	push	r28
    3ff6:	cd b7       	in	r28, 0x3d	; 61
    3ff8:	de b7       	in	r29, 0x3e	; 62
    3ffa:	2a 97       	sbiw	r28, 0x0a	; 10
    3ffc:	0f b6       	in	r0, 0x3f	; 63
    3ffe:	f8 94       	cli
    4000:	de bf       	out	0x3e, r29	; 62
    4002:	0f be       	out	0x3f, r0	; 63
    4004:	cd bf       	out	0x3d, r28	; 61
    4006:	98 87       	std	Y+8, r25	; 0x08
    4008:	8f 83       	std	Y+7, r24	; 0x07
    400a:	7a 87       	std	Y+10, r23	; 0x0a
    400c:	69 87       	std	Y+9, r22	; 0x09
	BYTE i, c, *dir;
	char *p;


	p = fno->fname;
    400e:	89 85       	ldd	r24, Y+9	; 0x09
    4010:	9a 85       	ldd	r25, Y+10	; 0x0a
    4012:	09 96       	adiw	r24, 0x09	; 9
    4014:	9a 83       	std	Y+2, r25	; 0x02
    4016:	89 83       	std	Y+1, r24	; 0x01
	if (dj->sect) {
    4018:	ef 81       	ldd	r30, Y+7	; 0x07
    401a:	f8 85       	ldd	r31, Y+8	; 0x08
    401c:	84 85       	ldd	r24, Z+12	; 0x0c
    401e:	95 85       	ldd	r25, Z+13	; 0x0d
    4020:	a6 85       	ldd	r26, Z+14	; 0x0e
    4022:	b7 85       	ldd	r27, Z+15	; 0x0f
    4024:	00 97       	sbiw	r24, 0x00	; 0
    4026:	a1 05       	cpc	r26, r1
    4028:	b1 05       	cpc	r27, r1
    402a:	09 f4       	brne	.+2      	; 0x402e <get_fileinfo+0x3c>
    402c:	84 c0       	rjmp	.+264    	; 0x4136 <get_fileinfo+0x144>
		dir = FatFs->buf;
    402e:	e0 91 22 02 	lds	r30, 0x0222
    4032:	f0 91 23 02 	lds	r31, 0x0223
    4036:	86 81       	ldd	r24, Z+6	; 0x06
    4038:	97 81       	ldd	r25, Z+7	; 0x07
    403a:	9c 83       	std	Y+4, r25	; 0x04
    403c:	8b 83       	std	Y+3, r24	; 0x03
		for (i = 0; i < 8; i++) {	/* Copy file name body */
    403e:	1e 82       	std	Y+6, r1	; 0x06
    4040:	1e c0       	rjmp	.+60     	; 0x407e <get_fileinfo+0x8c>
			c = dir[i];
    4042:	8e 81       	ldd	r24, Y+6	; 0x06
    4044:	28 2f       	mov	r18, r24
    4046:	30 e0       	ldi	r19, 0x00	; 0
    4048:	8b 81       	ldd	r24, Y+3	; 0x03
    404a:	9c 81       	ldd	r25, Y+4	; 0x04
    404c:	fc 01       	movw	r30, r24
    404e:	e2 0f       	add	r30, r18
    4050:	f3 1f       	adc	r31, r19
    4052:	80 81       	ld	r24, Z
    4054:	8d 83       	std	Y+5, r24	; 0x05
			if (c == ' ') break;
    4056:	8d 81       	ldd	r24, Y+5	; 0x05
    4058:	80 32       	cpi	r24, 0x20	; 32
    405a:	a1 f0       	breq	.+40     	; 0x4084 <get_fileinfo+0x92>
			if (c == 0x05) c = 0xE5;
    405c:	8d 81       	ldd	r24, Y+5	; 0x05
    405e:	85 30       	cpi	r24, 0x05	; 5
    4060:	11 f4       	brne	.+4      	; 0x4066 <get_fileinfo+0x74>
    4062:	85 ee       	ldi	r24, 0xE5	; 229
    4064:	8d 83       	std	Y+5, r24	; 0x05
			*p++ = c;
    4066:	e9 81       	ldd	r30, Y+1	; 0x01
    4068:	fa 81       	ldd	r31, Y+2	; 0x02
    406a:	8d 81       	ldd	r24, Y+5	; 0x05
    406c:	80 83       	st	Z, r24
    406e:	89 81       	ldd	r24, Y+1	; 0x01
    4070:	9a 81       	ldd	r25, Y+2	; 0x02
    4072:	01 96       	adiw	r24, 0x01	; 1
    4074:	9a 83       	std	Y+2, r25	; 0x02
    4076:	89 83       	std	Y+1, r24	; 0x01


	p = fno->fname;
	if (dj->sect) {
		dir = FatFs->buf;
		for (i = 0; i < 8; i++) {	/* Copy file name body */
    4078:	8e 81       	ldd	r24, Y+6	; 0x06
    407a:	8f 5f       	subi	r24, 0xFF	; 255
    407c:	8e 83       	std	Y+6, r24	; 0x06
    407e:	8e 81       	ldd	r24, Y+6	; 0x06
    4080:	88 30       	cpi	r24, 0x08	; 8
    4082:	f8 f2       	brcs	.-66     	; 0x4042 <get_fileinfo+0x50>
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
    4084:	8b 81       	ldd	r24, Y+3	; 0x03
    4086:	9c 81       	ldd	r25, Y+4	; 0x04
    4088:	fc 01       	movw	r30, r24
    408a:	38 96       	adiw	r30, 0x08	; 8
    408c:	80 81       	ld	r24, Z
    408e:	80 32       	cpi	r24, 0x20	; 32
    4090:	41 f1       	breq	.+80     	; 0x40e2 <get_fileinfo+0xf0>
			*p++ = '.';
    4092:	e9 81       	ldd	r30, Y+1	; 0x01
    4094:	fa 81       	ldd	r31, Y+2	; 0x02
    4096:	8e e2       	ldi	r24, 0x2E	; 46
    4098:	80 83       	st	Z, r24
    409a:	89 81       	ldd	r24, Y+1	; 0x01
    409c:	9a 81       	ldd	r25, Y+2	; 0x02
    409e:	01 96       	adiw	r24, 0x01	; 1
    40a0:	9a 83       	std	Y+2, r25	; 0x02
    40a2:	89 83       	std	Y+1, r24	; 0x01
			for (i = 8; i < 11; i++) {
    40a4:	88 e0       	ldi	r24, 0x08	; 8
    40a6:	8e 83       	std	Y+6, r24	; 0x06
    40a8:	19 c0       	rjmp	.+50     	; 0x40dc <get_fileinfo+0xea>
				c = dir[i];
    40aa:	8e 81       	ldd	r24, Y+6	; 0x06
    40ac:	28 2f       	mov	r18, r24
    40ae:	30 e0       	ldi	r19, 0x00	; 0
    40b0:	8b 81       	ldd	r24, Y+3	; 0x03
    40b2:	9c 81       	ldd	r25, Y+4	; 0x04
    40b4:	fc 01       	movw	r30, r24
    40b6:	e2 0f       	add	r30, r18
    40b8:	f3 1f       	adc	r31, r19
    40ba:	80 81       	ld	r24, Z
    40bc:	8d 83       	std	Y+5, r24	; 0x05
				if (c == ' ') break;
    40be:	8d 81       	ldd	r24, Y+5	; 0x05
    40c0:	80 32       	cpi	r24, 0x20	; 32
    40c2:	79 f0       	breq	.+30     	; 0x40e2 <get_fileinfo+0xf0>
				*p++ = c;
    40c4:	e9 81       	ldd	r30, Y+1	; 0x01
    40c6:	fa 81       	ldd	r31, Y+2	; 0x02
    40c8:	8d 81       	ldd	r24, Y+5	; 0x05
    40ca:	80 83       	st	Z, r24
    40cc:	89 81       	ldd	r24, Y+1	; 0x01
    40ce:	9a 81       	ldd	r25, Y+2	; 0x02
    40d0:	01 96       	adiw	r24, 0x01	; 1
    40d2:	9a 83       	std	Y+2, r25	; 0x02
    40d4:	89 83       	std	Y+1, r24	; 0x01
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    40d6:	8e 81       	ldd	r24, Y+6	; 0x06
    40d8:	8f 5f       	subi	r24, 0xFF	; 255
    40da:	8e 83       	std	Y+6, r24	; 0x06
    40dc:	8e 81       	ldd	r24, Y+6	; 0x06
    40de:	8b 30       	cpi	r24, 0x0B	; 11
    40e0:	20 f3       	brcs	.-56     	; 0x40aa <get_fileinfo+0xb8>
				c = dir[i];
				if (c == ' ') break;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    40e2:	8b 81       	ldd	r24, Y+3	; 0x03
    40e4:	9c 81       	ldd	r25, Y+4	; 0x04
    40e6:	fc 01       	movw	r30, r24
    40e8:	3b 96       	adiw	r30, 0x0b	; 11
    40ea:	80 81       	ld	r24, Z
    40ec:	e9 85       	ldd	r30, Y+9	; 0x09
    40ee:	fa 85       	ldd	r31, Y+10	; 0x0a
    40f0:	80 87       	std	Z+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    40f2:	8b 81       	ldd	r24, Y+3	; 0x03
    40f4:	9c 81       	ldd	r25, Y+4	; 0x04
    40f6:	fc 01       	movw	r30, r24
    40f8:	7c 96       	adiw	r30, 0x1c	; 28
    40fa:	80 81       	ld	r24, Z
    40fc:	91 81       	ldd	r25, Z+1	; 0x01
    40fe:	a2 81       	ldd	r26, Z+2	; 0x02
    4100:	b3 81       	ldd	r27, Z+3	; 0x03
    4102:	e9 85       	ldd	r30, Y+9	; 0x09
    4104:	fa 85       	ldd	r31, Y+10	; 0x0a
    4106:	80 83       	st	Z, r24
    4108:	91 83       	std	Z+1, r25	; 0x01
    410a:	a2 83       	std	Z+2, r26	; 0x02
    410c:	b3 83       	std	Z+3, r27	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    410e:	8b 81       	ldd	r24, Y+3	; 0x03
    4110:	9c 81       	ldd	r25, Y+4	; 0x04
    4112:	fc 01       	movw	r30, r24
    4114:	78 96       	adiw	r30, 0x18	; 24
    4116:	80 81       	ld	r24, Z
    4118:	91 81       	ldd	r25, Z+1	; 0x01
    411a:	e9 85       	ldd	r30, Y+9	; 0x09
    411c:	fa 85       	ldd	r31, Y+10	; 0x0a
    411e:	95 83       	std	Z+5, r25	; 0x05
    4120:	84 83       	std	Z+4, r24	; 0x04
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    4122:	8b 81       	ldd	r24, Y+3	; 0x03
    4124:	9c 81       	ldd	r25, Y+4	; 0x04
    4126:	fc 01       	movw	r30, r24
    4128:	76 96       	adiw	r30, 0x16	; 22
    412a:	80 81       	ld	r24, Z
    412c:	91 81       	ldd	r25, Z+1	; 0x01
    412e:	e9 85       	ldd	r30, Y+9	; 0x09
    4130:	fa 85       	ldd	r31, Y+10	; 0x0a
    4132:	97 83       	std	Z+7, r25	; 0x07
    4134:	86 83       	std	Z+6, r24	; 0x06
	}
	*p = 0;
    4136:	e9 81       	ldd	r30, Y+1	; 0x01
    4138:	fa 81       	ldd	r31, Y+2	; 0x02
    413a:	10 82       	st	Z, r1
}
    413c:	2a 96       	adiw	r28, 0x0a	; 10
    413e:	0f b6       	in	r0, 0x3f	; 63
    4140:	f8 94       	cli
    4142:	de bf       	out	0x3e, r29	; 62
    4144:	0f be       	out	0x3f, r0	; 63
    4146:	cd bf       	out	0x3d, r28	; 61
    4148:	cf 91       	pop	r28
    414a:	df 91       	pop	r29
    414c:	08 95       	ret

0000414e <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const char *path	/* Full-path string to find a file or directory */
)
{
    414e:	df 93       	push	r29
    4150:	cf 93       	push	r28
    4152:	cd b7       	in	r28, 0x3d	; 61
    4154:	de b7       	in	r29, 0x3e	; 62
    4156:	27 97       	sbiw	r28, 0x07	; 7
    4158:	0f b6       	in	r0, 0x3f	; 63
    415a:	f8 94       	cli
    415c:	de bf       	out	0x3e, r29	; 62
    415e:	0f be       	out	0x3f, r0	; 63
    4160:	cd bf       	out	0x3d, r28	; 61
    4162:	9d 83       	std	Y+5, r25	; 0x05
    4164:	8c 83       	std	Y+4, r24	; 0x04
    4166:	7f 83       	std	Y+7, r23	; 0x07
    4168:	6e 83       	std	Y+6, r22	; 0x06
    416a:	05 c0       	rjmp	.+10     	; 0x4176 <follow_path+0x28>
	FRESULT res;
	BYTE *dir;


	while (*path == ' ') path++;		/* Skip leading spaces */
    416c:	8e 81       	ldd	r24, Y+6	; 0x06
    416e:	9f 81       	ldd	r25, Y+7	; 0x07
    4170:	01 96       	adiw	r24, 0x01	; 1
    4172:	9f 83       	std	Y+7, r25	; 0x07
    4174:	8e 83       	std	Y+6, r24	; 0x06
    4176:	ee 81       	ldd	r30, Y+6	; 0x06
    4178:	ff 81       	ldd	r31, Y+7	; 0x07
    417a:	80 81       	ld	r24, Z
    417c:	80 32       	cpi	r24, 0x20	; 32
    417e:	b1 f3       	breq	.-20     	; 0x416c <follow_path+0x1e>
	if (*path == '/') path++;			/* Strip heading separator */
    4180:	ee 81       	ldd	r30, Y+6	; 0x06
    4182:	ff 81       	ldd	r31, Y+7	; 0x07
    4184:	80 81       	ld	r24, Z
    4186:	8f 32       	cpi	r24, 0x2F	; 47
    4188:	29 f4       	brne	.+10     	; 0x4194 <follow_path+0x46>
    418a:	8e 81       	ldd	r24, Y+6	; 0x06
    418c:	9f 81       	ldd	r25, Y+7	; 0x07
    418e:	01 96       	adiw	r24, 0x01	; 1
    4190:	9f 83       	std	Y+7, r25	; 0x07
    4192:	8e 83       	std	Y+6, r24	; 0x06
	dj->sclust = 0;						/* Set start directory (always root dir) */
    4194:	ec 81       	ldd	r30, Y+4	; 0x04
    4196:	fd 81       	ldd	r31, Y+5	; 0x05
    4198:	14 82       	std	Z+4, r1	; 0x04
    419a:	15 82       	std	Z+5, r1	; 0x05
    419c:	16 82       	std	Z+6, r1	; 0x06
    419e:	17 82       	std	Z+7, r1	; 0x07

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
    41a0:	ee 81       	ldd	r30, Y+6	; 0x06
    41a2:	ff 81       	ldd	r31, Y+7	; 0x07
    41a4:	80 81       	ld	r24, Z
    41a6:	81 32       	cpi	r24, 0x21	; 33
    41a8:	70 f4       	brcc	.+28     	; 0x41c6 <follow_path+0x78>
		res = dir_rewind(dj);
    41aa:	8c 81       	ldd	r24, Y+4	; 0x04
    41ac:	9d 81       	ldd	r25, Y+5	; 0x05
    41ae:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <dir_rewind>
    41b2:	8b 83       	std	Y+3, r24	; 0x03
		FatFs->buf[0] = 0;
    41b4:	e0 91 22 02 	lds	r30, 0x0222
    41b8:	f0 91 23 02 	lds	r31, 0x0223
    41bc:	06 80       	ldd	r0, Z+6	; 0x06
    41be:	f7 81       	ldd	r31, Z+7	; 0x07
    41c0:	e0 2d       	mov	r30, r0
    41c2:	10 82       	st	Z, r1
    41c4:	65 c0       	rjmp	.+202    	; 0x4290 <follow_path+0x142>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
    41c6:	8c 81       	ldd	r24, Y+4	; 0x04
    41c8:	9d 81       	ldd	r25, Y+5	; 0x05
    41ca:	9e 01       	movw	r18, r28
    41cc:	2a 5f       	subi	r18, 0xFA	; 250
    41ce:	3f 4f       	sbci	r19, 0xFF	; 255
    41d0:	b9 01       	movw	r22, r18
    41d2:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <create_name>
    41d6:	8b 83       	std	Y+3, r24	; 0x03
			if (res != FR_OK) break;
    41d8:	8b 81       	ldd	r24, Y+3	; 0x03
    41da:	88 23       	and	r24, r24
    41dc:	09 f0       	breq	.+2      	; 0x41e0 <follow_path+0x92>
    41de:	58 c0       	rjmp	.+176    	; 0x4290 <follow_path+0x142>
			res = dir_find(dj);				/* Find it */
    41e0:	8c 81       	ldd	r24, Y+4	; 0x04
    41e2:	9d 81       	ldd	r25, Y+5	; 0x05
    41e4:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <dir_find>
    41e8:	8b 83       	std	Y+3, r24	; 0x03
			if (res != FR_OK) {				/* Could not find the object */
    41ea:	8b 81       	ldd	r24, Y+3	; 0x03
    41ec:	88 23       	and	r24, r24
    41ee:	89 f0       	breq	.+34     	; 0x4212 <follow_path+0xc4>
				if (res == FR_NO_FILE && !*(dj->fn+11))
    41f0:	8b 81       	ldd	r24, Y+3	; 0x03
    41f2:	83 30       	cpi	r24, 0x03	; 3
    41f4:	09 f0       	breq	.+2      	; 0x41f8 <follow_path+0xaa>
    41f6:	4c c0       	rjmp	.+152    	; 0x4290 <follow_path+0x142>
    41f8:	ec 81       	ldd	r30, Y+4	; 0x04
    41fa:	fd 81       	ldd	r31, Y+5	; 0x05
    41fc:	82 81       	ldd	r24, Z+2	; 0x02
    41fe:	93 81       	ldd	r25, Z+3	; 0x03
    4200:	fc 01       	movw	r30, r24
    4202:	3b 96       	adiw	r30, 0x0b	; 11
    4204:	80 81       	ld	r24, Z
    4206:	88 23       	and	r24, r24
    4208:	09 f0       	breq	.+2      	; 0x420c <follow_path+0xbe>
    420a:	42 c0       	rjmp	.+132    	; 0x4290 <follow_path+0x142>
					res = FR_NO_PATH;
    420c:	84 e0       	ldi	r24, 0x04	; 4
    420e:	8b 83       	std	Y+3, r24	; 0x03
    4210:	3f c0       	rjmp	.+126    	; 0x4290 <follow_path+0x142>
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
    4212:	ec 81       	ldd	r30, Y+4	; 0x04
    4214:	fd 81       	ldd	r31, Y+5	; 0x05
    4216:	82 81       	ldd	r24, Z+2	; 0x02
    4218:	93 81       	ldd	r25, Z+3	; 0x03
    421a:	fc 01       	movw	r30, r24
    421c:	3b 96       	adiw	r30, 0x0b	; 11
    421e:	80 81       	ld	r24, Z
    4220:	88 23       	and	r24, r24
    4222:	b1 f5       	brne	.+108    	; 0x4290 <follow_path+0x142>
			dir = FatFs->buf;				/* There is next segment. Follow the sub directory */
    4224:	e0 91 22 02 	lds	r30, 0x0222
    4228:	f0 91 23 02 	lds	r31, 0x0223
    422c:	86 81       	ldd	r24, Z+6	; 0x06
    422e:	97 81       	ldd	r25, Z+7	; 0x07
    4230:	9a 83       	std	Y+2, r25	; 0x02
    4232:	89 83       	std	Y+1, r24	; 0x01
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    4234:	89 81       	ldd	r24, Y+1	; 0x01
    4236:	9a 81       	ldd	r25, Y+2	; 0x02
    4238:	fc 01       	movw	r30, r24
    423a:	3b 96       	adiw	r30, 0x0b	; 11
    423c:	80 81       	ld	r24, Z
    423e:	88 2f       	mov	r24, r24
    4240:	90 e0       	ldi	r25, 0x00	; 0
    4242:	80 71       	andi	r24, 0x10	; 16
    4244:	90 70       	andi	r25, 0x00	; 0
    4246:	00 97       	sbiw	r24, 0x00	; 0
    4248:	19 f4       	brne	.+6      	; 0x4250 <follow_path+0x102>
				res = FR_NO_PATH; break;
    424a:	84 e0       	ldi	r24, 0x04	; 4
    424c:	8b 83       	std	Y+3, r24	; 0x03
    424e:	20 c0       	rjmp	.+64     	; 0x4290 <follow_path+0x142>
			}
			dj->sclust =
    4250:	89 81       	ldd	r24, Y+1	; 0x01
    4252:	9a 81       	ldd	r25, Y+2	; 0x02
    4254:	fc 01       	movw	r30, r24
    4256:	74 96       	adiw	r30, 0x14	; 20
    4258:	80 81       	ld	r24, Z
    425a:	91 81       	ldd	r25, Z+1	; 0x01
    425c:	cc 01       	movw	r24, r24
    425e:	a0 e0       	ldi	r26, 0x00	; 0
    4260:	b0 e0       	ldi	r27, 0x00	; 0
    4262:	ac 01       	movw	r20, r24
    4264:	33 27       	eor	r19, r19
    4266:	22 27       	eor	r18, r18
    4268:	89 81       	ldd	r24, Y+1	; 0x01
    426a:	9a 81       	ldd	r25, Y+2	; 0x02
    426c:	fc 01       	movw	r30, r24
    426e:	7a 96       	adiw	r30, 0x1a	; 26
    4270:	80 81       	ld	r24, Z
    4272:	91 81       	ldd	r25, Z+1	; 0x01
    4274:	cc 01       	movw	r24, r24
    4276:	a0 e0       	ldi	r26, 0x00	; 0
    4278:	b0 e0       	ldi	r27, 0x00	; 0
    427a:	82 2b       	or	r24, r18
    427c:	93 2b       	or	r25, r19
    427e:	a4 2b       	or	r26, r20
    4280:	b5 2b       	or	r27, r21
    4282:	ec 81       	ldd	r30, Y+4	; 0x04
    4284:	fd 81       	ldd	r31, Y+5	; 0x05
    4286:	84 83       	std	Z+4, r24	; 0x04
    4288:	95 83       	std	Z+5, r25	; 0x05
    428a:	a6 83       	std	Z+6, r26	; 0x06
    428c:	b7 83       	std	Z+7, r27	; 0x07
    428e:	9b cf       	rjmp	.-202    	; 0x41c6 <follow_path+0x78>
#endif
				LD_WORD(dir+DIR_FstClusLO);
		}
	}

	return res;
    4290:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4292:	27 96       	adiw	r28, 0x07	; 7
    4294:	0f b6       	in	r0, 0x3f	; 63
    4296:	f8 94       	cli
    4298:	de bf       	out	0x3e, r29	; 62
    429a:	0f be       	out	0x3f, r0	; 63
    429c:	cd bf       	out	0x3d, r28	; 61
    429e:	cf 91       	pop	r28
    42a0:	df 91       	pop	r29
    42a2:	08 95       	ret

000042a4 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    42a4:	0f 93       	push	r16
    42a6:	1f 93       	push	r17
    42a8:	df 93       	push	r29
    42aa:	cf 93       	push	r28
    42ac:	cd b7       	in	r28, 0x3d	; 61
    42ae:	de b7       	in	r29, 0x3e	; 62
    42b0:	27 97       	sbiw	r28, 0x07	; 7
    42b2:	0f b6       	in	r0, 0x3f	; 63
    42b4:	f8 94       	cli
    42b6:	de bf       	out	0x3e, r29	; 62
    42b8:	0f be       	out	0x3f, r0	; 63
    42ba:	cd bf       	out	0x3d, r28	; 61
    42bc:	9a 83       	std	Y+2, r25	; 0x02
    42be:	89 83       	std	Y+1, r24	; 0x01
    42c0:	4b 83       	std	Y+3, r20	; 0x03
    42c2:	5c 83       	std	Y+4, r21	; 0x04
    42c4:	6d 83       	std	Y+5, r22	; 0x05
    42c6:	7e 83       	std	Y+6, r23	; 0x06
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
    42c8:	89 81       	ldd	r24, Y+1	; 0x01
    42ca:	9a 81       	ldd	r25, Y+2	; 0x02
    42cc:	2b 81       	ldd	r18, Y+3	; 0x03
    42ce:	3c 81       	ldd	r19, Y+4	; 0x04
    42d0:	4d 81       	ldd	r20, Y+5	; 0x05
    42d2:	5e 81       	ldd	r21, Y+6	; 0x06
    42d4:	ba 01       	movw	r22, r20
    42d6:	a9 01       	movw	r20, r18
    42d8:	2e ef       	ldi	r18, 0xFE	; 254
    42da:	31 e0       	ldi	r19, 0x01	; 1
    42dc:	02 e0       	ldi	r16, 0x02	; 2
    42de:	10 e0       	ldi	r17, 0x00	; 0
    42e0:	0e 94 ef 18 	call	0x31de	; 0x31de <disk_readp>
    42e4:	88 23       	and	r24, r24
    42e6:	19 f0       	breq	.+6      	; 0x42ee <check_fs+0x4a>
		return 3;
    42e8:	23 e0       	ldi	r18, 0x03	; 3
    42ea:	2f 83       	std	Y+7, r18	; 0x07
    42ec:	41 c0       	rjmp	.+130    	; 0x4370 <check_fs+0xcc>
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
    42ee:	e9 81       	ldd	r30, Y+1	; 0x01
    42f0:	fa 81       	ldd	r31, Y+2	; 0x02
    42f2:	80 81       	ld	r24, Z
    42f4:	91 81       	ldd	r25, Z+1	; 0x01
    42f6:	2a ea       	ldi	r18, 0xAA	; 170
    42f8:	85 35       	cpi	r24, 0x55	; 85
    42fa:	92 07       	cpc	r25, r18
    42fc:	19 f0       	breq	.+6      	; 0x4304 <check_fs+0x60>
		return 2;
    42fe:	82 e0       	ldi	r24, 0x02	; 2
    4300:	8f 83       	std	Y+7, r24	; 0x07
    4302:	36 c0       	rjmp	.+108    	; 0x4370 <check_fs+0xcc>

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
    4304:	89 81       	ldd	r24, Y+1	; 0x01
    4306:	9a 81       	ldd	r25, Y+2	; 0x02
    4308:	2b 81       	ldd	r18, Y+3	; 0x03
    430a:	3c 81       	ldd	r19, Y+4	; 0x04
    430c:	4d 81       	ldd	r20, Y+5	; 0x05
    430e:	5e 81       	ldd	r21, Y+6	; 0x06
    4310:	ba 01       	movw	r22, r20
    4312:	a9 01       	movw	r20, r18
    4314:	26 e3       	ldi	r18, 0x36	; 54
    4316:	30 e0       	ldi	r19, 0x00	; 0
    4318:	02 e0       	ldi	r16, 0x02	; 2
    431a:	10 e0       	ldi	r17, 0x00	; 0
    431c:	0e 94 ef 18 	call	0x31de	; 0x31de <disk_readp>
    4320:	88 23       	and	r24, r24
    4322:	51 f4       	brne	.+20     	; 0x4338 <check_fs+0x94>
    4324:	e9 81       	ldd	r30, Y+1	; 0x01
    4326:	fa 81       	ldd	r31, Y+2	; 0x02
    4328:	80 81       	ld	r24, Z
    432a:	91 81       	ldd	r25, Z+1	; 0x01
    432c:	21 e4       	ldi	r18, 0x41	; 65
    432e:	86 34       	cpi	r24, 0x46	; 70
    4330:	92 07       	cpc	r25, r18
    4332:	11 f4       	brne	.+4      	; 0x4338 <check_fs+0x94>
		return 0;
    4334:	1f 82       	std	Y+7, r1	; 0x07
    4336:	1c c0       	rjmp	.+56     	; 0x4370 <check_fs+0xcc>
#if _FS_FAT32
	if (!disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
    4338:	89 81       	ldd	r24, Y+1	; 0x01
    433a:	9a 81       	ldd	r25, Y+2	; 0x02
    433c:	2b 81       	ldd	r18, Y+3	; 0x03
    433e:	3c 81       	ldd	r19, Y+4	; 0x04
    4340:	4d 81       	ldd	r20, Y+5	; 0x05
    4342:	5e 81       	ldd	r21, Y+6	; 0x06
    4344:	ba 01       	movw	r22, r20
    4346:	a9 01       	movw	r20, r18
    4348:	22 e5       	ldi	r18, 0x52	; 82
    434a:	30 e0       	ldi	r19, 0x00	; 0
    434c:	02 e0       	ldi	r16, 0x02	; 2
    434e:	10 e0       	ldi	r17, 0x00	; 0
    4350:	0e 94 ef 18 	call	0x31de	; 0x31de <disk_readp>
    4354:	88 23       	and	r24, r24
    4356:	51 f4       	brne	.+20     	; 0x436c <check_fs+0xc8>
    4358:	e9 81       	ldd	r30, Y+1	; 0x01
    435a:	fa 81       	ldd	r31, Y+2	; 0x02
    435c:	80 81       	ld	r24, Z
    435e:	91 81       	ldd	r25, Z+1	; 0x01
    4360:	21 e4       	ldi	r18, 0x41	; 65
    4362:	86 34       	cpi	r24, 0x46	; 70
    4364:	92 07       	cpc	r25, r18
    4366:	11 f4       	brne	.+4      	; 0x436c <check_fs+0xc8>
		return 0;
    4368:	1f 82       	std	Y+7, r1	; 0x07
    436a:	02 c0       	rjmp	.+4      	; 0x4370 <check_fs+0xcc>
#endif
	return 1;
    436c:	81 e0       	ldi	r24, 0x01	; 1
    436e:	8f 83       	std	Y+7, r24	; 0x07
    4370:	8f 81       	ldd	r24, Y+7	; 0x07
}
    4372:	27 96       	adiw	r28, 0x07	; 7
    4374:	0f b6       	in	r0, 0x3f	; 63
    4376:	f8 94       	cli
    4378:	de bf       	out	0x3e, r29	; 62
    437a:	0f be       	out	0x3f, r0	; 63
    437c:	cd bf       	out	0x3d, r28	; 61
    437e:	cf 91       	pop	r28
    4380:	df 91       	pop	r29
    4382:	1f 91       	pop	r17
    4384:	0f 91       	pop	r16
    4386:	08 95       	ret

00004388 <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
    4388:	ef 92       	push	r14
    438a:	ff 92       	push	r15
    438c:	0f 93       	push	r16
    438e:	1f 93       	push	r17
    4390:	df 93       	push	r29
    4392:	cf 93       	push	r28
    4394:	cd b7       	in	r28, 0x3d	; 61
    4396:	de b7       	in	r29, 0x3e	; 62
    4398:	e8 97       	sbiw	r28, 0x38	; 56
    439a:	0f b6       	in	r0, 0x3f	; 63
    439c:	f8 94       	cli
    439e:	de bf       	out	0x3e, r29	; 62
    43a0:	0f be       	out	0x3f, r0	; 63
    43a2:	cd bf       	out	0x3d, r28	; 61
    43a4:	9f ab       	std	Y+55, r25	; 0x37
    43a6:	8e ab       	std	Y+54, r24	; 0x36
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
    43a8:	10 92 23 02 	sts	0x0223, r1
    43ac:	10 92 22 02 	sts	0x0222, r1
	if (!fs) return FR_OK;				/* Unregister fs object */
    43b0:	8e a9       	ldd	r24, Y+54	; 0x36
    43b2:	9f a9       	ldd	r25, Y+55	; 0x37
    43b4:	00 97       	sbiw	r24, 0x00	; 0
    43b6:	11 f4       	brne	.+4      	; 0x43bc <pf_mount+0x34>
    43b8:	18 ae       	std	Y+56, r1	; 0x38
    43ba:	aa c1       	rjmp	.+852    	; 0x4710 <pf_mount+0x388>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
    43bc:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <disk_initialize>
    43c0:	88 2f       	mov	r24, r24
    43c2:	90 e0       	ldi	r25, 0x00	; 0
    43c4:	81 70       	andi	r24, 0x01	; 1
    43c6:	90 70       	andi	r25, 0x00	; 0
    43c8:	88 23       	and	r24, r24
    43ca:	19 f0       	breq	.+6      	; 0x43d2 <pf_mount+0x4a>
		return FR_NOT_READY;
    43cc:	02 e0       	ldi	r16, 0x02	; 2
    43ce:	08 af       	std	Y+56, r16	; 0x38
    43d0:	9f c1       	rjmp	.+830    	; 0x4710 <pf_mount+0x388>

	/* Search FAT partition on the drive */
	bsect = 0;
    43d2:	1d 86       	std	Y+13, r1	; 0x0d
    43d4:	1e 86       	std	Y+14, r1	; 0x0e
    43d6:	1f 86       	std	Y+15, r1	; 0x0f
    43d8:	18 8a       	std	Y+16, r1	; 0x10
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    43da:	ce 01       	movw	r24, r28
    43dc:	42 96       	adiw	r24, 0x12	; 18
    43de:	2d 85       	ldd	r18, Y+13	; 0x0d
    43e0:	3e 85       	ldd	r19, Y+14	; 0x0e
    43e2:	4f 85       	ldd	r20, Y+15	; 0x0f
    43e4:	58 89       	ldd	r21, Y+16	; 0x10
    43e6:	ba 01       	movw	r22, r20
    43e8:	a9 01       	movw	r20, r18
    43ea:	0e 94 52 21 	call	0x42a4	; 0x42a4 <check_fs>
    43ee:	89 8b       	std	Y+17, r24	; 0x11
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    43f0:	89 89       	ldd	r24, Y+17	; 0x11
    43f2:	81 30       	cpi	r24, 0x01	; 1
    43f4:	69 f5       	brne	.+90     	; 0x4450 <pf_mount+0xc8>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    43f6:	ce 01       	movw	r24, r28
    43f8:	42 96       	adiw	r24, 0x12	; 18
    43fa:	2d 85       	ldd	r18, Y+13	; 0x0d
    43fc:	3e 85       	ldd	r19, Y+14	; 0x0e
    43fe:	4f 85       	ldd	r20, Y+15	; 0x0f
    4400:	58 89       	ldd	r21, Y+16	; 0x10
    4402:	ba 01       	movw	r22, r20
    4404:	a9 01       	movw	r20, r18
    4406:	2e eb       	ldi	r18, 0xBE	; 190
    4408:	31 e0       	ldi	r19, 0x01	; 1
    440a:	00 e1       	ldi	r16, 0x10	; 16
    440c:	10 e0       	ldi	r17, 0x00	; 0
    440e:	0e 94 ef 18 	call	0x31de	; 0x31de <disk_readp>
    4412:	88 23       	and	r24, r24
    4414:	19 f0       	breq	.+6      	; 0x441c <pf_mount+0x94>
			fmt = 3;
    4416:	83 e0       	ldi	r24, 0x03	; 3
    4418:	89 8b       	std	Y+17, r24	; 0x11
    441a:	1a c0       	rjmp	.+52     	; 0x4450 <pf_mount+0xc8>
		} else {
			if (buf[4]) {					/* Is the partition existing? */
    441c:	8e 89       	ldd	r24, Y+22	; 0x16
    441e:	88 23       	and	r24, r24
    4420:	b9 f0       	breq	.+46     	; 0x4450 <pf_mount+0xc8>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
    4422:	ce 01       	movw	r24, r28
    4424:	42 96       	adiw	r24, 0x12	; 18
    4426:	fc 01       	movw	r30, r24
    4428:	38 96       	adiw	r30, 0x08	; 8
    442a:	80 81       	ld	r24, Z
    442c:	91 81       	ldd	r25, Z+1	; 0x01
    442e:	a2 81       	ldd	r26, Z+2	; 0x02
    4430:	b3 81       	ldd	r27, Z+3	; 0x03
    4432:	8d 87       	std	Y+13, r24	; 0x0d
    4434:	9e 87       	std	Y+14, r25	; 0x0e
    4436:	af 87       	std	Y+15, r26	; 0x0f
    4438:	b8 8b       	std	Y+16, r27	; 0x10
				fmt = check_fs(buf, bsect);	/* Check the partition */
    443a:	ce 01       	movw	r24, r28
    443c:	42 96       	adiw	r24, 0x12	; 18
    443e:	2d 85       	ldd	r18, Y+13	; 0x0d
    4440:	3e 85       	ldd	r19, Y+14	; 0x0e
    4442:	4f 85       	ldd	r20, Y+15	; 0x0f
    4444:	58 89       	ldd	r21, Y+16	; 0x10
    4446:	ba 01       	movw	r22, r20
    4448:	a9 01       	movw	r20, r18
    444a:	0e 94 52 21 	call	0x42a4	; 0x42a4 <check_fs>
    444e:	89 8b       	std	Y+17, r24	; 0x11
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    4450:	89 89       	ldd	r24, Y+17	; 0x11
    4452:	83 30       	cpi	r24, 0x03	; 3
    4454:	19 f4       	brne	.+6      	; 0x445c <pf_mount+0xd4>
    4456:	11 e0       	ldi	r17, 0x01	; 1
    4458:	18 af       	std	Y+56, r17	; 0x38
    445a:	5a c1       	rjmp	.+692    	; 0x4710 <pf_mount+0x388>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    445c:	89 89       	ldd	r24, Y+17	; 0x11
    445e:	88 23       	and	r24, r24
    4460:	19 f0       	breq	.+6      	; 0x4468 <pf_mount+0xe0>
    4462:	27 e0       	ldi	r18, 0x07	; 7
    4464:	28 af       	std	Y+56, r18	; 0x38
    4466:	54 c1       	rjmp	.+680    	; 0x4710 <pf_mount+0x388>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
    4468:	ce 01       	movw	r24, r28
    446a:	42 96       	adiw	r24, 0x12	; 18
    446c:	2d 85       	ldd	r18, Y+13	; 0x0d
    446e:	3e 85       	ldd	r19, Y+14	; 0x0e
    4470:	4f 85       	ldd	r20, Y+15	; 0x0f
    4472:	58 89       	ldd	r21, Y+16	; 0x10
    4474:	ba 01       	movw	r22, r20
    4476:	a9 01       	movw	r20, r18
    4478:	2d e0       	ldi	r18, 0x0D	; 13
    447a:	30 e0       	ldi	r19, 0x00	; 0
    447c:	04 e2       	ldi	r16, 0x24	; 36
    447e:	10 e0       	ldi	r17, 0x00	; 0
    4480:	0e 94 ef 18 	call	0x31de	; 0x31de <disk_readp>
    4484:	88 23       	and	r24, r24
    4486:	19 f0       	breq	.+6      	; 0x448e <pf_mount+0x106>
    4488:	81 e0       	ldi	r24, 0x01	; 1
    448a:	88 af       	std	Y+56, r24	; 0x38
    448c:	41 c1       	rjmp	.+642    	; 0x4710 <pf_mount+0x388>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    448e:	ce 01       	movw	r24, r28
    4490:	42 96       	adiw	r24, 0x12	; 18
    4492:	fc 01       	movw	r30, r24
    4494:	39 96       	adiw	r30, 0x09	; 9
    4496:	80 81       	ld	r24, Z
    4498:	91 81       	ldd	r25, Z+1	; 0x01
    449a:	cc 01       	movw	r24, r24
    449c:	a0 e0       	ldi	r26, 0x00	; 0
    449e:	b0 e0       	ldi	r27, 0x00	; 0
    44a0:	89 87       	std	Y+9, r24	; 0x09
    44a2:	9a 87       	std	Y+10, r25	; 0x0a
    44a4:	ab 87       	std	Y+11, r26	; 0x0b
    44a6:	bc 87       	std	Y+12, r27	; 0x0c
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
    44a8:	89 85       	ldd	r24, Y+9	; 0x09
    44aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    44ac:	ab 85       	ldd	r26, Y+11	; 0x0b
    44ae:	bc 85       	ldd	r27, Y+12	; 0x0c
    44b0:	00 97       	sbiw	r24, 0x00	; 0
    44b2:	a1 05       	cpc	r26, r1
    44b4:	b1 05       	cpc	r27, r1
    44b6:	61 f4       	brne	.+24     	; 0x44d0 <pf_mount+0x148>
    44b8:	ce 01       	movw	r24, r28
    44ba:	42 96       	adiw	r24, 0x12	; 18
    44bc:	fc 01       	movw	r30, r24
    44be:	77 96       	adiw	r30, 0x17	; 23
    44c0:	80 81       	ld	r24, Z
    44c2:	91 81       	ldd	r25, Z+1	; 0x01
    44c4:	a2 81       	ldd	r26, Z+2	; 0x02
    44c6:	b3 81       	ldd	r27, Z+3	; 0x03
    44c8:	89 87       	std	Y+9, r24	; 0x09
    44ca:	9a 87       	std	Y+10, r25	; 0x0a
    44cc:	ab 87       	std	Y+11, r26	; 0x0b
    44ce:	bc 87       	std	Y+12, r27	; 0x0c

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    44d0:	8d 89       	ldd	r24, Y+21	; 0x15
    44d2:	28 2f       	mov	r18, r24
    44d4:	30 e0       	ldi	r19, 0x00	; 0
    44d6:	40 e0       	ldi	r20, 0x00	; 0
    44d8:	50 e0       	ldi	r21, 0x00	; 0
    44da:	89 85       	ldd	r24, Y+9	; 0x09
    44dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    44de:	ab 85       	ldd	r26, Y+11	; 0x0b
    44e0:	bc 85       	ldd	r27, Y+12	; 0x0c
    44e2:	bc 01       	movw	r22, r24
    44e4:	cd 01       	movw	r24, r26
    44e6:	0e 94 53 48 	call	0x90a6	; 0x90a6 <__mulsi3>
    44ea:	dc 01       	movw	r26, r24
    44ec:	cb 01       	movw	r24, r22
    44ee:	89 87       	std	Y+9, r24	; 0x09
    44f0:	9a 87       	std	Y+10, r25	; 0x0a
    44f2:	ab 87       	std	Y+11, r26	; 0x0b
    44f4:	bc 87       	std	Y+12, r27	; 0x0c
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    44f6:	ce 01       	movw	r24, r28
    44f8:	42 96       	adiw	r24, 0x12	; 18
    44fa:	fc 01       	movw	r30, r24
    44fc:	31 96       	adiw	r30, 0x01	; 1
    44fe:	80 81       	ld	r24, Z
    4500:	91 81       	ldd	r25, Z+1	; 0x01
    4502:	9c 01       	movw	r18, r24
    4504:	40 e0       	ldi	r20, 0x00	; 0
    4506:	50 e0       	ldi	r21, 0x00	; 0
    4508:	8d 85       	ldd	r24, Y+13	; 0x0d
    450a:	9e 85       	ldd	r25, Y+14	; 0x0e
    450c:	af 85       	ldd	r26, Y+15	; 0x0f
    450e:	b8 89       	ldd	r27, Y+16	; 0x10
    4510:	82 0f       	add	r24, r18
    4512:	93 1f       	adc	r25, r19
    4514:	a4 1f       	adc	r26, r20
    4516:	b5 1f       	adc	r27, r21
    4518:	ee a9       	ldd	r30, Y+54	; 0x36
    451a:	ff a9       	ldd	r31, Y+55	; 0x37
    451c:	84 87       	std	Z+12, r24	; 0x0c
    451e:	95 87       	std	Z+13, r25	; 0x0d
    4520:	a6 87       	std	Z+14, r26	; 0x0e
    4522:	b7 87       	std	Z+15, r27	; 0x0f
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    4524:	8a 89       	ldd	r24, Y+18	; 0x12
    4526:	ee a9       	ldd	r30, Y+54	; 0x36
    4528:	ff a9       	ldd	r31, Y+55	; 0x37
    452a:	81 83       	std	Z+1, r24	; 0x01
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    452c:	ce 01       	movw	r24, r28
    452e:	42 96       	adiw	r24, 0x12	; 18
    4530:	fc 01       	movw	r30, r24
    4532:	34 96       	adiw	r30, 0x04	; 4
    4534:	80 81       	ld	r24, Z
    4536:	91 81       	ldd	r25, Z+1	; 0x01
    4538:	ee a9       	ldd	r30, Y+54	; 0x36
    453a:	ff a9       	ldd	r31, Y+55	; 0x37
    453c:	95 83       	std	Z+5, r25	; 0x05
    453e:	84 83       	std	Z+4, r24	; 0x04
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    4540:	ce 01       	movw	r24, r28
    4542:	42 96       	adiw	r24, 0x12	; 18
    4544:	fc 01       	movw	r30, r24
    4546:	36 96       	adiw	r30, 0x06	; 6
    4548:	80 81       	ld	r24, Z
    454a:	91 81       	ldd	r25, Z+1	; 0x01
    454c:	cc 01       	movw	r24, r24
    454e:	a0 e0       	ldi	r26, 0x00	; 0
    4550:	b0 e0       	ldi	r27, 0x00	; 0
    4552:	8d 83       	std	Y+5, r24	; 0x05
    4554:	9e 83       	std	Y+6, r25	; 0x06
    4556:	af 83       	std	Y+7, r26	; 0x07
    4558:	b8 87       	std	Y+8, r27	; 0x08
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
    455a:	8d 81       	ldd	r24, Y+5	; 0x05
    455c:	9e 81       	ldd	r25, Y+6	; 0x06
    455e:	af 81       	ldd	r26, Y+7	; 0x07
    4560:	b8 85       	ldd	r27, Y+8	; 0x08
    4562:	00 97       	sbiw	r24, 0x00	; 0
    4564:	a1 05       	cpc	r26, r1
    4566:	b1 05       	cpc	r27, r1
    4568:	61 f4       	brne	.+24     	; 0x4582 <pf_mount+0x1fa>
    456a:	ce 01       	movw	r24, r28
    456c:	42 96       	adiw	r24, 0x12	; 18
    456e:	fc 01       	movw	r30, r24
    4570:	73 96       	adiw	r30, 0x13	; 19
    4572:	80 81       	ld	r24, Z
    4574:	91 81       	ldd	r25, Z+1	; 0x01
    4576:	a2 81       	ldd	r26, Z+2	; 0x02
    4578:	b3 81       	ldd	r27, Z+3	; 0x03
    457a:	8d 83       	std	Y+5, r24	; 0x05
    457c:	9e 83       	std	Y+6, r25	; 0x06
    457e:	af 83       	std	Y+7, r26	; 0x07
    4580:	b8 87       	std	Y+8, r27	; 0x08
	mclst = (tsect						/* Last cluster# + 1 */
    4582:	ce 01       	movw	r24, r28
    4584:	42 96       	adiw	r24, 0x12	; 18
    4586:	fc 01       	movw	r30, r24
    4588:	31 96       	adiw	r30, 0x01	; 1
    458a:	80 81       	ld	r24, Z
    458c:	91 81       	ldd	r25, Z+1	; 0x01
    458e:	9c 01       	movw	r18, r24
    4590:	40 e0       	ldi	r20, 0x00	; 0
    4592:	50 e0       	ldi	r21, 0x00	; 0
    4594:	8d 81       	ldd	r24, Y+5	; 0x05
    4596:	9e 81       	ldd	r25, Y+6	; 0x06
    4598:	af 81       	ldd	r26, Y+7	; 0x07
    459a:	b8 85       	ldd	r27, Y+8	; 0x08
    459c:	7c 01       	movw	r14, r24
    459e:	8d 01       	movw	r16, r26
    45a0:	e2 1a       	sub	r14, r18
    45a2:	f3 0a       	sbc	r15, r19
    45a4:	04 0b       	sbc	r16, r20
    45a6:	15 0b       	sbc	r17, r21
    45a8:	a8 01       	movw	r20, r16
    45aa:	97 01       	movw	r18, r14
    45ac:	89 85       	ldd	r24, Y+9	; 0x09
    45ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    45b0:	ab 85       	ldd	r26, Y+11	; 0x0b
    45b2:	bc 85       	ldd	r27, Y+12	; 0x0c
    45b4:	28 1b       	sub	r18, r24
    45b6:	39 0b       	sbc	r19, r25
    45b8:	4a 0b       	sbc	r20, r26
    45ba:	5b 0b       	sbc	r21, r27
    45bc:	ee a9       	ldd	r30, Y+54	; 0x36
    45be:	ff a9       	ldd	r31, Y+55	; 0x37
    45c0:	84 81       	ldd	r24, Z+4	; 0x04
    45c2:	95 81       	ldd	r25, Z+5	; 0x05
    45c4:	92 95       	swap	r25
    45c6:	82 95       	swap	r24
    45c8:	8f 70       	andi	r24, 0x0F	; 15
    45ca:	89 27       	eor	r24, r25
    45cc:	9f 70       	andi	r25, 0x0F	; 15
    45ce:	89 27       	eor	r24, r25
    45d0:	cc 01       	movw	r24, r24
    45d2:	a0 e0       	ldi	r26, 0x00	; 0
    45d4:	b0 e0       	ldi	r27, 0x00	; 0
    45d6:	79 01       	movw	r14, r18
    45d8:	8a 01       	movw	r16, r20
    45da:	e8 1a       	sub	r14, r24
    45dc:	f9 0a       	sbc	r15, r25
    45de:	0a 0b       	sbc	r16, r26
    45e0:	1b 0b       	sbc	r17, r27
    45e2:	d8 01       	movw	r26, r16
    45e4:	c7 01       	movw	r24, r14
    45e6:	ee a9       	ldd	r30, Y+54	; 0x36
    45e8:	ff a9       	ldd	r31, Y+55	; 0x37
    45ea:	21 81       	ldd	r18, Z+1	; 0x01
    45ec:	22 2f       	mov	r18, r18
    45ee:	30 e0       	ldi	r19, 0x00	; 0
    45f0:	40 e0       	ldi	r20, 0x00	; 0
    45f2:	50 e0       	ldi	r21, 0x00	; 0
    45f4:	bc 01       	movw	r22, r24
    45f6:	cd 01       	movw	r24, r26
    45f8:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
    45fc:	da 01       	movw	r26, r20
    45fe:	c9 01       	movw	r24, r18
    4600:	02 96       	adiw	r24, 0x02	; 2
    4602:	a1 1d       	adc	r26, r1
    4604:	b1 1d       	adc	r27, r1
    4606:	89 83       	std	Y+1, r24	; 0x01
    4608:	9a 83       	std	Y+2, r25	; 0x02
    460a:	ab 83       	std	Y+3, r26	; 0x03
    460c:	bc 83       	std	Y+4, r27	; 0x04
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->max_clust = (CLUST)mclst;
    460e:	ee a9       	ldd	r30, Y+54	; 0x36
    4610:	ff a9       	ldd	r31, Y+55	; 0x37
    4612:	89 81       	ldd	r24, Y+1	; 0x01
    4614:	9a 81       	ldd	r25, Y+2	; 0x02
    4616:	ab 81       	ldd	r26, Y+3	; 0x03
    4618:	bc 81       	ldd	r27, Y+4	; 0x04
    461a:	80 87       	std	Z+8, r24	; 0x08
    461c:	91 87       	std	Z+9, r25	; 0x09
    461e:	a2 87       	std	Z+10, r26	; 0x0a
    4620:	b3 87       	std	Z+11, r27	; 0x0b

	fmt = FS_FAT12;							/* Determine the FAT sub type */
    4622:	81 e0       	ldi	r24, 0x01	; 1
    4624:	89 8b       	std	Y+17, r24	; 0x11
	if (mclst >= 0xFF7) fmt = FS_FAT16;		/* Number of clusters >= 0xFF5 */
    4626:	89 81       	ldd	r24, Y+1	; 0x01
    4628:	9a 81       	ldd	r25, Y+2	; 0x02
    462a:	ab 81       	ldd	r26, Y+3	; 0x03
    462c:	bc 81       	ldd	r27, Y+4	; 0x04
    462e:	87 3f       	cpi	r24, 0xF7	; 247
    4630:	0f e0       	ldi	r16, 0x0F	; 15
    4632:	90 07       	cpc	r25, r16
    4634:	00 e0       	ldi	r16, 0x00	; 0
    4636:	a0 07       	cpc	r26, r16
    4638:	00 e0       	ldi	r16, 0x00	; 0
    463a:	b0 07       	cpc	r27, r16
    463c:	10 f0       	brcs	.+4      	; 0x4642 <pf_mount+0x2ba>
    463e:	82 e0       	ldi	r24, 0x02	; 2
    4640:	89 8b       	std	Y+17, r24	; 0x11
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
    4642:	89 81       	ldd	r24, Y+1	; 0x01
    4644:	9a 81       	ldd	r25, Y+2	; 0x02
    4646:	ab 81       	ldd	r26, Y+3	; 0x03
    4648:	bc 81       	ldd	r27, Y+4	; 0x04
    464a:	87 3f       	cpi	r24, 0xF7	; 247
    464c:	1f ef       	ldi	r17, 0xFF	; 255
    464e:	91 07       	cpc	r25, r17
    4650:	10 e0       	ldi	r17, 0x00	; 0
    4652:	a1 07       	cpc	r26, r17
    4654:	10 e0       	ldi	r17, 0x00	; 0
    4656:	b1 07       	cpc	r27, r17
    4658:	10 f0       	brcs	.+4      	; 0x465e <pf_mount+0x2d6>
#if _FS_FAT32
		fmt = FS_FAT32;
    465a:	83 e0       	ldi	r24, 0x03	; 3
    465c:	89 8b       	std	Y+17, r24	; 0x11
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
    465e:	ee a9       	ldd	r30, Y+54	; 0x36
    4660:	ff a9       	ldd	r31, Y+55	; 0x37
    4662:	89 89       	ldd	r24, Y+17	; 0x11
    4664:	80 83       	st	Z, r24
#if _FS_FAT32
	if (fmt == FS_FAT32)
    4666:	89 89       	ldd	r24, Y+17	; 0x11
    4668:	83 30       	cpi	r24, 0x03	; 3
    466a:	79 f4       	brne	.+30     	; 0x468a <pf_mount+0x302>
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    466c:	ce 01       	movw	r24, r28
    466e:	42 96       	adiw	r24, 0x12	; 18
    4670:	fc 01       	movw	r30, r24
    4672:	7f 96       	adiw	r30, 0x1f	; 31
    4674:	80 81       	ld	r24, Z
    4676:	91 81       	ldd	r25, Z+1	; 0x01
    4678:	a2 81       	ldd	r26, Z+2	; 0x02
    467a:	b3 81       	ldd	r27, Z+3	; 0x03
    467c:	ee a9       	ldd	r30, Y+54	; 0x36
    467e:	ff a9       	ldd	r31, Y+55	; 0x37
    4680:	80 8b       	std	Z+16, r24	; 0x10
    4682:	91 8b       	std	Z+17, r25	; 0x11
    4684:	a2 8b       	std	Z+18, r26	; 0x12
    4686:	b3 8b       	std	Z+19, r27	; 0x13
    4688:	14 c0       	rjmp	.+40     	; 0x46b2 <pf_mount+0x32a>
	else
#endif
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    468a:	ee a9       	ldd	r30, Y+54	; 0x36
    468c:	ff a9       	ldd	r31, Y+55	; 0x37
    468e:	24 85       	ldd	r18, Z+12	; 0x0c
    4690:	35 85       	ldd	r19, Z+13	; 0x0d
    4692:	46 85       	ldd	r20, Z+14	; 0x0e
    4694:	57 85       	ldd	r21, Z+15	; 0x0f
    4696:	89 85       	ldd	r24, Y+9	; 0x09
    4698:	9a 85       	ldd	r25, Y+10	; 0x0a
    469a:	ab 85       	ldd	r26, Y+11	; 0x0b
    469c:	bc 85       	ldd	r27, Y+12	; 0x0c
    469e:	82 0f       	add	r24, r18
    46a0:	93 1f       	adc	r25, r19
    46a2:	a4 1f       	adc	r26, r20
    46a4:	b5 1f       	adc	r27, r21
    46a6:	ee a9       	ldd	r30, Y+54	; 0x36
    46a8:	ff a9       	ldd	r31, Y+55	; 0x37
    46aa:	80 8b       	std	Z+16, r24	; 0x10
    46ac:	91 8b       	std	Z+17, r25	; 0x11
    46ae:	a2 8b       	std	Z+18, r26	; 0x12
    46b0:	b3 8b       	std	Z+19, r27	; 0x13
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    46b2:	ee a9       	ldd	r30, Y+54	; 0x36
    46b4:	ff a9       	ldd	r31, Y+55	; 0x37
    46b6:	24 85       	ldd	r18, Z+12	; 0x0c
    46b8:	35 85       	ldd	r19, Z+13	; 0x0d
    46ba:	46 85       	ldd	r20, Z+14	; 0x0e
    46bc:	57 85       	ldd	r21, Z+15	; 0x0f
    46be:	89 85       	ldd	r24, Y+9	; 0x09
    46c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    46c2:	ab 85       	ldd	r26, Y+11	; 0x0b
    46c4:	bc 85       	ldd	r27, Y+12	; 0x0c
    46c6:	28 0f       	add	r18, r24
    46c8:	39 1f       	adc	r19, r25
    46ca:	4a 1f       	adc	r20, r26
    46cc:	5b 1f       	adc	r21, r27
    46ce:	ee a9       	ldd	r30, Y+54	; 0x36
    46d0:	ff a9       	ldd	r31, Y+55	; 0x37
    46d2:	84 81       	ldd	r24, Z+4	; 0x04
    46d4:	95 81       	ldd	r25, Z+5	; 0x05
    46d6:	92 95       	swap	r25
    46d8:	82 95       	swap	r24
    46da:	8f 70       	andi	r24, 0x0F	; 15
    46dc:	89 27       	eor	r24, r25
    46de:	9f 70       	andi	r25, 0x0F	; 15
    46e0:	89 27       	eor	r24, r25
    46e2:	cc 01       	movw	r24, r24
    46e4:	a0 e0       	ldi	r26, 0x00	; 0
    46e6:	b0 e0       	ldi	r27, 0x00	; 0
    46e8:	82 0f       	add	r24, r18
    46ea:	93 1f       	adc	r25, r19
    46ec:	a4 1f       	adc	r26, r20
    46ee:	b5 1f       	adc	r27, r21
    46f0:	ee a9       	ldd	r30, Y+54	; 0x36
    46f2:	ff a9       	ldd	r31, Y+55	; 0x37
    46f4:	84 8b       	std	Z+20, r24	; 0x14
    46f6:	95 8b       	std	Z+21, r25	; 0x15
    46f8:	a6 8b       	std	Z+22, r26	; 0x16
    46fa:	b7 8b       	std	Z+23, r27	; 0x17

	fs->flag = 0;
    46fc:	ee a9       	ldd	r30, Y+54	; 0x36
    46fe:	ff a9       	ldd	r31, Y+55	; 0x37
    4700:	12 82       	std	Z+2, r1	; 0x02
	FatFs = fs;
    4702:	8e a9       	ldd	r24, Y+54	; 0x36
    4704:	9f a9       	ldd	r25, Y+55	; 0x37
    4706:	90 93 23 02 	sts	0x0223, r25
    470a:	80 93 22 02 	sts	0x0222, r24

	return FR_OK;
    470e:	18 ae       	std	Y+56, r1	; 0x38
    4710:	88 ad       	ldd	r24, Y+56	; 0x38
}
    4712:	e8 96       	adiw	r28, 0x38	; 56
    4714:	0f b6       	in	r0, 0x3f	; 63
    4716:	f8 94       	cli
    4718:	de bf       	out	0x3e, r29	; 62
    471a:	0f be       	out	0x3f, r0	; 63
    471c:	cd bf       	out	0x3d, r28	; 61
    471e:	cf 91       	pop	r28
    4720:	df 91       	pop	r29
    4722:	1f 91       	pop	r17
    4724:	0f 91       	pop	r16
    4726:	ff 90       	pop	r15
    4728:	ef 90       	pop	r14
    472a:	08 95       	ret

0000472c <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
    472c:	df 93       	push	r29
    472e:	cf 93       	push	r28
    4730:	cd b7       	in	r28, 0x3d	; 61
    4732:	de b7       	in	r29, 0x3e	; 62
    4734:	c2 54       	subi	r28, 0x42	; 66
    4736:	d0 40       	sbci	r29, 0x00	; 0
    4738:	0f b6       	in	r0, 0x3f	; 63
    473a:	f8 94       	cli
    473c:	de bf       	out	0x3e, r29	; 62
    473e:	0f be       	out	0x3f, r0	; 63
    4740:	cd bf       	out	0x3d, r28	; 61
    4742:	fe 01       	movw	r30, r28
    4744:	e0 5c       	subi	r30, 0xC0	; 192
    4746:	ff 4f       	sbci	r31, 0xFF	; 255
    4748:	91 83       	std	Z+1, r25	; 0x01
    474a:	80 83       	st	Z, r24
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    474c:	80 91 22 02 	lds	r24, 0x0222
    4750:	90 91 23 02 	lds	r25, 0x0223
    4754:	9a 83       	std	Y+2, r25	; 0x02
    4756:	89 83       	std	Y+1, r24	; 0x01


	if (!fs)						/* Check file system */
    4758:	89 81       	ldd	r24, Y+1	; 0x01
    475a:	9a 81       	ldd	r25, Y+2	; 0x02
    475c:	00 97       	sbiw	r24, 0x00	; 0
    475e:	29 f4       	brne	.+10     	; 0x476a <pf_open+0x3e>
		return FR_NOT_ENABLED;
    4760:	86 e0       	ldi	r24, 0x06	; 6
    4762:	23 96       	adiw	r28, 0x03	; 3
    4764:	8f af       	std	Y+63, r24	; 0x3f
    4766:	23 97       	sbiw	r28, 0x03	; 3
    4768:	69 c0       	rjmp	.+210    	; 0x483c <pf_open+0x110>

	fs->flag = 0;
    476a:	e9 81       	ldd	r30, Y+1	; 0x01
    476c:	fa 81       	ldd	r31, Y+2	; 0x02
    476e:	12 82       	std	Z+2, r1	; 0x02
	fs->buf = dir;
    4770:	e9 81       	ldd	r30, Y+1	; 0x01
    4772:	fa 81       	ldd	r31, Y+2	; 0x02
    4774:	ce 01       	movw	r24, r28
    4776:	80 96       	adiw	r24, 0x20	; 32
    4778:	97 83       	std	Z+7, r25	; 0x07
    477a:	86 83       	std	Z+6, r24	; 0x06
	dj.fn = sp;
    477c:	ce 01       	movw	r24, r28
    477e:	44 96       	adiw	r24, 0x14	; 20
    4780:	9f 83       	std	Y+7, r25	; 0x07
    4782:	8e 83       	std	Y+6, r24	; 0x06
	res = follow_path(&dj, path);	/* Follow the file path */
    4784:	ce 01       	movw	r24, r28
    4786:	04 96       	adiw	r24, 0x04	; 4
    4788:	fe 01       	movw	r30, r28
    478a:	e0 5c       	subi	r30, 0xC0	; 192
    478c:	ff 4f       	sbci	r31, 0xFF	; 255
    478e:	20 81       	ld	r18, Z
    4790:	31 81       	ldd	r19, Z+1	; 0x01
    4792:	b9 01       	movw	r22, r18
    4794:	0e 94 a7 20 	call	0x414e	; 0x414e <follow_path>
    4798:	8b 83       	std	Y+3, r24	; 0x03
	if (res != FR_OK) return res;	/* Follow failed */
    479a:	8b 81       	ldd	r24, Y+3	; 0x03
    479c:	88 23       	and	r24, r24
    479e:	29 f0       	breq	.+10     	; 0x47aa <pf_open+0x7e>
    47a0:	8b 81       	ldd	r24, Y+3	; 0x03
    47a2:	23 96       	adiw	r28, 0x03	; 3
    47a4:	8f af       	std	Y+63, r24	; 0x3f
    47a6:	23 97       	sbiw	r28, 0x03	; 3
    47a8:	49 c0       	rjmp	.+146    	; 0x483c <pf_open+0x110>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    47aa:	88 a1       	ldd	r24, Y+32	; 0x20
    47ac:	88 23       	and	r24, r24
    47ae:	39 f0       	breq	.+14     	; 0x47be <pf_open+0x92>
    47b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    47b2:	88 2f       	mov	r24, r24
    47b4:	90 e0       	ldi	r25, 0x00	; 0
    47b6:	80 71       	andi	r24, 0x10	; 16
    47b8:	90 70       	andi	r25, 0x00	; 0
    47ba:	00 97       	sbiw	r24, 0x00	; 0
    47bc:	29 f0       	breq	.+10     	; 0x47c8 <pf_open+0x9c>
		return FR_NO_FILE;
    47be:	83 e0       	ldi	r24, 0x03	; 3
    47c0:	23 96       	adiw	r28, 0x03	; 3
    47c2:	8f af       	std	Y+63, r24	; 0x3f
    47c4:	23 97       	sbiw	r28, 0x03	; 3
    47c6:	3a c0       	rjmp	.+116    	; 0x483c <pf_open+0x110>

	fs->org_clust =						/* File start cluster */
    47c8:	ce 01       	movw	r24, r28
    47ca:	80 96       	adiw	r24, 0x20	; 32
    47cc:	fc 01       	movw	r30, r24
    47ce:	74 96       	adiw	r30, 0x14	; 20
    47d0:	80 81       	ld	r24, Z
    47d2:	91 81       	ldd	r25, Z+1	; 0x01
    47d4:	cc 01       	movw	r24, r24
    47d6:	a0 e0       	ldi	r26, 0x00	; 0
    47d8:	b0 e0       	ldi	r27, 0x00	; 0
    47da:	ac 01       	movw	r20, r24
    47dc:	33 27       	eor	r19, r19
    47de:	22 27       	eor	r18, r18
    47e0:	ce 01       	movw	r24, r28
    47e2:	80 96       	adiw	r24, 0x20	; 32
    47e4:	fc 01       	movw	r30, r24
    47e6:	7a 96       	adiw	r30, 0x1a	; 26
    47e8:	80 81       	ld	r24, Z
    47ea:	91 81       	ldd	r25, Z+1	; 0x01
    47ec:	cc 01       	movw	r24, r24
    47ee:	a0 e0       	ldi	r26, 0x00	; 0
    47f0:	b0 e0       	ldi	r27, 0x00	; 0
    47f2:	82 2b       	or	r24, r18
    47f4:	93 2b       	or	r25, r19
    47f6:	a4 2b       	or	r26, r20
    47f8:	b5 2b       	or	r27, r21
    47fa:	e9 81       	ldd	r30, Y+1	; 0x01
    47fc:	fa 81       	ldd	r31, Y+2	; 0x02
    47fe:	80 a3       	std	Z+32, r24	; 0x20
    4800:	91 a3       	std	Z+33, r25	; 0x21
    4802:	a2 a3       	std	Z+34, r26	; 0x22
    4804:	b3 a3       	std	Z+35, r27	; 0x23
#if _FS_FAT32
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) |
#endif
		LD_WORD(dir+DIR_FstClusLO);
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    4806:	ce 01       	movw	r24, r28
    4808:	80 96       	adiw	r24, 0x20	; 32
    480a:	fc 01       	movw	r30, r24
    480c:	7c 96       	adiw	r30, 0x1c	; 28
    480e:	80 81       	ld	r24, Z
    4810:	91 81       	ldd	r25, Z+1	; 0x01
    4812:	a2 81       	ldd	r26, Z+2	; 0x02
    4814:	b3 81       	ldd	r27, Z+3	; 0x03
    4816:	e9 81       	ldd	r30, Y+1	; 0x01
    4818:	fa 81       	ldd	r31, Y+2	; 0x02
    481a:	84 8f       	std	Z+28, r24	; 0x1c
    481c:	95 8f       	std	Z+29, r25	; 0x1d
    481e:	a6 8f       	std	Z+30, r26	; 0x1e
    4820:	b7 8f       	std	Z+31, r27	; 0x1f
	fs->fptr = 0;						/* File pointer */
    4822:	e9 81       	ldd	r30, Y+1	; 0x01
    4824:	fa 81       	ldd	r31, Y+2	; 0x02
    4826:	10 8e       	std	Z+24, r1	; 0x18
    4828:	11 8e       	std	Z+25, r1	; 0x19
    482a:	12 8e       	std	Z+26, r1	; 0x1a
    482c:	13 8e       	std	Z+27, r1	; 0x1b
	fs->flag = FA_OPENED;
    482e:	e9 81       	ldd	r30, Y+1	; 0x01
    4830:	fa 81       	ldd	r31, Y+2	; 0x02
    4832:	81 e0       	ldi	r24, 0x01	; 1
    4834:	82 83       	std	Z+2, r24	; 0x02

	return FR_OK;
    4836:	23 96       	adiw	r28, 0x03	; 3
    4838:	1f ae       	std	Y+63, r1	; 0x3f
    483a:	23 97       	sbiw	r28, 0x03	; 3
    483c:	23 96       	adiw	r28, 0x03	; 3
    483e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4840:	23 97       	sbiw	r28, 0x03	; 3
}
    4842:	ce 5b       	subi	r28, 0xBE	; 190
    4844:	df 4f       	sbci	r29, 0xFF	; 255
    4846:	0f b6       	in	r0, 0x3f	; 63
    4848:	f8 94       	cli
    484a:	de bf       	out	0x3e, r29	; 62
    484c:	0f be       	out	0x3f, r0	; 63
    484e:	cd bf       	out	0x3d, r28	; 61
    4850:	cf 91       	pop	r28
    4852:	df 91       	pop	r29
    4854:	08 95       	ret

00004856 <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
    4856:	ef 92       	push	r14
    4858:	ff 92       	push	r15
    485a:	0f 93       	push	r16
    485c:	1f 93       	push	r17
    485e:	df 93       	push	r29
    4860:	cf 93       	push	r28
    4862:	cd b7       	in	r28, 0x3d	; 61
    4864:	de b7       	in	r29, 0x3e	; 62
    4866:	a0 97       	sbiw	r28, 0x20	; 32
    4868:	0f b6       	in	r0, 0x3f	; 63
    486a:	f8 94       	cli
    486c:	de bf       	out	0x3e, r29	; 62
    486e:	0f be       	out	0x3f, r0	; 63
    4870:	cd bf       	out	0x3d, r28	; 61
    4872:	9d 8b       	std	Y+21, r25	; 0x15
    4874:	8c 8b       	std	Y+20, r24	; 0x14
    4876:	7f 8b       	std	Y+23, r23	; 0x17
    4878:	6e 8b       	std	Y+22, r22	; 0x16
    487a:	59 8f       	std	Y+25, r21	; 0x19
    487c:	48 8f       	std	Y+24, r20	; 0x18
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	BYTE *rbuff = buff;
    487e:	8c 89       	ldd	r24, Y+20	; 0x14
    4880:	9d 89       	ldd	r25, Y+21	; 0x15
    4882:	9e 83       	std	Y+6, r25	; 0x06
    4884:	8d 83       	std	Y+5, r24	; 0x05
	WORD rcnt;
	FATFS *fs = FatFs;
    4886:	80 91 22 02 	lds	r24, 0x0222
    488a:	90 91 23 02 	lds	r25, 0x0223
    488e:	9a 83       	std	Y+2, r25	; 0x02
    4890:	89 83       	std	Y+1, r24	; 0x01


	*br = 0;
    4892:	e8 8d       	ldd	r30, Y+24	; 0x18
    4894:	f9 8d       	ldd	r31, Y+25	; 0x19
    4896:	11 82       	std	Z+1, r1	; 0x01
    4898:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    489a:	89 81       	ldd	r24, Y+1	; 0x01
    489c:	9a 81       	ldd	r25, Y+2	; 0x02
    489e:	00 97       	sbiw	r24, 0x00	; 0
    48a0:	19 f4       	brne	.+6      	; 0x48a8 <pf_read+0x52>
    48a2:	06 e0       	ldi	r16, 0x06	; 6
    48a4:	08 a3       	std	Y+32, r16	; 0x20
    48a6:	5d c1       	rjmp	.+698    	; 0x4b62 <pf_read+0x30c>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    48a8:	e9 81       	ldd	r30, Y+1	; 0x01
    48aa:	fa 81       	ldd	r31, Y+2	; 0x02
    48ac:	82 81       	ldd	r24, Z+2	; 0x02
    48ae:	88 2f       	mov	r24, r24
    48b0:	90 e0       	ldi	r25, 0x00	; 0
    48b2:	81 70       	andi	r24, 0x01	; 1
    48b4:	90 70       	andi	r25, 0x00	; 0
    48b6:	00 97       	sbiw	r24, 0x00	; 0
    48b8:	19 f4       	brne	.+6      	; 0x48c0 <pf_read+0x6a>
		return FR_NOT_OPENED;
    48ba:	15 e0       	ldi	r17, 0x05	; 5
    48bc:	18 a3       	std	Y+32, r17	; 0x20
    48be:	51 c1       	rjmp	.+674    	; 0x4b62 <pf_read+0x30c>

	remain = fs->fsize - fs->fptr;
    48c0:	e9 81       	ldd	r30, Y+1	; 0x01
    48c2:	fa 81       	ldd	r31, Y+2	; 0x02
    48c4:	24 8d       	ldd	r18, Z+28	; 0x1c
    48c6:	35 8d       	ldd	r19, Z+29	; 0x1d
    48c8:	46 8d       	ldd	r20, Z+30	; 0x1e
    48ca:	57 8d       	ldd	r21, Z+31	; 0x1f
    48cc:	e9 81       	ldd	r30, Y+1	; 0x01
    48ce:	fa 81       	ldd	r31, Y+2	; 0x02
    48d0:	80 8d       	ldd	r24, Z+24	; 0x18
    48d2:	91 8d       	ldd	r25, Z+25	; 0x19
    48d4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    48d6:	b3 8d       	ldd	r27, Z+27	; 0x1b
    48d8:	79 01       	movw	r14, r18
    48da:	8a 01       	movw	r16, r20
    48dc:	e8 1a       	sub	r14, r24
    48de:	f9 0a       	sbc	r15, r25
    48e0:	0a 0b       	sbc	r16, r26
    48e2:	1b 0b       	sbc	r17, r27
    48e4:	d8 01       	movw	r26, r16
    48e6:	c7 01       	movw	r24, r14
    48e8:	8f 83       	std	Y+7, r24	; 0x07
    48ea:	98 87       	std	Y+8, r25	; 0x08
    48ec:	a9 87       	std	Y+9, r26	; 0x09
    48ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
    48f0:	8e 89       	ldd	r24, Y+22	; 0x16
    48f2:	9f 89       	ldd	r25, Y+23	; 0x17
    48f4:	9c 01       	movw	r18, r24
    48f6:	40 e0       	ldi	r20, 0x00	; 0
    48f8:	50 e0       	ldi	r21, 0x00	; 0
    48fa:	8f 81       	ldd	r24, Y+7	; 0x07
    48fc:	98 85       	ldd	r25, Y+8	; 0x08
    48fe:	a9 85       	ldd	r26, Y+9	; 0x09
    4900:	ba 85       	ldd	r27, Y+10	; 0x0a
    4902:	82 17       	cp	r24, r18
    4904:	93 07       	cpc	r25, r19
    4906:	a4 07       	cpc	r26, r20
    4908:	b5 07       	cpc	r27, r21
    490a:	08 f0       	brcs	.+2      	; 0x490e <pf_read+0xb8>
    490c:	1e c1       	rjmp	.+572    	; 0x4b4a <pf_read+0x2f4>
    490e:	8f 81       	ldd	r24, Y+7	; 0x07
    4910:	98 85       	ldd	r25, Y+8	; 0x08
    4912:	9f 8b       	std	Y+23, r25	; 0x17
    4914:	8e 8b       	std	Y+22, r24	; 0x16
    4916:	19 c1       	rjmp	.+562    	; 0x4b4a <pf_read+0x2f4>

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
    4918:	e9 81       	ldd	r30, Y+1	; 0x01
    491a:	fa 81       	ldd	r31, Y+2	; 0x02
    491c:	80 8d       	ldd	r24, Z+24	; 0x18
    491e:	91 8d       	ldd	r25, Z+25	; 0x19
    4920:	a2 8d       	ldd	r26, Z+26	; 0x1a
    4922:	b3 8d       	ldd	r27, Z+27	; 0x1b
    4924:	91 70       	andi	r25, 0x01	; 1
    4926:	a0 70       	andi	r26, 0x00	; 0
    4928:	b0 70       	andi	r27, 0x00	; 0
    492a:	00 97       	sbiw	r24, 0x00	; 0
    492c:	a1 05       	cpc	r26, r1
    492e:	b1 05       	cpc	r27, r1
    4930:	09 f0       	breq	.+2      	; 0x4934 <pf_read+0xde>
    4932:	98 c0       	rjmp	.+304    	; 0x4a64 <pf_read+0x20e>
			if ((fs->fptr / 512 % fs->csize) == 0) {	/* On the cluster boundary? */
    4934:	e9 81       	ldd	r30, Y+1	; 0x01
    4936:	fa 81       	ldd	r31, Y+2	; 0x02
    4938:	80 8d       	ldd	r24, Z+24	; 0x18
    493a:	91 8d       	ldd	r25, Z+25	; 0x19
    493c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    493e:	b3 8d       	ldd	r27, Z+27	; 0x1b
    4940:	07 2e       	mov	r0, r23
    4942:	79 e0       	ldi	r23, 0x09	; 9
    4944:	b6 95       	lsr	r27
    4946:	a7 95       	ror	r26
    4948:	97 95       	ror	r25
    494a:	87 95       	ror	r24
    494c:	7a 95       	dec	r23
    494e:	d1 f7       	brne	.-12     	; 0x4944 <pf_read+0xee>
    4950:	70 2d       	mov	r23, r0
    4952:	e9 81       	ldd	r30, Y+1	; 0x01
    4954:	fa 81       	ldd	r31, Y+2	; 0x02
    4956:	21 81       	ldd	r18, Z+1	; 0x01
    4958:	22 2f       	mov	r18, r18
    495a:	30 e0       	ldi	r19, 0x00	; 0
    495c:	40 e0       	ldi	r20, 0x00	; 0
    495e:	50 e0       	ldi	r21, 0x00	; 0
    4960:	bc 01       	movw	r22, r24
    4962:	cd 01       	movw	r24, r26
    4964:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
    4968:	dc 01       	movw	r26, r24
    496a:	cb 01       	movw	r24, r22
    496c:	00 97       	sbiw	r24, 0x00	; 0
    496e:	a1 05       	cpc	r26, r1
    4970:	b1 05       	cpc	r27, r1
    4972:	09 f0       	breq	.+2      	; 0x4976 <pf_read+0x120>
    4974:	44 c0       	rjmp	.+136    	; 0x49fe <pf_read+0x1a8>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    4976:	e9 81       	ldd	r30, Y+1	; 0x01
    4978:	fa 81       	ldd	r31, Y+2	; 0x02
    497a:	80 8d       	ldd	r24, Z+24	; 0x18
    497c:	91 8d       	ldd	r25, Z+25	; 0x19
    497e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    4980:	b3 8d       	ldd	r27, Z+27	; 0x1b
    4982:	00 97       	sbiw	r24, 0x00	; 0
    4984:	a1 05       	cpc	r26, r1
    4986:	b1 05       	cpc	r27, r1
    4988:	59 f4       	brne	.+22     	; 0x49a0 <pf_read+0x14a>
    498a:	e9 81       	ldd	r30, Y+1	; 0x01
    498c:	fa 81       	ldd	r31, Y+2	; 0x02
    498e:	80 a1       	ldd	r24, Z+32	; 0x20
    4990:	91 a1       	ldd	r25, Z+33	; 0x21
    4992:	a2 a1       	ldd	r26, Z+34	; 0x22
    4994:	b3 a1       	ldd	r27, Z+35	; 0x23
    4996:	8c 8f       	std	Y+28, r24	; 0x1c
    4998:	9d 8f       	std	Y+29, r25	; 0x1d
    499a:	ae 8f       	std	Y+30, r26	; 0x1e
    499c:	bf 8f       	std	Y+31, r27	; 0x1f
    499e:	10 c0       	rjmp	.+32     	; 0x49c0 <pf_read+0x16a>
    49a0:	e9 81       	ldd	r30, Y+1	; 0x01
    49a2:	fa 81       	ldd	r31, Y+2	; 0x02
    49a4:	84 a1       	ldd	r24, Z+36	; 0x24
    49a6:	95 a1       	ldd	r25, Z+37	; 0x25
    49a8:	a6 a1       	ldd	r26, Z+38	; 0x26
    49aa:	b7 a1       	ldd	r27, Z+39	; 0x27
    49ac:	bc 01       	movw	r22, r24
    49ae:	cd 01       	movw	r24, r26
    49b0:	0e 94 22 1b 	call	0x3644	; 0x3644 <get_fat>
    49b4:	dc 01       	movw	r26, r24
    49b6:	cb 01       	movw	r24, r22
    49b8:	8c 8f       	std	Y+28, r24	; 0x1c
    49ba:	9d 8f       	std	Y+29, r25	; 0x1d
    49bc:	ae 8f       	std	Y+30, r26	; 0x1e
    49be:	bf 8f       	std	Y+31, r27	; 0x1f
    49c0:	ec 8c       	ldd	r14, Y+28	; 0x1c
    49c2:	fd 8c       	ldd	r15, Y+29	; 0x1d
    49c4:	0e 8d       	ldd	r16, Y+30	; 0x1e
    49c6:	1f 8d       	ldd	r17, Y+31	; 0x1f
    49c8:	ef 86       	std	Y+15, r14	; 0x0f
    49ca:	f8 8a       	std	Y+16, r15	; 0x10
    49cc:	09 8b       	std	Y+17, r16	; 0x11
    49ce:	1a 8b       	std	Y+18, r17	; 0x12
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
    49d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    49d2:	98 89       	ldd	r25, Y+16	; 0x10
    49d4:	a9 89       	ldd	r26, Y+17	; 0x11
    49d6:	ba 89       	ldd	r27, Y+18	; 0x12
    49d8:	82 30       	cpi	r24, 0x02	; 2
    49da:	91 05       	cpc	r25, r1
    49dc:	a1 05       	cpc	r26, r1
    49de:	b1 05       	cpc	r27, r1
    49e0:	08 f4       	brcc	.+2      	; 0x49e4 <pf_read+0x18e>
    49e2:	ba c0       	rjmp	.+372    	; 0x4b58 <pf_read+0x302>
				fs->curr_clust = clst;				/* Update current cluster */
    49e4:	e9 81       	ldd	r30, Y+1	; 0x01
    49e6:	fa 81       	ldd	r31, Y+2	; 0x02
    49e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    49ea:	98 89       	ldd	r25, Y+16	; 0x10
    49ec:	a9 89       	ldd	r26, Y+17	; 0x11
    49ee:	ba 89       	ldd	r27, Y+18	; 0x12
    49f0:	84 a3       	std	Z+36, r24	; 0x24
    49f2:	95 a3       	std	Z+37, r25	; 0x25
    49f4:	a6 a3       	std	Z+38, r26	; 0x26
    49f6:	b7 a3       	std	Z+39, r27	; 0x27
				fs->csect = 0;						/* Reset sector offset in the cluster */
    49f8:	e9 81       	ldd	r30, Y+1	; 0x01
    49fa:	fa 81       	ldd	r31, Y+2	; 0x02
    49fc:	13 82       	std	Z+3, r1	; 0x03
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
    49fe:	e9 81       	ldd	r30, Y+1	; 0x01
    4a00:	fa 81       	ldd	r31, Y+2	; 0x02
    4a02:	84 a1       	ldd	r24, Z+36	; 0x24
    4a04:	95 a1       	ldd	r25, Z+37	; 0x25
    4a06:	a6 a1       	ldd	r26, Z+38	; 0x26
    4a08:	b7 a1       	ldd	r27, Z+39	; 0x27
    4a0a:	bc 01       	movw	r22, r24
    4a0c:	cd 01       	movw	r24, r26
    4a0e:	0e 94 a4 1c 	call	0x3948	; 0x3948 <clust2sect>
    4a12:	dc 01       	movw	r26, r24
    4a14:	cb 01       	movw	r24, r22
    4a16:	8b 87       	std	Y+11, r24	; 0x0b
    4a18:	9c 87       	std	Y+12, r25	; 0x0c
    4a1a:	ad 87       	std	Y+13, r26	; 0x0d
    4a1c:	be 87       	std	Y+14, r27	; 0x0e
			if (!sect) goto fr_abort;
    4a1e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a20:	9c 85       	ldd	r25, Y+12	; 0x0c
    4a22:	ad 85       	ldd	r26, Y+13	; 0x0d
    4a24:	be 85       	ldd	r27, Y+14	; 0x0e
    4a26:	00 97       	sbiw	r24, 0x00	; 0
    4a28:	a1 05       	cpc	r26, r1
    4a2a:	b1 05       	cpc	r27, r1
    4a2c:	09 f4       	brne	.+2      	; 0x4a30 <pf_read+0x1da>
    4a2e:	94 c0       	rjmp	.+296    	; 0x4b58 <pf_read+0x302>
			fs->dsect = sect + fs->csect++;
    4a30:	e9 81       	ldd	r30, Y+1	; 0x01
    4a32:	fa 81       	ldd	r31, Y+2	; 0x02
    4a34:	63 81       	ldd	r22, Z+3	; 0x03
    4a36:	26 2f       	mov	r18, r22
    4a38:	30 e0       	ldi	r19, 0x00	; 0
    4a3a:	40 e0       	ldi	r20, 0x00	; 0
    4a3c:	50 e0       	ldi	r21, 0x00	; 0
    4a3e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a40:	9c 85       	ldd	r25, Y+12	; 0x0c
    4a42:	ad 85       	ldd	r26, Y+13	; 0x0d
    4a44:	be 85       	ldd	r27, Y+14	; 0x0e
    4a46:	82 0f       	add	r24, r18
    4a48:	93 1f       	adc	r25, r19
    4a4a:	a4 1f       	adc	r26, r20
    4a4c:	b5 1f       	adc	r27, r21
    4a4e:	e9 81       	ldd	r30, Y+1	; 0x01
    4a50:	fa 81       	ldd	r31, Y+2	; 0x02
    4a52:	80 a7       	std	Z+40, r24	; 0x28
    4a54:	91 a7       	std	Z+41, r25	; 0x29
    4a56:	a2 a7       	std	Z+42, r26	; 0x2a
    4a58:	b3 a7       	std	Z+43, r27	; 0x2b
    4a5a:	86 2f       	mov	r24, r22
    4a5c:	8f 5f       	subi	r24, 0xFF	; 255
    4a5e:	e9 81       	ldd	r30, Y+1	; 0x01
    4a60:	fa 81       	ldd	r31, Y+2	; 0x02
    4a62:	83 83       	std	Z+3, r24	; 0x03
		}
		rcnt = 512 - ((WORD)fs->fptr % 512);		/* Get partial sector data from sector buffer */
    4a64:	e9 81       	ldd	r30, Y+1	; 0x01
    4a66:	fa 81       	ldd	r31, Y+2	; 0x02
    4a68:	80 8d       	ldd	r24, Z+24	; 0x18
    4a6a:	91 8d       	ldd	r25, Z+25	; 0x19
    4a6c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    4a6e:	b3 8d       	ldd	r27, Z+27	; 0x1b
    4a70:	9c 01       	movw	r18, r24
    4a72:	31 70       	andi	r19, 0x01	; 1
    4a74:	80 e0       	ldi	r24, 0x00	; 0
    4a76:	92 e0       	ldi	r25, 0x02	; 2
    4a78:	82 1b       	sub	r24, r18
    4a7a:	93 0b       	sbc	r25, r19
    4a7c:	9c 83       	std	Y+4, r25	; 0x04
    4a7e:	8b 83       	std	Y+3, r24	; 0x03
		if (rcnt > btr) rcnt = btr;
    4a80:	2b 81       	ldd	r18, Y+3	; 0x03
    4a82:	3c 81       	ldd	r19, Y+4	; 0x04
    4a84:	8e 89       	ldd	r24, Y+22	; 0x16
    4a86:	9f 89       	ldd	r25, Y+23	; 0x17
    4a88:	82 17       	cp	r24, r18
    4a8a:	93 07       	cpc	r25, r19
    4a8c:	20 f4       	brcc	.+8      	; 0x4a96 <pf_read+0x240>
    4a8e:	8e 89       	ldd	r24, Y+22	; 0x16
    4a90:	9f 89       	ldd	r25, Y+23	; 0x17
    4a92:	9c 83       	std	Y+4, r25	; 0x04
    4a94:	8b 83       	std	Y+3, r24	; 0x03
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
    4a96:	8c 89       	ldd	r24, Y+20	; 0x14
    4a98:	9d 89       	ldd	r25, Y+21	; 0x15
    4a9a:	00 97       	sbiw	r24, 0x00	; 0
    4a9c:	29 f0       	breq	.+10     	; 0x4aa8 <pf_read+0x252>
    4a9e:	0d 81       	ldd	r16, Y+5	; 0x05
    4aa0:	1e 81       	ldd	r17, Y+6	; 0x06
    4aa2:	1b 8f       	std	Y+27, r17	; 0x1b
    4aa4:	0a 8f       	std	Y+26, r16	; 0x1a
    4aa6:	02 c0       	rjmp	.+4      	; 0x4aac <pf_read+0x256>
    4aa8:	1b 8e       	std	Y+27, r1	; 0x1b
    4aaa:	1a 8e       	std	Y+26, r1	; 0x1a
    4aac:	e9 81       	ldd	r30, Y+1	; 0x01
    4aae:	fa 81       	ldd	r31, Y+2	; 0x02
    4ab0:	20 a5       	ldd	r18, Z+40	; 0x28
    4ab2:	31 a5       	ldd	r19, Z+41	; 0x29
    4ab4:	42 a5       	ldd	r20, Z+42	; 0x2a
    4ab6:	53 a5       	ldd	r21, Z+43	; 0x2b
    4ab8:	e9 81       	ldd	r30, Y+1	; 0x01
    4aba:	fa 81       	ldd	r31, Y+2	; 0x02
    4abc:	80 8d       	ldd	r24, Z+24	; 0x18
    4abe:	91 8d       	ldd	r25, Z+25	; 0x19
    4ac0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    4ac2:	b3 8d       	ldd	r27, Z+27	; 0x1b
    4ac4:	fc 01       	movw	r30, r24
    4ac6:	f1 70       	andi	r31, 0x01	; 1
    4ac8:	ab 81       	ldd	r26, Y+3	; 0x03
    4aca:	bc 81       	ldd	r27, Y+4	; 0x04
    4acc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4ace:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4ad0:	ba 01       	movw	r22, r20
    4ad2:	a9 01       	movw	r20, r18
    4ad4:	9f 01       	movw	r18, r30
    4ad6:	8d 01       	movw	r16, r26
    4ad8:	0e 94 ef 18 	call	0x31de	; 0x31de <disk_readp>
    4adc:	8b 8b       	std	Y+19, r24	; 0x13
		if (dr) goto fr_abort;
    4ade:	8b 89       	ldd	r24, Y+19	; 0x13
    4ae0:	88 23       	and	r24, r24
    4ae2:	d1 f5       	brne	.+116    	; 0x4b58 <pf_read+0x302>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
    4ae4:	e9 81       	ldd	r30, Y+1	; 0x01
    4ae6:	fa 81       	ldd	r31, Y+2	; 0x02
    4ae8:	20 8d       	ldd	r18, Z+24	; 0x18
    4aea:	31 8d       	ldd	r19, Z+25	; 0x19
    4aec:	42 8d       	ldd	r20, Z+26	; 0x1a
    4aee:	53 8d       	ldd	r21, Z+27	; 0x1b
    4af0:	8b 81       	ldd	r24, Y+3	; 0x03
    4af2:	9c 81       	ldd	r25, Y+4	; 0x04
    4af4:	cc 01       	movw	r24, r24
    4af6:	a0 e0       	ldi	r26, 0x00	; 0
    4af8:	b0 e0       	ldi	r27, 0x00	; 0
    4afa:	82 0f       	add	r24, r18
    4afc:	93 1f       	adc	r25, r19
    4afe:	a4 1f       	adc	r26, r20
    4b00:	b5 1f       	adc	r27, r21
    4b02:	e9 81       	ldd	r30, Y+1	; 0x01
    4b04:	fa 81       	ldd	r31, Y+2	; 0x02
    4b06:	80 8f       	std	Z+24, r24	; 0x18
    4b08:	91 8f       	std	Z+25, r25	; 0x19
    4b0a:	a2 8f       	std	Z+26, r26	; 0x1a
    4b0c:	b3 8f       	std	Z+27, r27	; 0x1b
    4b0e:	2d 81       	ldd	r18, Y+5	; 0x05
    4b10:	3e 81       	ldd	r19, Y+6	; 0x06
    4b12:	8b 81       	ldd	r24, Y+3	; 0x03
    4b14:	9c 81       	ldd	r25, Y+4	; 0x04
    4b16:	82 0f       	add	r24, r18
    4b18:	93 1f       	adc	r25, r19
    4b1a:	9e 83       	std	Y+6, r25	; 0x06
    4b1c:	8d 83       	std	Y+5, r24	; 0x05
		btr -= rcnt; *br += rcnt;
    4b1e:	2e 89       	ldd	r18, Y+22	; 0x16
    4b20:	3f 89       	ldd	r19, Y+23	; 0x17
    4b22:	8b 81       	ldd	r24, Y+3	; 0x03
    4b24:	9c 81       	ldd	r25, Y+4	; 0x04
    4b26:	a9 01       	movw	r20, r18
    4b28:	48 1b       	sub	r20, r24
    4b2a:	59 0b       	sbc	r21, r25
    4b2c:	ca 01       	movw	r24, r20
    4b2e:	9f 8b       	std	Y+23, r25	; 0x17
    4b30:	8e 8b       	std	Y+22, r24	; 0x16
    4b32:	e8 8d       	ldd	r30, Y+24	; 0x18
    4b34:	f9 8d       	ldd	r31, Y+25	; 0x19
    4b36:	20 81       	ld	r18, Z
    4b38:	31 81       	ldd	r19, Z+1	; 0x01
    4b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    4b3e:	82 0f       	add	r24, r18
    4b40:	93 1f       	adc	r25, r19
    4b42:	e8 8d       	ldd	r30, Y+24	; 0x18
    4b44:	f9 8d       	ldd	r31, Y+25	; 0x19
    4b46:	91 83       	std	Z+1, r25	; 0x01
    4b48:	80 83       	st	Z, r24
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
    4b4a:	8e 89       	ldd	r24, Y+22	; 0x16
    4b4c:	9f 89       	ldd	r25, Y+23	; 0x17
    4b4e:	00 97       	sbiw	r24, 0x00	; 0
    4b50:	09 f0       	breq	.+2      	; 0x4b54 <pf_read+0x2fe>
    4b52:	e2 ce       	rjmp	.-572    	; 0x4918 <pf_read+0xc2>
		if (dr) goto fr_abort;
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
		btr -= rcnt; *br += rcnt;
	}

	return FR_OK;
    4b54:	18 a2       	std	Y+32, r1	; 0x20
    4b56:	05 c0       	rjmp	.+10     	; 0x4b62 <pf_read+0x30c>

fr_abort:
	fs->flag = 0;
    4b58:	e9 81       	ldd	r30, Y+1	; 0x01
    4b5a:	fa 81       	ldd	r31, Y+2	; 0x02
    4b5c:	12 82       	std	Z+2, r1	; 0x02
	return FR_DISK_ERR;
    4b5e:	51 e0       	ldi	r21, 0x01	; 1
    4b60:	58 a3       	std	Y+32, r21	; 0x20
    4b62:	88 a1       	ldd	r24, Y+32	; 0x20
}
    4b64:	a0 96       	adiw	r28, 0x20	; 32
    4b66:	0f b6       	in	r0, 0x3f	; 63
    4b68:	f8 94       	cli
    4b6a:	de bf       	out	0x3e, r29	; 62
    4b6c:	0f be       	out	0x3f, r0	; 63
    4b6e:	cd bf       	out	0x3d, r28	; 61
    4b70:	cf 91       	pop	r28
    4b72:	df 91       	pop	r29
    4b74:	1f 91       	pop	r17
    4b76:	0f 91       	pop	r16
    4b78:	ff 90       	pop	r15
    4b7a:	ef 90       	pop	r14
    4b7c:	08 95       	ret

00004b7e <pf_write>:
FRESULT pf_write (
	const void* buff,	/* Pointer to the data to be written */
	WORD btw,			/* Number of bytes to write (0:Finalize the current write operation) */
	WORD* bw			/* Pointer to number of bytes written */
)
{
    4b7e:	ef 92       	push	r14
    4b80:	ff 92       	push	r15
    4b82:	0f 93       	push	r16
    4b84:	1f 93       	push	r17
    4b86:	df 93       	push	r29
    4b88:	cf 93       	push	r28
    4b8a:	cd b7       	in	r28, 0x3d	; 61
    4b8c:	de b7       	in	r29, 0x3e	; 62
    4b8e:	6d 97       	sbiw	r28, 0x1d	; 29
    4b90:	0f b6       	in	r0, 0x3f	; 63
    4b92:	f8 94       	cli
    4b94:	de bf       	out	0x3e, r29	; 62
    4b96:	0f be       	out	0x3f, r0	; 63
    4b98:	cd bf       	out	0x3d, r28	; 61
    4b9a:	9c 8b       	std	Y+20, r25	; 0x14
    4b9c:	8b 8b       	std	Y+19, r24	; 0x13
    4b9e:	7e 8b       	std	Y+22, r23	; 0x16
    4ba0:	6d 8b       	std	Y+21, r22	; 0x15
    4ba2:	58 8f       	std	Y+24, r21	; 0x18
    4ba4:	4f 8b       	std	Y+23, r20	; 0x17
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
    4ba6:	8b 89       	ldd	r24, Y+19	; 0x13
    4ba8:	9c 89       	ldd	r25, Y+20	; 0x14
    4baa:	9e 83       	std	Y+6, r25	; 0x06
    4bac:	8d 83       	std	Y+5, r24	; 0x05
	WORD wcnt;
	FATFS *fs = FatFs;
    4bae:	80 91 22 02 	lds	r24, 0x0222
    4bb2:	90 91 23 02 	lds	r25, 0x0223
    4bb6:	9a 83       	std	Y+2, r25	; 0x02
    4bb8:	89 83       	std	Y+1, r24	; 0x01


	*bw = 0;
    4bba:	ef 89       	ldd	r30, Y+23	; 0x17
    4bbc:	f8 8d       	ldd	r31, Y+24	; 0x18
    4bbe:	11 82       	std	Z+1, r1	; 0x01
    4bc0:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    4bc2:	89 81       	ldd	r24, Y+1	; 0x01
    4bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    4bc6:	00 97       	sbiw	r24, 0x00	; 0
    4bc8:	19 f4       	brne	.+6      	; 0x4bd0 <pf_write+0x52>
    4bca:	06 e0       	ldi	r16, 0x06	; 6
    4bcc:	0d 8f       	std	Y+29, r16	; 0x1d
    4bce:	a8 c1       	rjmp	.+848    	; 0x4f20 <pf_write+0x3a2>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    4bd0:	e9 81       	ldd	r30, Y+1	; 0x01
    4bd2:	fa 81       	ldd	r31, Y+2	; 0x02
    4bd4:	82 81       	ldd	r24, Z+2	; 0x02
    4bd6:	88 2f       	mov	r24, r24
    4bd8:	90 e0       	ldi	r25, 0x00	; 0
    4bda:	81 70       	andi	r24, 0x01	; 1
    4bdc:	90 70       	andi	r25, 0x00	; 0
    4bde:	00 97       	sbiw	r24, 0x00	; 0
    4be0:	19 f4       	brne	.+6      	; 0x4be8 <pf_write+0x6a>
		return FR_NOT_OPENED;
    4be2:	15 e0       	ldi	r17, 0x05	; 5
    4be4:	1d 8f       	std	Y+29, r17	; 0x1d
    4be6:	9c c1       	rjmp	.+824    	; 0x4f20 <pf_write+0x3a2>

	if (!btw) {		/* Finalize request */
    4be8:	8d 89       	ldd	r24, Y+21	; 0x15
    4bea:	9e 89       	ldd	r25, Y+22	; 0x16
    4bec:	00 97       	sbiw	r24, 0x00	; 0
    4bee:	e9 f4       	brne	.+58     	; 0x4c2a <pf_write+0xac>
		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) goto fw_abort;
    4bf0:	e9 81       	ldd	r30, Y+1	; 0x01
    4bf2:	fa 81       	ldd	r31, Y+2	; 0x02
    4bf4:	82 81       	ldd	r24, Z+2	; 0x02
    4bf6:	88 2f       	mov	r24, r24
    4bf8:	90 e0       	ldi	r25, 0x00	; 0
    4bfa:	80 74       	andi	r24, 0x40	; 64
    4bfc:	90 70       	andi	r25, 0x00	; 0
    4bfe:	00 97       	sbiw	r24, 0x00	; 0
    4c00:	59 f0       	breq	.+22     	; 0x4c18 <pf_write+0x9a>
    4c02:	80 e0       	ldi	r24, 0x00	; 0
    4c04:	90 e0       	ldi	r25, 0x00	; 0
    4c06:	40 e0       	ldi	r20, 0x00	; 0
    4c08:	50 e0       	ldi	r21, 0x00	; 0
    4c0a:	60 e0       	ldi	r22, 0x00	; 0
    4c0c:	70 e0       	ldi	r23, 0x00	; 0
    4c0e:	0e 94 93 19 	call	0x3326	; 0x3326 <disk_writep>
    4c12:	88 23       	and	r24, r24
    4c14:	09 f0       	breq	.+2      	; 0x4c18 <pf_write+0x9a>
    4c16:	7f c1       	rjmp	.+766    	; 0x4f16 <pf_write+0x398>
		fs->flag &= ~FA__WIP;
    4c18:	e9 81       	ldd	r30, Y+1	; 0x01
    4c1a:	fa 81       	ldd	r31, Y+2	; 0x02
    4c1c:	82 81       	ldd	r24, Z+2	; 0x02
    4c1e:	8f 7b       	andi	r24, 0xBF	; 191
    4c20:	e9 81       	ldd	r30, Y+1	; 0x01
    4c22:	fa 81       	ldd	r31, Y+2	; 0x02
    4c24:	82 83       	std	Z+2, r24	; 0x02
		return FR_OK;
    4c26:	1d 8e       	std	Y+29, r1	; 0x1d
    4c28:	7b c1       	rjmp	.+758    	; 0x4f20 <pf_write+0x3a2>
	} else {		/* Write data request */
		if (!(fs->flag & FA__WIP))		/* Round down fptr to the sector boundary */
    4c2a:	e9 81       	ldd	r30, Y+1	; 0x01
    4c2c:	fa 81       	ldd	r31, Y+2	; 0x02
    4c2e:	82 81       	ldd	r24, Z+2	; 0x02
    4c30:	88 2f       	mov	r24, r24
    4c32:	90 e0       	ldi	r25, 0x00	; 0
    4c34:	80 74       	andi	r24, 0x40	; 64
    4c36:	90 70       	andi	r25, 0x00	; 0
    4c38:	00 97       	sbiw	r24, 0x00	; 0
    4c3a:	71 f4       	brne	.+28     	; 0x4c58 <pf_write+0xda>
			fs->fptr &= 0xFFFFFE00;
    4c3c:	e9 81       	ldd	r30, Y+1	; 0x01
    4c3e:	fa 81       	ldd	r31, Y+2	; 0x02
    4c40:	80 8d       	ldd	r24, Z+24	; 0x18
    4c42:	91 8d       	ldd	r25, Z+25	; 0x19
    4c44:	a2 8d       	ldd	r26, Z+26	; 0x1a
    4c46:	b3 8d       	ldd	r27, Z+27	; 0x1b
    4c48:	80 70       	andi	r24, 0x00	; 0
    4c4a:	9e 7f       	andi	r25, 0xFE	; 254
    4c4c:	e9 81       	ldd	r30, Y+1	; 0x01
    4c4e:	fa 81       	ldd	r31, Y+2	; 0x02
    4c50:	80 8f       	std	Z+24, r24	; 0x18
    4c52:	91 8f       	std	Z+25, r25	; 0x19
    4c54:	a2 8f       	std	Z+26, r26	; 0x1a
    4c56:	b3 8f       	std	Z+27, r27	; 0x1b
	}
	remain = fs->fsize - fs->fptr;
    4c58:	e9 81       	ldd	r30, Y+1	; 0x01
    4c5a:	fa 81       	ldd	r31, Y+2	; 0x02
    4c5c:	24 8d       	ldd	r18, Z+28	; 0x1c
    4c5e:	35 8d       	ldd	r19, Z+29	; 0x1d
    4c60:	46 8d       	ldd	r20, Z+30	; 0x1e
    4c62:	57 8d       	ldd	r21, Z+31	; 0x1f
    4c64:	e9 81       	ldd	r30, Y+1	; 0x01
    4c66:	fa 81       	ldd	r31, Y+2	; 0x02
    4c68:	80 8d       	ldd	r24, Z+24	; 0x18
    4c6a:	91 8d       	ldd	r25, Z+25	; 0x19
    4c6c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    4c6e:	b3 8d       	ldd	r27, Z+27	; 0x1b
    4c70:	79 01       	movw	r14, r18
    4c72:	8a 01       	movw	r16, r20
    4c74:	e8 1a       	sub	r14, r24
    4c76:	f9 0a       	sbc	r15, r25
    4c78:	0a 0b       	sbc	r16, r26
    4c7a:	1b 0b       	sbc	r17, r27
    4c7c:	d8 01       	movw	r26, r16
    4c7e:	c7 01       	movw	r24, r14
    4c80:	8f 83       	std	Y+7, r24	; 0x07
    4c82:	98 87       	std	Y+8, r25	; 0x08
    4c84:	a9 87       	std	Y+9, r26	; 0x09
    4c86:	ba 87       	std	Y+10, r27	; 0x0a
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */
    4c88:	8d 89       	ldd	r24, Y+21	; 0x15
    4c8a:	9e 89       	ldd	r25, Y+22	; 0x16
    4c8c:	9c 01       	movw	r18, r24
    4c8e:	40 e0       	ldi	r20, 0x00	; 0
    4c90:	50 e0       	ldi	r21, 0x00	; 0
    4c92:	8f 81       	ldd	r24, Y+7	; 0x07
    4c94:	98 85       	ldd	r25, Y+8	; 0x08
    4c96:	a9 85       	ldd	r26, Y+9	; 0x09
    4c98:	ba 85       	ldd	r27, Y+10	; 0x0a
    4c9a:	82 17       	cp	r24, r18
    4c9c:	93 07       	cpc	r25, r19
    4c9e:	a4 07       	cpc	r26, r20
    4ca0:	b5 07       	cpc	r27, r21
    4ca2:	08 f0       	brcs	.+2      	; 0x4ca6 <pf_write+0x128>
    4ca4:	31 c1       	rjmp	.+610    	; 0x4f08 <pf_write+0x38a>
    4ca6:	8f 81       	ldd	r24, Y+7	; 0x07
    4ca8:	98 85       	ldd	r25, Y+8	; 0x08
    4caa:	9e 8b       	std	Y+22, r25	; 0x16
    4cac:	8d 8b       	std	Y+21, r24	; 0x15
    4cae:	2c c1       	rjmp	.+600    	; 0x4f08 <pf_write+0x38a>

	while (btw)	{									/* Repeat until all data transferred */
		if (((WORD)fs->fptr % 512) == 0) {				/* On the sector boundary? */
    4cb0:	e9 81       	ldd	r30, Y+1	; 0x01
    4cb2:	fa 81       	ldd	r31, Y+2	; 0x02
    4cb4:	80 8d       	ldd	r24, Z+24	; 0x18
    4cb6:	91 8d       	ldd	r25, Z+25	; 0x19
    4cb8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    4cba:	b3 8d       	ldd	r27, Z+27	; 0x1b
    4cbc:	91 70       	andi	r25, 0x01	; 1
    4cbe:	00 97       	sbiw	r24, 0x00	; 0
    4cc0:	09 f0       	breq	.+2      	; 0x4cc4 <pf_write+0x146>
    4cc2:	ae c0       	rjmp	.+348    	; 0x4e20 <pf_write+0x2a2>
			if ((fs->fptr / 512 % fs->csize) == 0) {	/* On the cluster boundary? */
    4cc4:	e9 81       	ldd	r30, Y+1	; 0x01
    4cc6:	fa 81       	ldd	r31, Y+2	; 0x02
    4cc8:	80 8d       	ldd	r24, Z+24	; 0x18
    4cca:	91 8d       	ldd	r25, Z+25	; 0x19
    4ccc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    4cce:	b3 8d       	ldd	r27, Z+27	; 0x1b
    4cd0:	07 2e       	mov	r0, r23
    4cd2:	79 e0       	ldi	r23, 0x09	; 9
    4cd4:	b6 95       	lsr	r27
    4cd6:	a7 95       	ror	r26
    4cd8:	97 95       	ror	r25
    4cda:	87 95       	ror	r24
    4cdc:	7a 95       	dec	r23
    4cde:	d1 f7       	brne	.-12     	; 0x4cd4 <pf_write+0x156>
    4ce0:	70 2d       	mov	r23, r0
    4ce2:	e9 81       	ldd	r30, Y+1	; 0x01
    4ce4:	fa 81       	ldd	r31, Y+2	; 0x02
    4ce6:	21 81       	ldd	r18, Z+1	; 0x01
    4ce8:	22 2f       	mov	r18, r18
    4cea:	30 e0       	ldi	r19, 0x00	; 0
    4cec:	40 e0       	ldi	r20, 0x00	; 0
    4cee:	50 e0       	ldi	r21, 0x00	; 0
    4cf0:	bc 01       	movw	r22, r24
    4cf2:	cd 01       	movw	r24, r26
    4cf4:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
    4cf8:	dc 01       	movw	r26, r24
    4cfa:	cb 01       	movw	r24, r22
    4cfc:	00 97       	sbiw	r24, 0x00	; 0
    4cfe:	a1 05       	cpc	r26, r1
    4d00:	b1 05       	cpc	r27, r1
    4d02:	09 f0       	breq	.+2      	; 0x4d06 <pf_write+0x188>
    4d04:	44 c0       	rjmp	.+136    	; 0x4d8e <pf_write+0x210>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    4d06:	e9 81       	ldd	r30, Y+1	; 0x01
    4d08:	fa 81       	ldd	r31, Y+2	; 0x02
    4d0a:	80 8d       	ldd	r24, Z+24	; 0x18
    4d0c:	91 8d       	ldd	r25, Z+25	; 0x19
    4d0e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    4d10:	b3 8d       	ldd	r27, Z+27	; 0x1b
    4d12:	00 97       	sbiw	r24, 0x00	; 0
    4d14:	a1 05       	cpc	r26, r1
    4d16:	b1 05       	cpc	r27, r1
    4d18:	59 f4       	brne	.+22     	; 0x4d30 <pf_write+0x1b2>
    4d1a:	e9 81       	ldd	r30, Y+1	; 0x01
    4d1c:	fa 81       	ldd	r31, Y+2	; 0x02
    4d1e:	80 a1       	ldd	r24, Z+32	; 0x20
    4d20:	91 a1       	ldd	r25, Z+33	; 0x21
    4d22:	a2 a1       	ldd	r26, Z+34	; 0x22
    4d24:	b3 a1       	ldd	r27, Z+35	; 0x23
    4d26:	89 8f       	std	Y+25, r24	; 0x19
    4d28:	9a 8f       	std	Y+26, r25	; 0x1a
    4d2a:	ab 8f       	std	Y+27, r26	; 0x1b
    4d2c:	bc 8f       	std	Y+28, r27	; 0x1c
    4d2e:	10 c0       	rjmp	.+32     	; 0x4d50 <pf_write+0x1d2>
    4d30:	e9 81       	ldd	r30, Y+1	; 0x01
    4d32:	fa 81       	ldd	r31, Y+2	; 0x02
    4d34:	84 a1       	ldd	r24, Z+36	; 0x24
    4d36:	95 a1       	ldd	r25, Z+37	; 0x25
    4d38:	a6 a1       	ldd	r26, Z+38	; 0x26
    4d3a:	b7 a1       	ldd	r27, Z+39	; 0x27
    4d3c:	bc 01       	movw	r22, r24
    4d3e:	cd 01       	movw	r24, r26
    4d40:	0e 94 22 1b 	call	0x3644	; 0x3644 <get_fat>
    4d44:	dc 01       	movw	r26, r24
    4d46:	cb 01       	movw	r24, r22
    4d48:	89 8f       	std	Y+25, r24	; 0x19
    4d4a:	9a 8f       	std	Y+26, r25	; 0x1a
    4d4c:	ab 8f       	std	Y+27, r26	; 0x1b
    4d4e:	bc 8f       	std	Y+28, r27	; 0x1c
    4d50:	e9 8c       	ldd	r14, Y+25	; 0x19
    4d52:	fa 8c       	ldd	r15, Y+26	; 0x1a
    4d54:	0b 8d       	ldd	r16, Y+27	; 0x1b
    4d56:	1c 8d       	ldd	r17, Y+28	; 0x1c
    4d58:	ef 86       	std	Y+15, r14	; 0x0f
    4d5a:	f8 8a       	std	Y+16, r15	; 0x10
    4d5c:	09 8b       	std	Y+17, r16	; 0x11
    4d5e:	1a 8b       	std	Y+18, r17	; 0x12
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fw_abort;
    4d60:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d62:	98 89       	ldd	r25, Y+16	; 0x10
    4d64:	a9 89       	ldd	r26, Y+17	; 0x11
    4d66:	ba 89       	ldd	r27, Y+18	; 0x12
    4d68:	82 30       	cpi	r24, 0x02	; 2
    4d6a:	91 05       	cpc	r25, r1
    4d6c:	a1 05       	cpc	r26, r1
    4d6e:	b1 05       	cpc	r27, r1
    4d70:	08 f4       	brcc	.+2      	; 0x4d74 <pf_write+0x1f6>
    4d72:	d1 c0       	rjmp	.+418    	; 0x4f16 <pf_write+0x398>
				fs->curr_clust = clst;				/* Update current cluster */
    4d74:	e9 81       	ldd	r30, Y+1	; 0x01
    4d76:	fa 81       	ldd	r31, Y+2	; 0x02
    4d78:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d7a:	98 89       	ldd	r25, Y+16	; 0x10
    4d7c:	a9 89       	ldd	r26, Y+17	; 0x11
    4d7e:	ba 89       	ldd	r27, Y+18	; 0x12
    4d80:	84 a3       	std	Z+36, r24	; 0x24
    4d82:	95 a3       	std	Z+37, r25	; 0x25
    4d84:	a6 a3       	std	Z+38, r26	; 0x26
    4d86:	b7 a3       	std	Z+39, r27	; 0x27
				fs->csect = 0;						/* Reset sector offset in the cluster */
    4d88:	e9 81       	ldd	r30, Y+1	; 0x01
    4d8a:	fa 81       	ldd	r31, Y+2	; 0x02
    4d8c:	13 82       	std	Z+3, r1	; 0x03
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
    4d8e:	e9 81       	ldd	r30, Y+1	; 0x01
    4d90:	fa 81       	ldd	r31, Y+2	; 0x02
    4d92:	84 a1       	ldd	r24, Z+36	; 0x24
    4d94:	95 a1       	ldd	r25, Z+37	; 0x25
    4d96:	a6 a1       	ldd	r26, Z+38	; 0x26
    4d98:	b7 a1       	ldd	r27, Z+39	; 0x27
    4d9a:	bc 01       	movw	r22, r24
    4d9c:	cd 01       	movw	r24, r26
    4d9e:	0e 94 a4 1c 	call	0x3948	; 0x3948 <clust2sect>
    4da2:	dc 01       	movw	r26, r24
    4da4:	cb 01       	movw	r24, r22
    4da6:	8b 87       	std	Y+11, r24	; 0x0b
    4da8:	9c 87       	std	Y+12, r25	; 0x0c
    4daa:	ad 87       	std	Y+13, r26	; 0x0d
    4dac:	be 87       	std	Y+14, r27	; 0x0e
			if (!sect) goto fw_abort;
    4dae:	8b 85       	ldd	r24, Y+11	; 0x0b
    4db0:	9c 85       	ldd	r25, Y+12	; 0x0c
    4db2:	ad 85       	ldd	r26, Y+13	; 0x0d
    4db4:	be 85       	ldd	r27, Y+14	; 0x0e
    4db6:	00 97       	sbiw	r24, 0x00	; 0
    4db8:	a1 05       	cpc	r26, r1
    4dba:	b1 05       	cpc	r27, r1
    4dbc:	09 f4       	brne	.+2      	; 0x4dc0 <pf_write+0x242>
    4dbe:	ab c0       	rjmp	.+342    	; 0x4f16 <pf_write+0x398>
			fs->dsect = sect + fs->csect++;
    4dc0:	e9 81       	ldd	r30, Y+1	; 0x01
    4dc2:	fa 81       	ldd	r31, Y+2	; 0x02
    4dc4:	63 81       	ldd	r22, Z+3	; 0x03
    4dc6:	26 2f       	mov	r18, r22
    4dc8:	30 e0       	ldi	r19, 0x00	; 0
    4dca:	40 e0       	ldi	r20, 0x00	; 0
    4dcc:	50 e0       	ldi	r21, 0x00	; 0
    4dce:	8b 85       	ldd	r24, Y+11	; 0x0b
    4dd0:	9c 85       	ldd	r25, Y+12	; 0x0c
    4dd2:	ad 85       	ldd	r26, Y+13	; 0x0d
    4dd4:	be 85       	ldd	r27, Y+14	; 0x0e
    4dd6:	82 0f       	add	r24, r18
    4dd8:	93 1f       	adc	r25, r19
    4dda:	a4 1f       	adc	r26, r20
    4ddc:	b5 1f       	adc	r27, r21
    4dde:	e9 81       	ldd	r30, Y+1	; 0x01
    4de0:	fa 81       	ldd	r31, Y+2	; 0x02
    4de2:	80 a7       	std	Z+40, r24	; 0x28
    4de4:	91 a7       	std	Z+41, r25	; 0x29
    4de6:	a2 a7       	std	Z+42, r26	; 0x2a
    4de8:	b3 a7       	std	Z+43, r27	; 0x2b
    4dea:	86 2f       	mov	r24, r22
    4dec:	8f 5f       	subi	r24, 0xFF	; 255
    4dee:	e9 81       	ldd	r30, Y+1	; 0x01
    4df0:	fa 81       	ldd	r31, Y+2	; 0x02
    4df2:	83 83       	std	Z+3, r24	; 0x03
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
    4df4:	e9 81       	ldd	r30, Y+1	; 0x01
    4df6:	fa 81       	ldd	r31, Y+2	; 0x02
    4df8:	20 a5       	ldd	r18, Z+40	; 0x28
    4dfa:	31 a5       	ldd	r19, Z+41	; 0x29
    4dfc:	42 a5       	ldd	r20, Z+42	; 0x2a
    4dfe:	53 a5       	ldd	r21, Z+43	; 0x2b
    4e00:	80 e0       	ldi	r24, 0x00	; 0
    4e02:	90 e0       	ldi	r25, 0x00	; 0
    4e04:	ba 01       	movw	r22, r20
    4e06:	a9 01       	movw	r20, r18
    4e08:	0e 94 93 19 	call	0x3326	; 0x3326 <disk_writep>
    4e0c:	88 23       	and	r24, r24
    4e0e:	09 f0       	breq	.+2      	; 0x4e12 <pf_write+0x294>
    4e10:	82 c0       	rjmp	.+260    	; 0x4f16 <pf_write+0x398>
			fs->flag |= FA__WIP;
    4e12:	e9 81       	ldd	r30, Y+1	; 0x01
    4e14:	fa 81       	ldd	r31, Y+2	; 0x02
    4e16:	82 81       	ldd	r24, Z+2	; 0x02
    4e18:	80 64       	ori	r24, 0x40	; 64
    4e1a:	e9 81       	ldd	r30, Y+1	; 0x01
    4e1c:	fa 81       	ldd	r31, Y+2	; 0x02
    4e1e:	82 83       	std	Z+2, r24	; 0x02
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    4e20:	e9 81       	ldd	r30, Y+1	; 0x01
    4e22:	fa 81       	ldd	r31, Y+2	; 0x02
    4e24:	80 8d       	ldd	r24, Z+24	; 0x18
    4e26:	91 8d       	ldd	r25, Z+25	; 0x19
    4e28:	a2 8d       	ldd	r26, Z+26	; 0x1a
    4e2a:	b3 8d       	ldd	r27, Z+27	; 0x1b
    4e2c:	9c 01       	movw	r18, r24
    4e2e:	31 70       	andi	r19, 0x01	; 1
    4e30:	80 e0       	ldi	r24, 0x00	; 0
    4e32:	92 e0       	ldi	r25, 0x02	; 2
    4e34:	82 1b       	sub	r24, r18
    4e36:	93 0b       	sbc	r25, r19
    4e38:	9c 83       	std	Y+4, r25	; 0x04
    4e3a:	8b 83       	std	Y+3, r24	; 0x03
		if (wcnt > btw) wcnt = btw;
    4e3c:	2b 81       	ldd	r18, Y+3	; 0x03
    4e3e:	3c 81       	ldd	r19, Y+4	; 0x04
    4e40:	8d 89       	ldd	r24, Y+21	; 0x15
    4e42:	9e 89       	ldd	r25, Y+22	; 0x16
    4e44:	82 17       	cp	r24, r18
    4e46:	93 07       	cpc	r25, r19
    4e48:	20 f4       	brcc	.+8      	; 0x4e52 <pf_write+0x2d4>
    4e4a:	8d 89       	ldd	r24, Y+21	; 0x15
    4e4c:	9e 89       	ldd	r25, Y+22	; 0x16
    4e4e:	9c 83       	std	Y+4, r25	; 0x04
    4e50:	8b 83       	std	Y+3, r24	; 0x03
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
    4e52:	8b 81       	ldd	r24, Y+3	; 0x03
    4e54:	9c 81       	ldd	r25, Y+4	; 0x04
    4e56:	9c 01       	movw	r18, r24
    4e58:	40 e0       	ldi	r20, 0x00	; 0
    4e5a:	50 e0       	ldi	r21, 0x00	; 0
    4e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    4e5e:	9e 81       	ldd	r25, Y+6	; 0x06
    4e60:	ba 01       	movw	r22, r20
    4e62:	a9 01       	movw	r20, r18
    4e64:	0e 94 93 19 	call	0x3326	; 0x3326 <disk_writep>
    4e68:	88 23       	and	r24, r24
    4e6a:	09 f0       	breq	.+2      	; 0x4e6e <pf_write+0x2f0>
    4e6c:	54 c0       	rjmp	.+168    	; 0x4f16 <pf_write+0x398>
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    4e6e:	e9 81       	ldd	r30, Y+1	; 0x01
    4e70:	fa 81       	ldd	r31, Y+2	; 0x02
    4e72:	20 8d       	ldd	r18, Z+24	; 0x18
    4e74:	31 8d       	ldd	r19, Z+25	; 0x19
    4e76:	42 8d       	ldd	r20, Z+26	; 0x1a
    4e78:	53 8d       	ldd	r21, Z+27	; 0x1b
    4e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    4e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    4e7e:	cc 01       	movw	r24, r24
    4e80:	a0 e0       	ldi	r26, 0x00	; 0
    4e82:	b0 e0       	ldi	r27, 0x00	; 0
    4e84:	82 0f       	add	r24, r18
    4e86:	93 1f       	adc	r25, r19
    4e88:	a4 1f       	adc	r26, r20
    4e8a:	b5 1f       	adc	r27, r21
    4e8c:	e9 81       	ldd	r30, Y+1	; 0x01
    4e8e:	fa 81       	ldd	r31, Y+2	; 0x02
    4e90:	80 8f       	std	Z+24, r24	; 0x18
    4e92:	91 8f       	std	Z+25, r25	; 0x19
    4e94:	a2 8f       	std	Z+26, r26	; 0x1a
    4e96:	b3 8f       	std	Z+27, r27	; 0x1b
    4e98:	2d 81       	ldd	r18, Y+5	; 0x05
    4e9a:	3e 81       	ldd	r19, Y+6	; 0x06
    4e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    4e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    4ea0:	82 0f       	add	r24, r18
    4ea2:	93 1f       	adc	r25, r19
    4ea4:	9e 83       	std	Y+6, r25	; 0x06
    4ea6:	8d 83       	std	Y+5, r24	; 0x05
		btw -= wcnt; *bw += wcnt;
    4ea8:	2d 89       	ldd	r18, Y+21	; 0x15
    4eaa:	3e 89       	ldd	r19, Y+22	; 0x16
    4eac:	8b 81       	ldd	r24, Y+3	; 0x03
    4eae:	9c 81       	ldd	r25, Y+4	; 0x04
    4eb0:	89 01       	movw	r16, r18
    4eb2:	08 1b       	sub	r16, r24
    4eb4:	19 0b       	sbc	r17, r25
    4eb6:	c8 01       	movw	r24, r16
    4eb8:	9e 8b       	std	Y+22, r25	; 0x16
    4eba:	8d 8b       	std	Y+21, r24	; 0x15
    4ebc:	ef 89       	ldd	r30, Y+23	; 0x17
    4ebe:	f8 8d       	ldd	r31, Y+24	; 0x18
    4ec0:	20 81       	ld	r18, Z
    4ec2:	31 81       	ldd	r19, Z+1	; 0x01
    4ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    4ec8:	82 0f       	add	r24, r18
    4eca:	93 1f       	adc	r25, r19
    4ecc:	ef 89       	ldd	r30, Y+23	; 0x17
    4ece:	f8 8d       	ldd	r31, Y+24	; 0x18
    4ed0:	91 83       	std	Z+1, r25	; 0x01
    4ed2:	80 83       	st	Z, r24
		if (((WORD)fs->fptr % 512) == 0) {
    4ed4:	e9 81       	ldd	r30, Y+1	; 0x01
    4ed6:	fa 81       	ldd	r31, Y+2	; 0x02
    4ed8:	80 8d       	ldd	r24, Z+24	; 0x18
    4eda:	91 8d       	ldd	r25, Z+25	; 0x19
    4edc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    4ede:	b3 8d       	ldd	r27, Z+27	; 0x1b
    4ee0:	91 70       	andi	r25, 0x01	; 1
    4ee2:	00 97       	sbiw	r24, 0x00	; 0
    4ee4:	89 f4       	brne	.+34     	; 0x4f08 <pf_write+0x38a>
			if (disk_writep(0, 0)) goto fw_abort;	/* Finalize the currtent secter write operation */
    4ee6:	80 e0       	ldi	r24, 0x00	; 0
    4ee8:	90 e0       	ldi	r25, 0x00	; 0
    4eea:	40 e0       	ldi	r20, 0x00	; 0
    4eec:	50 e0       	ldi	r21, 0x00	; 0
    4eee:	60 e0       	ldi	r22, 0x00	; 0
    4ef0:	70 e0       	ldi	r23, 0x00	; 0
    4ef2:	0e 94 93 19 	call	0x3326	; 0x3326 <disk_writep>
    4ef6:	88 23       	and	r24, r24
    4ef8:	71 f4       	brne	.+28     	; 0x4f16 <pf_write+0x398>
			fs->flag &= ~FA__WIP;
    4efa:	e9 81       	ldd	r30, Y+1	; 0x01
    4efc:	fa 81       	ldd	r31, Y+2	; 0x02
    4efe:	82 81       	ldd	r24, Z+2	; 0x02
    4f00:	8f 7b       	andi	r24, 0xBF	; 191
    4f02:	e9 81       	ldd	r30, Y+1	; 0x01
    4f04:	fa 81       	ldd	r31, Y+2	; 0x02
    4f06:	82 83       	std	Z+2, r24	; 0x02
			fs->fptr &= 0xFFFFFE00;
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
    4f08:	8d 89       	ldd	r24, Y+21	; 0x15
    4f0a:	9e 89       	ldd	r25, Y+22	; 0x16
    4f0c:	00 97       	sbiw	r24, 0x00	; 0
    4f0e:	09 f0       	breq	.+2      	; 0x4f12 <pf_write+0x394>
    4f10:	cf ce       	rjmp	.-610    	; 0x4cb0 <pf_write+0x132>
			if (disk_writep(0, 0)) goto fw_abort;	/* Finalize the currtent secter write operation */
			fs->flag &= ~FA__WIP;
		}
	}

	return FR_OK;
    4f12:	1d 8e       	std	Y+29, r1	; 0x1d
    4f14:	05 c0       	rjmp	.+10     	; 0x4f20 <pf_write+0x3a2>

fw_abort:
	fs->flag = 0;
    4f16:	e9 81       	ldd	r30, Y+1	; 0x01
    4f18:	fa 81       	ldd	r31, Y+2	; 0x02
    4f1a:	12 82       	std	Z+2, r1	; 0x02
	return FR_DISK_ERR;
    4f1c:	11 e0       	ldi	r17, 0x01	; 1
    4f1e:	1d 8f       	std	Y+29, r17	; 0x1d
    4f20:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    4f22:	6d 96       	adiw	r28, 0x1d	; 29
    4f24:	0f b6       	in	r0, 0x3f	; 63
    4f26:	f8 94       	cli
    4f28:	de bf       	out	0x3e, r29	; 62
    4f2a:	0f be       	out	0x3f, r0	; 63
    4f2c:	cd bf       	out	0x3d, r28	; 61
    4f2e:	cf 91       	pop	r28
    4f30:	df 91       	pop	r29
    4f32:	1f 91       	pop	r17
    4f34:	0f 91       	pop	r16
    4f36:	ff 90       	pop	r15
    4f38:	ef 90       	pop	r14
    4f3a:	08 95       	ret

00004f3c <pf_lseek>:
#if _USE_LSEEK

FRESULT pf_lseek (
	DWORD ofs		/* File pointer from top of file */
)
{
    4f3c:	ef 92       	push	r14
    4f3e:	ff 92       	push	r15
    4f40:	0f 93       	push	r16
    4f42:	1f 93       	push	r17
    4f44:	df 93       	push	r29
    4f46:	cf 93       	push	r28
    4f48:	cd b7       	in	r28, 0x3d	; 61
    4f4a:	de b7       	in	r29, 0x3e	; 62
    4f4c:	67 97       	sbiw	r28, 0x17	; 23
    4f4e:	0f b6       	in	r0, 0x3f	; 63
    4f50:	f8 94       	cli
    4f52:	de bf       	out	0x3e, r29	; 62
    4f54:	0f be       	out	0x3f, r0	; 63
    4f56:	cd bf       	out	0x3d, r28	; 61
    4f58:	6b 8b       	std	Y+19, r22	; 0x13
    4f5a:	7c 8b       	std	Y+20, r23	; 0x14
    4f5c:	8d 8b       	std	Y+21, r24	; 0x15
    4f5e:	9e 8b       	std	Y+22, r25	; 0x16
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;
    4f60:	80 91 22 02 	lds	r24, 0x0222
    4f64:	90 91 23 02 	lds	r25, 0x0223
    4f68:	9a 83       	std	Y+2, r25	; 0x02
    4f6a:	89 83       	std	Y+1, r24	; 0x01


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    4f6c:	89 81       	ldd	r24, Y+1	; 0x01
    4f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    4f70:	00 97       	sbiw	r24, 0x00	; 0
    4f72:	19 f4       	brne	.+6      	; 0x4f7a <pf_lseek+0x3e>
    4f74:	06 e0       	ldi	r16, 0x06	; 6
    4f76:	0f 8b       	std	Y+23, r16	; 0x17
    4f78:	a3 c1       	rjmp	.+838    	; 0x52c0 <pf_lseek+0x384>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    4f7a:	e9 81       	ldd	r30, Y+1	; 0x01
    4f7c:	fa 81       	ldd	r31, Y+2	; 0x02
    4f7e:	82 81       	ldd	r24, Z+2	; 0x02
    4f80:	88 2f       	mov	r24, r24
    4f82:	90 e0       	ldi	r25, 0x00	; 0
    4f84:	81 70       	andi	r24, 0x01	; 1
    4f86:	90 70       	andi	r25, 0x00	; 0
    4f88:	00 97       	sbiw	r24, 0x00	; 0
    4f8a:	19 f4       	brne	.+6      	; 0x4f92 <pf_lseek+0x56>
			return FR_NOT_OPENED;
    4f8c:	15 e0       	ldi	r17, 0x05	; 5
    4f8e:	1f 8b       	std	Y+23, r17	; 0x17
    4f90:	97 c1       	rjmp	.+814    	; 0x52c0 <pf_lseek+0x384>

	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
    4f92:	e9 81       	ldd	r30, Y+1	; 0x01
    4f94:	fa 81       	ldd	r31, Y+2	; 0x02
    4f96:	24 8d       	ldd	r18, Z+28	; 0x1c
    4f98:	35 8d       	ldd	r19, Z+29	; 0x1d
    4f9a:	46 8d       	ldd	r20, Z+30	; 0x1e
    4f9c:	57 8d       	ldd	r21, Z+31	; 0x1f
    4f9e:	8b 89       	ldd	r24, Y+19	; 0x13
    4fa0:	9c 89       	ldd	r25, Y+20	; 0x14
    4fa2:	ad 89       	ldd	r26, Y+21	; 0x15
    4fa4:	be 89       	ldd	r27, Y+22	; 0x16
    4fa6:	28 17       	cp	r18, r24
    4fa8:	39 07       	cpc	r19, r25
    4faa:	4a 07       	cpc	r20, r26
    4fac:	5b 07       	cpc	r21, r27
    4fae:	50 f4       	brcc	.+20     	; 0x4fc4 <pf_lseek+0x88>
    4fb0:	e9 81       	ldd	r30, Y+1	; 0x01
    4fb2:	fa 81       	ldd	r31, Y+2	; 0x02
    4fb4:	84 8d       	ldd	r24, Z+28	; 0x1c
    4fb6:	95 8d       	ldd	r25, Z+29	; 0x1d
    4fb8:	a6 8d       	ldd	r26, Z+30	; 0x1e
    4fba:	b7 8d       	ldd	r27, Z+31	; 0x1f
    4fbc:	8b 8b       	std	Y+19, r24	; 0x13
    4fbe:	9c 8b       	std	Y+20, r25	; 0x14
    4fc0:	ad 8b       	std	Y+21, r26	; 0x15
    4fc2:	be 8b       	std	Y+22, r27	; 0x16
	ifptr = fs->fptr;
    4fc4:	e9 81       	ldd	r30, Y+1	; 0x01
    4fc6:	fa 81       	ldd	r31, Y+2	; 0x02
    4fc8:	80 8d       	ldd	r24, Z+24	; 0x18
    4fca:	91 8d       	ldd	r25, Z+25	; 0x19
    4fcc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    4fce:	b3 8d       	ldd	r27, Z+27	; 0x1b
    4fd0:	8b 83       	std	Y+3, r24	; 0x03
    4fd2:	9c 83       	std	Y+4, r25	; 0x04
    4fd4:	ad 83       	std	Y+5, r26	; 0x05
    4fd6:	be 83       	std	Y+6, r27	; 0x06
	fs->fptr = 0;
    4fd8:	e9 81       	ldd	r30, Y+1	; 0x01
    4fda:	fa 81       	ldd	r31, Y+2	; 0x02
    4fdc:	10 8e       	std	Z+24, r1	; 0x18
    4fde:	11 8e       	std	Z+25, r1	; 0x19
    4fe0:	12 8e       	std	Z+26, r1	; 0x1a
    4fe2:	13 8e       	std	Z+27, r1	; 0x1b
	if (ofs > 0) {
    4fe4:	8b 89       	ldd	r24, Y+19	; 0x13
    4fe6:	9c 89       	ldd	r25, Y+20	; 0x14
    4fe8:	ad 89       	ldd	r26, Y+21	; 0x15
    4fea:	be 89       	ldd	r27, Y+22	; 0x16
    4fec:	00 97       	sbiw	r24, 0x00	; 0
    4fee:	a1 05       	cpc	r26, r1
    4ff0:	b1 05       	cpc	r27, r1
    4ff2:	09 f4       	brne	.+2      	; 0x4ff6 <pf_lseek+0xba>
    4ff4:	5e c1       	rjmp	.+700    	; 0x52b2 <pf_lseek+0x376>
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
    4ff6:	e9 81       	ldd	r30, Y+1	; 0x01
    4ff8:	fa 81       	ldd	r31, Y+2	; 0x02
    4ffa:	81 81       	ldd	r24, Z+1	; 0x01
    4ffc:	88 2f       	mov	r24, r24
    4ffe:	90 e0       	ldi	r25, 0x00	; 0
    5000:	a0 e0       	ldi	r26, 0x00	; 0
    5002:	b0 e0       	ldi	r27, 0x00	; 0
    5004:	07 2e       	mov	r0, r23
    5006:	79 e0       	ldi	r23, 0x09	; 9
    5008:	88 0f       	add	r24, r24
    500a:	99 1f       	adc	r25, r25
    500c:	aa 1f       	adc	r26, r26
    500e:	bb 1f       	adc	r27, r27
    5010:	7a 95       	dec	r23
    5012:	d1 f7       	brne	.-12     	; 0x5008 <pf_lseek+0xcc>
    5014:	70 2d       	mov	r23, r0
    5016:	8b 87       	std	Y+11, r24	; 0x0b
    5018:	9c 87       	std	Y+12, r25	; 0x0c
    501a:	ad 87       	std	Y+13, r26	; 0x0d
    501c:	be 87       	std	Y+14, r27	; 0x0e
		if (ifptr > 0 &&
    501e:	8b 81       	ldd	r24, Y+3	; 0x03
    5020:	9c 81       	ldd	r25, Y+4	; 0x04
    5022:	ad 81       	ldd	r26, Y+5	; 0x05
    5024:	be 81       	ldd	r27, Y+6	; 0x06
    5026:	00 97       	sbiw	r24, 0x00	; 0
    5028:	a1 05       	cpc	r26, r1
    502a:	b1 05       	cpc	r27, r1
    502c:	09 f4       	brne	.+2      	; 0x5030 <pf_lseek+0xf4>
    502e:	65 c0       	rjmp	.+202    	; 0x50fa <pf_lseek+0x1be>
    5030:	8b 89       	ldd	r24, Y+19	; 0x13
    5032:	9c 89       	ldd	r25, Y+20	; 0x14
    5034:	ad 89       	ldd	r26, Y+21	; 0x15
    5036:	be 89       	ldd	r27, Y+22	; 0x16
    5038:	01 97       	sbiw	r24, 0x01	; 1
    503a:	a1 09       	sbc	r26, r1
    503c:	b1 09       	sbc	r27, r1
    503e:	2b 85       	ldd	r18, Y+11	; 0x0b
    5040:	3c 85       	ldd	r19, Y+12	; 0x0c
    5042:	4d 85       	ldd	r20, Y+13	; 0x0d
    5044:	5e 85       	ldd	r21, Y+14	; 0x0e
    5046:	bc 01       	movw	r22, r24
    5048:	cd 01       	movw	r24, r26
    504a:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
    504e:	da 01       	movw	r26, r20
    5050:	c9 01       	movw	r24, r18
    5052:	7c 01       	movw	r14, r24
    5054:	8d 01       	movw	r16, r26
    5056:	8b 81       	ldd	r24, Y+3	; 0x03
    5058:	9c 81       	ldd	r25, Y+4	; 0x04
    505a:	ad 81       	ldd	r26, Y+5	; 0x05
    505c:	be 81       	ldd	r27, Y+6	; 0x06
    505e:	01 97       	sbiw	r24, 0x01	; 1
    5060:	a1 09       	sbc	r26, r1
    5062:	b1 09       	sbc	r27, r1
    5064:	2b 85       	ldd	r18, Y+11	; 0x0b
    5066:	3c 85       	ldd	r19, Y+12	; 0x0c
    5068:	4d 85       	ldd	r20, Y+13	; 0x0d
    506a:	5e 85       	ldd	r21, Y+14	; 0x0e
    506c:	bc 01       	movw	r22, r24
    506e:	cd 01       	movw	r24, r26
    5070:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
    5074:	da 01       	movw	r26, r20
    5076:	c9 01       	movw	r24, r18
    5078:	e8 16       	cp	r14, r24
    507a:	f9 06       	cpc	r15, r25
    507c:	0a 07       	cpc	r16, r26
    507e:	1b 07       	cpc	r17, r27
    5080:	e0 f1       	brcs	.+120    	; 0x50fa <pf_lseek+0x1be>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    5082:	8b 81       	ldd	r24, Y+3	; 0x03
    5084:	9c 81       	ldd	r25, Y+4	; 0x04
    5086:	ad 81       	ldd	r26, Y+5	; 0x05
    5088:	be 81       	ldd	r27, Y+6	; 0x06
    508a:	9c 01       	movw	r18, r24
    508c:	ad 01       	movw	r20, r26
    508e:	21 50       	subi	r18, 0x01	; 1
    5090:	30 40       	sbci	r19, 0x00	; 0
    5092:	40 40       	sbci	r20, 0x00	; 0
    5094:	50 40       	sbci	r21, 0x00	; 0
    5096:	8b 85       	ldd	r24, Y+11	; 0x0b
    5098:	9c 85       	ldd	r25, Y+12	; 0x0c
    509a:	ad 85       	ldd	r26, Y+13	; 0x0d
    509c:	be 85       	ldd	r27, Y+14	; 0x0e
    509e:	b0 95       	com	r27
    50a0:	a0 95       	com	r26
    50a2:	90 95       	com	r25
    50a4:	81 95       	neg	r24
    50a6:	9f 4f       	sbci	r25, 0xFF	; 255
    50a8:	af 4f       	sbci	r26, 0xFF	; 255
    50aa:	bf 4f       	sbci	r27, 0xFF	; 255
    50ac:	82 23       	and	r24, r18
    50ae:	93 23       	and	r25, r19
    50b0:	a4 23       	and	r26, r20
    50b2:	b5 23       	and	r27, r21
    50b4:	e9 81       	ldd	r30, Y+1	; 0x01
    50b6:	fa 81       	ldd	r31, Y+2	; 0x02
    50b8:	80 8f       	std	Z+24, r24	; 0x18
    50ba:	91 8f       	std	Z+25, r25	; 0x19
    50bc:	a2 8f       	std	Z+26, r26	; 0x1a
    50be:	b3 8f       	std	Z+27, r27	; 0x1b
			ofs -= fs->fptr;
    50c0:	e9 81       	ldd	r30, Y+1	; 0x01
    50c2:	fa 81       	ldd	r31, Y+2	; 0x02
    50c4:	20 8d       	ldd	r18, Z+24	; 0x18
    50c6:	31 8d       	ldd	r19, Z+25	; 0x19
    50c8:	42 8d       	ldd	r20, Z+26	; 0x1a
    50ca:	53 8d       	ldd	r21, Z+27	; 0x1b
    50cc:	8b 89       	ldd	r24, Y+19	; 0x13
    50ce:	9c 89       	ldd	r25, Y+20	; 0x14
    50d0:	ad 89       	ldd	r26, Y+21	; 0x15
    50d2:	be 89       	ldd	r27, Y+22	; 0x16
    50d4:	82 1b       	sub	r24, r18
    50d6:	93 0b       	sbc	r25, r19
    50d8:	a4 0b       	sbc	r26, r20
    50da:	b5 0b       	sbc	r27, r21
    50dc:	8b 8b       	std	Y+19, r24	; 0x13
    50de:	9c 8b       	std	Y+20, r25	; 0x14
    50e0:	ad 8b       	std	Y+21, r26	; 0x15
    50e2:	be 8b       	std	Y+22, r27	; 0x16
			clst = fs->curr_clust;
    50e4:	e9 81       	ldd	r30, Y+1	; 0x01
    50e6:	fa 81       	ldd	r31, Y+2	; 0x02
    50e8:	84 a1       	ldd	r24, Z+36	; 0x24
    50ea:	95 a1       	ldd	r25, Z+37	; 0x25
    50ec:	a6 a1       	ldd	r26, Z+38	; 0x26
    50ee:	b7 a1       	ldd	r27, Z+39	; 0x27
    50f0:	8f 87       	std	Y+15, r24	; 0x0f
    50f2:	98 8b       	std	Y+16, r25	; 0x10
    50f4:	a9 8b       	std	Y+17, r26	; 0x11
    50f6:	ba 8b       	std	Y+18, r27	; 0x12
    50f8:	6f c0       	rjmp	.+222    	; 0x51d8 <pf_lseek+0x29c>
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
    50fa:	e9 81       	ldd	r30, Y+1	; 0x01
    50fc:	fa 81       	ldd	r31, Y+2	; 0x02
    50fe:	80 a1       	ldd	r24, Z+32	; 0x20
    5100:	91 a1       	ldd	r25, Z+33	; 0x21
    5102:	a2 a1       	ldd	r26, Z+34	; 0x22
    5104:	b3 a1       	ldd	r27, Z+35	; 0x23
    5106:	8f 87       	std	Y+15, r24	; 0x0f
    5108:	98 8b       	std	Y+16, r25	; 0x10
    510a:	a9 8b       	std	Y+17, r26	; 0x11
    510c:	ba 8b       	std	Y+18, r27	; 0x12
			fs->curr_clust = clst;
    510e:	e9 81       	ldd	r30, Y+1	; 0x01
    5110:	fa 81       	ldd	r31, Y+2	; 0x02
    5112:	8f 85       	ldd	r24, Y+15	; 0x0f
    5114:	98 89       	ldd	r25, Y+16	; 0x10
    5116:	a9 89       	ldd	r26, Y+17	; 0x11
    5118:	ba 89       	ldd	r27, Y+18	; 0x12
    511a:	84 a3       	std	Z+36, r24	; 0x24
    511c:	95 a3       	std	Z+37, r25	; 0x25
    511e:	a6 a3       	std	Z+38, r26	; 0x26
    5120:	b7 a3       	std	Z+39, r27	; 0x27
    5122:	5a c0       	rjmp	.+180    	; 0x51d8 <pf_lseek+0x29c>
		}
		while (ofs > bcs) {				/* Cluster following loop */
			clst = get_fat(clst);		/* Follow cluster chain */
    5124:	8f 85       	ldd	r24, Y+15	; 0x0f
    5126:	98 89       	ldd	r25, Y+16	; 0x10
    5128:	a9 89       	ldd	r26, Y+17	; 0x11
    512a:	ba 89       	ldd	r27, Y+18	; 0x12
    512c:	bc 01       	movw	r22, r24
    512e:	cd 01       	movw	r24, r26
    5130:	0e 94 22 1b 	call	0x3644	; 0x3644 <get_fat>
    5134:	dc 01       	movw	r26, r24
    5136:	cb 01       	movw	r24, r22
    5138:	8f 87       	std	Y+15, r24	; 0x0f
    513a:	98 8b       	std	Y+16, r25	; 0x10
    513c:	a9 8b       	std	Y+17, r26	; 0x11
    513e:	ba 8b       	std	Y+18, r27	; 0x12
			if (clst <= 1 || clst >= fs->max_clust) goto fe_abort;
    5140:	8f 85       	ldd	r24, Y+15	; 0x0f
    5142:	98 89       	ldd	r25, Y+16	; 0x10
    5144:	a9 89       	ldd	r26, Y+17	; 0x11
    5146:	ba 89       	ldd	r27, Y+18	; 0x12
    5148:	82 30       	cpi	r24, 0x02	; 2
    514a:	91 05       	cpc	r25, r1
    514c:	a1 05       	cpc	r26, r1
    514e:	b1 05       	cpc	r27, r1
    5150:	08 f4       	brcc	.+2      	; 0x5154 <pf_lseek+0x218>
    5152:	b1 c0       	rjmp	.+354    	; 0x52b6 <pf_lseek+0x37a>
    5154:	e9 81       	ldd	r30, Y+1	; 0x01
    5156:	fa 81       	ldd	r31, Y+2	; 0x02
    5158:	20 85       	ldd	r18, Z+8	; 0x08
    515a:	31 85       	ldd	r19, Z+9	; 0x09
    515c:	42 85       	ldd	r20, Z+10	; 0x0a
    515e:	53 85       	ldd	r21, Z+11	; 0x0b
    5160:	8f 85       	ldd	r24, Y+15	; 0x0f
    5162:	98 89       	ldd	r25, Y+16	; 0x10
    5164:	a9 89       	ldd	r26, Y+17	; 0x11
    5166:	ba 89       	ldd	r27, Y+18	; 0x12
    5168:	82 17       	cp	r24, r18
    516a:	93 07       	cpc	r25, r19
    516c:	a4 07       	cpc	r26, r20
    516e:	b5 07       	cpc	r27, r21
    5170:	08 f0       	brcs	.+2      	; 0x5174 <pf_lseek+0x238>
    5172:	a1 c0       	rjmp	.+322    	; 0x52b6 <pf_lseek+0x37a>
			fs->curr_clust = clst;
    5174:	e9 81       	ldd	r30, Y+1	; 0x01
    5176:	fa 81       	ldd	r31, Y+2	; 0x02
    5178:	8f 85       	ldd	r24, Y+15	; 0x0f
    517a:	98 89       	ldd	r25, Y+16	; 0x10
    517c:	a9 89       	ldd	r26, Y+17	; 0x11
    517e:	ba 89       	ldd	r27, Y+18	; 0x12
    5180:	84 a3       	std	Z+36, r24	; 0x24
    5182:	95 a3       	std	Z+37, r25	; 0x25
    5184:	a6 a3       	std	Z+38, r26	; 0x26
    5186:	b7 a3       	std	Z+39, r27	; 0x27
			fs->fptr += bcs;
    5188:	e9 81       	ldd	r30, Y+1	; 0x01
    518a:	fa 81       	ldd	r31, Y+2	; 0x02
    518c:	20 8d       	ldd	r18, Z+24	; 0x18
    518e:	31 8d       	ldd	r19, Z+25	; 0x19
    5190:	42 8d       	ldd	r20, Z+26	; 0x1a
    5192:	53 8d       	ldd	r21, Z+27	; 0x1b
    5194:	8b 85       	ldd	r24, Y+11	; 0x0b
    5196:	9c 85       	ldd	r25, Y+12	; 0x0c
    5198:	ad 85       	ldd	r26, Y+13	; 0x0d
    519a:	be 85       	ldd	r27, Y+14	; 0x0e
    519c:	82 0f       	add	r24, r18
    519e:	93 1f       	adc	r25, r19
    51a0:	a4 1f       	adc	r26, r20
    51a2:	b5 1f       	adc	r27, r21
    51a4:	e9 81       	ldd	r30, Y+1	; 0x01
    51a6:	fa 81       	ldd	r31, Y+2	; 0x02
    51a8:	80 8f       	std	Z+24, r24	; 0x18
    51aa:	91 8f       	std	Z+25, r25	; 0x19
    51ac:	a2 8f       	std	Z+26, r26	; 0x1a
    51ae:	b3 8f       	std	Z+27, r27	; 0x1b
			ofs -= bcs;
    51b0:	2b 89       	ldd	r18, Y+19	; 0x13
    51b2:	3c 89       	ldd	r19, Y+20	; 0x14
    51b4:	4d 89       	ldd	r20, Y+21	; 0x15
    51b6:	5e 89       	ldd	r21, Y+22	; 0x16
    51b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    51ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    51bc:	ad 85       	ldd	r26, Y+13	; 0x0d
    51be:	be 85       	ldd	r27, Y+14	; 0x0e
    51c0:	79 01       	movw	r14, r18
    51c2:	8a 01       	movw	r16, r20
    51c4:	e8 1a       	sub	r14, r24
    51c6:	f9 0a       	sbc	r15, r25
    51c8:	0a 0b       	sbc	r16, r26
    51ca:	1b 0b       	sbc	r17, r27
    51cc:	d8 01       	movw	r26, r16
    51ce:	c7 01       	movw	r24, r14
    51d0:	8b 8b       	std	Y+19, r24	; 0x13
    51d2:	9c 8b       	std	Y+20, r25	; 0x14
    51d4:	ad 8b       	std	Y+21, r26	; 0x15
    51d6:	be 8b       	std	Y+22, r27	; 0x16
			clst = fs->curr_clust;
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {				/* Cluster following loop */
    51d8:	2b 89       	ldd	r18, Y+19	; 0x13
    51da:	3c 89       	ldd	r19, Y+20	; 0x14
    51dc:	4d 89       	ldd	r20, Y+21	; 0x15
    51de:	5e 89       	ldd	r21, Y+22	; 0x16
    51e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    51e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    51e4:	ad 85       	ldd	r26, Y+13	; 0x0d
    51e6:	be 85       	ldd	r27, Y+14	; 0x0e
    51e8:	82 17       	cp	r24, r18
    51ea:	93 07       	cpc	r25, r19
    51ec:	a4 07       	cpc	r26, r20
    51ee:	b5 07       	cpc	r27, r21
    51f0:	08 f4       	brcc	.+2      	; 0x51f4 <pf_lseek+0x2b8>
    51f2:	98 cf       	rjmp	.-208    	; 0x5124 <pf_lseek+0x1e8>
			if (clst <= 1 || clst >= fs->max_clust) goto fe_abort;
			fs->curr_clust = clst;
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
    51f4:	e9 81       	ldd	r30, Y+1	; 0x01
    51f6:	fa 81       	ldd	r31, Y+2	; 0x02
    51f8:	20 8d       	ldd	r18, Z+24	; 0x18
    51fa:	31 8d       	ldd	r19, Z+25	; 0x19
    51fc:	42 8d       	ldd	r20, Z+26	; 0x1a
    51fe:	53 8d       	ldd	r21, Z+27	; 0x1b
    5200:	8b 89       	ldd	r24, Y+19	; 0x13
    5202:	9c 89       	ldd	r25, Y+20	; 0x14
    5204:	ad 89       	ldd	r26, Y+21	; 0x15
    5206:	be 89       	ldd	r27, Y+22	; 0x16
    5208:	82 0f       	add	r24, r18
    520a:	93 1f       	adc	r25, r19
    520c:	a4 1f       	adc	r26, r20
    520e:	b5 1f       	adc	r27, r21
    5210:	e9 81       	ldd	r30, Y+1	; 0x01
    5212:	fa 81       	ldd	r31, Y+2	; 0x02
    5214:	80 8f       	std	Z+24, r24	; 0x18
    5216:	91 8f       	std	Z+25, r25	; 0x19
    5218:	a2 8f       	std	Z+26, r26	; 0x1a
    521a:	b3 8f       	std	Z+27, r27	; 0x1b
		sect = clust2sect(clst);		/* Current sector */
    521c:	8f 85       	ldd	r24, Y+15	; 0x0f
    521e:	98 89       	ldd	r25, Y+16	; 0x10
    5220:	a9 89       	ldd	r26, Y+17	; 0x11
    5222:	ba 89       	ldd	r27, Y+18	; 0x12
    5224:	bc 01       	movw	r22, r24
    5226:	cd 01       	movw	r24, r26
    5228:	0e 94 a4 1c 	call	0x3948	; 0x3948 <clust2sect>
    522c:	dc 01       	movw	r26, r24
    522e:	cb 01       	movw	r24, r22
    5230:	8f 83       	std	Y+7, r24	; 0x07
    5232:	98 87       	std	Y+8, r25	; 0x08
    5234:	a9 87       	std	Y+9, r26	; 0x09
    5236:	ba 87       	std	Y+10, r27	; 0x0a
		if (!sect) goto fe_abort;
    5238:	8f 81       	ldd	r24, Y+7	; 0x07
    523a:	98 85       	ldd	r25, Y+8	; 0x08
    523c:	a9 85       	ldd	r26, Y+9	; 0x09
    523e:	ba 85       	ldd	r27, Y+10	; 0x0a
    5240:	00 97       	sbiw	r24, 0x00	; 0
    5242:	a1 05       	cpc	r26, r1
    5244:	b1 05       	cpc	r27, r1
    5246:	b9 f1       	breq	.+110    	; 0x52b6 <pf_lseek+0x37a>
		fs->csect = (BYTE)(ofs / 512);	/* Sector offset in the cluster */
    5248:	8b 89       	ldd	r24, Y+19	; 0x13
    524a:	9c 89       	ldd	r25, Y+20	; 0x14
    524c:	ad 89       	ldd	r26, Y+21	; 0x15
    524e:	be 89       	ldd	r27, Y+22	; 0x16
    5250:	07 2e       	mov	r0, r23
    5252:	79 e0       	ldi	r23, 0x09	; 9
    5254:	b6 95       	lsr	r27
    5256:	a7 95       	ror	r26
    5258:	97 95       	ror	r25
    525a:	87 95       	ror	r24
    525c:	7a 95       	dec	r23
    525e:	d1 f7       	brne	.-12     	; 0x5254 <pf_lseek+0x318>
    5260:	70 2d       	mov	r23, r0
    5262:	e9 81       	ldd	r30, Y+1	; 0x01
    5264:	fa 81       	ldd	r31, Y+2	; 0x02
    5266:	83 83       	std	Z+3, r24	; 0x03
		if (ofs % 512)
    5268:	8b 89       	ldd	r24, Y+19	; 0x13
    526a:	9c 89       	ldd	r25, Y+20	; 0x14
    526c:	ad 89       	ldd	r26, Y+21	; 0x15
    526e:	be 89       	ldd	r27, Y+22	; 0x16
    5270:	91 70       	andi	r25, 0x01	; 1
    5272:	a0 70       	andi	r26, 0x00	; 0
    5274:	b0 70       	andi	r27, 0x00	; 0
    5276:	00 97       	sbiw	r24, 0x00	; 0
    5278:	a1 05       	cpc	r26, r1
    527a:	b1 05       	cpc	r27, r1
    527c:	d1 f0       	breq	.+52     	; 0x52b2 <pf_lseek+0x376>
			fs->dsect = sect + fs->csect++;
    527e:	e9 81       	ldd	r30, Y+1	; 0x01
    5280:	fa 81       	ldd	r31, Y+2	; 0x02
    5282:	63 81       	ldd	r22, Z+3	; 0x03
    5284:	26 2f       	mov	r18, r22
    5286:	30 e0       	ldi	r19, 0x00	; 0
    5288:	40 e0       	ldi	r20, 0x00	; 0
    528a:	50 e0       	ldi	r21, 0x00	; 0
    528c:	8f 81       	ldd	r24, Y+7	; 0x07
    528e:	98 85       	ldd	r25, Y+8	; 0x08
    5290:	a9 85       	ldd	r26, Y+9	; 0x09
    5292:	ba 85       	ldd	r27, Y+10	; 0x0a
    5294:	82 0f       	add	r24, r18
    5296:	93 1f       	adc	r25, r19
    5298:	a4 1f       	adc	r26, r20
    529a:	b5 1f       	adc	r27, r21
    529c:	e9 81       	ldd	r30, Y+1	; 0x01
    529e:	fa 81       	ldd	r31, Y+2	; 0x02
    52a0:	80 a7       	std	Z+40, r24	; 0x28
    52a2:	91 a7       	std	Z+41, r25	; 0x29
    52a4:	a2 a7       	std	Z+42, r26	; 0x2a
    52a6:	b3 a7       	std	Z+43, r27	; 0x2b
    52a8:	86 2f       	mov	r24, r22
    52aa:	8f 5f       	subi	r24, 0xFF	; 255
    52ac:	e9 81       	ldd	r30, Y+1	; 0x01
    52ae:	fa 81       	ldd	r31, Y+2	; 0x02
    52b0:	83 83       	std	Z+3, r24	; 0x03
	}

	return FR_OK;
    52b2:	1f 8a       	std	Y+23, r1	; 0x17
    52b4:	05 c0       	rjmp	.+10     	; 0x52c0 <pf_lseek+0x384>

fe_abort:
	fs->flag = 0;
    52b6:	e9 81       	ldd	r30, Y+1	; 0x01
    52b8:	fa 81       	ldd	r31, Y+2	; 0x02
    52ba:	12 82       	std	Z+2, r1	; 0x02
	return FR_DISK_ERR;
    52bc:	01 e0       	ldi	r16, 0x01	; 1
    52be:	0f 8b       	std	Y+23, r16	; 0x17
    52c0:	8f 89       	ldd	r24, Y+23	; 0x17
}
    52c2:	67 96       	adiw	r28, 0x17	; 23
    52c4:	0f b6       	in	r0, 0x3f	; 63
    52c6:	f8 94       	cli
    52c8:	de bf       	out	0x3e, r29	; 62
    52ca:	0f be       	out	0x3f, r0	; 63
    52cc:	cd bf       	out	0x3d, r28	; 61
    52ce:	cf 91       	pop	r28
    52d0:	df 91       	pop	r29
    52d2:	1f 91       	pop	r17
    52d4:	0f 91       	pop	r16
    52d6:	ff 90       	pop	r15
    52d8:	ef 90       	pop	r14
    52da:	08 95       	ret

000052dc <pf_opendir>:

FRESULT pf_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const char *path	/* Pointer to the directory path */
)
{
    52dc:	df 93       	push	r29
    52de:	cf 93       	push	r28
    52e0:	cd b7       	in	r28, 0x3d	; 61
    52e2:	de b7       	in	r29, 0x3e	; 62
    52e4:	e3 97       	sbiw	r28, 0x33	; 51
    52e6:	0f b6       	in	r0, 0x3f	; 63
    52e8:	f8 94       	cli
    52ea:	de bf       	out	0x3e, r29	; 62
    52ec:	0f be       	out	0x3f, r0	; 63
    52ee:	cd bf       	out	0x3d, r28	; 61
    52f0:	99 ab       	std	Y+49, r25	; 0x31
    52f2:	88 ab       	std	Y+48, r24	; 0x30
    52f4:	7b ab       	std	Y+51, r23	; 0x33
    52f6:	6a ab       	std	Y+50, r22	; 0x32
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    52f8:	80 91 22 02 	lds	r24, 0x0222
    52fc:	90 91 23 02 	lds	r25, 0x0223
    5300:	9a 83       	std	Y+2, r25	; 0x02
    5302:	89 83       	std	Y+1, r24	; 0x01


	if (!fs) {				/* Check file system */
    5304:	89 81       	ldd	r24, Y+1	; 0x01
    5306:	9a 81       	ldd	r25, Y+2	; 0x02
    5308:	00 97       	sbiw	r24, 0x00	; 0
    530a:	19 f4       	brne	.+6      	; 0x5312 <pf_opendir+0x36>
		res = FR_NOT_ENABLED;
    530c:	86 e0       	ldi	r24, 0x06	; 6
    530e:	8b 83       	std	Y+3, r24	; 0x03
    5310:	50 c0       	rjmp	.+160    	; 0x53b2 <pf_opendir+0xd6>
	} else {
		fs->buf = dir;
    5312:	e9 81       	ldd	r30, Y+1	; 0x01
    5314:	fa 81       	ldd	r31, Y+2	; 0x02
    5316:	ce 01       	movw	r24, r28
    5318:	40 96       	adiw	r24, 0x10	; 16
    531a:	97 83       	std	Z+7, r25	; 0x07
    531c:	86 83       	std	Z+6, r24	; 0x06
		dj->fn = sp;
    531e:	e8 a9       	ldd	r30, Y+48	; 0x30
    5320:	f9 a9       	ldd	r31, Y+49	; 0x31
    5322:	ce 01       	movw	r24, r28
    5324:	04 96       	adiw	r24, 0x04	; 4
    5326:	93 83       	std	Z+3, r25	; 0x03
    5328:	82 83       	std	Z+2, r24	; 0x02
		res = follow_path(dj, path);			/* Follow the path to the directory */
    532a:	88 a9       	ldd	r24, Y+48	; 0x30
    532c:	99 a9       	ldd	r25, Y+49	; 0x31
    532e:	2a a9       	ldd	r18, Y+50	; 0x32
    5330:	3b a9       	ldd	r19, Y+51	; 0x33
    5332:	b9 01       	movw	r22, r18
    5334:	0e 94 a7 20 	call	0x414e	; 0x414e <follow_path>
    5338:	8b 83       	std	Y+3, r24	; 0x03
		if (res == FR_OK) {						/* Follow completed */
    533a:	8b 81       	ldd	r24, Y+3	; 0x03
    533c:	88 23       	and	r24, r24
    533e:	a1 f5       	brne	.+104    	; 0x53a8 <pf_opendir+0xcc>
			if (dir[0]) {						/* It is not the root dir */
    5340:	88 89       	ldd	r24, Y+16	; 0x10
    5342:	88 23       	and	r24, r24
    5344:	49 f1       	breq	.+82     	; 0x5398 <pf_opendir+0xbc>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    5346:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5348:	88 2f       	mov	r24, r24
    534a:	90 e0       	ldi	r25, 0x00	; 0
    534c:	80 71       	andi	r24, 0x10	; 16
    534e:	90 70       	andi	r25, 0x00	; 0
    5350:	00 97       	sbiw	r24, 0x00	; 0
    5352:	01 f1       	breq	.+64     	; 0x5394 <pf_opendir+0xb8>
					dj->sclust =
    5354:	ce 01       	movw	r24, r28
    5356:	40 96       	adiw	r24, 0x10	; 16
    5358:	fc 01       	movw	r30, r24
    535a:	74 96       	adiw	r30, 0x14	; 20
    535c:	80 81       	ld	r24, Z
    535e:	91 81       	ldd	r25, Z+1	; 0x01
    5360:	cc 01       	movw	r24, r24
    5362:	a0 e0       	ldi	r26, 0x00	; 0
    5364:	b0 e0       	ldi	r27, 0x00	; 0
    5366:	ac 01       	movw	r20, r24
    5368:	33 27       	eor	r19, r19
    536a:	22 27       	eor	r18, r18
    536c:	ce 01       	movw	r24, r28
    536e:	40 96       	adiw	r24, 0x10	; 16
    5370:	fc 01       	movw	r30, r24
    5372:	7a 96       	adiw	r30, 0x1a	; 26
    5374:	80 81       	ld	r24, Z
    5376:	91 81       	ldd	r25, Z+1	; 0x01
    5378:	cc 01       	movw	r24, r24
    537a:	a0 e0       	ldi	r26, 0x00	; 0
    537c:	b0 e0       	ldi	r27, 0x00	; 0
    537e:	82 2b       	or	r24, r18
    5380:	93 2b       	or	r25, r19
    5382:	a4 2b       	or	r26, r20
    5384:	b5 2b       	or	r27, r21
    5386:	e8 a9       	ldd	r30, Y+48	; 0x30
    5388:	f9 a9       	ldd	r31, Y+49	; 0x31
    538a:	84 83       	std	Z+4, r24	; 0x04
    538c:	95 83       	std	Z+5, r25	; 0x05
    538e:	a6 83       	std	Z+6, r26	; 0x06
    5390:	b7 83       	std	Z+7, r27	; 0x07
    5392:	02 c0       	rjmp	.+4      	; 0x5398 <pf_opendir+0xbc>
#if _FS_FAT32
					((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) |
#endif
					LD_WORD(dir+DIR_FstClusLO);
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
    5394:	84 e0       	ldi	r24, 0x04	; 4
    5396:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
			if (res == FR_OK)
    5398:	8b 81       	ldd	r24, Y+3	; 0x03
    539a:	88 23       	and	r24, r24
    539c:	29 f4       	brne	.+10     	; 0x53a8 <pf_opendir+0xcc>
				res = dir_rewind(dj);			/* Rewind dir */
    539e:	88 a9       	ldd	r24, Y+48	; 0x30
    53a0:	99 a9       	ldd	r25, Y+49	; 0x31
    53a2:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <dir_rewind>
    53a6:	8b 83       	std	Y+3, r24	; 0x03
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    53a8:	8b 81       	ldd	r24, Y+3	; 0x03
    53aa:	83 30       	cpi	r24, 0x03	; 3
    53ac:	11 f4       	brne	.+4      	; 0x53b2 <pf_opendir+0xd6>
    53ae:	84 e0       	ldi	r24, 0x04	; 4
    53b0:	8b 83       	std	Y+3, r24	; 0x03
	}

	return res;
    53b2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    53b4:	e3 96       	adiw	r28, 0x33	; 51
    53b6:	0f b6       	in	r0, 0x3f	; 63
    53b8:	f8 94       	cli
    53ba:	de bf       	out	0x3e, r29	; 62
    53bc:	0f be       	out	0x3f, r0	; 63
    53be:	cd bf       	out	0x3d, r28	; 61
    53c0:	cf 91       	pop	r28
    53c2:	df 91       	pop	r29
    53c4:	08 95       	ret

000053c6 <pf_readdir>:

FRESULT pf_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    53c6:	df 93       	push	r29
    53c8:	cf 93       	push	r28
    53ca:	cd b7       	in	r28, 0x3d	; 61
    53cc:	de b7       	in	r29, 0x3e	; 62
    53ce:	e3 97       	sbiw	r28, 0x33	; 51
    53d0:	0f b6       	in	r0, 0x3f	; 63
    53d2:	f8 94       	cli
    53d4:	de bf       	out	0x3e, r29	; 62
    53d6:	0f be       	out	0x3f, r0	; 63
    53d8:	cd bf       	out	0x3d, r28	; 61
    53da:	99 ab       	std	Y+49, r25	; 0x31
    53dc:	88 ab       	std	Y+48, r24	; 0x30
    53de:	7b ab       	std	Y+51, r23	; 0x33
    53e0:	6a ab       	std	Y+50, r22	; 0x32
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    53e2:	80 91 22 02 	lds	r24, 0x0222
    53e6:	90 91 23 02 	lds	r25, 0x0223
    53ea:	9a 83       	std	Y+2, r25	; 0x02
    53ec:	89 83       	std	Y+1, r24	; 0x01


	if (!fs) {				/* Check file system */
    53ee:	89 81       	ldd	r24, Y+1	; 0x01
    53f0:	9a 81       	ldd	r25, Y+2	; 0x02
    53f2:	00 97       	sbiw	r24, 0x00	; 0
    53f4:	19 f4       	brne	.+6      	; 0x53fc <pf_readdir+0x36>
		res = FR_NOT_ENABLED;
    53f6:	86 e0       	ldi	r24, 0x06	; 6
    53f8:	8b 83       	std	Y+3, r24	; 0x03
    53fa:	3e c0       	rjmp	.+124    	; 0x5478 <pf_readdir+0xb2>
	} else {
		fs->buf = dir;
    53fc:	e9 81       	ldd	r30, Y+1	; 0x01
    53fe:	fa 81       	ldd	r31, Y+2	; 0x02
    5400:	ce 01       	movw	r24, r28
    5402:	40 96       	adiw	r24, 0x10	; 16
    5404:	97 83       	std	Z+7, r25	; 0x07
    5406:	86 83       	std	Z+6, r24	; 0x06
		dj->fn = sp;
    5408:	e8 a9       	ldd	r30, Y+48	; 0x30
    540a:	f9 a9       	ldd	r31, Y+49	; 0x31
    540c:	ce 01       	movw	r24, r28
    540e:	04 96       	adiw	r24, 0x04	; 4
    5410:	93 83       	std	Z+3, r25	; 0x03
    5412:	82 83       	std	Z+2, r24	; 0x02
		if (!fno) {
    5414:	8a a9       	ldd	r24, Y+50	; 0x32
    5416:	9b a9       	ldd	r25, Y+51	; 0x33
    5418:	00 97       	sbiw	r24, 0x00	; 0
    541a:	31 f4       	brne	.+12     	; 0x5428 <pf_readdir+0x62>
			res = dir_rewind(dj);
    541c:	88 a9       	ldd	r24, Y+48	; 0x30
    541e:	99 a9       	ldd	r25, Y+49	; 0x31
    5420:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <dir_rewind>
    5424:	8b 83       	std	Y+3, r24	; 0x03
    5426:	28 c0       	rjmp	.+80     	; 0x5478 <pf_readdir+0xb2>
		} else {
			res = dir_read(dj);
    5428:	88 a9       	ldd	r24, Y+48	; 0x30
    542a:	99 a9       	ldd	r25, Y+49	; 0x31
    542c:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <dir_read>
    5430:	8b 83       	std	Y+3, r24	; 0x03
			if (res == FR_NO_FILE) {
    5432:	8b 81       	ldd	r24, Y+3	; 0x03
    5434:	83 30       	cpi	r24, 0x03	; 3
    5436:	39 f4       	brne	.+14     	; 0x5446 <pf_readdir+0x80>
				dj->sect = 0;
    5438:	e8 a9       	ldd	r30, Y+48	; 0x30
    543a:	f9 a9       	ldd	r31, Y+49	; 0x31
    543c:	14 86       	std	Z+12, r1	; 0x0c
    543e:	15 86       	std	Z+13, r1	; 0x0d
    5440:	16 86       	std	Z+14, r1	; 0x0e
    5442:	17 86       	std	Z+15, r1	; 0x0f
				res = FR_OK;
    5444:	1b 82       	std	Y+3, r1	; 0x03
			}
			if (res == FR_OK) {				/* A valid entry is found */
    5446:	8b 81       	ldd	r24, Y+3	; 0x03
    5448:	88 23       	and	r24, r24
    544a:	b1 f4       	brne	.+44     	; 0x5478 <pf_readdir+0xb2>
				get_fileinfo(dj, fno);		/* Get the object information */
    544c:	88 a9       	ldd	r24, Y+48	; 0x30
    544e:	99 a9       	ldd	r25, Y+49	; 0x31
    5450:	2a a9       	ldd	r18, Y+50	; 0x32
    5452:	3b a9       	ldd	r19, Y+51	; 0x33
    5454:	b9 01       	movw	r22, r18
    5456:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <get_fileinfo>
				res = dir_next(dj);			/* Increment index for next */
    545a:	88 a9       	ldd	r24, Y+48	; 0x30
    545c:	99 a9       	ldd	r25, Y+49	; 0x31
    545e:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <dir_next>
    5462:	8b 83       	std	Y+3, r24	; 0x03
				if (res == FR_NO_FILE) {
    5464:	8b 81       	ldd	r24, Y+3	; 0x03
    5466:	83 30       	cpi	r24, 0x03	; 3
    5468:	39 f4       	brne	.+14     	; 0x5478 <pf_readdir+0xb2>
					dj->sect = 0;
    546a:	e8 a9       	ldd	r30, Y+48	; 0x30
    546c:	f9 a9       	ldd	r31, Y+49	; 0x31
    546e:	14 86       	std	Z+12, r1	; 0x0c
    5470:	15 86       	std	Z+13, r1	; 0x0d
    5472:	16 86       	std	Z+14, r1	; 0x0e
    5474:	17 86       	std	Z+15, r1	; 0x0f
					res = FR_OK;
    5476:	1b 82       	std	Y+3, r1	; 0x03
				}
			}
		}
	}

	return res;
    5478:	8b 81       	ldd	r24, Y+3	; 0x03
}
    547a:	e3 96       	adiw	r28, 0x33	; 51
    547c:	0f b6       	in	r0, 0x3f	; 63
    547e:	f8 94       	cli
    5480:	de bf       	out	0x3e, r29	; 62
    5482:	0f be       	out	0x3f, r0	; 63
    5484:	cd bf       	out	0x3d, r28	; 61
    5486:	cf 91       	pop	r28
    5488:	df 91       	pop	r29
    548a:	08 95       	ret

0000548c <InitUSART>:
#include <avr/io.h>
#include <util/delay.h>
#include <stdlib.h>
#include <inttypes.h>

void InitUSART( unsigned long int baud ){ // baud - czyli bitrate portu COM
    548c:	0f 93       	push	r16
    548e:	1f 93       	push	r17
    5490:	df 93       	push	r29
    5492:	cf 93       	push	r28
    5494:	00 d0       	rcall	.+0      	; 0x5496 <InitUSART+0xa>
    5496:	00 d0       	rcall	.+0      	; 0x5498 <InitUSART+0xc>
    5498:	cd b7       	in	r28, 0x3d	; 61
    549a:	de b7       	in	r29, 0x3e	; 62
    549c:	69 83       	std	Y+1, r22	; 0x01
    549e:	7a 83       	std	Y+2, r23	; 0x02
    54a0:	8b 83       	std	Y+3, r24	; 0x03
    54a2:	9c 83       	std	Y+4, r25	; 0x04
	//ustalenie stanu UBRR
	UBRRH = (unsigned char)(((F_CPU/(16UL*baud))-1)>>8);
    54a4:	00 e4       	ldi	r16, 0x40	; 64
    54a6:	10 e0       	ldi	r17, 0x00	; 0
    54a8:	89 81       	ldd	r24, Y+1	; 0x01
    54aa:	9a 81       	ldd	r25, Y+2	; 0x02
    54ac:	ab 81       	ldd	r26, Y+3	; 0x03
    54ae:	bc 81       	ldd	r27, Y+4	; 0x04
    54b0:	88 0f       	add	r24, r24
    54b2:	99 1f       	adc	r25, r25
    54b4:	aa 1f       	adc	r26, r26
    54b6:	bb 1f       	adc	r27, r27
    54b8:	88 0f       	add	r24, r24
    54ba:	99 1f       	adc	r25, r25
    54bc:	aa 1f       	adc	r26, r26
    54be:	bb 1f       	adc	r27, r27
    54c0:	88 0f       	add	r24, r24
    54c2:	99 1f       	adc	r25, r25
    54c4:	aa 1f       	adc	r26, r26
    54c6:	bb 1f       	adc	r27, r27
    54c8:	88 0f       	add	r24, r24
    54ca:	99 1f       	adc	r25, r25
    54cc:	aa 1f       	adc	r26, r26
    54ce:	bb 1f       	adc	r27, r27
    54d0:	9c 01       	movw	r18, r24
    54d2:	ad 01       	movw	r20, r26
    54d4:	80 e0       	ldi	r24, 0x00	; 0
    54d6:	94 e2       	ldi	r25, 0x24	; 36
    54d8:	a4 ef       	ldi	r26, 0xF4	; 244
    54da:	b0 e0       	ldi	r27, 0x00	; 0
    54dc:	bc 01       	movw	r22, r24
    54de:	cd 01       	movw	r24, r26
    54e0:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
    54e4:	da 01       	movw	r26, r20
    54e6:	c9 01       	movw	r24, r18
    54e8:	01 97       	sbiw	r24, 0x01	; 1
    54ea:	a1 09       	sbc	r26, r1
    54ec:	b1 09       	sbc	r27, r1
    54ee:	89 2f       	mov	r24, r25
    54f0:	9a 2f       	mov	r25, r26
    54f2:	ab 2f       	mov	r26, r27
    54f4:	bb 27       	eor	r27, r27
    54f6:	f8 01       	movw	r30, r16
    54f8:	80 83       	st	Z, r24
	UBRRL = (unsigned char)((F_CPU/(16UL*baud))-1);
    54fa:	09 e2       	ldi	r16, 0x29	; 41
    54fc:	10 e0       	ldi	r17, 0x00	; 0
    54fe:	89 81       	ldd	r24, Y+1	; 0x01
    5500:	9a 81       	ldd	r25, Y+2	; 0x02
    5502:	ab 81       	ldd	r26, Y+3	; 0x03
    5504:	bc 81       	ldd	r27, Y+4	; 0x04
    5506:	88 0f       	add	r24, r24
    5508:	99 1f       	adc	r25, r25
    550a:	aa 1f       	adc	r26, r26
    550c:	bb 1f       	adc	r27, r27
    550e:	88 0f       	add	r24, r24
    5510:	99 1f       	adc	r25, r25
    5512:	aa 1f       	adc	r26, r26
    5514:	bb 1f       	adc	r27, r27
    5516:	88 0f       	add	r24, r24
    5518:	99 1f       	adc	r25, r25
    551a:	aa 1f       	adc	r26, r26
    551c:	bb 1f       	adc	r27, r27
    551e:	88 0f       	add	r24, r24
    5520:	99 1f       	adc	r25, r25
    5522:	aa 1f       	adc	r26, r26
    5524:	bb 1f       	adc	r27, r27
    5526:	9c 01       	movw	r18, r24
    5528:	ad 01       	movw	r20, r26
    552a:	80 e0       	ldi	r24, 0x00	; 0
    552c:	94 e2       	ldi	r25, 0x24	; 36
    552e:	a4 ef       	ldi	r26, 0xF4	; 244
    5530:	b0 e0       	ldi	r27, 0x00	; 0
    5532:	bc 01       	movw	r22, r24
    5534:	cd 01       	movw	r24, r26
    5536:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
    553a:	da 01       	movw	r26, r20
    553c:	c9 01       	movw	r24, r18
    553e:	81 50       	subi	r24, 0x01	; 1
    5540:	f8 01       	movw	r30, r16
    5542:	80 83       	st	Z, r24
	// aktywny kana≥ odbioru i nadawania
	UCSRB = (1<<RXEN)|(1<<TXEN);
    5544:	ea e2       	ldi	r30, 0x2A	; 42
    5546:	f0 e0       	ldi	r31, 0x00	; 0
    5548:	88 e1       	ldi	r24, 0x18	; 24
    554a:	80 83       	st	Z, r24
	// 8bitÛw, brak parzystoúci, 2 bity stopu
	//UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
	// 8bitÛw, brak parzystoúci, 1 bit stopu
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
    554c:	e0 e4       	ldi	r30, 0x40	; 64
    554e:	f0 e0       	ldi	r31, 0x00	; 0
    5550:	86 e8       	ldi	r24, 0x86	; 134
    5552:	80 83       	st	Z, r24
}
    5554:	0f 90       	pop	r0
    5556:	0f 90       	pop	r0
    5558:	0f 90       	pop	r0
    555a:	0f 90       	pop	r0
    555c:	cf 91       	pop	r28
    555e:	df 91       	pop	r29
    5560:	1f 91       	pop	r17
    5562:	0f 91       	pop	r16
    5564:	08 95       	ret

00005566 <ReceiveUSART>:

unsigned char ReceiveUSART( void ){  // funkcja odbioru bajtu z RS232 (str.147)
    5566:	df 93       	push	r29
    5568:	cf 93       	push	r28
    556a:	cd b7       	in	r28, 0x3d	; 61
    556c:	de b7       	in	r29, 0x3e	; 62
	//dopoki bufor nie bÍdzie pusty zwraca wartosc funkcji
	while ( !(UCSRA & (1<<RXC)) );
    556e:	eb e2       	ldi	r30, 0x2B	; 43
    5570:	f0 e0       	ldi	r31, 0x00	; 0
    5572:	80 81       	ld	r24, Z
    5574:	88 23       	and	r24, r24
    5576:	dc f7       	brge	.-10     	; 0x556e <ReceiveUSART+0x8>
	return UDR;
    5578:	ec e2       	ldi	r30, 0x2C	; 44
    557a:	f0 e0       	ldi	r31, 0x00	; 0
    557c:	80 81       	ld	r24, Z
}
    557e:	cf 91       	pop	r28
    5580:	df 91       	pop	r29
    5582:	08 95       	ret

00005584 <TransmitUSART>:

void TransmitUSART(unsigned char data){  // funkcja wys≥ania bajtu przez RS232
    5584:	df 93       	push	r29
    5586:	cf 93       	push	r28
    5588:	0f 92       	push	r0
    558a:	cd b7       	in	r28, 0x3d	; 61
    558c:	de b7       	in	r29, 0x3e	; 62
    558e:	89 83       	std	Y+1, r24	; 0x01
	//czeka na wys≥anie poprzedniej danej
	while ( !( UCSRA & (1<<UDRE)) );
    5590:	eb e2       	ldi	r30, 0x2B	; 43
    5592:	f0 e0       	ldi	r31, 0x00	; 0
    5594:	80 81       	ld	r24, Z
    5596:	88 2f       	mov	r24, r24
    5598:	90 e0       	ldi	r25, 0x00	; 0
    559a:	80 72       	andi	r24, 0x20	; 32
    559c:	90 70       	andi	r25, 0x00	; 0
    559e:	00 97       	sbiw	r24, 0x00	; 0
    55a0:	b9 f3       	breq	.-18     	; 0x5590 <TransmitUSART+0xc>
	UDR = data;
    55a2:	ec e2       	ldi	r30, 0x2C	; 44
    55a4:	f0 e0       	ldi	r31, 0x00	; 0
    55a6:	89 81       	ldd	r24, Y+1	; 0x01
    55a8:	80 83       	st	Z, r24
}
    55aa:	0f 90       	pop	r0
    55ac:	cf 91       	pop	r28
    55ae:	df 91       	pop	r29
    55b0:	08 95       	ret

000055b2 <BT_receive>:


//KAROL*********************************************************************************
int BT_receive(char **bufor, int size){
    55b2:	df 93       	push	r29
    55b4:	cf 93       	push	r28
    55b6:	00 d0       	rcall	.+0      	; 0x55b8 <BT_receive+0x6>
    55b8:	00 d0       	rcall	.+0      	; 0x55ba <BT_receive+0x8>
    55ba:	00 d0       	rcall	.+0      	; 0x55bc <BT_receive+0xa>
    55bc:	cd b7       	in	r28, 0x3d	; 61
    55be:	de b7       	in	r29, 0x3e	; 62
    55c0:	9c 83       	std	Y+4, r25	; 0x04
    55c2:	8b 83       	std	Y+3, r24	; 0x03
    55c4:	7e 83       	std	Y+6, r23	; 0x06
    55c6:	6d 83       	std	Y+5, r22	; 0x05

	uint8_t flag=0;
    55c8:	1a 82       	std	Y+2, r1	; 0x02
//	|	0	|	1	|
//	|NEUTRAL|LF_konc|
//	*---------------*

	while(1){
		if (ReceiveUSART()==0x0A){ //LF START
    55ca:	0e 94 b3 2a 	call	0x5566	; 0x5566 <ReceiveUSART>
    55ce:	8a 30       	cpi	r24, 0x0A	; 10
    55d0:	e1 f7       	brne	.-8      	; 0x55ca <BT_receive+0x18>
			while(1) {
				char recv = ReceiveUSART(); //zapisz odebrany znak
    55d2:	0e 94 b3 2a 	call	0x5566	; 0x5566 <ReceiveUSART>
    55d6:	89 83       	std	Y+1, r24	; 0x01
				if(recv == 0x0A){ //jeøeli znaleziono LF, to ustaw flagÍ na flag=1
    55d8:	89 81       	ldd	r24, Y+1	; 0x01
    55da:	8a 30       	cpi	r24, 0x0A	; 10
    55dc:	11 f4       	brne	.+4      	; 0x55e2 <BT_receive+0x30>
					flag = 1;
    55de:	81 e0       	ldi	r24, 0x01	; 1
    55e0:	8a 83       	std	Y+2, r24	; 0x02
				}
				size++; //zwiÍksz rozmiar bufora
    55e2:	8d 81       	ldd	r24, Y+5	; 0x05
    55e4:	9e 81       	ldd	r25, Y+6	; 0x06
    55e6:	01 96       	adiw	r24, 0x01	; 1
    55e8:	9e 83       	std	Y+6, r25	; 0x06
    55ea:	8d 83       	std	Y+5, r24	; 0x05
				*bufor = realloc(*bufor, size); //zmiana rozmiaru alokowanej pamiÍci
    55ec:	eb 81       	ldd	r30, Y+3	; 0x03
    55ee:	fc 81       	ldd	r31, Y+4	; 0x04
    55f0:	80 81       	ld	r24, Z
    55f2:	91 81       	ldd	r25, Z+1	; 0x01
    55f4:	2d 81       	ldd	r18, Y+5	; 0x05
    55f6:	3e 81       	ldd	r19, Y+6	; 0x06
    55f8:	b9 01       	movw	r22, r18
    55fa:	0e 94 f8 49 	call	0x93f0	; 0x93f0 <realloc>
    55fe:	eb 81       	ldd	r30, Y+3	; 0x03
    5600:	fc 81       	ldd	r31, Y+4	; 0x04
    5602:	91 83       	std	Z+1, r25	; 0x01
    5604:	80 83       	st	Z, r24
				(*bufor)[size-1] = recv; //zapis odebranego znaku do bufora
    5606:	eb 81       	ldd	r30, Y+3	; 0x03
    5608:	fc 81       	ldd	r31, Y+4	; 0x04
    560a:	20 81       	ld	r18, Z
    560c:	31 81       	ldd	r19, Z+1	; 0x01
    560e:	8d 81       	ldd	r24, Y+5	; 0x05
    5610:	9e 81       	ldd	r25, Y+6	; 0x06
    5612:	01 97       	sbiw	r24, 0x01	; 1
    5614:	f9 01       	movw	r30, r18
    5616:	e8 0f       	add	r30, r24
    5618:	f9 1f       	adc	r31, r25
    561a:	89 81       	ldd	r24, Y+1	; 0x01
    561c:	80 83       	st	Z, r24
//				TransmitUSART(recv);
				if(flag == 1){ //jeøeli znaleziono LF, to zwrÛÊ rozmiar bufora
    561e:	8a 81       	ldd	r24, Y+2	; 0x02
    5620:	81 30       	cpi	r24, 0x01	; 1
    5622:	b9 f6       	brne	.-82     	; 0x55d2 <BT_receive+0x20>
					return size;
    5624:	8d 81       	ldd	r24, Y+5	; 0x05
    5626:	9e 81       	ldd	r25, Y+6	; 0x06
				}
			}
		}
	}
	return 0;
}
    5628:	26 96       	adiw	r28, 0x06	; 6
    562a:	0f b6       	in	r0, 0x3f	; 63
    562c:	f8 94       	cli
    562e:	de bf       	out	0x3e, r29	; 62
    5630:	0f be       	out	0x3f, r0	; 63
    5632:	cd bf       	out	0x3d, r28	; 61
    5634:	cf 91       	pop	r28
    5636:	df 91       	pop	r29
    5638:	08 95       	ret

0000563a <buforSize>:

int buforSize(char *bufor){
    563a:	df 93       	push	r29
    563c:	cf 93       	push	r28
    563e:	00 d0       	rcall	.+0      	; 0x5640 <buforSize+0x6>
    5640:	00 d0       	rcall	.+0      	; 0x5642 <buforSize+0x8>
    5642:	cd b7       	in	r28, 0x3d	; 61
    5644:	de b7       	in	r29, 0x3e	; 62
    5646:	9c 83       	std	Y+4, r25	; 0x04
    5648:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    564a:	1a 82       	std	Y+2, r1	; 0x02
    564c:	19 82       	std	Y+1, r1	; 0x01
    564e:	05 c0       	rjmp	.+10     	; 0x565a <buforSize+0x20>
	while(bufor[i]!=0x0D && bufor[i+1]!=0x0A){
		i++;
    5650:	89 81       	ldd	r24, Y+1	; 0x01
    5652:	9a 81       	ldd	r25, Y+2	; 0x02
    5654:	01 96       	adiw	r24, 0x01	; 1
    5656:	9a 83       	std	Y+2, r25	; 0x02
    5658:	89 83       	std	Y+1, r24	; 0x01
	return 0;
}

int buforSize(char *bufor){
	int i=0;
	while(bufor[i]!=0x0D && bufor[i+1]!=0x0A){
    565a:	29 81       	ldd	r18, Y+1	; 0x01
    565c:	3a 81       	ldd	r19, Y+2	; 0x02
    565e:	8b 81       	ldd	r24, Y+3	; 0x03
    5660:	9c 81       	ldd	r25, Y+4	; 0x04
    5662:	fc 01       	movw	r30, r24
    5664:	e2 0f       	add	r30, r18
    5666:	f3 1f       	adc	r31, r19
    5668:	80 81       	ld	r24, Z
    566a:	8d 30       	cpi	r24, 0x0D	; 13
    566c:	69 f0       	breq	.+26     	; 0x5688 <buforSize+0x4e>
    566e:	89 81       	ldd	r24, Y+1	; 0x01
    5670:	9a 81       	ldd	r25, Y+2	; 0x02
    5672:	9c 01       	movw	r18, r24
    5674:	2f 5f       	subi	r18, 0xFF	; 255
    5676:	3f 4f       	sbci	r19, 0xFF	; 255
    5678:	8b 81       	ldd	r24, Y+3	; 0x03
    567a:	9c 81       	ldd	r25, Y+4	; 0x04
    567c:	fc 01       	movw	r30, r24
    567e:	e2 0f       	add	r30, r18
    5680:	f3 1f       	adc	r31, r19
    5682:	80 81       	ld	r24, Z
    5684:	8a 30       	cpi	r24, 0x0A	; 10
    5686:	21 f7       	brne	.-56     	; 0x5650 <buforSize+0x16>
		i++;
	}
	return i+2;
    5688:	89 81       	ldd	r24, Y+1	; 0x01
    568a:	9a 81       	ldd	r25, Y+2	; 0x02
    568c:	02 96       	adiw	r24, 0x02	; 2
}
    568e:	0f 90       	pop	r0
    5690:	0f 90       	pop	r0
    5692:	0f 90       	pop	r0
    5694:	0f 90       	pop	r0
    5696:	cf 91       	pop	r28
    5698:	df 91       	pop	r29
    569a:	08 95       	ret

0000569c <wyswietl_numer>:
#include <inttypes.h>

#include "lcd44780.h"

//wyswietlenie numeru linii
void wyswietl_numer(cyfra) {//zamiast wybor wstawic autobusik_uint
    569c:	df 93       	push	r29
    569e:	cf 93       	push	r28
    56a0:	cd b7       	in	r28, 0x3d	; 61
    56a2:	de b7       	in	r29, 0x3e	; 62
    56a4:	68 97       	sbiw	r28, 0x18	; 24
    56a6:	0f b6       	in	r0, 0x3f	; 63
    56a8:	f8 94       	cli
    56aa:	de bf       	out	0x3e, r29	; 62
    56ac:	0f be       	out	0x3f, r0	; 63
    56ae:	cd bf       	out	0x3d, r28	; 61
    56b0:	9e 8b       	std	Y+22, r25	; 0x16
    56b2:	8d 8b       	std	Y+21, r24	; 0x15
	char zero[] = {"0"};	//0
    56b4:	80 91 94 01 	lds	r24, 0x0194
    56b8:	90 91 95 01 	lds	r25, 0x0195
    56bc:	9a 83       	std	Y+2, r25	; 0x02
    56be:	89 83       	std	Y+1, r24	; 0x01
	char jeden[] = {"1"};	//1
    56c0:	80 91 96 01 	lds	r24, 0x0196
    56c4:	90 91 97 01 	lds	r25, 0x0197
    56c8:	9c 83       	std	Y+4, r25	; 0x04
    56ca:	8b 83       	std	Y+3, r24	; 0x03
	char dwa[] = {"2"};		//2
    56cc:	80 91 98 01 	lds	r24, 0x0198
    56d0:	90 91 99 01 	lds	r25, 0x0199
    56d4:	9e 83       	std	Y+6, r25	; 0x06
    56d6:	8d 83       	std	Y+5, r24	; 0x05
	char trzy[] = {"3"};	//3
    56d8:	80 91 9a 01 	lds	r24, 0x019A
    56dc:	90 91 9b 01 	lds	r25, 0x019B
    56e0:	98 87       	std	Y+8, r25	; 0x08
    56e2:	8f 83       	std	Y+7, r24	; 0x07
	char cztery[] = {"4"};	//4
    56e4:	80 91 9c 01 	lds	r24, 0x019C
    56e8:	90 91 9d 01 	lds	r25, 0x019D
    56ec:	9a 87       	std	Y+10, r25	; 0x0a
    56ee:	89 87       	std	Y+9, r24	; 0x09
	char piec[] = {"5"};	//5
    56f0:	80 91 9e 01 	lds	r24, 0x019E
    56f4:	90 91 9f 01 	lds	r25, 0x019F
    56f8:	9c 87       	std	Y+12, r25	; 0x0c
    56fa:	8b 87       	std	Y+11, r24	; 0x0b
	char szesc[] = {"6"};	//6
    56fc:	80 91 a0 01 	lds	r24, 0x01A0
    5700:	90 91 a1 01 	lds	r25, 0x01A1
    5704:	9e 87       	std	Y+14, r25	; 0x0e
    5706:	8d 87       	std	Y+13, r24	; 0x0d
	char siedem[] = {"7"};	//7
    5708:	80 91 a2 01 	lds	r24, 0x01A2
    570c:	90 91 a3 01 	lds	r25, 0x01A3
    5710:	98 8b       	std	Y+16, r25	; 0x10
    5712:	8f 87       	std	Y+15, r24	; 0x0f
	char osiem[] = {"8"};	//8
    5714:	80 91 a4 01 	lds	r24, 0x01A4
    5718:	90 91 a5 01 	lds	r25, 0x01A5
    571c:	9a 8b       	std	Y+18, r25	; 0x12
    571e:	89 8b       	std	Y+17, r24	; 0x11
	char dziewiec[] = {"9"};//9
    5720:	80 91 a6 01 	lds	r24, 0x01A6
    5724:	90 91 a7 01 	lds	r25, 0x01A7
    5728:	9c 8b       	std	Y+20, r25	; 0x14
    572a:	8b 8b       	std	Y+19, r24	; 0x13

	lcd_locate(0,15);
    572c:	80 e0       	ldi	r24, 0x00	; 0
    572e:	6f e0       	ldi	r22, 0x0F	; 15
    5730:	0e 94 a8 30 	call	0x6150	; 0x6150 <lcd_locate>
	switch (cyfra){
    5734:	8d 89       	ldd	r24, Y+21	; 0x15
    5736:	9e 89       	ldd	r25, Y+22	; 0x16
    5738:	98 8f       	std	Y+24, r25	; 0x18
    573a:	8f 8b       	std	Y+23, r24	; 0x17
    573c:	8f 89       	ldd	r24, Y+23	; 0x17
    573e:	98 8d       	ldd	r25, Y+24	; 0x18
    5740:	84 30       	cpi	r24, 0x04	; 4
    5742:	91 05       	cpc	r25, r1
    5744:	09 f4       	brne	.+2      	; 0x5748 <wyswietl_numer+0xac>
    5746:	55 c0       	rjmp	.+170    	; 0x57f2 <wyswietl_numer+0x156>
    5748:	8f 89       	ldd	r24, Y+23	; 0x17
    574a:	98 8d       	ldd	r25, Y+24	; 0x18
    574c:	85 30       	cpi	r24, 0x05	; 5
    574e:	91 05       	cpc	r25, r1
    5750:	dc f4       	brge	.+54     	; 0x5788 <wyswietl_numer+0xec>
    5752:	8f 89       	ldd	r24, Y+23	; 0x17
    5754:	98 8d       	ldd	r25, Y+24	; 0x18
    5756:	81 30       	cpi	r24, 0x01	; 1
    5758:	91 05       	cpc	r25, r1
    575a:	09 f4       	brne	.+2      	; 0x575e <wyswietl_numer+0xc2>
    575c:	3b c0       	rjmp	.+118    	; 0x57d4 <wyswietl_numer+0x138>
    575e:	8f 89       	ldd	r24, Y+23	; 0x17
    5760:	98 8d       	ldd	r25, Y+24	; 0x18
    5762:	82 30       	cpi	r24, 0x02	; 2
    5764:	91 05       	cpc	r25, r1
    5766:	2c f4       	brge	.+10     	; 0x5772 <wyswietl_numer+0xd6>
    5768:	8f 89       	ldd	r24, Y+23	; 0x17
    576a:	98 8d       	ldd	r25, Y+24	; 0x18
    576c:	00 97       	sbiw	r24, 0x00	; 0
    576e:	69 f1       	breq	.+90     	; 0x57ca <wyswietl_numer+0x12e>
    5770:	5d c0       	rjmp	.+186    	; 0x582c <wyswietl_numer+0x190>
    5772:	8f 89       	ldd	r24, Y+23	; 0x17
    5774:	98 8d       	ldd	r25, Y+24	; 0x18
    5776:	82 30       	cpi	r24, 0x02	; 2
    5778:	91 05       	cpc	r25, r1
    577a:	89 f1       	breq	.+98     	; 0x57de <wyswietl_numer+0x142>
    577c:	8f 89       	ldd	r24, Y+23	; 0x17
    577e:	98 8d       	ldd	r25, Y+24	; 0x18
    5780:	83 30       	cpi	r24, 0x03	; 3
    5782:	91 05       	cpc	r25, r1
    5784:	89 f1       	breq	.+98     	; 0x57e8 <wyswietl_numer+0x14c>
    5786:	52 c0       	rjmp	.+164    	; 0x582c <wyswietl_numer+0x190>
    5788:	8f 89       	ldd	r24, Y+23	; 0x17
    578a:	98 8d       	ldd	r25, Y+24	; 0x18
    578c:	87 30       	cpi	r24, 0x07	; 7
    578e:	91 05       	cpc	r25, r1
    5790:	09 f4       	brne	.+2      	; 0x5794 <wyswietl_numer+0xf8>
    5792:	3e c0       	rjmp	.+124    	; 0x5810 <wyswietl_numer+0x174>
    5794:	8f 89       	ldd	r24, Y+23	; 0x17
    5796:	98 8d       	ldd	r25, Y+24	; 0x18
    5798:	88 30       	cpi	r24, 0x08	; 8
    579a:	91 05       	cpc	r25, r1
    579c:	5c f4       	brge	.+22     	; 0x57b4 <wyswietl_numer+0x118>
    579e:	8f 89       	ldd	r24, Y+23	; 0x17
    57a0:	98 8d       	ldd	r25, Y+24	; 0x18
    57a2:	85 30       	cpi	r24, 0x05	; 5
    57a4:	91 05       	cpc	r25, r1
    57a6:	51 f1       	breq	.+84     	; 0x57fc <wyswietl_numer+0x160>
    57a8:	8f 89       	ldd	r24, Y+23	; 0x17
    57aa:	98 8d       	ldd	r25, Y+24	; 0x18
    57ac:	86 30       	cpi	r24, 0x06	; 6
    57ae:	91 05       	cpc	r25, r1
    57b0:	51 f1       	breq	.+84     	; 0x5806 <wyswietl_numer+0x16a>
    57b2:	3c c0       	rjmp	.+120    	; 0x582c <wyswietl_numer+0x190>
    57b4:	8f 89       	ldd	r24, Y+23	; 0x17
    57b6:	98 8d       	ldd	r25, Y+24	; 0x18
    57b8:	88 30       	cpi	r24, 0x08	; 8
    57ba:	91 05       	cpc	r25, r1
    57bc:	71 f1       	breq	.+92     	; 0x581a <wyswietl_numer+0x17e>
    57be:	8f 89       	ldd	r24, Y+23	; 0x17
    57c0:	98 8d       	ldd	r25, Y+24	; 0x18
    57c2:	89 30       	cpi	r24, 0x09	; 9
    57c4:	91 05       	cpc	r25, r1
    57c6:	71 f1       	breq	.+92     	; 0x5824 <wyswietl_numer+0x188>
    57c8:	31 c0       	rjmp	.+98     	; 0x582c <wyswietl_numer+0x190>
		case 0 :   lcd_str(zero);		  		break;
    57ca:	ce 01       	movw	r24, r28
    57cc:	01 96       	adiw	r24, 0x01	; 1
    57ce:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <lcd_str>
    57d2:	2c c0       	rjmp	.+88     	; 0x582c <wyswietl_numer+0x190>
		case 1 :   lcd_str(jeden); 		 		break;
    57d4:	ce 01       	movw	r24, r28
    57d6:	03 96       	adiw	r24, 0x03	; 3
    57d8:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <lcd_str>
    57dc:	27 c0       	rjmp	.+78     	; 0x582c <wyswietl_numer+0x190>
		case 2 :   lcd_str(dwa);				break;
    57de:	ce 01       	movw	r24, r28
    57e0:	05 96       	adiw	r24, 0x05	; 5
    57e2:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <lcd_str>
    57e6:	22 c0       	rjmp	.+68     	; 0x582c <wyswietl_numer+0x190>
		case 3 :   lcd_str(trzy); 		  		break;
    57e8:	ce 01       	movw	r24, r28
    57ea:	07 96       	adiw	r24, 0x07	; 7
    57ec:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <lcd_str>
    57f0:	1d c0       	rjmp	.+58     	; 0x582c <wyswietl_numer+0x190>
		case 4 :   lcd_str(cztery); 	  		break;
    57f2:	ce 01       	movw	r24, r28
    57f4:	09 96       	adiw	r24, 0x09	; 9
    57f6:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <lcd_str>
    57fa:	18 c0       	rjmp	.+48     	; 0x582c <wyswietl_numer+0x190>
		case 5 :   lcd_str(piec); 		  		break;
    57fc:	ce 01       	movw	r24, r28
    57fe:	0b 96       	adiw	r24, 0x0b	; 11
    5800:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <lcd_str>
    5804:	13 c0       	rjmp	.+38     	; 0x582c <wyswietl_numer+0x190>
		case 6 :   lcd_str(szesc); 		 	 	break;
    5806:	ce 01       	movw	r24, r28
    5808:	0d 96       	adiw	r24, 0x0d	; 13
    580a:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <lcd_str>
    580e:	0e c0       	rjmp	.+28     	; 0x582c <wyswietl_numer+0x190>
		case 7 :   lcd_str(siedem); 	  		break;
    5810:	ce 01       	movw	r24, r28
    5812:	0f 96       	adiw	r24, 0x0f	; 15
    5814:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <lcd_str>
    5818:	09 c0       	rjmp	.+18     	; 0x582c <wyswietl_numer+0x190>
		case 8 :   lcd_str(osiem); 		  		break;
    581a:	ce 01       	movw	r24, r28
    581c:	41 96       	adiw	r24, 0x11	; 17
    581e:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <lcd_str>
    5822:	04 c0       	rjmp	.+8      	; 0x582c <wyswietl_numer+0x190>
		case 9 :   lcd_str(dziewiec); 	  		break;
    5824:	ce 01       	movw	r24, r28
    5826:	43 96       	adiw	r24, 0x13	; 19
    5828:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <lcd_str>
	}
}
    582c:	68 96       	adiw	r28, 0x18	; 24
    582e:	0f b6       	in	r0, 0x3f	; 63
    5830:	f8 94       	cli
    5832:	de bf       	out	0x3e, r29	; 62
    5834:	0f be       	out	0x3f, r0	; 63
    5836:	cd bf       	out	0x3d, r28	; 61
    5838:	cf 91       	pop	r28
    583a:	df 91       	pop	r29
    583c:	08 95       	ret

0000583e <start>:

//animacja startowa
void start(void){
    583e:	df 93       	push	r29
    5840:	cf 93       	push	r28
    5842:	cd b7       	in	r28, 0x3d	; 61
    5844:	de b7       	in	r29, 0x3e	; 62
    5846:	ab 97       	sbiw	r28, 0x2b	; 43
    5848:	0f b6       	in	r0, 0x3f	; 63
    584a:	f8 94       	cli
    584c:	de bf       	out	0x3e, r29	; 62
    584e:	0f be       	out	0x3f, r0	; 63
    5850:	cd bf       	out	0x3d, r28	; 61
	lcd_cls();
    5852:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <lcd_cls>
	lcd_locate(0,5);
    5856:	80 e0       	ldi	r24, 0x00	; 0
    5858:	65 e0       	ldi	r22, 0x05	; 5
    585a:	0e 94 a8 30 	call	0x6150	; 0x6150 <lcd_locate>
	lcd_str("START");
    585e:	88 ea       	ldi	r24, 0xA8	; 168
    5860:	91 e0       	ldi	r25, 0x01	; 1
    5862:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <lcd_str>
    5866:	80 e0       	ldi	r24, 0x00	; 0
    5868:	90 e0       	ldi	r25, 0x00	; 0
    586a:	aa e7       	ldi	r26, 0x7A	; 122
    586c:	b4 e4       	ldi	r27, 0x44	; 68
    586e:	8f a3       	std	Y+39, r24	; 0x27
    5870:	98 a7       	std	Y+40, r25	; 0x28
    5872:	a9 a7       	std	Y+41, r26	; 0x29
    5874:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5876:	6f a1       	ldd	r22, Y+39	; 0x27
    5878:	78 a5       	ldd	r23, Y+40	; 0x28
    587a:	89 a5       	ldd	r24, Y+41	; 0x29
    587c:	9a a5       	ldd	r25, Y+42	; 0x2a
    587e:	20 e0       	ldi	r18, 0x00	; 0
    5880:	30 e0       	ldi	r19, 0x00	; 0
    5882:	4a e7       	ldi	r20, 0x7A	; 122
    5884:	55 e4       	ldi	r21, 0x45	; 69
    5886:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    588a:	dc 01       	movw	r26, r24
    588c:	cb 01       	movw	r24, r22
    588e:	8b a3       	std	Y+35, r24	; 0x23
    5890:	9c a3       	std	Y+36, r25	; 0x24
    5892:	ad a3       	std	Y+37, r26	; 0x25
    5894:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5896:	6b a1       	ldd	r22, Y+35	; 0x23
    5898:	7c a1       	ldd	r23, Y+36	; 0x24
    589a:	8d a1       	ldd	r24, Y+37	; 0x25
    589c:	9e a1       	ldd	r25, Y+38	; 0x26
    589e:	20 e0       	ldi	r18, 0x00	; 0
    58a0:	30 e0       	ldi	r19, 0x00	; 0
    58a2:	40 e8       	ldi	r20, 0x80	; 128
    58a4:	5f e3       	ldi	r21, 0x3F	; 63
    58a6:	0e 94 29 46 	call	0x8c52	; 0x8c52 <__ltsf2>
    58aa:	88 23       	and	r24, r24
    58ac:	2c f4       	brge	.+10     	; 0x58b8 <start+0x7a>
		__ticks = 1;
    58ae:	81 e0       	ldi	r24, 0x01	; 1
    58b0:	90 e0       	ldi	r25, 0x00	; 0
    58b2:	9a a3       	std	Y+34, r25	; 0x22
    58b4:	89 a3       	std	Y+33, r24	; 0x21
    58b6:	3f c0       	rjmp	.+126    	; 0x5936 <start+0xf8>
	else if (__tmp > 65535)
    58b8:	6b a1       	ldd	r22, Y+35	; 0x23
    58ba:	7c a1       	ldd	r23, Y+36	; 0x24
    58bc:	8d a1       	ldd	r24, Y+37	; 0x25
    58be:	9e a1       	ldd	r25, Y+38	; 0x26
    58c0:	20 e0       	ldi	r18, 0x00	; 0
    58c2:	3f ef       	ldi	r19, 0xFF	; 255
    58c4:	4f e7       	ldi	r20, 0x7F	; 127
    58c6:	57 e4       	ldi	r21, 0x47	; 71
    58c8:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <__gtsf2>
    58cc:	18 16       	cp	r1, r24
    58ce:	4c f5       	brge	.+82     	; 0x5922 <start+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58d0:	6f a1       	ldd	r22, Y+39	; 0x27
    58d2:	78 a5       	ldd	r23, Y+40	; 0x28
    58d4:	89 a5       	ldd	r24, Y+41	; 0x29
    58d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    58d8:	20 e0       	ldi	r18, 0x00	; 0
    58da:	30 e0       	ldi	r19, 0x00	; 0
    58dc:	40 e2       	ldi	r20, 0x20	; 32
    58de:	51 e4       	ldi	r21, 0x41	; 65
    58e0:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    58e4:	dc 01       	movw	r26, r24
    58e6:	cb 01       	movw	r24, r22
    58e8:	bc 01       	movw	r22, r24
    58ea:	cd 01       	movw	r24, r26
    58ec:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    58f0:	dc 01       	movw	r26, r24
    58f2:	cb 01       	movw	r24, r22
    58f4:	9a a3       	std	Y+34, r25	; 0x22
    58f6:	89 a3       	std	Y+33, r24	; 0x21
    58f8:	0f c0       	rjmp	.+30     	; 0x5918 <start+0xda>
    58fa:	80 e9       	ldi	r24, 0x90	; 144
    58fc:	91 e0       	ldi	r25, 0x01	; 1
    58fe:	98 a3       	std	Y+32, r25	; 0x20
    5900:	8f 8f       	std	Y+31, r24	; 0x1f
    5902:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5904:	98 a1       	ldd	r25, Y+32	; 0x20
    5906:	01 97       	sbiw	r24, 0x01	; 1
    5908:	f1 f7       	brne	.-4      	; 0x5906 <start+0xc8>
    590a:	98 a3       	std	Y+32, r25	; 0x20
    590c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    590e:	89 a1       	ldd	r24, Y+33	; 0x21
    5910:	9a a1       	ldd	r25, Y+34	; 0x22
    5912:	01 97       	sbiw	r24, 0x01	; 1
    5914:	9a a3       	std	Y+34, r25	; 0x22
    5916:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5918:	89 a1       	ldd	r24, Y+33	; 0x21
    591a:	9a a1       	ldd	r25, Y+34	; 0x22
    591c:	00 97       	sbiw	r24, 0x00	; 0
    591e:	69 f7       	brne	.-38     	; 0x58fa <start+0xbc>
    5920:	14 c0       	rjmp	.+40     	; 0x594a <start+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5922:	6b a1       	ldd	r22, Y+35	; 0x23
    5924:	7c a1       	ldd	r23, Y+36	; 0x24
    5926:	8d a1       	ldd	r24, Y+37	; 0x25
    5928:	9e a1       	ldd	r25, Y+38	; 0x26
    592a:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    592e:	dc 01       	movw	r26, r24
    5930:	cb 01       	movw	r24, r22
    5932:	9a a3       	std	Y+34, r25	; 0x22
    5934:	89 a3       	std	Y+33, r24	; 0x21
    5936:	89 a1       	ldd	r24, Y+33	; 0x21
    5938:	9a a1       	ldd	r25, Y+34	; 0x22
    593a:	9e 8f       	std	Y+30, r25	; 0x1e
    593c:	8d 8f       	std	Y+29, r24	; 0x1d
    593e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5940:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5942:	01 97       	sbiw	r24, 0x01	; 1
    5944:	f1 f7       	brne	.-4      	; 0x5942 <start+0x104>
    5946:	9e 8f       	std	Y+30, r25	; 0x1e
    5948:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	for (uint8_t i=0; i<16; i++){
    594a:	1b a6       	std	Y+43, r1	; 0x2b
    594c:	7d c0       	rjmp	.+250    	; 0x5a48 <start+0x20a>
		lcd_locate(1,i);
    594e:	81 e0       	ldi	r24, 0x01	; 1
    5950:	6b a5       	ldd	r22, Y+43	; 0x2b
    5952:	0e 94 a8 30 	call	0x6150	; 0x6150 <lcd_locate>
    5956:	80 e0       	ldi	r24, 0x00	; 0
    5958:	90 e0       	ldi	r25, 0x00	; 0
    595a:	a8 e4       	ldi	r26, 0x48	; 72
    595c:	b2 e4       	ldi	r27, 0x42	; 66
    595e:	89 8f       	std	Y+25, r24	; 0x19
    5960:	9a 8f       	std	Y+26, r25	; 0x1a
    5962:	ab 8f       	std	Y+27, r26	; 0x1b
    5964:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5966:	69 8d       	ldd	r22, Y+25	; 0x19
    5968:	7a 8d       	ldd	r23, Y+26	; 0x1a
    596a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    596c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    596e:	20 e0       	ldi	r18, 0x00	; 0
    5970:	30 e0       	ldi	r19, 0x00	; 0
    5972:	4a e7       	ldi	r20, 0x7A	; 122
    5974:	55 e4       	ldi	r21, 0x45	; 69
    5976:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    597a:	dc 01       	movw	r26, r24
    597c:	cb 01       	movw	r24, r22
    597e:	8d 8b       	std	Y+21, r24	; 0x15
    5980:	9e 8b       	std	Y+22, r25	; 0x16
    5982:	af 8b       	std	Y+23, r26	; 0x17
    5984:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5986:	6d 89       	ldd	r22, Y+21	; 0x15
    5988:	7e 89       	ldd	r23, Y+22	; 0x16
    598a:	8f 89       	ldd	r24, Y+23	; 0x17
    598c:	98 8d       	ldd	r25, Y+24	; 0x18
    598e:	20 e0       	ldi	r18, 0x00	; 0
    5990:	30 e0       	ldi	r19, 0x00	; 0
    5992:	40 e8       	ldi	r20, 0x80	; 128
    5994:	5f e3       	ldi	r21, 0x3F	; 63
    5996:	0e 94 29 46 	call	0x8c52	; 0x8c52 <__ltsf2>
    599a:	88 23       	and	r24, r24
    599c:	2c f4       	brge	.+10     	; 0x59a8 <start+0x16a>
		__ticks = 1;
    599e:	81 e0       	ldi	r24, 0x01	; 1
    59a0:	90 e0       	ldi	r25, 0x00	; 0
    59a2:	9c 8b       	std	Y+20, r25	; 0x14
    59a4:	8b 8b       	std	Y+19, r24	; 0x13
    59a6:	3f c0       	rjmp	.+126    	; 0x5a26 <start+0x1e8>
	else if (__tmp > 65535)
    59a8:	6d 89       	ldd	r22, Y+21	; 0x15
    59aa:	7e 89       	ldd	r23, Y+22	; 0x16
    59ac:	8f 89       	ldd	r24, Y+23	; 0x17
    59ae:	98 8d       	ldd	r25, Y+24	; 0x18
    59b0:	20 e0       	ldi	r18, 0x00	; 0
    59b2:	3f ef       	ldi	r19, 0xFF	; 255
    59b4:	4f e7       	ldi	r20, 0x7F	; 127
    59b6:	57 e4       	ldi	r21, 0x47	; 71
    59b8:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <__gtsf2>
    59bc:	18 16       	cp	r1, r24
    59be:	4c f5       	brge	.+82     	; 0x5a12 <start+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59c0:	69 8d       	ldd	r22, Y+25	; 0x19
    59c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    59c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    59c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    59c8:	20 e0       	ldi	r18, 0x00	; 0
    59ca:	30 e0       	ldi	r19, 0x00	; 0
    59cc:	40 e2       	ldi	r20, 0x20	; 32
    59ce:	51 e4       	ldi	r21, 0x41	; 65
    59d0:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    59d4:	dc 01       	movw	r26, r24
    59d6:	cb 01       	movw	r24, r22
    59d8:	bc 01       	movw	r22, r24
    59da:	cd 01       	movw	r24, r26
    59dc:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    59e0:	dc 01       	movw	r26, r24
    59e2:	cb 01       	movw	r24, r22
    59e4:	9c 8b       	std	Y+20, r25	; 0x14
    59e6:	8b 8b       	std	Y+19, r24	; 0x13
    59e8:	0f c0       	rjmp	.+30     	; 0x5a08 <start+0x1ca>
    59ea:	80 e9       	ldi	r24, 0x90	; 144
    59ec:	91 e0       	ldi	r25, 0x01	; 1
    59ee:	9a 8b       	std	Y+18, r25	; 0x12
    59f0:	89 8b       	std	Y+17, r24	; 0x11
    59f2:	89 89       	ldd	r24, Y+17	; 0x11
    59f4:	9a 89       	ldd	r25, Y+18	; 0x12
    59f6:	01 97       	sbiw	r24, 0x01	; 1
    59f8:	f1 f7       	brne	.-4      	; 0x59f6 <start+0x1b8>
    59fa:	9a 8b       	std	Y+18, r25	; 0x12
    59fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59fe:	8b 89       	ldd	r24, Y+19	; 0x13
    5a00:	9c 89       	ldd	r25, Y+20	; 0x14
    5a02:	01 97       	sbiw	r24, 0x01	; 1
    5a04:	9c 8b       	std	Y+20, r25	; 0x14
    5a06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a08:	8b 89       	ldd	r24, Y+19	; 0x13
    5a0a:	9c 89       	ldd	r25, Y+20	; 0x14
    5a0c:	00 97       	sbiw	r24, 0x00	; 0
    5a0e:	69 f7       	brne	.-38     	; 0x59ea <start+0x1ac>
    5a10:	14 c0       	rjmp	.+40     	; 0x5a3a <start+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a12:	6d 89       	ldd	r22, Y+21	; 0x15
    5a14:	7e 89       	ldd	r23, Y+22	; 0x16
    5a16:	8f 89       	ldd	r24, Y+23	; 0x17
    5a18:	98 8d       	ldd	r25, Y+24	; 0x18
    5a1a:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    5a1e:	dc 01       	movw	r26, r24
    5a20:	cb 01       	movw	r24, r22
    5a22:	9c 8b       	std	Y+20, r25	; 0x14
    5a24:	8b 8b       	std	Y+19, r24	; 0x13
    5a26:	8b 89       	ldd	r24, Y+19	; 0x13
    5a28:	9c 89       	ldd	r25, Y+20	; 0x14
    5a2a:	98 8b       	std	Y+16, r25	; 0x10
    5a2c:	8f 87       	std	Y+15, r24	; 0x0f
    5a2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5a30:	98 89       	ldd	r25, Y+16	; 0x10
    5a32:	01 97       	sbiw	r24, 0x01	; 1
    5a34:	f1 f7       	brne	.-4      	; 0x5a32 <start+0x1f4>
    5a36:	98 8b       	std	Y+16, r25	; 0x10
    5a38:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		lcd_str(".");
    5a3a:	8e ea       	ldi	r24, 0xAE	; 174
    5a3c:	91 e0       	ldi	r25, 0x01	; 1
    5a3e:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <lcd_str>
void start(void){
	lcd_cls();
	lcd_locate(0,5);
	lcd_str("START");
	_delay_ms(1000);
	for (uint8_t i=0; i<16; i++){
    5a42:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a44:	8f 5f       	subi	r24, 0xFF	; 255
    5a46:	8b a7       	std	Y+43, r24	; 0x2b
    5a48:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a4a:	80 31       	cpi	r24, 0x10	; 16
    5a4c:	08 f4       	brcc	.+2      	; 0x5a50 <start+0x212>
    5a4e:	7f cf       	rjmp	.-258    	; 0x594e <start+0x110>
    5a50:	80 e0       	ldi	r24, 0x00	; 0
    5a52:	90 e0       	ldi	r25, 0x00	; 0
    5a54:	a8 e4       	ldi	r26, 0x48	; 72
    5a56:	b3 e4       	ldi	r27, 0x43	; 67
    5a58:	8b 87       	std	Y+11, r24	; 0x0b
    5a5a:	9c 87       	std	Y+12, r25	; 0x0c
    5a5c:	ad 87       	std	Y+13, r26	; 0x0d
    5a5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a60:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a62:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a64:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a66:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a68:	20 e0       	ldi	r18, 0x00	; 0
    5a6a:	30 e0       	ldi	r19, 0x00	; 0
    5a6c:	4a e7       	ldi	r20, 0x7A	; 122
    5a6e:	55 e4       	ldi	r21, 0x45	; 69
    5a70:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    5a74:	dc 01       	movw	r26, r24
    5a76:	cb 01       	movw	r24, r22
    5a78:	8f 83       	std	Y+7, r24	; 0x07
    5a7a:	98 87       	std	Y+8, r25	; 0x08
    5a7c:	a9 87       	std	Y+9, r26	; 0x09
    5a7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5a80:	6f 81       	ldd	r22, Y+7	; 0x07
    5a82:	78 85       	ldd	r23, Y+8	; 0x08
    5a84:	89 85       	ldd	r24, Y+9	; 0x09
    5a86:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a88:	20 e0       	ldi	r18, 0x00	; 0
    5a8a:	30 e0       	ldi	r19, 0x00	; 0
    5a8c:	40 e8       	ldi	r20, 0x80	; 128
    5a8e:	5f e3       	ldi	r21, 0x3F	; 63
    5a90:	0e 94 29 46 	call	0x8c52	; 0x8c52 <__ltsf2>
    5a94:	88 23       	and	r24, r24
    5a96:	2c f4       	brge	.+10     	; 0x5aa2 <start+0x264>
		__ticks = 1;
    5a98:	81 e0       	ldi	r24, 0x01	; 1
    5a9a:	90 e0       	ldi	r25, 0x00	; 0
    5a9c:	9e 83       	std	Y+6, r25	; 0x06
    5a9e:	8d 83       	std	Y+5, r24	; 0x05
    5aa0:	3f c0       	rjmp	.+126    	; 0x5b20 <start+0x2e2>
	else if (__tmp > 65535)
    5aa2:	6f 81       	ldd	r22, Y+7	; 0x07
    5aa4:	78 85       	ldd	r23, Y+8	; 0x08
    5aa6:	89 85       	ldd	r24, Y+9	; 0x09
    5aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    5aaa:	20 e0       	ldi	r18, 0x00	; 0
    5aac:	3f ef       	ldi	r19, 0xFF	; 255
    5aae:	4f e7       	ldi	r20, 0x7F	; 127
    5ab0:	57 e4       	ldi	r21, 0x47	; 71
    5ab2:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <__gtsf2>
    5ab6:	18 16       	cp	r1, r24
    5ab8:	4c f5       	brge	.+82     	; 0x5b0c <start+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5aba:	6b 85       	ldd	r22, Y+11	; 0x0b
    5abc:	7c 85       	ldd	r23, Y+12	; 0x0c
    5abe:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ac0:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ac2:	20 e0       	ldi	r18, 0x00	; 0
    5ac4:	30 e0       	ldi	r19, 0x00	; 0
    5ac6:	40 e2       	ldi	r20, 0x20	; 32
    5ac8:	51 e4       	ldi	r21, 0x41	; 65
    5aca:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    5ace:	dc 01       	movw	r26, r24
    5ad0:	cb 01       	movw	r24, r22
    5ad2:	bc 01       	movw	r22, r24
    5ad4:	cd 01       	movw	r24, r26
    5ad6:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    5ada:	dc 01       	movw	r26, r24
    5adc:	cb 01       	movw	r24, r22
    5ade:	9e 83       	std	Y+6, r25	; 0x06
    5ae0:	8d 83       	std	Y+5, r24	; 0x05
    5ae2:	0f c0       	rjmp	.+30     	; 0x5b02 <start+0x2c4>
    5ae4:	80 e9       	ldi	r24, 0x90	; 144
    5ae6:	91 e0       	ldi	r25, 0x01	; 1
    5ae8:	9c 83       	std	Y+4, r25	; 0x04
    5aea:	8b 83       	std	Y+3, r24	; 0x03
    5aec:	8b 81       	ldd	r24, Y+3	; 0x03
    5aee:	9c 81       	ldd	r25, Y+4	; 0x04
    5af0:	01 97       	sbiw	r24, 0x01	; 1
    5af2:	f1 f7       	brne	.-4      	; 0x5af0 <start+0x2b2>
    5af4:	9c 83       	std	Y+4, r25	; 0x04
    5af6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5af8:	8d 81       	ldd	r24, Y+5	; 0x05
    5afa:	9e 81       	ldd	r25, Y+6	; 0x06
    5afc:	01 97       	sbiw	r24, 0x01	; 1
    5afe:	9e 83       	std	Y+6, r25	; 0x06
    5b00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b02:	8d 81       	ldd	r24, Y+5	; 0x05
    5b04:	9e 81       	ldd	r25, Y+6	; 0x06
    5b06:	00 97       	sbiw	r24, 0x00	; 0
    5b08:	69 f7       	brne	.-38     	; 0x5ae4 <start+0x2a6>
    5b0a:	14 c0       	rjmp	.+40     	; 0x5b34 <start+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b0c:	6f 81       	ldd	r22, Y+7	; 0x07
    5b0e:	78 85       	ldd	r23, Y+8	; 0x08
    5b10:	89 85       	ldd	r24, Y+9	; 0x09
    5b12:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b14:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    5b18:	dc 01       	movw	r26, r24
    5b1a:	cb 01       	movw	r24, r22
    5b1c:	9e 83       	std	Y+6, r25	; 0x06
    5b1e:	8d 83       	std	Y+5, r24	; 0x05
    5b20:	8d 81       	ldd	r24, Y+5	; 0x05
    5b22:	9e 81       	ldd	r25, Y+6	; 0x06
    5b24:	9a 83       	std	Y+2, r25	; 0x02
    5b26:	89 83       	std	Y+1, r24	; 0x01
    5b28:	89 81       	ldd	r24, Y+1	; 0x01
    5b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    5b2c:	01 97       	sbiw	r24, 0x01	; 1
    5b2e:	f1 f7       	brne	.-4      	; 0x5b2c <start+0x2ee>
    5b30:	9a 83       	std	Y+2, r25	; 0x02
    5b32:	89 83       	std	Y+1, r24	; 0x01
		lcd_locate(1,i);
		_delay_ms(50);
		lcd_str(".");
	}
	_delay_ms(200);
}
    5b34:	ab 96       	adiw	r28, 0x2b	; 43
    5b36:	0f b6       	in	r0, 0x3f	; 63
    5b38:	f8 94       	cli
    5b3a:	de bf       	out	0x3e, r29	; 62
    5b3c:	0f be       	out	0x3f, r0	; 63
    5b3e:	cd bf       	out	0x3d, r28	; 61
    5b40:	cf 91       	pop	r28
    5b42:	df 91       	pop	r29
    5b44:	08 95       	ret

00005b46 <_lcd_write_byte>:
//
//		 Zapis bajtu do wyúwietlacza LCD
//
//----------------------------------------------------------------------------------------
void _lcd_write_byte(unsigned char _data)
{
    5b46:	df 93       	push	r29
    5b48:	cf 93       	push	r28
    5b4a:	0f 92       	push	r0
    5b4c:	cd b7       	in	r28, 0x3d	; 61
    5b4e:	de b7       	in	r29, 0x3e	; 62
    5b50:	89 83       	std	Y+1, r24	; 0x01
	// Ustawienie pinÛw portu LCD D4..D7 jako wyjúcia
	data_dir_out();
    5b52:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <data_dir_out>

#if USE_RW == 1
	CLR_RW;
    5b56:	ab e3       	ldi	r26, 0x3B	; 59
    5b58:	b0 e0       	ldi	r27, 0x00	; 0
    5b5a:	eb e3       	ldi	r30, 0x3B	; 59
    5b5c:	f0 e0       	ldi	r31, 0x00	; 0
    5b5e:	80 81       	ld	r24, Z
    5b60:	8d 7f       	andi	r24, 0xFD	; 253
    5b62:	8c 93       	st	X, r24
#endif

	SET_E;
    5b64:	ab e3       	ldi	r26, 0x3B	; 59
    5b66:	b0 e0       	ldi	r27, 0x00	; 0
    5b68:	eb e3       	ldi	r30, 0x3B	; 59
    5b6a:	f0 e0       	ldi	r31, 0x00	; 0
    5b6c:	80 81       	ld	r24, Z
    5b6e:	84 60       	ori	r24, 0x04	; 4
    5b70:	8c 93       	st	X, r24
	lcd_sendHalf(_data >> 4);			// wys≥anie starszej czÍúci bajtu danych D7..D4
    5b72:	89 81       	ldd	r24, Y+1	; 0x01
    5b74:	82 95       	swap	r24
    5b76:	8f 70       	andi	r24, 0x0F	; 15
    5b78:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <lcd_sendHalf>
	CLR_E;
    5b7c:	ab e3       	ldi	r26, 0x3B	; 59
    5b7e:	b0 e0       	ldi	r27, 0x00	; 0
    5b80:	eb e3       	ldi	r30, 0x3B	; 59
    5b82:	f0 e0       	ldi	r31, 0x00	; 0
    5b84:	80 81       	ld	r24, Z
    5b86:	8b 7f       	andi	r24, 0xFB	; 251
    5b88:	8c 93       	st	X, r24

	SET_E;
    5b8a:	ab e3       	ldi	r26, 0x3B	; 59
    5b8c:	b0 e0       	ldi	r27, 0x00	; 0
    5b8e:	eb e3       	ldi	r30, 0x3B	; 59
    5b90:	f0 e0       	ldi	r31, 0x00	; 0
    5b92:	80 81       	ld	r24, Z
    5b94:	84 60       	ori	r24, 0x04	; 4
    5b96:	8c 93       	st	X, r24
	lcd_sendHalf(_data);				// wys≥anie m≥odszej czÍúci bajtu danych D3..D0
    5b98:	89 81       	ldd	r24, Y+1	; 0x01
    5b9a:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <lcd_sendHalf>
	CLR_E;
    5b9e:	ab e3       	ldi	r26, 0x3B	; 59
    5ba0:	b0 e0       	ldi	r27, 0x00	; 0
    5ba2:	eb e3       	ldi	r30, 0x3B	; 59
    5ba4:	f0 e0       	ldi	r31, 0x00	; 0
    5ba6:	80 81       	ld	r24, Z
    5ba8:	8b 7f       	andi	r24, 0xFB	; 251
    5baa:	8c 93       	st	X, r24

#if USE_RW == 1
	while( (check_BF() & (1<<7)) );
    5bac:	0e 94 fc 2e 	call	0x5df8	; 0x5df8 <check_BF>
    5bb0:	88 23       	and	r24, r24
    5bb2:	e4 f3       	brlt	.-8      	; 0x5bac <_lcd_write_byte+0x66>
#else
	_delay_us(120);
#endif

}
    5bb4:	0f 90       	pop	r0
    5bb6:	cf 91       	pop	r28
    5bb8:	df 91       	pop	r29
    5bba:	08 95       	ret

00005bbc <data_dir_out>:
//
//		 Ustawienie wszystkich 4 linii danych jako WYjúcia
//
//----------------------------------------------------------------------------------------
static inline void data_dir_out(void)
{
    5bbc:	df 93       	push	r29
    5bbe:	cf 93       	push	r28
    5bc0:	cd b7       	in	r28, 0x3d	; 61
    5bc2:	de b7       	in	r29, 0x3e	; 62
	DDR(LCD_D7PORT)	|= (1<<LCD_D7);
    5bc4:	aa e3       	ldi	r26, 0x3A	; 58
    5bc6:	b0 e0       	ldi	r27, 0x00	; 0
    5bc8:	ea e3       	ldi	r30, 0x3A	; 58
    5bca:	f0 e0       	ldi	r31, 0x00	; 0
    5bcc:	80 81       	ld	r24, Z
    5bce:	80 64       	ori	r24, 0x40	; 64
    5bd0:	8c 93       	st	X, r24
	DDR(LCD_D6PORT)	|= (1<<LCD_D6);
    5bd2:	aa e3       	ldi	r26, 0x3A	; 58
    5bd4:	b0 e0       	ldi	r27, 0x00	; 0
    5bd6:	ea e3       	ldi	r30, 0x3A	; 58
    5bd8:	f0 e0       	ldi	r31, 0x00	; 0
    5bda:	80 81       	ld	r24, Z
    5bdc:	80 62       	ori	r24, 0x20	; 32
    5bde:	8c 93       	st	X, r24
	DDR(LCD_D5PORT)	|= (1<<LCD_D5);
    5be0:	aa e3       	ldi	r26, 0x3A	; 58
    5be2:	b0 e0       	ldi	r27, 0x00	; 0
    5be4:	ea e3       	ldi	r30, 0x3A	; 58
    5be6:	f0 e0       	ldi	r31, 0x00	; 0
    5be8:	80 81       	ld	r24, Z
    5bea:	80 61       	ori	r24, 0x10	; 16
    5bec:	8c 93       	st	X, r24
	DDR(LCD_D4PORT)	|= (1<<LCD_D4);
    5bee:	aa e3       	ldi	r26, 0x3A	; 58
    5bf0:	b0 e0       	ldi	r27, 0x00	; 0
    5bf2:	ea e3       	ldi	r30, 0x3A	; 58
    5bf4:	f0 e0       	ldi	r31, 0x00	; 0
    5bf6:	80 81       	ld	r24, Z
    5bf8:	88 60       	ori	r24, 0x08	; 8
    5bfa:	8c 93       	st	X, r24
}
    5bfc:	cf 91       	pop	r28
    5bfe:	df 91       	pop	r29
    5c00:	08 95       	ret

00005c02 <lcd_sendHalf>:
//
//		 Wys≥anie po≥Ûwki bajtu do LCD (D4..D7)
//
//----------------------------------------------------------------------------------------
static inline void lcd_sendHalf(uint8_t data)
{
    5c02:	df 93       	push	r29
    5c04:	cf 93       	push	r28
    5c06:	0f 92       	push	r0
    5c08:	cd b7       	in	r28, 0x3d	; 61
    5c0a:	de b7       	in	r29, 0x3e	; 62
    5c0c:	89 83       	std	Y+1, r24	; 0x01
	if (data&(1<<0)) PORT(LCD_D4PORT) |= (1<<LCD_D4); else PORT(LCD_D4PORT) &= ~(1<<LCD_D4);
    5c0e:	89 81       	ldd	r24, Y+1	; 0x01
    5c10:	88 2f       	mov	r24, r24
    5c12:	90 e0       	ldi	r25, 0x00	; 0
    5c14:	81 70       	andi	r24, 0x01	; 1
    5c16:	90 70       	andi	r25, 0x00	; 0
    5c18:	88 23       	and	r24, r24
    5c1a:	41 f0       	breq	.+16     	; 0x5c2c <lcd_sendHalf+0x2a>
    5c1c:	ab e3       	ldi	r26, 0x3B	; 59
    5c1e:	b0 e0       	ldi	r27, 0x00	; 0
    5c20:	eb e3       	ldi	r30, 0x3B	; 59
    5c22:	f0 e0       	ldi	r31, 0x00	; 0
    5c24:	80 81       	ld	r24, Z
    5c26:	88 60       	ori	r24, 0x08	; 8
    5c28:	8c 93       	st	X, r24
    5c2a:	07 c0       	rjmp	.+14     	; 0x5c3a <lcd_sendHalf+0x38>
    5c2c:	ab e3       	ldi	r26, 0x3B	; 59
    5c2e:	b0 e0       	ldi	r27, 0x00	; 0
    5c30:	eb e3       	ldi	r30, 0x3B	; 59
    5c32:	f0 e0       	ldi	r31, 0x00	; 0
    5c34:	80 81       	ld	r24, Z
    5c36:	87 7f       	andi	r24, 0xF7	; 247
    5c38:	8c 93       	st	X, r24
	if (data&(1<<1)) PORT(LCD_D5PORT) |= (1<<LCD_D5); else PORT(LCD_D5PORT) &= ~(1<<LCD_D5);
    5c3a:	89 81       	ldd	r24, Y+1	; 0x01
    5c3c:	88 2f       	mov	r24, r24
    5c3e:	90 e0       	ldi	r25, 0x00	; 0
    5c40:	82 70       	andi	r24, 0x02	; 2
    5c42:	90 70       	andi	r25, 0x00	; 0
    5c44:	00 97       	sbiw	r24, 0x00	; 0
    5c46:	41 f0       	breq	.+16     	; 0x5c58 <lcd_sendHalf+0x56>
    5c48:	ab e3       	ldi	r26, 0x3B	; 59
    5c4a:	b0 e0       	ldi	r27, 0x00	; 0
    5c4c:	eb e3       	ldi	r30, 0x3B	; 59
    5c4e:	f0 e0       	ldi	r31, 0x00	; 0
    5c50:	80 81       	ld	r24, Z
    5c52:	80 61       	ori	r24, 0x10	; 16
    5c54:	8c 93       	st	X, r24
    5c56:	07 c0       	rjmp	.+14     	; 0x5c66 <lcd_sendHalf+0x64>
    5c58:	ab e3       	ldi	r26, 0x3B	; 59
    5c5a:	b0 e0       	ldi	r27, 0x00	; 0
    5c5c:	eb e3       	ldi	r30, 0x3B	; 59
    5c5e:	f0 e0       	ldi	r31, 0x00	; 0
    5c60:	80 81       	ld	r24, Z
    5c62:	8f 7e       	andi	r24, 0xEF	; 239
    5c64:	8c 93       	st	X, r24
	if (data&(1<<2)) PORT(LCD_D6PORT) |= (1<<LCD_D6); else PORT(LCD_D6PORT) &= ~(1<<LCD_D6);
    5c66:	89 81       	ldd	r24, Y+1	; 0x01
    5c68:	88 2f       	mov	r24, r24
    5c6a:	90 e0       	ldi	r25, 0x00	; 0
    5c6c:	84 70       	andi	r24, 0x04	; 4
    5c6e:	90 70       	andi	r25, 0x00	; 0
    5c70:	00 97       	sbiw	r24, 0x00	; 0
    5c72:	41 f0       	breq	.+16     	; 0x5c84 <lcd_sendHalf+0x82>
    5c74:	ab e3       	ldi	r26, 0x3B	; 59
    5c76:	b0 e0       	ldi	r27, 0x00	; 0
    5c78:	eb e3       	ldi	r30, 0x3B	; 59
    5c7a:	f0 e0       	ldi	r31, 0x00	; 0
    5c7c:	80 81       	ld	r24, Z
    5c7e:	80 62       	ori	r24, 0x20	; 32
    5c80:	8c 93       	st	X, r24
    5c82:	07 c0       	rjmp	.+14     	; 0x5c92 <lcd_sendHalf+0x90>
    5c84:	ab e3       	ldi	r26, 0x3B	; 59
    5c86:	b0 e0       	ldi	r27, 0x00	; 0
    5c88:	eb e3       	ldi	r30, 0x3B	; 59
    5c8a:	f0 e0       	ldi	r31, 0x00	; 0
    5c8c:	80 81       	ld	r24, Z
    5c8e:	8f 7d       	andi	r24, 0xDF	; 223
    5c90:	8c 93       	st	X, r24
	if (data&(1<<3)) PORT(LCD_D7PORT) |= (1<<LCD_D7); else PORT(LCD_D7PORT) &= ~(1<<LCD_D7);
    5c92:	89 81       	ldd	r24, Y+1	; 0x01
    5c94:	88 2f       	mov	r24, r24
    5c96:	90 e0       	ldi	r25, 0x00	; 0
    5c98:	88 70       	andi	r24, 0x08	; 8
    5c9a:	90 70       	andi	r25, 0x00	; 0
    5c9c:	00 97       	sbiw	r24, 0x00	; 0
    5c9e:	41 f0       	breq	.+16     	; 0x5cb0 <lcd_sendHalf+0xae>
    5ca0:	ab e3       	ldi	r26, 0x3B	; 59
    5ca2:	b0 e0       	ldi	r27, 0x00	; 0
    5ca4:	eb e3       	ldi	r30, 0x3B	; 59
    5ca6:	f0 e0       	ldi	r31, 0x00	; 0
    5ca8:	80 81       	ld	r24, Z
    5caa:	80 64       	ori	r24, 0x40	; 64
    5cac:	8c 93       	st	X, r24
    5cae:	07 c0       	rjmp	.+14     	; 0x5cbe <lcd_sendHalf+0xbc>
    5cb0:	ab e3       	ldi	r26, 0x3B	; 59
    5cb2:	b0 e0       	ldi	r27, 0x00	; 0
    5cb4:	eb e3       	ldi	r30, 0x3B	; 59
    5cb6:	f0 e0       	ldi	r31, 0x00	; 0
    5cb8:	80 81       	ld	r24, Z
    5cba:	8f 7b       	andi	r24, 0xBF	; 191
    5cbc:	8c 93       	st	X, r24
}
    5cbe:	0f 90       	pop	r0
    5cc0:	cf 91       	pop	r28
    5cc2:	df 91       	pop	r29
    5cc4:	08 95       	ret

00005cc6 <_lcd_read_byte>:
//
//		 Odczyt bajtu z wyúwietlacza LCD
//
//----------------------------------------------------------------------------------------
uint8_t _lcd_read_byte(void)
{
    5cc6:	df 93       	push	r29
    5cc8:	cf 93       	push	r28
    5cca:	0f 92       	push	r0
    5ccc:	cd b7       	in	r28, 0x3d	; 61
    5cce:	de b7       	in	r29, 0x3e	; 62
	uint8_t result=0;
    5cd0:	19 82       	std	Y+1, r1	; 0x01
	data_dir_in();
    5cd2:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <data_dir_in>

	SET_RW;
    5cd6:	ab e3       	ldi	r26, 0x3B	; 59
    5cd8:	b0 e0       	ldi	r27, 0x00	; 0
    5cda:	eb e3       	ldi	r30, 0x3B	; 59
    5cdc:	f0 e0       	ldi	r31, 0x00	; 0
    5cde:	80 81       	ld	r24, Z
    5ce0:	82 60       	ori	r24, 0x02	; 2
    5ce2:	8c 93       	st	X, r24

	SET_E;
    5ce4:	ab e3       	ldi	r26, 0x3B	; 59
    5ce6:	b0 e0       	ldi	r27, 0x00	; 0
    5ce8:	eb e3       	ldi	r30, 0x3B	; 59
    5cea:	f0 e0       	ldi	r31, 0x00	; 0
    5cec:	80 81       	ld	r24, Z
    5cee:	84 60       	ori	r24, 0x04	; 4
    5cf0:	8c 93       	st	X, r24
	result = (lcd_readHalf() << 4);	// odczyt starszej czÍúci bajtu z LCD D7..D4
    5cf2:	0e 94 c1 2e 	call	0x5d82	; 0x5d82 <lcd_readHalf>
    5cf6:	82 95       	swap	r24
    5cf8:	80 7f       	andi	r24, 0xF0	; 240
    5cfa:	89 83       	std	Y+1, r24	; 0x01
	CLR_E;
    5cfc:	ab e3       	ldi	r26, 0x3B	; 59
    5cfe:	b0 e0       	ldi	r27, 0x00	; 0
    5d00:	eb e3       	ldi	r30, 0x3B	; 59
    5d02:	f0 e0       	ldi	r31, 0x00	; 0
    5d04:	80 81       	ld	r24, Z
    5d06:	8b 7f       	andi	r24, 0xFB	; 251
    5d08:	8c 93       	st	X, r24

	SET_E;
    5d0a:	ab e3       	ldi	r26, 0x3B	; 59
    5d0c:	b0 e0       	ldi	r27, 0x00	; 0
    5d0e:	eb e3       	ldi	r30, 0x3B	; 59
    5d10:	f0 e0       	ldi	r31, 0x00	; 0
    5d12:	80 81       	ld	r24, Z
    5d14:	84 60       	ori	r24, 0x04	; 4
    5d16:	8c 93       	st	X, r24
	result |= lcd_readHalf();			// odczyt m≥odszej czÍúci bajtu z LCD D3..D0
    5d18:	0e 94 c1 2e 	call	0x5d82	; 0x5d82 <lcd_readHalf>
    5d1c:	98 2f       	mov	r25, r24
    5d1e:	89 81       	ldd	r24, Y+1	; 0x01
    5d20:	89 2b       	or	r24, r25
    5d22:	89 83       	std	Y+1, r24	; 0x01
	CLR_E;
    5d24:	ab e3       	ldi	r26, 0x3B	; 59
    5d26:	b0 e0       	ldi	r27, 0x00	; 0
    5d28:	eb e3       	ldi	r30, 0x3B	; 59
    5d2a:	f0 e0       	ldi	r31, 0x00	; 0
    5d2c:	80 81       	ld	r24, Z
    5d2e:	8b 7f       	andi	r24, 0xFB	; 251
    5d30:	8c 93       	st	X, r24

	return result;
    5d32:	89 81       	ldd	r24, Y+1	; 0x01
}
    5d34:	0f 90       	pop	r0
    5d36:	cf 91       	pop	r28
    5d38:	df 91       	pop	r29
    5d3a:	08 95       	ret

00005d3c <data_dir_in>:
//
//		 Ustawienie wszystkich 4 linii danych jako WEjúcia
//
//----------------------------------------------------------------------------------------
static inline void data_dir_in(void)
{
    5d3c:	df 93       	push	r29
    5d3e:	cf 93       	push	r28
    5d40:	cd b7       	in	r28, 0x3d	; 61
    5d42:	de b7       	in	r29, 0x3e	; 62
	DDR(LCD_D7PORT)	&= ~(1<<LCD_D7);
    5d44:	aa e3       	ldi	r26, 0x3A	; 58
    5d46:	b0 e0       	ldi	r27, 0x00	; 0
    5d48:	ea e3       	ldi	r30, 0x3A	; 58
    5d4a:	f0 e0       	ldi	r31, 0x00	; 0
    5d4c:	80 81       	ld	r24, Z
    5d4e:	8f 7b       	andi	r24, 0xBF	; 191
    5d50:	8c 93       	st	X, r24
	DDR(LCD_D6PORT)	&= ~(1<<LCD_D6);
    5d52:	aa e3       	ldi	r26, 0x3A	; 58
    5d54:	b0 e0       	ldi	r27, 0x00	; 0
    5d56:	ea e3       	ldi	r30, 0x3A	; 58
    5d58:	f0 e0       	ldi	r31, 0x00	; 0
    5d5a:	80 81       	ld	r24, Z
    5d5c:	8f 7d       	andi	r24, 0xDF	; 223
    5d5e:	8c 93       	st	X, r24
	DDR(LCD_D5PORT)	&= ~(1<<LCD_D5);
    5d60:	aa e3       	ldi	r26, 0x3A	; 58
    5d62:	b0 e0       	ldi	r27, 0x00	; 0
    5d64:	ea e3       	ldi	r30, 0x3A	; 58
    5d66:	f0 e0       	ldi	r31, 0x00	; 0
    5d68:	80 81       	ld	r24, Z
    5d6a:	8f 7e       	andi	r24, 0xEF	; 239
    5d6c:	8c 93       	st	X, r24
	DDR(LCD_D4PORT)	&= ~(1<<LCD_D4);
    5d6e:	aa e3       	ldi	r26, 0x3A	; 58
    5d70:	b0 e0       	ldi	r27, 0x00	; 0
    5d72:	ea e3       	ldi	r30, 0x3A	; 58
    5d74:	f0 e0       	ldi	r31, 0x00	; 0
    5d76:	80 81       	ld	r24, Z
    5d78:	87 7f       	andi	r24, 0xF7	; 247
    5d7a:	8c 93       	st	X, r24
}
    5d7c:	cf 91       	pop	r28
    5d7e:	df 91       	pop	r29
    5d80:	08 95       	ret

00005d82 <lcd_readHalf>:
//
//		 Odczyt po≥Ûwki bajtu z LCD (D4..D7)
//
//----------------------------------------------------------------------------------------
static inline uint8_t lcd_readHalf(void)
{
    5d82:	df 93       	push	r29
    5d84:	cf 93       	push	r28
    5d86:	0f 92       	push	r0
    5d88:	cd b7       	in	r28, 0x3d	; 61
    5d8a:	de b7       	in	r29, 0x3e	; 62
	uint8_t result=0;
    5d8c:	19 82       	std	Y+1, r1	; 0x01

	if(PIN(LCD_D4PORT)&(1<<LCD_D4)) result |= (1<<0);
    5d8e:	e9 e3       	ldi	r30, 0x39	; 57
    5d90:	f0 e0       	ldi	r31, 0x00	; 0
    5d92:	80 81       	ld	r24, Z
    5d94:	88 2f       	mov	r24, r24
    5d96:	90 e0       	ldi	r25, 0x00	; 0
    5d98:	88 70       	andi	r24, 0x08	; 8
    5d9a:	90 70       	andi	r25, 0x00	; 0
    5d9c:	00 97       	sbiw	r24, 0x00	; 0
    5d9e:	19 f0       	breq	.+6      	; 0x5da6 <lcd_readHalf+0x24>
    5da0:	89 81       	ldd	r24, Y+1	; 0x01
    5da2:	81 60       	ori	r24, 0x01	; 1
    5da4:	89 83       	std	Y+1, r24	; 0x01
	if(PIN(LCD_D5PORT)&(1<<LCD_D5)) result |= (1<<1);
    5da6:	e9 e3       	ldi	r30, 0x39	; 57
    5da8:	f0 e0       	ldi	r31, 0x00	; 0
    5daa:	80 81       	ld	r24, Z
    5dac:	88 2f       	mov	r24, r24
    5dae:	90 e0       	ldi	r25, 0x00	; 0
    5db0:	80 71       	andi	r24, 0x10	; 16
    5db2:	90 70       	andi	r25, 0x00	; 0
    5db4:	00 97       	sbiw	r24, 0x00	; 0
    5db6:	19 f0       	breq	.+6      	; 0x5dbe <lcd_readHalf+0x3c>
    5db8:	89 81       	ldd	r24, Y+1	; 0x01
    5dba:	82 60       	ori	r24, 0x02	; 2
    5dbc:	89 83       	std	Y+1, r24	; 0x01
	if(PIN(LCD_D6PORT)&(1<<LCD_D6)) result |= (1<<2);
    5dbe:	e9 e3       	ldi	r30, 0x39	; 57
    5dc0:	f0 e0       	ldi	r31, 0x00	; 0
    5dc2:	80 81       	ld	r24, Z
    5dc4:	88 2f       	mov	r24, r24
    5dc6:	90 e0       	ldi	r25, 0x00	; 0
    5dc8:	80 72       	andi	r24, 0x20	; 32
    5dca:	90 70       	andi	r25, 0x00	; 0
    5dcc:	00 97       	sbiw	r24, 0x00	; 0
    5dce:	19 f0       	breq	.+6      	; 0x5dd6 <lcd_readHalf+0x54>
    5dd0:	89 81       	ldd	r24, Y+1	; 0x01
    5dd2:	84 60       	ori	r24, 0x04	; 4
    5dd4:	89 83       	std	Y+1, r24	; 0x01
	if(PIN(LCD_D7PORT)&(1<<LCD_D7)) result |= (1<<3);
    5dd6:	e9 e3       	ldi	r30, 0x39	; 57
    5dd8:	f0 e0       	ldi	r31, 0x00	; 0
    5dda:	80 81       	ld	r24, Z
    5ddc:	88 2f       	mov	r24, r24
    5dde:	90 e0       	ldi	r25, 0x00	; 0
    5de0:	80 74       	andi	r24, 0x40	; 64
    5de2:	90 70       	andi	r25, 0x00	; 0
    5de4:	00 97       	sbiw	r24, 0x00	; 0
    5de6:	19 f0       	breq	.+6      	; 0x5dee <lcd_readHalf+0x6c>
    5de8:	89 81       	ldd	r24, Y+1	; 0x01
    5dea:	88 60       	ori	r24, 0x08	; 8
    5dec:	89 83       	std	Y+1, r24	; 0x01

	return result;
    5dee:	89 81       	ldd	r24, Y+1	; 0x01
}
    5df0:	0f 90       	pop	r0
    5df2:	cf 91       	pop	r28
    5df4:	df 91       	pop	r29
    5df6:	08 95       	ret

00005df8 <check_BF>:
//
//		 Sprawdzenie stanu Busy Flag (ZajÍtoúci wyúwietlacza)
//
//----------------------------------------------------------------------------------------
uint8_t check_BF(void)
{
    5df8:	df 93       	push	r29
    5dfa:	cf 93       	push	r28
    5dfc:	cd b7       	in	r28, 0x3d	; 61
    5dfe:	de b7       	in	r29, 0x3e	; 62
	CLR_RS;
    5e00:	ab e3       	ldi	r26, 0x3B	; 59
    5e02:	b0 e0       	ldi	r27, 0x00	; 0
    5e04:	eb e3       	ldi	r30, 0x3B	; 59
    5e06:	f0 e0       	ldi	r31, 0x00	; 0
    5e08:	80 81       	ld	r24, Z
    5e0a:	8e 7f       	andi	r24, 0xFE	; 254
    5e0c:	8c 93       	st	X, r24
	return _lcd_read_byte();
    5e0e:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <_lcd_read_byte>
}
    5e12:	cf 91       	pop	r28
    5e14:	df 91       	pop	r29
    5e16:	08 95       	ret

00005e18 <lcd_write_cmd>:
//
//		 Zapis komendy do wyúwietlacza LCD
//
//----------------------------------------------------------------------------------------
void lcd_write_cmd(uint8_t cmd)
{
    5e18:	df 93       	push	r29
    5e1a:	cf 93       	push	r28
    5e1c:	0f 92       	push	r0
    5e1e:	cd b7       	in	r28, 0x3d	; 61
    5e20:	de b7       	in	r29, 0x3e	; 62
    5e22:	89 83       	std	Y+1, r24	; 0x01
	CLR_RS;
    5e24:	ab e3       	ldi	r26, 0x3B	; 59
    5e26:	b0 e0       	ldi	r27, 0x00	; 0
    5e28:	eb e3       	ldi	r30, 0x3B	; 59
    5e2a:	f0 e0       	ldi	r31, 0x00	; 0
    5e2c:	80 81       	ld	r24, Z
    5e2e:	8e 7f       	andi	r24, 0xFE	; 254
    5e30:	8c 93       	st	X, r24
	_lcd_write_byte(cmd);
    5e32:	89 81       	ldd	r24, Y+1	; 0x01
    5e34:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <_lcd_write_byte>
}
    5e38:	0f 90       	pop	r0
    5e3a:	cf 91       	pop	r28
    5e3c:	df 91       	pop	r29
    5e3e:	08 95       	ret

00005e40 <lcd_write_data>:
//
//		 Zapis danych do wyúwietlacza LCD
//
//----------------------------------------------------------------------------------------
void lcd_write_data(uint8_t data)
{
    5e40:	df 93       	push	r29
    5e42:	cf 93       	push	r28
    5e44:	0f 92       	push	r0
    5e46:	cd b7       	in	r28, 0x3d	; 61
    5e48:	de b7       	in	r29, 0x3e	; 62
    5e4a:	89 83       	std	Y+1, r24	; 0x01
	SET_RS;
    5e4c:	ab e3       	ldi	r26, 0x3B	; 59
    5e4e:	b0 e0       	ldi	r27, 0x00	; 0
    5e50:	eb e3       	ldi	r30, 0x3B	; 59
    5e52:	f0 e0       	ldi	r31, 0x00	; 0
    5e54:	80 81       	ld	r24, Z
    5e56:	81 60       	ori	r24, 0x01	; 1
    5e58:	8c 93       	st	X, r24
	_lcd_write_byte(data);
    5e5a:	89 81       	ldd	r24, Y+1	; 0x01
    5e5c:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <_lcd_write_byte>
}
    5e60:	0f 90       	pop	r0
    5e62:	cf 91       	pop	r28
    5e64:	df 91       	pop	r29
    5e66:	08 95       	ret

00005e68 <lcd_char>:
//		 8 w≥asnych znakÛw zdefiniowanych w CGRAM
//		 wysy≥amy za pomocπ kodÛw 0x80 do 0x87 zamiast 0x00 do 0x07
//
//----------------------------------------------------------------------------------------
void lcd_char(char c)
{
    5e68:	df 93       	push	r29
    5e6a:	cf 93       	push	r28
    5e6c:	00 d0       	rcall	.+0      	; 0x5e6e <lcd_char+0x6>
    5e6e:	cd b7       	in	r28, 0x3d	; 61
    5e70:	de b7       	in	r29, 0x3e	; 62
    5e72:	89 83       	std	Y+1, r24	; 0x01
	lcd_write_data( ( c>=0x80 && c<=0x87 ) ? (c & 0x07) : c);
    5e74:	89 81       	ldd	r24, Y+1	; 0x01
    5e76:	88 23       	and	r24, r24
    5e78:	44 f4       	brge	.+16     	; 0x5e8a <lcd_char+0x22>
    5e7a:	89 81       	ldd	r24, Y+1	; 0x01
    5e7c:	88 38       	cpi	r24, 0x88	; 136
    5e7e:	28 f4       	brcc	.+10     	; 0x5e8a <lcd_char+0x22>
    5e80:	89 81       	ldd	r24, Y+1	; 0x01
    5e82:	98 2f       	mov	r25, r24
    5e84:	97 70       	andi	r25, 0x07	; 7
    5e86:	9a 83       	std	Y+2, r25	; 0x02
    5e88:	02 c0       	rjmp	.+4      	; 0x5e8e <lcd_char+0x26>
    5e8a:	89 81       	ldd	r24, Y+1	; 0x01
    5e8c:	8a 83       	std	Y+2, r24	; 0x02
    5e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    5e90:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <lcd_write_data>
}
    5e94:	0f 90       	pop	r0
    5e96:	0f 90       	pop	r0
    5e98:	cf 91       	pop	r28
    5e9a:	df 91       	pop	r29
    5e9c:	08 95       	ret

00005e9e <lcd_str>:
//		 Wys≥anie stringa do wyúwietlacza LCD z pamiÍci RAM
//
//
//----------------------------------------------------------------------------------------
void lcd_str(char * str)
{
    5e9e:	df 93       	push	r29
    5ea0:	cf 93       	push	r28
    5ea2:	00 d0       	rcall	.+0      	; 0x5ea4 <lcd_str+0x6>
    5ea4:	00 d0       	rcall	.+0      	; 0x5ea6 <lcd_str+0x8>
    5ea6:	cd b7       	in	r28, 0x3d	; 61
    5ea8:	de b7       	in	r29, 0x3e	; 62
    5eaa:	9a 83       	std	Y+2, r25	; 0x02
    5eac:	89 83       	std	Y+1, r24	; 0x01
    5eae:	03 c0       	rjmp	.+6      	; 0x5eb6 <lcd_str+0x18>
	register char znak;
	while ( (znak=*(str++)) ) lcd_char( znak );
    5eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    5eb2:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <lcd_char>
    5eb6:	e9 81       	ldd	r30, Y+1	; 0x01
    5eb8:	fa 81       	ldd	r31, Y+2	; 0x02
    5eba:	80 81       	ld	r24, Z
    5ebc:	8b 83       	std	Y+3, r24	; 0x03
    5ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    5ec0:	8c 83       	std	Y+4, r24	; 0x04
    5ec2:	8c 81       	ldd	r24, Y+4	; 0x04
    5ec4:	88 23       	and	r24, r24
    5ec6:	11 f0       	breq	.+4      	; 0x5ecc <lcd_str+0x2e>
    5ec8:	81 e0       	ldi	r24, 0x01	; 1
    5eca:	8c 83       	std	Y+4, r24	; 0x04
    5ecc:	8c 81       	ldd	r24, Y+4	; 0x04
    5ece:	29 81       	ldd	r18, Y+1	; 0x01
    5ed0:	3a 81       	ldd	r19, Y+2	; 0x02
    5ed2:	2f 5f       	subi	r18, 0xFF	; 255
    5ed4:	3f 4f       	sbci	r19, 0xFF	; 255
    5ed6:	3a 83       	std	Y+2, r19	; 0x02
    5ed8:	29 83       	std	Y+1, r18	; 0x01
    5eda:	88 23       	and	r24, r24
    5edc:	49 f7       	brne	.-46     	; 0x5eb0 <lcd_str+0x12>
}
    5ede:	0f 90       	pop	r0
    5ee0:	0f 90       	pop	r0
    5ee2:	0f 90       	pop	r0
    5ee4:	0f 90       	pop	r0
    5ee6:	cf 91       	pop	r28
    5ee8:	df 91       	pop	r29
    5eea:	08 95       	ret

00005eec <lcd_str_P>:
//
//		 Wys≥anie stringa do wyúwietlacza LCD z pamiÍci FLASH
//
//----------------------------------------------------------------------------------------
void lcd_str_P(const char * str)
{
    5eec:	df 93       	push	r29
    5eee:	cf 93       	push	r28
    5ef0:	00 d0       	rcall	.+0      	; 0x5ef2 <lcd_str_P+0x6>
    5ef2:	00 d0       	rcall	.+0      	; 0x5ef4 <lcd_str_P+0x8>
    5ef4:	00 d0       	rcall	.+0      	; 0x5ef6 <lcd_str_P+0xa>
    5ef6:	cd b7       	in	r28, 0x3d	; 61
    5ef8:	de b7       	in	r29, 0x3e	; 62
    5efa:	9d 83       	std	Y+5, r25	; 0x05
    5efc:	8c 83       	std	Y+4, r24	; 0x04
    5efe:	03 c0       	rjmp	.+6      	; 0x5f06 <lcd_str_P+0x1a>
	register char znak;
	while ( (znak=pgm_read_byte(str++)) ) lcd_char( znak );
    5f00:	8e 81       	ldd	r24, Y+6	; 0x06
    5f02:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <lcd_char>
    5f06:	8c 81       	ldd	r24, Y+4	; 0x04
    5f08:	9d 81       	ldd	r25, Y+5	; 0x05
    5f0a:	9b 83       	std	Y+3, r25	; 0x03
    5f0c:	8a 83       	std	Y+2, r24	; 0x02
    5f0e:	8c 81       	ldd	r24, Y+4	; 0x04
    5f10:	9d 81       	ldd	r25, Y+5	; 0x05
    5f12:	01 96       	adiw	r24, 0x01	; 1
    5f14:	9d 83       	std	Y+5, r25	; 0x05
    5f16:	8c 83       	std	Y+4, r24	; 0x04
    5f18:	ea 81       	ldd	r30, Y+2	; 0x02
    5f1a:	fb 81       	ldd	r31, Y+3	; 0x03
    5f1c:	84 91       	lpm	r24, Z+
    5f1e:	89 83       	std	Y+1, r24	; 0x01
    5f20:	89 81       	ldd	r24, Y+1	; 0x01
    5f22:	8e 83       	std	Y+6, r24	; 0x06
    5f24:	8e 81       	ldd	r24, Y+6	; 0x06
    5f26:	88 23       	and	r24, r24
    5f28:	59 f7       	brne	.-42     	; 0x5f00 <lcd_str_P+0x14>
}
    5f2a:	26 96       	adiw	r28, 0x06	; 6
    5f2c:	0f b6       	in	r0, 0x3f	; 63
    5f2e:	f8 94       	cli
    5f30:	de bf       	out	0x3e, r29	; 62
    5f32:	0f be       	out	0x3f, r0	; 63
    5f34:	cd bf       	out	0x3d, r28	; 61
    5f36:	cf 91       	pop	r28
    5f38:	df 91       	pop	r29
    5f3a:	08 95       	ret

00005f3c <lcd_str_E>:
//		 8 w≥asnych znakÛw zdefiniowanych w CGRAM
//		 wysy≥amy za pomocπ kodÛw 0x80 do 0x87 zamiast 0x00 do 0x07
//
//----------------------------------------------------------------------------------------
void lcd_str_E(char * str)
{
    5f3c:	df 93       	push	r29
    5f3e:	cf 93       	push	r28
    5f40:	00 d0       	rcall	.+0      	; 0x5f42 <lcd_str_E+0x6>
    5f42:	0f 92       	push	r0
    5f44:	cd b7       	in	r28, 0x3d	; 61
    5f46:	de b7       	in	r29, 0x3e	; 62
    5f48:	9a 83       	std	Y+2, r25	; 0x02
    5f4a:	89 83       	std	Y+1, r24	; 0x01
	register char znak;
	while(1)
	{
		znak=eeprom_read_byte( (uint8_t *)(str++) );
    5f4c:	89 81       	ldd	r24, Y+1	; 0x01
    5f4e:	9a 81       	ldd	r25, Y+2	; 0x02
    5f50:	29 81       	ldd	r18, Y+1	; 0x01
    5f52:	3a 81       	ldd	r19, Y+2	; 0x02
    5f54:	2f 5f       	subi	r18, 0xFF	; 255
    5f56:	3f 4f       	sbci	r19, 0xFF	; 255
    5f58:	3a 83       	std	Y+2, r19	; 0x02
    5f5a:	29 83       	std	Y+1, r18	; 0x01
    5f5c:	0e 94 45 4b 	call	0x968a	; 0x968a <__eerd_byte_m32>
    5f60:	8b 83       	std	Y+3, r24	; 0x03
		if(!znak || znak==0xFF) break;
    5f62:	8b 81       	ldd	r24, Y+3	; 0x03
    5f64:	88 23       	and	r24, r24
    5f66:	39 f0       	breq	.+14     	; 0x5f76 <lcd_str_E+0x3a>
    5f68:	8b 81       	ldd	r24, Y+3	; 0x03
    5f6a:	8f 3f       	cpi	r24, 0xFF	; 255
    5f6c:	21 f0       	breq	.+8      	; 0x5f76 <lcd_str_E+0x3a>
		else lcd_char( znak );
    5f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    5f70:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <lcd_char>
    5f74:	eb cf       	rjmp	.-42     	; 0x5f4c <lcd_str_E+0x10>
	}
}
    5f76:	0f 90       	pop	r0
    5f78:	0f 90       	pop	r0
    5f7a:	0f 90       	pop	r0
    5f7c:	cf 91       	pop	r28
    5f7e:	df 91       	pop	r29
    5f80:	08 95       	ret

00005f82 <lcd_int>:
//
//		 Wyúwietla liczbÍ dziesiÍtnπ na wyúwietlaczu LCD
//
//----------------------------------------------------------------------------------------
void lcd_int(int val)
{
    5f82:	df 93       	push	r29
    5f84:	cf 93       	push	r28
    5f86:	cd b7       	in	r28, 0x3d	; 61
    5f88:	de b7       	in	r29, 0x3e	; 62
    5f8a:	63 97       	sbiw	r28, 0x13	; 19
    5f8c:	0f b6       	in	r0, 0x3f	; 63
    5f8e:	f8 94       	cli
    5f90:	de bf       	out	0x3e, r29	; 62
    5f92:	0f be       	out	0x3f, r0	; 63
    5f94:	cd bf       	out	0x3d, r28	; 61
    5f96:	9b 8b       	std	Y+19, r25	; 0x13
    5f98:	8a 8b       	std	Y+18, r24	; 0x12
	char bufor[17];
	lcd_str( itoa(val, bufor, 10) );
    5f9a:	8a 89       	ldd	r24, Y+18	; 0x12
    5f9c:	9b 89       	ldd	r25, Y+19	; 0x13
    5f9e:	9e 01       	movw	r18, r28
    5fa0:	2f 5f       	subi	r18, 0xFF	; 255
    5fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    5fa4:	b9 01       	movw	r22, r18
    5fa6:	4a e0       	ldi	r20, 0x0A	; 10
    5fa8:	50 e0       	ldi	r21, 0x00	; 0
    5faa:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <itoa>
    5fae:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <lcd_str>
}
    5fb2:	63 96       	adiw	r28, 0x13	; 19
    5fb4:	0f b6       	in	r0, 0x3f	; 63
    5fb6:	f8 94       	cli
    5fb8:	de bf       	out	0x3e, r29	; 62
    5fba:	0f be       	out	0x3f, r0	; 63
    5fbc:	cd bf       	out	0x3d, r28	; 61
    5fbe:	cf 91       	pop	r28
    5fc0:	df 91       	pop	r29
    5fc2:	08 95       	ret

00005fc4 <lcd_hex>:
//
//		 Wyúwietla liczbÍ szestnastkowπ HEX na wyúwietlaczu LCD
//
//----------------------------------------------------------------------------------------
void lcd_hex(uint32_t val)
{
    5fc4:	df 93       	push	r29
    5fc6:	cf 93       	push	r28
    5fc8:	cd b7       	in	r28, 0x3d	; 61
    5fca:	de b7       	in	r29, 0x3e	; 62
    5fcc:	65 97       	sbiw	r28, 0x15	; 21
    5fce:	0f b6       	in	r0, 0x3f	; 63
    5fd0:	f8 94       	cli
    5fd2:	de bf       	out	0x3e, r29	; 62
    5fd4:	0f be       	out	0x3f, r0	; 63
    5fd6:	cd bf       	out	0x3d, r28	; 61
    5fd8:	6a 8b       	std	Y+18, r22	; 0x12
    5fda:	7b 8b       	std	Y+19, r23	; 0x13
    5fdc:	8c 8b       	std	Y+20, r24	; 0x14
    5fde:	9d 8b       	std	Y+21, r25	; 0x15
	char bufor[17];
	lcd_str( ltoa(val, bufor, 16) );
    5fe0:	8a 89       	ldd	r24, Y+18	; 0x12
    5fe2:	9b 89       	ldd	r25, Y+19	; 0x13
    5fe4:	ac 89       	ldd	r26, Y+20	; 0x14
    5fe6:	bd 89       	ldd	r27, Y+21	; 0x15
    5fe8:	bc 01       	movw	r22, r24
    5fea:	cd 01       	movw	r24, r26
    5fec:	9e 01       	movw	r18, r28
    5fee:	2f 5f       	subi	r18, 0xFF	; 255
    5ff0:	3f 4f       	sbci	r19, 0xFF	; 255
    5ff2:	a9 01       	movw	r20, r18
    5ff4:	20 e1       	ldi	r18, 0x10	; 16
    5ff6:	30 e0       	ldi	r19, 0x00	; 0
    5ff8:	0e 94 11 4b 	call	0x9622	; 0x9622 <ltoa>
    5ffc:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <lcd_str>
}
    6000:	65 96       	adiw	r28, 0x15	; 21
    6002:	0f b6       	in	r0, 0x3f	; 63
    6004:	f8 94       	cli
    6006:	de bf       	out	0x3e, r29	; 62
    6008:	0f be       	out	0x3f, r0	; 63
    600a:	cd bf       	out	0x3d, r28	; 61
    600c:	cf 91       	pop	r28
    600e:	df 91       	pop	r29
    6010:	08 95       	ret

00006012 <lcd_defchar>:
//		nr: 		- kod znaku w pamiÍci CGRAM od 0x80 do 0x87
//		*def_znak:	- wskaünik do tablicy 7 bajtÛw definiujπcych znak
//
//----------------------------------------------------------------------------------------
void lcd_defchar(uint8_t nr, uint8_t *def_znak)
{
    6012:	df 93       	push	r29
    6014:	cf 93       	push	r28
    6016:	00 d0       	rcall	.+0      	; 0x6018 <lcd_defchar+0x6>
    6018:	00 d0       	rcall	.+0      	; 0x601a <lcd_defchar+0x8>
    601a:	cd b7       	in	r28, 0x3d	; 61
    601c:	de b7       	in	r29, 0x3e	; 62
    601e:	89 83       	std	Y+1, r24	; 0x01
    6020:	7b 83       	std	Y+3, r23	; 0x03
    6022:	6a 83       	std	Y+2, r22	; 0x02
	register uint8_t i,c;
	lcd_write_cmd( 64+((nr&0x07)*8) );
    6024:	89 81       	ldd	r24, Y+1	; 0x01
    6026:	88 2f       	mov	r24, r24
    6028:	90 e0       	ldi	r25, 0x00	; 0
    602a:	87 70       	andi	r24, 0x07	; 7
    602c:	90 70       	andi	r25, 0x00	; 0
    602e:	08 96       	adiw	r24, 0x08	; 8
    6030:	88 0f       	add	r24, r24
    6032:	99 1f       	adc	r25, r25
    6034:	88 0f       	add	r24, r24
    6036:	99 1f       	adc	r25, r25
    6038:	88 0f       	add	r24, r24
    603a:	99 1f       	adc	r25, r25
    603c:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <lcd_write_cmd>
	for(i=0;i<8;i++)
    6040:	1c 82       	std	Y+4, r1	; 0x04
    6042:	0e c0       	rjmp	.+28     	; 0x6060 <lcd_defchar+0x4e>
	{
		c = *(def_znak++);
    6044:	ea 81       	ldd	r30, Y+2	; 0x02
    6046:	fb 81       	ldd	r31, Y+3	; 0x03
    6048:	20 81       	ld	r18, Z
    604a:	8a 81       	ldd	r24, Y+2	; 0x02
    604c:	9b 81       	ldd	r25, Y+3	; 0x03
    604e:	01 96       	adiw	r24, 0x01	; 1
    6050:	9b 83       	std	Y+3, r25	; 0x03
    6052:	8a 83       	std	Y+2, r24	; 0x02
		lcd_write_data(c);
    6054:	82 2f       	mov	r24, r18
    6056:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <lcd_write_data>
//----------------------------------------------------------------------------------------
void lcd_defchar(uint8_t nr, uint8_t *def_znak)
{
	register uint8_t i,c;
	lcd_write_cmd( 64+((nr&0x07)*8) );
	for(i=0;i<8;i++)
    605a:	8c 81       	ldd	r24, Y+4	; 0x04
    605c:	8f 5f       	subi	r24, 0xFF	; 255
    605e:	8c 83       	std	Y+4, r24	; 0x04
    6060:	8c 81       	ldd	r24, Y+4	; 0x04
    6062:	88 30       	cpi	r24, 0x08	; 8
    6064:	78 f3       	brcs	.-34     	; 0x6044 <lcd_defchar+0x32>
	{
		c = *(def_znak++);
		lcd_write_data(c);
	}
}
    6066:	0f 90       	pop	r0
    6068:	0f 90       	pop	r0
    606a:	0f 90       	pop	r0
    606c:	0f 90       	pop	r0
    606e:	cf 91       	pop	r28
    6070:	df 91       	pop	r29
    6072:	08 95       	ret

00006074 <lcd_defchar_P>:
//		nr: 		- kod znaku w pamiÍci CGRAM od 0x80 do 0x87
//		*def_znak:	- wskaünik do tablicy 7 bajtÛw definiujπcych znak
//
//----------------------------------------------------------------------------------------
void lcd_defchar_P(uint8_t nr, const uint8_t *def_znak)
{
    6074:	df 93       	push	r29
    6076:	cf 93       	push	r28
    6078:	cd b7       	in	r28, 0x3d	; 61
    607a:	de b7       	in	r29, 0x3e	; 62
    607c:	27 97       	sbiw	r28, 0x07	; 7
    607e:	0f b6       	in	r0, 0x3f	; 63
    6080:	f8 94       	cli
    6082:	de bf       	out	0x3e, r29	; 62
    6084:	0f be       	out	0x3f, r0	; 63
    6086:	cd bf       	out	0x3d, r28	; 61
    6088:	8c 83       	std	Y+4, r24	; 0x04
    608a:	7e 83       	std	Y+6, r23	; 0x06
    608c:	6d 83       	std	Y+5, r22	; 0x05
	register uint8_t i,c;
	lcd_write_cmd( 64+((nr&0x07)*8) );
    608e:	8c 81       	ldd	r24, Y+4	; 0x04
    6090:	88 2f       	mov	r24, r24
    6092:	90 e0       	ldi	r25, 0x00	; 0
    6094:	87 70       	andi	r24, 0x07	; 7
    6096:	90 70       	andi	r25, 0x00	; 0
    6098:	08 96       	adiw	r24, 0x08	; 8
    609a:	88 0f       	add	r24, r24
    609c:	99 1f       	adc	r25, r25
    609e:	88 0f       	add	r24, r24
    60a0:	99 1f       	adc	r25, r25
    60a2:	88 0f       	add	r24, r24
    60a4:	99 1f       	adc	r25, r25
    60a6:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <lcd_write_cmd>
	for(i=0;i<8;i++)
    60aa:	1f 82       	std	Y+7, r1	; 0x07
    60ac:	13 c0       	rjmp	.+38     	; 0x60d4 <lcd_defchar_P+0x60>
	{
		c = pgm_read_byte(def_znak++);
    60ae:	8d 81       	ldd	r24, Y+5	; 0x05
    60b0:	9e 81       	ldd	r25, Y+6	; 0x06
    60b2:	9b 83       	std	Y+3, r25	; 0x03
    60b4:	8a 83       	std	Y+2, r24	; 0x02
    60b6:	8d 81       	ldd	r24, Y+5	; 0x05
    60b8:	9e 81       	ldd	r25, Y+6	; 0x06
    60ba:	01 96       	adiw	r24, 0x01	; 1
    60bc:	9e 83       	std	Y+6, r25	; 0x06
    60be:	8d 83       	std	Y+5, r24	; 0x05
    60c0:	ea 81       	ldd	r30, Y+2	; 0x02
    60c2:	fb 81       	ldd	r31, Y+3	; 0x03
    60c4:	84 91       	lpm	r24, Z+
    60c6:	89 83       	std	Y+1, r24	; 0x01
    60c8:	89 81       	ldd	r24, Y+1	; 0x01
		lcd_write_data(c);
    60ca:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <lcd_write_data>
//----------------------------------------------------------------------------------------
void lcd_defchar_P(uint8_t nr, const uint8_t *def_znak)
{
	register uint8_t i,c;
	lcd_write_cmd( 64+((nr&0x07)*8) );
	for(i=0;i<8;i++)
    60ce:	8f 81       	ldd	r24, Y+7	; 0x07
    60d0:	8f 5f       	subi	r24, 0xFF	; 255
    60d2:	8f 83       	std	Y+7, r24	; 0x07
    60d4:	8f 81       	ldd	r24, Y+7	; 0x07
    60d6:	88 30       	cpi	r24, 0x08	; 8
    60d8:	50 f3       	brcs	.-44     	; 0x60ae <lcd_defchar_P+0x3a>
	{
		c = pgm_read_byte(def_znak++);
		lcd_write_data(c);
	}
}
    60da:	27 96       	adiw	r28, 0x07	; 7
    60dc:	0f b6       	in	r0, 0x3f	; 63
    60de:	f8 94       	cli
    60e0:	de bf       	out	0x3e, r29	; 62
    60e2:	0f be       	out	0x3f, r0	; 63
    60e4:	cd bf       	out	0x3d, r28	; 61
    60e6:	cf 91       	pop	r28
    60e8:	df 91       	pop	r29
    60ea:	08 95       	ret

000060ec <lcd_defchar_E>:
//		nr: 		- kod znaku w pamiÍci CGRAM od 0x80 do 0x87
//		*def_znak:	- wskaünik do tablicy 7 bajtÛw definiujπcych znak
//
//----------------------------------------------------------------------------------------
void lcd_defchar_E(uint8_t nr, uint8_t *def_znak)
{
    60ec:	df 93       	push	r29
    60ee:	cf 93       	push	r28
    60f0:	00 d0       	rcall	.+0      	; 0x60f2 <lcd_defchar_E+0x6>
    60f2:	00 d0       	rcall	.+0      	; 0x60f4 <lcd_defchar_E+0x8>
    60f4:	cd b7       	in	r28, 0x3d	; 61
    60f6:	de b7       	in	r29, 0x3e	; 62
    60f8:	89 83       	std	Y+1, r24	; 0x01
    60fa:	7b 83       	std	Y+3, r23	; 0x03
    60fc:	6a 83       	std	Y+2, r22	; 0x02
	register uint8_t i,c;

	lcd_write_cmd( 64+((nr&0x07)*8) );
    60fe:	89 81       	ldd	r24, Y+1	; 0x01
    6100:	88 2f       	mov	r24, r24
    6102:	90 e0       	ldi	r25, 0x00	; 0
    6104:	87 70       	andi	r24, 0x07	; 7
    6106:	90 70       	andi	r25, 0x00	; 0
    6108:	08 96       	adiw	r24, 0x08	; 8
    610a:	88 0f       	add	r24, r24
    610c:	99 1f       	adc	r25, r25
    610e:	88 0f       	add	r24, r24
    6110:	99 1f       	adc	r25, r25
    6112:	88 0f       	add	r24, r24
    6114:	99 1f       	adc	r25, r25
    6116:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <lcd_write_cmd>
	for(i=0;i<8;i++)
    611a:	1c 82       	std	Y+4, r1	; 0x04
    611c:	0f c0       	rjmp	.+30     	; 0x613c <lcd_defchar_E+0x50>
	{
		c = eeprom_read_byte(def_znak++);
    611e:	2a 81       	ldd	r18, Y+2	; 0x02
    6120:	3b 81       	ldd	r19, Y+3	; 0x03
    6122:	8a 81       	ldd	r24, Y+2	; 0x02
    6124:	9b 81       	ldd	r25, Y+3	; 0x03
    6126:	01 96       	adiw	r24, 0x01	; 1
    6128:	9b 83       	std	Y+3, r25	; 0x03
    612a:	8a 83       	std	Y+2, r24	; 0x02
    612c:	c9 01       	movw	r24, r18
    612e:	0e 94 45 4b 	call	0x968a	; 0x968a <__eerd_byte_m32>
		lcd_write_data(c);
    6132:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <lcd_write_data>
void lcd_defchar_E(uint8_t nr, uint8_t *def_znak)
{
	register uint8_t i,c;

	lcd_write_cmd( 64+((nr&0x07)*8) );
	for(i=0;i<8;i++)
    6136:	8c 81       	ldd	r24, Y+4	; 0x04
    6138:	8f 5f       	subi	r24, 0xFF	; 255
    613a:	8c 83       	std	Y+4, r24	; 0x04
    613c:	8c 81       	ldd	r24, Y+4	; 0x04
    613e:	88 30       	cpi	r24, 0x08	; 8
    6140:	70 f3       	brcs	.-36     	; 0x611e <lcd_defchar_E+0x32>
	{
		c = eeprom_read_byte(def_znak++);
		lcd_write_data(c);
	}
}
    6142:	0f 90       	pop	r0
    6144:	0f 90       	pop	r0
    6146:	0f 90       	pop	r0
    6148:	0f 90       	pop	r0
    614a:	cf 91       	pop	r28
    614c:	df 91       	pop	r29
    614e:	08 95       	ret

00006150 <lcd_locate>:
//		funkcja dostosowuje automatycznie adresy DDRAM
//		w zaleønoúci od rodzaju wyúwietlacza (ile posiada wierszy)
//
//----------------------------------------------------------------------------------------
void lcd_locate(uint8_t y, uint8_t x)
{
    6150:	df 93       	push	r29
    6152:	cf 93       	push	r28
    6154:	00 d0       	rcall	.+0      	; 0x6156 <lcd_locate+0x6>
    6156:	00 d0       	rcall	.+0      	; 0x6158 <lcd_locate+0x8>
    6158:	cd b7       	in	r28, 0x3d	; 61
    615a:	de b7       	in	r29, 0x3e	; 62
    615c:	89 83       	std	Y+1, r24	; 0x01
    615e:	6a 83       	std	Y+2, r22	; 0x02
	switch(y)
    6160:	89 81       	ldd	r24, Y+1	; 0x01
    6162:	28 2f       	mov	r18, r24
    6164:	30 e0       	ldi	r19, 0x00	; 0
    6166:	3c 83       	std	Y+4, r19	; 0x04
    6168:	2b 83       	std	Y+3, r18	; 0x03
    616a:	8b 81       	ldd	r24, Y+3	; 0x03
    616c:	9c 81       	ldd	r25, Y+4	; 0x04
    616e:	00 97       	sbiw	r24, 0x00	; 0
    6170:	31 f0       	breq	.+12     	; 0x617e <lcd_locate+0x2e>
    6172:	2b 81       	ldd	r18, Y+3	; 0x03
    6174:	3c 81       	ldd	r19, Y+4	; 0x04
    6176:	21 30       	cpi	r18, 0x01	; 1
    6178:	31 05       	cpc	r19, r1
    617a:	19 f0       	breq	.+6      	; 0x6182 <lcd_locate+0x32>
    617c:	04 c0       	rjmp	.+8      	; 0x6186 <lcd_locate+0x36>
	{
		case 0: y = LCD_LINE1; break;
    617e:	19 82       	std	Y+1, r1	; 0x01
    6180:	02 c0       	rjmp	.+4      	; 0x6186 <lcd_locate+0x36>

#if (LCD_ROWS>1)
	    case 1: y = LCD_LINE2; break; // adres 1 znaku 2 wiersza
    6182:	80 e4       	ldi	r24, 0x40	; 64
    6184:	89 83       	std	Y+1, r24	; 0x01
#if (LCD_ROWS>3)
    	case 3: y = LCD_LINE4; break; // adres 1 znaku 4 wiersza
#endif
	}

	lcd_write_cmd( (0x80 + y + x) );
    6186:	99 81       	ldd	r25, Y+1	; 0x01
    6188:	8a 81       	ldd	r24, Y+2	; 0x02
    618a:	89 0f       	add	r24, r25
    618c:	80 58       	subi	r24, 0x80	; 128
    618e:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <lcd_write_cmd>
}
    6192:	0f 90       	pop	r0
    6194:	0f 90       	pop	r0
    6196:	0f 90       	pop	r0
    6198:	0f 90       	pop	r0
    619a:	cf 91       	pop	r28
    619c:	df 91       	pop	r29
    619e:	08 95       	ret

000061a0 <lcd_cls>:
//
//		Kasowanie ekranu wyúwietlacza
//
//----------------------------------------------------------------------------------------
void lcd_cls(void)
{
    61a0:	df 93       	push	r29
    61a2:	cf 93       	push	r28
    61a4:	cd b7       	in	r28, 0x3d	; 61
    61a6:	de b7       	in	r29, 0x3e	; 62
	lcd_write_cmd( LCDC_CLS );
    61a8:	81 e0       	ldi	r24, 0x01	; 1
    61aa:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <lcd_write_cmd>

	#if USE_RW == 0
		_delay_ms(4.9);
	#endif
}
    61ae:	cf 91       	pop	r28
    61b0:	df 91       	pop	r29
    61b2:	08 95       	ret

000061b4 <lcd_init>:
//
//		 ******* INICJALIZACJA WYåWIETLACZA LCD ********
//
//----------------------------------------------------------------------------------------
void lcd_init(void)
{
    61b4:	0f 93       	push	r16
    61b6:	1f 93       	push	r17
    61b8:	df 93       	push	r29
    61ba:	cf 93       	push	r28
    61bc:	cd b7       	in	r28, 0x3d	; 61
    61be:	de b7       	in	r29, 0x3e	; 62
    61c0:	c4 56       	subi	r28, 0x64	; 100
    61c2:	d0 40       	sbci	r29, 0x00	; 0
    61c4:	0f b6       	in	r0, 0x3f	; 63
    61c6:	f8 94       	cli
    61c8:	de bf       	out	0x3e, r29	; 62
    61ca:	0f be       	out	0x3f, r0	; 63
    61cc:	cd bf       	out	0x3d, r28	; 61
	// inicjowanie pinÛw portÛw ustalonych do pod≥πczenia z wyúwietlaczem LCD
	// ustawienie wszystkich jako wyjúcia
	data_dir_out();
    61ce:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <data_dir_out>
	DDR(LCD_RSPORT) |= (1<<LCD_RS);
    61d2:	aa e3       	ldi	r26, 0x3A	; 58
    61d4:	b0 e0       	ldi	r27, 0x00	; 0
    61d6:	ea e3       	ldi	r30, 0x3A	; 58
    61d8:	f0 e0       	ldi	r31, 0x00	; 0
    61da:	80 81       	ld	r24, Z
    61dc:	81 60       	ori	r24, 0x01	; 1
    61de:	8c 93       	st	X, r24
	DDR(LCD_EPORT) |= (1<<LCD_E);
    61e0:	aa e3       	ldi	r26, 0x3A	; 58
    61e2:	b0 e0       	ldi	r27, 0x00	; 0
    61e4:	ea e3       	ldi	r30, 0x3A	; 58
    61e6:	f0 e0       	ldi	r31, 0x00	; 0
    61e8:	80 81       	ld	r24, Z
    61ea:	84 60       	ori	r24, 0x04	; 4
    61ec:	8c 93       	st	X, r24
	#if USE_RW == 1
		DDR(LCD_RWPORT) |= (1<<LCD_RW);
    61ee:	aa e3       	ldi	r26, 0x3A	; 58
    61f0:	b0 e0       	ldi	r27, 0x00	; 0
    61f2:	ea e3       	ldi	r30, 0x3A	; 58
    61f4:	f0 e0       	ldi	r31, 0x00	; 0
    61f6:	80 81       	ld	r24, Z
    61f8:	82 60       	ori	r24, 0x02	; 2
    61fa:	8c 93       	st	X, r24
	#endif

	PORT(LCD_RSPORT) |= (1<<LCD_RS);
    61fc:	ab e3       	ldi	r26, 0x3B	; 59
    61fe:	b0 e0       	ldi	r27, 0x00	; 0
    6200:	eb e3       	ldi	r30, 0x3B	; 59
    6202:	f0 e0       	ldi	r31, 0x00	; 0
    6204:	80 81       	ld	r24, Z
    6206:	81 60       	ori	r24, 0x01	; 1
    6208:	8c 93       	st	X, r24
	PORT(LCD_EPORT) |= (1<<LCD_E);
    620a:	ab e3       	ldi	r26, 0x3B	; 59
    620c:	b0 e0       	ldi	r27, 0x00	; 0
    620e:	eb e3       	ldi	r30, 0x3B	; 59
    6210:	f0 e0       	ldi	r31, 0x00	; 0
    6212:	80 81       	ld	r24, Z
    6214:	84 60       	ori	r24, 0x04	; 4
    6216:	8c 93       	st	X, r24
	#if USE_RW == 1
		PORT(LCD_RWPORT) |= (1<<LCD_RW);
    6218:	ab e3       	ldi	r26, 0x3B	; 59
    621a:	b0 e0       	ldi	r27, 0x00	; 0
    621c:	eb e3       	ldi	r30, 0x3B	; 59
    621e:	f0 e0       	ldi	r31, 0x00	; 0
    6220:	80 81       	ld	r24, Z
    6222:	82 60       	ori	r24, 0x02	; 2
    6224:	8c 93       	st	X, r24
    6226:	fe 01       	movw	r30, r28
    6228:	ef 59       	subi	r30, 0x9F	; 159
    622a:	ff 4f       	sbci	r31, 0xFF	; 255
    622c:	80 e0       	ldi	r24, 0x00	; 0
    622e:	90 e0       	ldi	r25, 0x00	; 0
    6230:	a0 e7       	ldi	r26, 0x70	; 112
    6232:	b1 e4       	ldi	r27, 0x41	; 65
    6234:	80 83       	st	Z, r24
    6236:	91 83       	std	Z+1, r25	; 0x01
    6238:	a2 83       	std	Z+2, r26	; 0x02
    623a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    623c:	8e 01       	movw	r16, r28
    623e:	03 5a       	subi	r16, 0xA3	; 163
    6240:	1f 4f       	sbci	r17, 0xFF	; 255
    6242:	fe 01       	movw	r30, r28
    6244:	ef 59       	subi	r30, 0x9F	; 159
    6246:	ff 4f       	sbci	r31, 0xFF	; 255
    6248:	60 81       	ld	r22, Z
    624a:	71 81       	ldd	r23, Z+1	; 0x01
    624c:	82 81       	ldd	r24, Z+2	; 0x02
    624e:	93 81       	ldd	r25, Z+3	; 0x03
    6250:	20 e0       	ldi	r18, 0x00	; 0
    6252:	30 e0       	ldi	r19, 0x00	; 0
    6254:	4a e7       	ldi	r20, 0x7A	; 122
    6256:	55 e4       	ldi	r21, 0x45	; 69
    6258:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    625c:	dc 01       	movw	r26, r24
    625e:	cb 01       	movw	r24, r22
    6260:	f8 01       	movw	r30, r16
    6262:	80 83       	st	Z, r24
    6264:	91 83       	std	Z+1, r25	; 0x01
    6266:	a2 83       	std	Z+2, r26	; 0x02
    6268:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    626a:	fe 01       	movw	r30, r28
    626c:	e3 5a       	subi	r30, 0xA3	; 163
    626e:	ff 4f       	sbci	r31, 0xFF	; 255
    6270:	60 81       	ld	r22, Z
    6272:	71 81       	ldd	r23, Z+1	; 0x01
    6274:	82 81       	ldd	r24, Z+2	; 0x02
    6276:	93 81       	ldd	r25, Z+3	; 0x03
    6278:	20 e0       	ldi	r18, 0x00	; 0
    627a:	30 e0       	ldi	r19, 0x00	; 0
    627c:	40 e8       	ldi	r20, 0x80	; 128
    627e:	5f e3       	ldi	r21, 0x3F	; 63
    6280:	0e 94 29 46 	call	0x8c52	; 0x8c52 <__ltsf2>
    6284:	88 23       	and	r24, r24
    6286:	44 f4       	brge	.+16     	; 0x6298 <lcd_init+0xe4>
		__ticks = 1;
    6288:	fe 01       	movw	r30, r28
    628a:	e5 5a       	subi	r30, 0xA5	; 165
    628c:	ff 4f       	sbci	r31, 0xFF	; 255
    628e:	81 e0       	ldi	r24, 0x01	; 1
    6290:	90 e0       	ldi	r25, 0x00	; 0
    6292:	91 83       	std	Z+1, r25	; 0x01
    6294:	80 83       	st	Z, r24
    6296:	64 c0       	rjmp	.+200    	; 0x6360 <lcd_init+0x1ac>
	else if (__tmp > 65535)
    6298:	fe 01       	movw	r30, r28
    629a:	e3 5a       	subi	r30, 0xA3	; 163
    629c:	ff 4f       	sbci	r31, 0xFF	; 255
    629e:	60 81       	ld	r22, Z
    62a0:	71 81       	ldd	r23, Z+1	; 0x01
    62a2:	82 81       	ldd	r24, Z+2	; 0x02
    62a4:	93 81       	ldd	r25, Z+3	; 0x03
    62a6:	20 e0       	ldi	r18, 0x00	; 0
    62a8:	3f ef       	ldi	r19, 0xFF	; 255
    62aa:	4f e7       	ldi	r20, 0x7F	; 127
    62ac:	57 e4       	ldi	r21, 0x47	; 71
    62ae:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <__gtsf2>
    62b2:	18 16       	cp	r1, r24
    62b4:	0c f0       	brlt	.+2      	; 0x62b8 <lcd_init+0x104>
    62b6:	43 c0       	rjmp	.+134    	; 0x633e <lcd_init+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    62b8:	fe 01       	movw	r30, r28
    62ba:	ef 59       	subi	r30, 0x9F	; 159
    62bc:	ff 4f       	sbci	r31, 0xFF	; 255
    62be:	60 81       	ld	r22, Z
    62c0:	71 81       	ldd	r23, Z+1	; 0x01
    62c2:	82 81       	ldd	r24, Z+2	; 0x02
    62c4:	93 81       	ldd	r25, Z+3	; 0x03
    62c6:	20 e0       	ldi	r18, 0x00	; 0
    62c8:	30 e0       	ldi	r19, 0x00	; 0
    62ca:	40 e2       	ldi	r20, 0x20	; 32
    62cc:	51 e4       	ldi	r21, 0x41	; 65
    62ce:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    62d2:	dc 01       	movw	r26, r24
    62d4:	cb 01       	movw	r24, r22
    62d6:	8e 01       	movw	r16, r28
    62d8:	05 5a       	subi	r16, 0xA5	; 165
    62da:	1f 4f       	sbci	r17, 0xFF	; 255
    62dc:	bc 01       	movw	r22, r24
    62de:	cd 01       	movw	r24, r26
    62e0:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    62e4:	dc 01       	movw	r26, r24
    62e6:	cb 01       	movw	r24, r22
    62e8:	f8 01       	movw	r30, r16
    62ea:	91 83       	std	Z+1, r25	; 0x01
    62ec:	80 83       	st	Z, r24
    62ee:	1f c0       	rjmp	.+62     	; 0x632e <lcd_init+0x17a>
    62f0:	fe 01       	movw	r30, r28
    62f2:	e7 5a       	subi	r30, 0xA7	; 167
    62f4:	ff 4f       	sbci	r31, 0xFF	; 255
    62f6:	80 e9       	ldi	r24, 0x90	; 144
    62f8:	91 e0       	ldi	r25, 0x01	; 1
    62fa:	91 83       	std	Z+1, r25	; 0x01
    62fc:	80 83       	st	Z, r24
    62fe:	fe 01       	movw	r30, r28
    6300:	e7 5a       	subi	r30, 0xA7	; 167
    6302:	ff 4f       	sbci	r31, 0xFF	; 255
    6304:	80 81       	ld	r24, Z
    6306:	91 81       	ldd	r25, Z+1	; 0x01
    6308:	01 97       	sbiw	r24, 0x01	; 1
    630a:	f1 f7       	brne	.-4      	; 0x6308 <lcd_init+0x154>
    630c:	fe 01       	movw	r30, r28
    630e:	e7 5a       	subi	r30, 0xA7	; 167
    6310:	ff 4f       	sbci	r31, 0xFF	; 255
    6312:	91 83       	std	Z+1, r25	; 0x01
    6314:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6316:	de 01       	movw	r26, r28
    6318:	a5 5a       	subi	r26, 0xA5	; 165
    631a:	bf 4f       	sbci	r27, 0xFF	; 255
    631c:	fe 01       	movw	r30, r28
    631e:	e5 5a       	subi	r30, 0xA5	; 165
    6320:	ff 4f       	sbci	r31, 0xFF	; 255
    6322:	80 81       	ld	r24, Z
    6324:	91 81       	ldd	r25, Z+1	; 0x01
    6326:	01 97       	sbiw	r24, 0x01	; 1
    6328:	11 96       	adiw	r26, 0x01	; 1
    632a:	9c 93       	st	X, r25
    632c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    632e:	fe 01       	movw	r30, r28
    6330:	e5 5a       	subi	r30, 0xA5	; 165
    6332:	ff 4f       	sbci	r31, 0xFF	; 255
    6334:	80 81       	ld	r24, Z
    6336:	91 81       	ldd	r25, Z+1	; 0x01
    6338:	00 97       	sbiw	r24, 0x00	; 0
    633a:	d1 f6       	brne	.-76     	; 0x62f0 <lcd_init+0x13c>
    633c:	27 c0       	rjmp	.+78     	; 0x638c <lcd_init+0x1d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    633e:	8e 01       	movw	r16, r28
    6340:	05 5a       	subi	r16, 0xA5	; 165
    6342:	1f 4f       	sbci	r17, 0xFF	; 255
    6344:	fe 01       	movw	r30, r28
    6346:	e3 5a       	subi	r30, 0xA3	; 163
    6348:	ff 4f       	sbci	r31, 0xFF	; 255
    634a:	60 81       	ld	r22, Z
    634c:	71 81       	ldd	r23, Z+1	; 0x01
    634e:	82 81       	ldd	r24, Z+2	; 0x02
    6350:	93 81       	ldd	r25, Z+3	; 0x03
    6352:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    6356:	dc 01       	movw	r26, r24
    6358:	cb 01       	movw	r24, r22
    635a:	f8 01       	movw	r30, r16
    635c:	91 83       	std	Z+1, r25	; 0x01
    635e:	80 83       	st	Z, r24
    6360:	de 01       	movw	r26, r28
    6362:	a9 5a       	subi	r26, 0xA9	; 169
    6364:	bf 4f       	sbci	r27, 0xFF	; 255
    6366:	fe 01       	movw	r30, r28
    6368:	e5 5a       	subi	r30, 0xA5	; 165
    636a:	ff 4f       	sbci	r31, 0xFF	; 255
    636c:	80 81       	ld	r24, Z
    636e:	91 81       	ldd	r25, Z+1	; 0x01
    6370:	8d 93       	st	X+, r24
    6372:	9c 93       	st	X, r25
    6374:	fe 01       	movw	r30, r28
    6376:	e9 5a       	subi	r30, 0xA9	; 169
    6378:	ff 4f       	sbci	r31, 0xFF	; 255
    637a:	80 81       	ld	r24, Z
    637c:	91 81       	ldd	r25, Z+1	; 0x01
    637e:	01 97       	sbiw	r24, 0x01	; 1
    6380:	f1 f7       	brne	.-4      	; 0x637e <lcd_init+0x1ca>
    6382:	fe 01       	movw	r30, r28
    6384:	e9 5a       	subi	r30, 0xA9	; 169
    6386:	ff 4f       	sbci	r31, 0xFF	; 255
    6388:	91 83       	std	Z+1, r25	; 0x01
    638a:	80 83       	st	Z, r24
	#endif

	_delay_ms(15);
	PORT(LCD_EPORT) &= ~(1<<LCD_E);
    638c:	ab e3       	ldi	r26, 0x3B	; 59
    638e:	b0 e0       	ldi	r27, 0x00	; 0
    6390:	eb e3       	ldi	r30, 0x3B	; 59
    6392:	f0 e0       	ldi	r31, 0x00	; 0
    6394:	80 81       	ld	r24, Z
    6396:	8b 7f       	andi	r24, 0xFB	; 251
    6398:	8c 93       	st	X, r24
	PORT(LCD_RSPORT) &= ~(1<<LCD_RS);
    639a:	ab e3       	ldi	r26, 0x3B	; 59
    639c:	b0 e0       	ldi	r27, 0x00	; 0
    639e:	eb e3       	ldi	r30, 0x3B	; 59
    63a0:	f0 e0       	ldi	r31, 0x00	; 0
    63a2:	80 81       	ld	r24, Z
    63a4:	8e 7f       	andi	r24, 0xFE	; 254
    63a6:	8c 93       	st	X, r24
	#if USE_RW == 1	
    	PORT(LCD_RWPORT) &= ~(1<<LCD_RW);
    63a8:	ab e3       	ldi	r26, 0x3B	; 59
    63aa:	b0 e0       	ldi	r27, 0x00	; 0
    63ac:	eb e3       	ldi	r30, 0x3B	; 59
    63ae:	f0 e0       	ldi	r31, 0x00	; 0
    63b0:	80 81       	ld	r24, Z
    63b2:	8d 7f       	andi	r24, 0xFD	; 253
    63b4:	8c 93       	st	X, r24
	#endif

	// jeszcze nie moøna uøywaÊ Busy Flag
	SET_E;
    63b6:	ab e3       	ldi	r26, 0x3B	; 59
    63b8:	b0 e0       	ldi	r27, 0x00	; 0
    63ba:	eb e3       	ldi	r30, 0x3B	; 59
    63bc:	f0 e0       	ldi	r31, 0x00	; 0
    63be:	80 81       	ld	r24, Z
    63c0:	84 60       	ori	r24, 0x04	; 4
    63c2:	8c 93       	st	X, r24
	lcd_sendHalf(0x03);	// tryb 8-bitowy
    63c4:	83 e0       	ldi	r24, 0x03	; 3
    63c6:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <lcd_sendHalf>
	CLR_E;
    63ca:	ab e3       	ldi	r26, 0x3B	; 59
    63cc:	b0 e0       	ldi	r27, 0x00	; 0
    63ce:	eb e3       	ldi	r30, 0x3B	; 59
    63d0:	f0 e0       	ldi	r31, 0x00	; 0
    63d2:	80 81       	ld	r24, Z
    63d4:	8b 7f       	andi	r24, 0xFB	; 251
    63d6:	8c 93       	st	X, r24
    63d8:	fe 01       	movw	r30, r28
    63da:	ed 5a       	subi	r30, 0xAD	; 173
    63dc:	ff 4f       	sbci	r31, 0xFF	; 255
    63de:	83 e3       	ldi	r24, 0x33	; 51
    63e0:	93 e3       	ldi	r25, 0x33	; 51
    63e2:	a3 e8       	ldi	r26, 0x83	; 131
    63e4:	b0 e4       	ldi	r27, 0x40	; 64
    63e6:	80 83       	st	Z, r24
    63e8:	91 83       	std	Z+1, r25	; 0x01
    63ea:	a2 83       	std	Z+2, r26	; 0x02
    63ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    63ee:	8e 01       	movw	r16, r28
    63f0:	01 5b       	subi	r16, 0xB1	; 177
    63f2:	1f 4f       	sbci	r17, 0xFF	; 255
    63f4:	fe 01       	movw	r30, r28
    63f6:	ed 5a       	subi	r30, 0xAD	; 173
    63f8:	ff 4f       	sbci	r31, 0xFF	; 255
    63fa:	60 81       	ld	r22, Z
    63fc:	71 81       	ldd	r23, Z+1	; 0x01
    63fe:	82 81       	ldd	r24, Z+2	; 0x02
    6400:	93 81       	ldd	r25, Z+3	; 0x03
    6402:	20 e0       	ldi	r18, 0x00	; 0
    6404:	30 e0       	ldi	r19, 0x00	; 0
    6406:	4a e7       	ldi	r20, 0x7A	; 122
    6408:	55 e4       	ldi	r21, 0x45	; 69
    640a:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    640e:	dc 01       	movw	r26, r24
    6410:	cb 01       	movw	r24, r22
    6412:	f8 01       	movw	r30, r16
    6414:	80 83       	st	Z, r24
    6416:	91 83       	std	Z+1, r25	; 0x01
    6418:	a2 83       	std	Z+2, r26	; 0x02
    641a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    641c:	fe 01       	movw	r30, r28
    641e:	e1 5b       	subi	r30, 0xB1	; 177
    6420:	ff 4f       	sbci	r31, 0xFF	; 255
    6422:	60 81       	ld	r22, Z
    6424:	71 81       	ldd	r23, Z+1	; 0x01
    6426:	82 81       	ldd	r24, Z+2	; 0x02
    6428:	93 81       	ldd	r25, Z+3	; 0x03
    642a:	20 e0       	ldi	r18, 0x00	; 0
    642c:	30 e0       	ldi	r19, 0x00	; 0
    642e:	40 e8       	ldi	r20, 0x80	; 128
    6430:	5f e3       	ldi	r21, 0x3F	; 63
    6432:	0e 94 29 46 	call	0x8c52	; 0x8c52 <__ltsf2>
    6436:	88 23       	and	r24, r24
    6438:	44 f4       	brge	.+16     	; 0x644a <lcd_init+0x296>
		__ticks = 1;
    643a:	fe 01       	movw	r30, r28
    643c:	e3 5b       	subi	r30, 0xB3	; 179
    643e:	ff 4f       	sbci	r31, 0xFF	; 255
    6440:	81 e0       	ldi	r24, 0x01	; 1
    6442:	90 e0       	ldi	r25, 0x00	; 0
    6444:	91 83       	std	Z+1, r25	; 0x01
    6446:	80 83       	st	Z, r24
    6448:	64 c0       	rjmp	.+200    	; 0x6512 <lcd_init+0x35e>
	else if (__tmp > 65535)
    644a:	fe 01       	movw	r30, r28
    644c:	e1 5b       	subi	r30, 0xB1	; 177
    644e:	ff 4f       	sbci	r31, 0xFF	; 255
    6450:	60 81       	ld	r22, Z
    6452:	71 81       	ldd	r23, Z+1	; 0x01
    6454:	82 81       	ldd	r24, Z+2	; 0x02
    6456:	93 81       	ldd	r25, Z+3	; 0x03
    6458:	20 e0       	ldi	r18, 0x00	; 0
    645a:	3f ef       	ldi	r19, 0xFF	; 255
    645c:	4f e7       	ldi	r20, 0x7F	; 127
    645e:	57 e4       	ldi	r21, 0x47	; 71
    6460:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <__gtsf2>
    6464:	18 16       	cp	r1, r24
    6466:	0c f0       	brlt	.+2      	; 0x646a <lcd_init+0x2b6>
    6468:	43 c0       	rjmp	.+134    	; 0x64f0 <lcd_init+0x33c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    646a:	fe 01       	movw	r30, r28
    646c:	ed 5a       	subi	r30, 0xAD	; 173
    646e:	ff 4f       	sbci	r31, 0xFF	; 255
    6470:	60 81       	ld	r22, Z
    6472:	71 81       	ldd	r23, Z+1	; 0x01
    6474:	82 81       	ldd	r24, Z+2	; 0x02
    6476:	93 81       	ldd	r25, Z+3	; 0x03
    6478:	20 e0       	ldi	r18, 0x00	; 0
    647a:	30 e0       	ldi	r19, 0x00	; 0
    647c:	40 e2       	ldi	r20, 0x20	; 32
    647e:	51 e4       	ldi	r21, 0x41	; 65
    6480:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    6484:	dc 01       	movw	r26, r24
    6486:	cb 01       	movw	r24, r22
    6488:	8e 01       	movw	r16, r28
    648a:	03 5b       	subi	r16, 0xB3	; 179
    648c:	1f 4f       	sbci	r17, 0xFF	; 255
    648e:	bc 01       	movw	r22, r24
    6490:	cd 01       	movw	r24, r26
    6492:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    6496:	dc 01       	movw	r26, r24
    6498:	cb 01       	movw	r24, r22
    649a:	f8 01       	movw	r30, r16
    649c:	91 83       	std	Z+1, r25	; 0x01
    649e:	80 83       	st	Z, r24
    64a0:	1f c0       	rjmp	.+62     	; 0x64e0 <lcd_init+0x32c>
    64a2:	fe 01       	movw	r30, r28
    64a4:	e5 5b       	subi	r30, 0xB5	; 181
    64a6:	ff 4f       	sbci	r31, 0xFF	; 255
    64a8:	80 e9       	ldi	r24, 0x90	; 144
    64aa:	91 e0       	ldi	r25, 0x01	; 1
    64ac:	91 83       	std	Z+1, r25	; 0x01
    64ae:	80 83       	st	Z, r24
    64b0:	fe 01       	movw	r30, r28
    64b2:	e5 5b       	subi	r30, 0xB5	; 181
    64b4:	ff 4f       	sbci	r31, 0xFF	; 255
    64b6:	80 81       	ld	r24, Z
    64b8:	91 81       	ldd	r25, Z+1	; 0x01
    64ba:	01 97       	sbiw	r24, 0x01	; 1
    64bc:	f1 f7       	brne	.-4      	; 0x64ba <lcd_init+0x306>
    64be:	fe 01       	movw	r30, r28
    64c0:	e5 5b       	subi	r30, 0xB5	; 181
    64c2:	ff 4f       	sbci	r31, 0xFF	; 255
    64c4:	91 83       	std	Z+1, r25	; 0x01
    64c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    64c8:	de 01       	movw	r26, r28
    64ca:	a3 5b       	subi	r26, 0xB3	; 179
    64cc:	bf 4f       	sbci	r27, 0xFF	; 255
    64ce:	fe 01       	movw	r30, r28
    64d0:	e3 5b       	subi	r30, 0xB3	; 179
    64d2:	ff 4f       	sbci	r31, 0xFF	; 255
    64d4:	80 81       	ld	r24, Z
    64d6:	91 81       	ldd	r25, Z+1	; 0x01
    64d8:	01 97       	sbiw	r24, 0x01	; 1
    64da:	11 96       	adiw	r26, 0x01	; 1
    64dc:	9c 93       	st	X, r25
    64de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    64e0:	fe 01       	movw	r30, r28
    64e2:	e3 5b       	subi	r30, 0xB3	; 179
    64e4:	ff 4f       	sbci	r31, 0xFF	; 255
    64e6:	80 81       	ld	r24, Z
    64e8:	91 81       	ldd	r25, Z+1	; 0x01
    64ea:	00 97       	sbiw	r24, 0x00	; 0
    64ec:	d1 f6       	brne	.-76     	; 0x64a2 <lcd_init+0x2ee>
    64ee:	27 c0       	rjmp	.+78     	; 0x653e <lcd_init+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    64f0:	8e 01       	movw	r16, r28
    64f2:	03 5b       	subi	r16, 0xB3	; 179
    64f4:	1f 4f       	sbci	r17, 0xFF	; 255
    64f6:	fe 01       	movw	r30, r28
    64f8:	e1 5b       	subi	r30, 0xB1	; 177
    64fa:	ff 4f       	sbci	r31, 0xFF	; 255
    64fc:	60 81       	ld	r22, Z
    64fe:	71 81       	ldd	r23, Z+1	; 0x01
    6500:	82 81       	ldd	r24, Z+2	; 0x02
    6502:	93 81       	ldd	r25, Z+3	; 0x03
    6504:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    6508:	dc 01       	movw	r26, r24
    650a:	cb 01       	movw	r24, r22
    650c:	f8 01       	movw	r30, r16
    650e:	91 83       	std	Z+1, r25	; 0x01
    6510:	80 83       	st	Z, r24
    6512:	de 01       	movw	r26, r28
    6514:	a7 5b       	subi	r26, 0xB7	; 183
    6516:	bf 4f       	sbci	r27, 0xFF	; 255
    6518:	fe 01       	movw	r30, r28
    651a:	e3 5b       	subi	r30, 0xB3	; 179
    651c:	ff 4f       	sbci	r31, 0xFF	; 255
    651e:	80 81       	ld	r24, Z
    6520:	91 81       	ldd	r25, Z+1	; 0x01
    6522:	8d 93       	st	X+, r24
    6524:	9c 93       	st	X, r25
    6526:	fe 01       	movw	r30, r28
    6528:	e7 5b       	subi	r30, 0xB7	; 183
    652a:	ff 4f       	sbci	r31, 0xFF	; 255
    652c:	80 81       	ld	r24, Z
    652e:	91 81       	ldd	r25, Z+1	; 0x01
    6530:	01 97       	sbiw	r24, 0x01	; 1
    6532:	f1 f7       	brne	.-4      	; 0x6530 <lcd_init+0x37c>
    6534:	fe 01       	movw	r30, r28
    6536:	e7 5b       	subi	r30, 0xB7	; 183
    6538:	ff 4f       	sbci	r31, 0xFF	; 255
    653a:	91 83       	std	Z+1, r25	; 0x01
    653c:	80 83       	st	Z, r24
	_delay_ms(4.1);

	SET_E;
    653e:	ab e3       	ldi	r26, 0x3B	; 59
    6540:	b0 e0       	ldi	r27, 0x00	; 0
    6542:	eb e3       	ldi	r30, 0x3B	; 59
    6544:	f0 e0       	ldi	r31, 0x00	; 0
    6546:	80 81       	ld	r24, Z
    6548:	84 60       	ori	r24, 0x04	; 4
    654a:	8c 93       	st	X, r24
	lcd_sendHalf(0x03);	// tryb 8-bitowy
    654c:	83 e0       	ldi	r24, 0x03	; 3
    654e:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <lcd_sendHalf>
	CLR_E;
    6552:	ab e3       	ldi	r26, 0x3B	; 59
    6554:	b0 e0       	ldi	r27, 0x00	; 0
    6556:	eb e3       	ldi	r30, 0x3B	; 59
    6558:	f0 e0       	ldi	r31, 0x00	; 0
    655a:	80 81       	ld	r24, Z
    655c:	8b 7f       	andi	r24, 0xFB	; 251
    655e:	8c 93       	st	X, r24
    6560:	fe 01       	movw	r30, r28
    6562:	eb 5b       	subi	r30, 0xBB	; 187
    6564:	ff 4f       	sbci	r31, 0xFF	; 255
    6566:	80 e0       	ldi	r24, 0x00	; 0
    6568:	90 e0       	ldi	r25, 0x00	; 0
    656a:	a8 ec       	ldi	r26, 0xC8	; 200
    656c:	b2 e4       	ldi	r27, 0x42	; 66
    656e:	80 83       	st	Z, r24
    6570:	91 83       	std	Z+1, r25	; 0x01
    6572:	a2 83       	std	Z+2, r26	; 0x02
    6574:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    6576:	8e 01       	movw	r16, r28
    6578:	0f 5b       	subi	r16, 0xBF	; 191
    657a:	1f 4f       	sbci	r17, 0xFF	; 255
    657c:	fe 01       	movw	r30, r28
    657e:	eb 5b       	subi	r30, 0xBB	; 187
    6580:	ff 4f       	sbci	r31, 0xFF	; 255
    6582:	60 81       	ld	r22, Z
    6584:	71 81       	ldd	r23, Z+1	; 0x01
    6586:	82 81       	ldd	r24, Z+2	; 0x02
    6588:	93 81       	ldd	r25, Z+3	; 0x03
    658a:	2b ea       	ldi	r18, 0xAB	; 171
    658c:	3a ea       	ldi	r19, 0xAA	; 170
    658e:	4a ea       	ldi	r20, 0xAA	; 170
    6590:	50 e4       	ldi	r21, 0x40	; 64
    6592:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    6596:	dc 01       	movw	r26, r24
    6598:	cb 01       	movw	r24, r22
    659a:	f8 01       	movw	r30, r16
    659c:	80 83       	st	Z, r24
    659e:	91 83       	std	Z+1, r25	; 0x01
    65a0:	a2 83       	std	Z+2, r26	; 0x02
    65a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    65a4:	fe 01       	movw	r30, r28
    65a6:	ef 5b       	subi	r30, 0xBF	; 191
    65a8:	ff 4f       	sbci	r31, 0xFF	; 255
    65aa:	60 81       	ld	r22, Z
    65ac:	71 81       	ldd	r23, Z+1	; 0x01
    65ae:	82 81       	ldd	r24, Z+2	; 0x02
    65b0:	93 81       	ldd	r25, Z+3	; 0x03
    65b2:	20 e0       	ldi	r18, 0x00	; 0
    65b4:	30 e0       	ldi	r19, 0x00	; 0
    65b6:	40 e8       	ldi	r20, 0x80	; 128
    65b8:	5f e3       	ldi	r21, 0x3F	; 63
    65ba:	0e 94 29 46 	call	0x8c52	; 0x8c52 <__ltsf2>
    65be:	88 23       	and	r24, r24
    65c0:	34 f4       	brge	.+12     	; 0x65ce <lcd_init+0x41a>
		__ticks = 1;
    65c2:	81 e0       	ldi	r24, 0x01	; 1
    65c4:	fe 01       	movw	r30, r28
    65c6:	e0 5c       	subi	r30, 0xC0	; 192
    65c8:	ff 4f       	sbci	r31, 0xFF	; 255
    65ca:	80 83       	st	Z, r24
    65cc:	9d c0       	rjmp	.+314    	; 0x6708 <lcd_init+0x554>
	else if (__tmp > 255)
    65ce:	fe 01       	movw	r30, r28
    65d0:	ef 5b       	subi	r30, 0xBF	; 191
    65d2:	ff 4f       	sbci	r31, 0xFF	; 255
    65d4:	60 81       	ld	r22, Z
    65d6:	71 81       	ldd	r23, Z+1	; 0x01
    65d8:	82 81       	ldd	r24, Z+2	; 0x02
    65da:	93 81       	ldd	r25, Z+3	; 0x03
    65dc:	20 e0       	ldi	r18, 0x00	; 0
    65de:	30 e0       	ldi	r19, 0x00	; 0
    65e0:	4f e7       	ldi	r20, 0x7F	; 127
    65e2:	53 e4       	ldi	r21, 0x43	; 67
    65e4:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <__gtsf2>
    65e8:	18 16       	cp	r1, r24
    65ea:	0c f0       	brlt	.+2      	; 0x65ee <lcd_init+0x43a>
    65ec:	7e c0       	rjmp	.+252    	; 0x66ea <lcd_init+0x536>
	{
		_delay_ms(__us / 1000.0);
    65ee:	fe 01       	movw	r30, r28
    65f0:	eb 5b       	subi	r30, 0xBB	; 187
    65f2:	ff 4f       	sbci	r31, 0xFF	; 255
    65f4:	60 81       	ld	r22, Z
    65f6:	71 81       	ldd	r23, Z+1	; 0x01
    65f8:	82 81       	ldd	r24, Z+2	; 0x02
    65fa:	93 81       	ldd	r25, Z+3	; 0x03
    65fc:	20 e0       	ldi	r18, 0x00	; 0
    65fe:	30 e0       	ldi	r19, 0x00	; 0
    6600:	4a e7       	ldi	r20, 0x7A	; 122
    6602:	54 e4       	ldi	r21, 0x44	; 68
    6604:	0e 94 1d 45 	call	0x8a3a	; 0x8a3a <__divsf3>
    6608:	dc 01       	movw	r26, r24
    660a:	cb 01       	movw	r24, r22
    660c:	8c af       	std	Y+60, r24	; 0x3c
    660e:	9d af       	std	Y+61, r25	; 0x3d
    6610:	ae af       	std	Y+62, r26	; 0x3e
    6612:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6614:	6c ad       	ldd	r22, Y+60	; 0x3c
    6616:	7d ad       	ldd	r23, Y+61	; 0x3d
    6618:	8e ad       	ldd	r24, Y+62	; 0x3e
    661a:	9f ad       	ldd	r25, Y+63	; 0x3f
    661c:	20 e0       	ldi	r18, 0x00	; 0
    661e:	30 e0       	ldi	r19, 0x00	; 0
    6620:	4a e7       	ldi	r20, 0x7A	; 122
    6622:	55 e4       	ldi	r21, 0x45	; 69
    6624:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    6628:	dc 01       	movw	r26, r24
    662a:	cb 01       	movw	r24, r22
    662c:	88 af       	std	Y+56, r24	; 0x38
    662e:	99 af       	std	Y+57, r25	; 0x39
    6630:	aa af       	std	Y+58, r26	; 0x3a
    6632:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    6634:	68 ad       	ldd	r22, Y+56	; 0x38
    6636:	79 ad       	ldd	r23, Y+57	; 0x39
    6638:	8a ad       	ldd	r24, Y+58	; 0x3a
    663a:	9b ad       	ldd	r25, Y+59	; 0x3b
    663c:	20 e0       	ldi	r18, 0x00	; 0
    663e:	30 e0       	ldi	r19, 0x00	; 0
    6640:	40 e8       	ldi	r20, 0x80	; 128
    6642:	5f e3       	ldi	r21, 0x3F	; 63
    6644:	0e 94 29 46 	call	0x8c52	; 0x8c52 <__ltsf2>
    6648:	88 23       	and	r24, r24
    664a:	2c f4       	brge	.+10     	; 0x6656 <lcd_init+0x4a2>
		__ticks = 1;
    664c:	81 e0       	ldi	r24, 0x01	; 1
    664e:	90 e0       	ldi	r25, 0x00	; 0
    6650:	9f ab       	std	Y+55, r25	; 0x37
    6652:	8e ab       	std	Y+54, r24	; 0x36
    6654:	3f c0       	rjmp	.+126    	; 0x66d4 <lcd_init+0x520>
	else if (__tmp > 65535)
    6656:	68 ad       	ldd	r22, Y+56	; 0x38
    6658:	79 ad       	ldd	r23, Y+57	; 0x39
    665a:	8a ad       	ldd	r24, Y+58	; 0x3a
    665c:	9b ad       	ldd	r25, Y+59	; 0x3b
    665e:	20 e0       	ldi	r18, 0x00	; 0
    6660:	3f ef       	ldi	r19, 0xFF	; 255
    6662:	4f e7       	ldi	r20, 0x7F	; 127
    6664:	57 e4       	ldi	r21, 0x47	; 71
    6666:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <__gtsf2>
    666a:	18 16       	cp	r1, r24
    666c:	4c f5       	brge	.+82     	; 0x66c0 <lcd_init+0x50c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    666e:	6c ad       	ldd	r22, Y+60	; 0x3c
    6670:	7d ad       	ldd	r23, Y+61	; 0x3d
    6672:	8e ad       	ldd	r24, Y+62	; 0x3e
    6674:	9f ad       	ldd	r25, Y+63	; 0x3f
    6676:	20 e0       	ldi	r18, 0x00	; 0
    6678:	30 e0       	ldi	r19, 0x00	; 0
    667a:	40 e2       	ldi	r20, 0x20	; 32
    667c:	51 e4       	ldi	r21, 0x41	; 65
    667e:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    6682:	dc 01       	movw	r26, r24
    6684:	cb 01       	movw	r24, r22
    6686:	bc 01       	movw	r22, r24
    6688:	cd 01       	movw	r24, r26
    668a:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    668e:	dc 01       	movw	r26, r24
    6690:	cb 01       	movw	r24, r22
    6692:	9f ab       	std	Y+55, r25	; 0x37
    6694:	8e ab       	std	Y+54, r24	; 0x36
    6696:	0f c0       	rjmp	.+30     	; 0x66b6 <lcd_init+0x502>
    6698:	80 e9       	ldi	r24, 0x90	; 144
    669a:	91 e0       	ldi	r25, 0x01	; 1
    669c:	9d ab       	std	Y+53, r25	; 0x35
    669e:	8c ab       	std	Y+52, r24	; 0x34
    66a0:	8c a9       	ldd	r24, Y+52	; 0x34
    66a2:	9d a9       	ldd	r25, Y+53	; 0x35
    66a4:	01 97       	sbiw	r24, 0x01	; 1
    66a6:	f1 f7       	brne	.-4      	; 0x66a4 <lcd_init+0x4f0>
    66a8:	9d ab       	std	Y+53, r25	; 0x35
    66aa:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    66ac:	8e a9       	ldd	r24, Y+54	; 0x36
    66ae:	9f a9       	ldd	r25, Y+55	; 0x37
    66b0:	01 97       	sbiw	r24, 0x01	; 1
    66b2:	9f ab       	std	Y+55, r25	; 0x37
    66b4:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    66b6:	8e a9       	ldd	r24, Y+54	; 0x36
    66b8:	9f a9       	ldd	r25, Y+55	; 0x37
    66ba:	00 97       	sbiw	r24, 0x00	; 0
    66bc:	69 f7       	brne	.-38     	; 0x6698 <lcd_init+0x4e4>
    66be:	2d c0       	rjmp	.+90     	; 0x671a <lcd_init+0x566>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    66c0:	68 ad       	ldd	r22, Y+56	; 0x38
    66c2:	79 ad       	ldd	r23, Y+57	; 0x39
    66c4:	8a ad       	ldd	r24, Y+58	; 0x3a
    66c6:	9b ad       	ldd	r25, Y+59	; 0x3b
    66c8:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    66cc:	dc 01       	movw	r26, r24
    66ce:	cb 01       	movw	r24, r22
    66d0:	9f ab       	std	Y+55, r25	; 0x37
    66d2:	8e ab       	std	Y+54, r24	; 0x36
    66d4:	8e a9       	ldd	r24, Y+54	; 0x36
    66d6:	9f a9       	ldd	r25, Y+55	; 0x37
    66d8:	9b ab       	std	Y+51, r25	; 0x33
    66da:	8a ab       	std	Y+50, r24	; 0x32
    66dc:	8a a9       	ldd	r24, Y+50	; 0x32
    66de:	9b a9       	ldd	r25, Y+51	; 0x33
    66e0:	01 97       	sbiw	r24, 0x01	; 1
    66e2:	f1 f7       	brne	.-4      	; 0x66e0 <lcd_init+0x52c>
    66e4:	9b ab       	std	Y+51, r25	; 0x33
    66e6:	8a ab       	std	Y+50, r24	; 0x32
    66e8:	18 c0       	rjmp	.+48     	; 0x671a <lcd_init+0x566>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    66ea:	fe 01       	movw	r30, r28
    66ec:	ef 5b       	subi	r30, 0xBF	; 191
    66ee:	ff 4f       	sbci	r31, 0xFF	; 255
    66f0:	60 81       	ld	r22, Z
    66f2:	71 81       	ldd	r23, Z+1	; 0x01
    66f4:	82 81       	ldd	r24, Z+2	; 0x02
    66f6:	93 81       	ldd	r25, Z+3	; 0x03
    66f8:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    66fc:	dc 01       	movw	r26, r24
    66fe:	cb 01       	movw	r24, r22
    6700:	fe 01       	movw	r30, r28
    6702:	e0 5c       	subi	r30, 0xC0	; 192
    6704:	ff 4f       	sbci	r31, 0xFF	; 255
    6706:	80 83       	st	Z, r24
    6708:	fe 01       	movw	r30, r28
    670a:	e0 5c       	subi	r30, 0xC0	; 192
    670c:	ff 4f       	sbci	r31, 0xFF	; 255
    670e:	80 81       	ld	r24, Z
    6710:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6712:	89 a9       	ldd	r24, Y+49	; 0x31
    6714:	8a 95       	dec	r24
    6716:	f1 f7       	brne	.-4      	; 0x6714 <lcd_init+0x560>
    6718:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(100);

	SET_E;
    671a:	ab e3       	ldi	r26, 0x3B	; 59
    671c:	b0 e0       	ldi	r27, 0x00	; 0
    671e:	eb e3       	ldi	r30, 0x3B	; 59
    6720:	f0 e0       	ldi	r31, 0x00	; 0
    6722:	80 81       	ld	r24, Z
    6724:	84 60       	ori	r24, 0x04	; 4
    6726:	8c 93       	st	X, r24
	lcd_sendHalf(0x03);	// tryb 8-bitowy
    6728:	83 e0       	ldi	r24, 0x03	; 3
    672a:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <lcd_sendHalf>
	CLR_E;
    672e:	ab e3       	ldi	r26, 0x3B	; 59
    6730:	b0 e0       	ldi	r27, 0x00	; 0
    6732:	eb e3       	ldi	r30, 0x3B	; 59
    6734:	f0 e0       	ldi	r31, 0x00	; 0
    6736:	80 81       	ld	r24, Z
    6738:	8b 7f       	andi	r24, 0xFB	; 251
    673a:	8c 93       	st	X, r24
    673c:	80 e0       	ldi	r24, 0x00	; 0
    673e:	90 e0       	ldi	r25, 0x00	; 0
    6740:	a8 ec       	ldi	r26, 0xC8	; 200
    6742:	b2 e4       	ldi	r27, 0x42	; 66
    6744:	8d a7       	std	Y+45, r24	; 0x2d
    6746:	9e a7       	std	Y+46, r25	; 0x2e
    6748:	af a7       	std	Y+47, r26	; 0x2f
    674a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    674c:	6d a5       	ldd	r22, Y+45	; 0x2d
    674e:	7e a5       	ldd	r23, Y+46	; 0x2e
    6750:	8f a5       	ldd	r24, Y+47	; 0x2f
    6752:	98 a9       	ldd	r25, Y+48	; 0x30
    6754:	2b ea       	ldi	r18, 0xAB	; 171
    6756:	3a ea       	ldi	r19, 0xAA	; 170
    6758:	4a ea       	ldi	r20, 0xAA	; 170
    675a:	50 e4       	ldi	r21, 0x40	; 64
    675c:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    6760:	dc 01       	movw	r26, r24
    6762:	cb 01       	movw	r24, r22
    6764:	89 a7       	std	Y+41, r24	; 0x29
    6766:	9a a7       	std	Y+42, r25	; 0x2a
    6768:	ab a7       	std	Y+43, r26	; 0x2b
    676a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    676c:	69 a5       	ldd	r22, Y+41	; 0x29
    676e:	7a a5       	ldd	r23, Y+42	; 0x2a
    6770:	8b a5       	ldd	r24, Y+43	; 0x2b
    6772:	9c a5       	ldd	r25, Y+44	; 0x2c
    6774:	20 e0       	ldi	r18, 0x00	; 0
    6776:	30 e0       	ldi	r19, 0x00	; 0
    6778:	40 e8       	ldi	r20, 0x80	; 128
    677a:	5f e3       	ldi	r21, 0x3F	; 63
    677c:	0e 94 29 46 	call	0x8c52	; 0x8c52 <__ltsf2>
    6780:	88 23       	and	r24, r24
    6782:	1c f4       	brge	.+6      	; 0x678a <lcd_init+0x5d6>
		__ticks = 1;
    6784:	81 e0       	ldi	r24, 0x01	; 1
    6786:	88 a7       	std	Y+40, r24	; 0x28
    6788:	91 c0       	rjmp	.+290    	; 0x68ac <lcd_init+0x6f8>
	else if (__tmp > 255)
    678a:	69 a5       	ldd	r22, Y+41	; 0x29
    678c:	7a a5       	ldd	r23, Y+42	; 0x2a
    678e:	8b a5       	ldd	r24, Y+43	; 0x2b
    6790:	9c a5       	ldd	r25, Y+44	; 0x2c
    6792:	20 e0       	ldi	r18, 0x00	; 0
    6794:	30 e0       	ldi	r19, 0x00	; 0
    6796:	4f e7       	ldi	r20, 0x7F	; 127
    6798:	53 e4       	ldi	r21, 0x43	; 67
    679a:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <__gtsf2>
    679e:	18 16       	cp	r1, r24
    67a0:	0c f0       	brlt	.+2      	; 0x67a4 <lcd_init+0x5f0>
    67a2:	7b c0       	rjmp	.+246    	; 0x689a <lcd_init+0x6e6>
	{
		_delay_ms(__us / 1000.0);
    67a4:	6d a5       	ldd	r22, Y+45	; 0x2d
    67a6:	7e a5       	ldd	r23, Y+46	; 0x2e
    67a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    67aa:	98 a9       	ldd	r25, Y+48	; 0x30
    67ac:	20 e0       	ldi	r18, 0x00	; 0
    67ae:	30 e0       	ldi	r19, 0x00	; 0
    67b0:	4a e7       	ldi	r20, 0x7A	; 122
    67b2:	54 e4       	ldi	r21, 0x44	; 68
    67b4:	0e 94 1d 45 	call	0x8a3a	; 0x8a3a <__divsf3>
    67b8:	dc 01       	movw	r26, r24
    67ba:	cb 01       	movw	r24, r22
    67bc:	8c a3       	std	Y+36, r24	; 0x24
    67be:	9d a3       	std	Y+37, r25	; 0x25
    67c0:	ae a3       	std	Y+38, r26	; 0x26
    67c2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    67c4:	6c a1       	ldd	r22, Y+36	; 0x24
    67c6:	7d a1       	ldd	r23, Y+37	; 0x25
    67c8:	8e a1       	ldd	r24, Y+38	; 0x26
    67ca:	9f a1       	ldd	r25, Y+39	; 0x27
    67cc:	20 e0       	ldi	r18, 0x00	; 0
    67ce:	30 e0       	ldi	r19, 0x00	; 0
    67d0:	4a e7       	ldi	r20, 0x7A	; 122
    67d2:	55 e4       	ldi	r21, 0x45	; 69
    67d4:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    67d8:	dc 01       	movw	r26, r24
    67da:	cb 01       	movw	r24, r22
    67dc:	88 a3       	std	Y+32, r24	; 0x20
    67de:	99 a3       	std	Y+33, r25	; 0x21
    67e0:	aa a3       	std	Y+34, r26	; 0x22
    67e2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    67e4:	68 a1       	ldd	r22, Y+32	; 0x20
    67e6:	79 a1       	ldd	r23, Y+33	; 0x21
    67e8:	8a a1       	ldd	r24, Y+34	; 0x22
    67ea:	9b a1       	ldd	r25, Y+35	; 0x23
    67ec:	20 e0       	ldi	r18, 0x00	; 0
    67ee:	30 e0       	ldi	r19, 0x00	; 0
    67f0:	40 e8       	ldi	r20, 0x80	; 128
    67f2:	5f e3       	ldi	r21, 0x3F	; 63
    67f4:	0e 94 29 46 	call	0x8c52	; 0x8c52 <__ltsf2>
    67f8:	88 23       	and	r24, r24
    67fa:	2c f4       	brge	.+10     	; 0x6806 <lcd_init+0x652>
		__ticks = 1;
    67fc:	81 e0       	ldi	r24, 0x01	; 1
    67fe:	90 e0       	ldi	r25, 0x00	; 0
    6800:	9f 8f       	std	Y+31, r25	; 0x1f
    6802:	8e 8f       	std	Y+30, r24	; 0x1e
    6804:	3f c0       	rjmp	.+126    	; 0x6884 <lcd_init+0x6d0>
	else if (__tmp > 65535)
    6806:	68 a1       	ldd	r22, Y+32	; 0x20
    6808:	79 a1       	ldd	r23, Y+33	; 0x21
    680a:	8a a1       	ldd	r24, Y+34	; 0x22
    680c:	9b a1       	ldd	r25, Y+35	; 0x23
    680e:	20 e0       	ldi	r18, 0x00	; 0
    6810:	3f ef       	ldi	r19, 0xFF	; 255
    6812:	4f e7       	ldi	r20, 0x7F	; 127
    6814:	57 e4       	ldi	r21, 0x47	; 71
    6816:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <__gtsf2>
    681a:	18 16       	cp	r1, r24
    681c:	4c f5       	brge	.+82     	; 0x6870 <lcd_init+0x6bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    681e:	6c a1       	ldd	r22, Y+36	; 0x24
    6820:	7d a1       	ldd	r23, Y+37	; 0x25
    6822:	8e a1       	ldd	r24, Y+38	; 0x26
    6824:	9f a1       	ldd	r25, Y+39	; 0x27
    6826:	20 e0       	ldi	r18, 0x00	; 0
    6828:	30 e0       	ldi	r19, 0x00	; 0
    682a:	40 e2       	ldi	r20, 0x20	; 32
    682c:	51 e4       	ldi	r21, 0x41	; 65
    682e:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    6832:	dc 01       	movw	r26, r24
    6834:	cb 01       	movw	r24, r22
    6836:	bc 01       	movw	r22, r24
    6838:	cd 01       	movw	r24, r26
    683a:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    683e:	dc 01       	movw	r26, r24
    6840:	cb 01       	movw	r24, r22
    6842:	9f 8f       	std	Y+31, r25	; 0x1f
    6844:	8e 8f       	std	Y+30, r24	; 0x1e
    6846:	0f c0       	rjmp	.+30     	; 0x6866 <lcd_init+0x6b2>
    6848:	80 e9       	ldi	r24, 0x90	; 144
    684a:	91 e0       	ldi	r25, 0x01	; 1
    684c:	9d 8f       	std	Y+29, r25	; 0x1d
    684e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6850:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6852:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6854:	01 97       	sbiw	r24, 0x01	; 1
    6856:	f1 f7       	brne	.-4      	; 0x6854 <lcd_init+0x6a0>
    6858:	9d 8f       	std	Y+29, r25	; 0x1d
    685a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    685c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    685e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6860:	01 97       	sbiw	r24, 0x01	; 1
    6862:	9f 8f       	std	Y+31, r25	; 0x1f
    6864:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6866:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6868:	9f 8d       	ldd	r25, Y+31	; 0x1f
    686a:	00 97       	sbiw	r24, 0x00	; 0
    686c:	69 f7       	brne	.-38     	; 0x6848 <lcd_init+0x694>
    686e:	24 c0       	rjmp	.+72     	; 0x68b8 <lcd_init+0x704>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6870:	68 a1       	ldd	r22, Y+32	; 0x20
    6872:	79 a1       	ldd	r23, Y+33	; 0x21
    6874:	8a a1       	ldd	r24, Y+34	; 0x22
    6876:	9b a1       	ldd	r25, Y+35	; 0x23
    6878:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    687c:	dc 01       	movw	r26, r24
    687e:	cb 01       	movw	r24, r22
    6880:	9f 8f       	std	Y+31, r25	; 0x1f
    6882:	8e 8f       	std	Y+30, r24	; 0x1e
    6884:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6886:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6888:	9b 8f       	std	Y+27, r25	; 0x1b
    688a:	8a 8f       	std	Y+26, r24	; 0x1a
    688c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    688e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6890:	01 97       	sbiw	r24, 0x01	; 1
    6892:	f1 f7       	brne	.-4      	; 0x6890 <lcd_init+0x6dc>
    6894:	9b 8f       	std	Y+27, r25	; 0x1b
    6896:	8a 8f       	std	Y+26, r24	; 0x1a
    6898:	0f c0       	rjmp	.+30     	; 0x68b8 <lcd_init+0x704>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    689a:	69 a5       	ldd	r22, Y+41	; 0x29
    689c:	7a a5       	ldd	r23, Y+42	; 0x2a
    689e:	8b a5       	ldd	r24, Y+43	; 0x2b
    68a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    68a2:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    68a6:	dc 01       	movw	r26, r24
    68a8:	cb 01       	movw	r24, r22
    68aa:	88 a7       	std	Y+40, r24	; 0x28
    68ac:	88 a5       	ldd	r24, Y+40	; 0x28
    68ae:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    68b0:	89 8d       	ldd	r24, Y+25	; 0x19
    68b2:	8a 95       	dec	r24
    68b4:	f1 f7       	brne	.-4      	; 0x68b2 <lcd_init+0x6fe>
    68b6:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(100);

	SET_E;
    68b8:	ab e3       	ldi	r26, 0x3B	; 59
    68ba:	b0 e0       	ldi	r27, 0x00	; 0
    68bc:	eb e3       	ldi	r30, 0x3B	; 59
    68be:	f0 e0       	ldi	r31, 0x00	; 0
    68c0:	80 81       	ld	r24, Z
    68c2:	84 60       	ori	r24, 0x04	; 4
    68c4:	8c 93       	st	X, r24
	lcd_sendHalf(0x02);// tryb 4-bitowy
    68c6:	82 e0       	ldi	r24, 0x02	; 2
    68c8:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <lcd_sendHalf>
	CLR_E;
    68cc:	ab e3       	ldi	r26, 0x3B	; 59
    68ce:	b0 e0       	ldi	r27, 0x00	; 0
    68d0:	eb e3       	ldi	r30, 0x3B	; 59
    68d2:	f0 e0       	ldi	r31, 0x00	; 0
    68d4:	80 81       	ld	r24, Z
    68d6:	8b 7f       	andi	r24, 0xFB	; 251
    68d8:	8c 93       	st	X, r24
    68da:	80 e0       	ldi	r24, 0x00	; 0
    68dc:	90 e0       	ldi	r25, 0x00	; 0
    68de:	a8 ec       	ldi	r26, 0xC8	; 200
    68e0:	b2 e4       	ldi	r27, 0x42	; 66
    68e2:	8d 8b       	std	Y+21, r24	; 0x15
    68e4:	9e 8b       	std	Y+22, r25	; 0x16
    68e6:	af 8b       	std	Y+23, r26	; 0x17
    68e8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    68ea:	6d 89       	ldd	r22, Y+21	; 0x15
    68ec:	7e 89       	ldd	r23, Y+22	; 0x16
    68ee:	8f 89       	ldd	r24, Y+23	; 0x17
    68f0:	98 8d       	ldd	r25, Y+24	; 0x18
    68f2:	2b ea       	ldi	r18, 0xAB	; 171
    68f4:	3a ea       	ldi	r19, 0xAA	; 170
    68f6:	4a ea       	ldi	r20, 0xAA	; 170
    68f8:	50 e4       	ldi	r21, 0x40	; 64
    68fa:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    68fe:	dc 01       	movw	r26, r24
    6900:	cb 01       	movw	r24, r22
    6902:	89 8b       	std	Y+17, r24	; 0x11
    6904:	9a 8b       	std	Y+18, r25	; 0x12
    6906:	ab 8b       	std	Y+19, r26	; 0x13
    6908:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    690a:	69 89       	ldd	r22, Y+17	; 0x11
    690c:	7a 89       	ldd	r23, Y+18	; 0x12
    690e:	8b 89       	ldd	r24, Y+19	; 0x13
    6910:	9c 89       	ldd	r25, Y+20	; 0x14
    6912:	20 e0       	ldi	r18, 0x00	; 0
    6914:	30 e0       	ldi	r19, 0x00	; 0
    6916:	40 e8       	ldi	r20, 0x80	; 128
    6918:	5f e3       	ldi	r21, 0x3F	; 63
    691a:	0e 94 29 46 	call	0x8c52	; 0x8c52 <__ltsf2>
    691e:	88 23       	and	r24, r24
    6920:	1c f4       	brge	.+6      	; 0x6928 <lcd_init+0x774>
		__ticks = 1;
    6922:	81 e0       	ldi	r24, 0x01	; 1
    6924:	88 8b       	std	Y+16, r24	; 0x10
    6926:	91 c0       	rjmp	.+290    	; 0x6a4a <lcd_init+0x896>
	else if (__tmp > 255)
    6928:	69 89       	ldd	r22, Y+17	; 0x11
    692a:	7a 89       	ldd	r23, Y+18	; 0x12
    692c:	8b 89       	ldd	r24, Y+19	; 0x13
    692e:	9c 89       	ldd	r25, Y+20	; 0x14
    6930:	20 e0       	ldi	r18, 0x00	; 0
    6932:	30 e0       	ldi	r19, 0x00	; 0
    6934:	4f e7       	ldi	r20, 0x7F	; 127
    6936:	53 e4       	ldi	r21, 0x43	; 67
    6938:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <__gtsf2>
    693c:	18 16       	cp	r1, r24
    693e:	0c f0       	brlt	.+2      	; 0x6942 <lcd_init+0x78e>
    6940:	7b c0       	rjmp	.+246    	; 0x6a38 <lcd_init+0x884>
	{
		_delay_ms(__us / 1000.0);
    6942:	6d 89       	ldd	r22, Y+21	; 0x15
    6944:	7e 89       	ldd	r23, Y+22	; 0x16
    6946:	8f 89       	ldd	r24, Y+23	; 0x17
    6948:	98 8d       	ldd	r25, Y+24	; 0x18
    694a:	20 e0       	ldi	r18, 0x00	; 0
    694c:	30 e0       	ldi	r19, 0x00	; 0
    694e:	4a e7       	ldi	r20, 0x7A	; 122
    6950:	54 e4       	ldi	r21, 0x44	; 68
    6952:	0e 94 1d 45 	call	0x8a3a	; 0x8a3a <__divsf3>
    6956:	dc 01       	movw	r26, r24
    6958:	cb 01       	movw	r24, r22
    695a:	8c 87       	std	Y+12, r24	; 0x0c
    695c:	9d 87       	std	Y+13, r25	; 0x0d
    695e:	ae 87       	std	Y+14, r26	; 0x0e
    6960:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6962:	6c 85       	ldd	r22, Y+12	; 0x0c
    6964:	7d 85       	ldd	r23, Y+13	; 0x0d
    6966:	8e 85       	ldd	r24, Y+14	; 0x0e
    6968:	9f 85       	ldd	r25, Y+15	; 0x0f
    696a:	20 e0       	ldi	r18, 0x00	; 0
    696c:	30 e0       	ldi	r19, 0x00	; 0
    696e:	4a e7       	ldi	r20, 0x7A	; 122
    6970:	55 e4       	ldi	r21, 0x45	; 69
    6972:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    6976:	dc 01       	movw	r26, r24
    6978:	cb 01       	movw	r24, r22
    697a:	88 87       	std	Y+8, r24	; 0x08
    697c:	99 87       	std	Y+9, r25	; 0x09
    697e:	aa 87       	std	Y+10, r26	; 0x0a
    6980:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    6982:	68 85       	ldd	r22, Y+8	; 0x08
    6984:	79 85       	ldd	r23, Y+9	; 0x09
    6986:	8a 85       	ldd	r24, Y+10	; 0x0a
    6988:	9b 85       	ldd	r25, Y+11	; 0x0b
    698a:	20 e0       	ldi	r18, 0x00	; 0
    698c:	30 e0       	ldi	r19, 0x00	; 0
    698e:	40 e8       	ldi	r20, 0x80	; 128
    6990:	5f e3       	ldi	r21, 0x3F	; 63
    6992:	0e 94 29 46 	call	0x8c52	; 0x8c52 <__ltsf2>
    6996:	88 23       	and	r24, r24
    6998:	2c f4       	brge	.+10     	; 0x69a4 <lcd_init+0x7f0>
		__ticks = 1;
    699a:	81 e0       	ldi	r24, 0x01	; 1
    699c:	90 e0       	ldi	r25, 0x00	; 0
    699e:	9f 83       	std	Y+7, r25	; 0x07
    69a0:	8e 83       	std	Y+6, r24	; 0x06
    69a2:	3f c0       	rjmp	.+126    	; 0x6a22 <lcd_init+0x86e>
	else if (__tmp > 65535)
    69a4:	68 85       	ldd	r22, Y+8	; 0x08
    69a6:	79 85       	ldd	r23, Y+9	; 0x09
    69a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    69aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    69ac:	20 e0       	ldi	r18, 0x00	; 0
    69ae:	3f ef       	ldi	r19, 0xFF	; 255
    69b0:	4f e7       	ldi	r20, 0x7F	; 127
    69b2:	57 e4       	ldi	r21, 0x47	; 71
    69b4:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <__gtsf2>
    69b8:	18 16       	cp	r1, r24
    69ba:	4c f5       	brge	.+82     	; 0x6a0e <lcd_init+0x85a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    69bc:	6c 85       	ldd	r22, Y+12	; 0x0c
    69be:	7d 85       	ldd	r23, Y+13	; 0x0d
    69c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    69c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    69c4:	20 e0       	ldi	r18, 0x00	; 0
    69c6:	30 e0       	ldi	r19, 0x00	; 0
    69c8:	40 e2       	ldi	r20, 0x20	; 32
    69ca:	51 e4       	ldi	r21, 0x41	; 65
    69cc:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    69d0:	dc 01       	movw	r26, r24
    69d2:	cb 01       	movw	r24, r22
    69d4:	bc 01       	movw	r22, r24
    69d6:	cd 01       	movw	r24, r26
    69d8:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    69dc:	dc 01       	movw	r26, r24
    69de:	cb 01       	movw	r24, r22
    69e0:	9f 83       	std	Y+7, r25	; 0x07
    69e2:	8e 83       	std	Y+6, r24	; 0x06
    69e4:	0f c0       	rjmp	.+30     	; 0x6a04 <lcd_init+0x850>
    69e6:	80 e9       	ldi	r24, 0x90	; 144
    69e8:	91 e0       	ldi	r25, 0x01	; 1
    69ea:	9d 83       	std	Y+5, r25	; 0x05
    69ec:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    69ee:	8c 81       	ldd	r24, Y+4	; 0x04
    69f0:	9d 81       	ldd	r25, Y+5	; 0x05
    69f2:	01 97       	sbiw	r24, 0x01	; 1
    69f4:	f1 f7       	brne	.-4      	; 0x69f2 <lcd_init+0x83e>
    69f6:	9d 83       	std	Y+5, r25	; 0x05
    69f8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    69fa:	8e 81       	ldd	r24, Y+6	; 0x06
    69fc:	9f 81       	ldd	r25, Y+7	; 0x07
    69fe:	01 97       	sbiw	r24, 0x01	; 1
    6a00:	9f 83       	std	Y+7, r25	; 0x07
    6a02:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a04:	8e 81       	ldd	r24, Y+6	; 0x06
    6a06:	9f 81       	ldd	r25, Y+7	; 0x07
    6a08:	00 97       	sbiw	r24, 0x00	; 0
    6a0a:	69 f7       	brne	.-38     	; 0x69e6 <lcd_init+0x832>
    6a0c:	24 c0       	rjmp	.+72     	; 0x6a56 <lcd_init+0x8a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6a0e:	68 85       	ldd	r22, Y+8	; 0x08
    6a10:	79 85       	ldd	r23, Y+9	; 0x09
    6a12:	8a 85       	ldd	r24, Y+10	; 0x0a
    6a14:	9b 85       	ldd	r25, Y+11	; 0x0b
    6a16:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    6a1a:	dc 01       	movw	r26, r24
    6a1c:	cb 01       	movw	r24, r22
    6a1e:	9f 83       	std	Y+7, r25	; 0x07
    6a20:	8e 83       	std	Y+6, r24	; 0x06
    6a22:	8e 81       	ldd	r24, Y+6	; 0x06
    6a24:	9f 81       	ldd	r25, Y+7	; 0x07
    6a26:	9b 83       	std	Y+3, r25	; 0x03
    6a28:	8a 83       	std	Y+2, r24	; 0x02
    6a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    6a2c:	9b 81       	ldd	r25, Y+3	; 0x03
    6a2e:	01 97       	sbiw	r24, 0x01	; 1
    6a30:	f1 f7       	brne	.-4      	; 0x6a2e <lcd_init+0x87a>
    6a32:	9b 83       	std	Y+3, r25	; 0x03
    6a34:	8a 83       	std	Y+2, r24	; 0x02
    6a36:	0f c0       	rjmp	.+30     	; 0x6a56 <lcd_init+0x8a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    6a38:	69 89       	ldd	r22, Y+17	; 0x11
    6a3a:	7a 89       	ldd	r23, Y+18	; 0x12
    6a3c:	8b 89       	ldd	r24, Y+19	; 0x13
    6a3e:	9c 89       	ldd	r25, Y+20	; 0x14
    6a40:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    6a44:	dc 01       	movw	r26, r24
    6a46:	cb 01       	movw	r24, r22
    6a48:	88 8b       	std	Y+16, r24	; 0x10
    6a4a:	88 89       	ldd	r24, Y+16	; 0x10
    6a4c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6a4e:	89 81       	ldd	r24, Y+1	; 0x01
    6a50:	8a 95       	dec	r24
    6a52:	f1 f7       	brne	.-4      	; 0x6a50 <lcd_init+0x89c>
    6a54:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);

	// juø moøna uøywaÊ Busy Flag
	// tryb 4-bitowy, 2 wiersze, znak 5x7
	lcd_write_cmd( LCDC_FUNC|LCDC_FUNC4B|LCDC_FUNC2L|LCDC_FUNC5x7 );
    6a56:	88 e2       	ldi	r24, 0x28	; 40
    6a58:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <lcd_write_cmd>
	// wy≥πczenie kursora
	lcd_write_cmd( LCDC_ONOFF|LCDC_CURSOROFF );
    6a5c:	88 e0       	ldi	r24, 0x08	; 8
    6a5e:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <lcd_write_cmd>
	// w≥πczenie wyúwietlacza
	lcd_write_cmd( LCDC_ONOFF|LCDC_DISPLAYON );
    6a62:	8c e0       	ldi	r24, 0x0C	; 12
    6a64:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <lcd_write_cmd>
	// przesuwanie kursora w prawo bez przesuwania zawartoúci ekranu
	lcd_write_cmd( LCDC_ENTRY|LCDC_ENTRYR );
    6a68:	86 e0       	ldi	r24, 0x06	; 6
    6a6a:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <lcd_write_cmd>

	// kasowanie ekranu
	lcd_cls();
    6a6e:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <lcd_cls>
}
    6a72:	cc 59       	subi	r28, 0x9C	; 156
    6a74:	df 4f       	sbci	r29, 0xFF	; 255
    6a76:	0f b6       	in	r0, 0x3f	; 63
    6a78:	f8 94       	cli
    6a7a:	de bf       	out	0x3e, r29	; 62
    6a7c:	0f be       	out	0x3f, r0	; 63
    6a7e:	cd bf       	out	0x3d, r28	; 61
    6a80:	cf 91       	pop	r28
    6a82:	df 91       	pop	r29
    6a84:	1f 91       	pop	r17
    6a86:	0f 91       	pop	r16
    6a88:	08 95       	ret

00006a8a <main>:
void reset_BT();
void wprowadz_numer();

//---------------------------------------------------------------------------------------------------------------------------------

int main() {
    6a8a:	df 93       	push	r29
    6a8c:	cf 93       	push	r28
    6a8e:	cd b7       	in	r28, 0x3d	; 61
    6a90:	de b7       	in	r29, 0x3e	; 62
    6a92:	ef 97       	sbiw	r28, 0x3f	; 63
    6a94:	0f b6       	in	r0, 0x3f	; 63
    6a96:	f8 94       	cli
    6a98:	de bf       	out	0x3e, r29	; 62
    6a9a:	0f be       	out	0x3f, r0	; 63
    6a9c:	cd bf       	out	0x3d, r28	; 61
	//5.1. ustawienie uC
	// LCD + pin reset bluetooth
	DDRA = 0xFF; // 11111111
    6a9e:	ea e3       	ldi	r30, 0x3A	; 58
    6aa0:	f0 e0       	ldi	r31, 0x00	; 0
    6aa2:	8f ef       	ldi	r24, 0xFF	; 255
    6aa4:	80 83       	st	Z, r24
	PORTA = 0x80; // 10000000
    6aa6:	eb e3       	ldi	r30, 0x3B	; 59
    6aa8:	f0 e0       	ldi	r31, 0x00	; 0
    6aaa:	80 e8       	ldi	r24, 0x80	; 128
    6aac:	80 83       	st	Z, r24
	// SPI
	DDRB = 0xE0; // 11100000
    6aae:	e7 e3       	ldi	r30, 0x37	; 55
    6ab0:	f0 e0       	ldi	r31, 0x00	; 0
    6ab2:	80 ee       	ldi	r24, 0xE0	; 224
    6ab4:	80 83       	st	Z, r24
	PORTB = 0xF0; // 11110000
    6ab6:	e8 e3       	ldi	r30, 0x38	; 56
    6ab8:	f0 e0       	ldi	r31, 0x00	; 0
    6aba:	80 ef       	ldi	r24, 0xF0	; 240
    6abc:	80 83       	st	Z, r24
	// przyciski
	DDRC = 0xFC; // 11111100
    6abe:	e4 e3       	ldi	r30, 0x34	; 52
    6ac0:	f0 e0       	ldi	r31, 0x00	; 0
    6ac2:	8c ef       	ldi	r24, 0xFC	; 252
    6ac4:	80 83       	st	Z, r24
	PORTC = 0xFF; // 11111111
    6ac6:	e5 e3       	ldi	r30, 0x35	; 53
    6ac8:	f0 e0       	ldi	r31, 0x00	; 0
    6aca:	8f ef       	ldi	r24, 0xFF	; 255
    6acc:	80 83       	st	Z, r24
	// g≥osnik/s≥uchawki
	DDRD = 0x30; // 00110000
    6ace:	e1 e3       	ldi	r30, 0x31	; 49
    6ad0:	f0 e0       	ldi	r31, 0x00	; 0
    6ad2:	80 e3       	ldi	r24, 0x30	; 48
    6ad4:	80 83       	st	Z, r24

//	PLAYER_init();	  // inicjalizacja odtwarzacza plikÛw wave
	InitUSART(19200); // inicjalizacja USART
    6ad6:	60 e0       	ldi	r22, 0x00	; 0
    6ad8:	7b e4       	ldi	r23, 0x4B	; 75
    6ada:	80 e0       	ldi	r24, 0x00	; 0
    6adc:	90 e0       	ldi	r25, 0x00	; 0
    6ade:	0e 94 46 2a 	call	0x548c	; 0x548c <InitUSART>
	lcd_init(); // inicjalizacja LCD2x16
    6ae2:	0e 94 da 30 	call	0x61b4	; 0x61b4 <lcd_init>

	//Timer2 (przerwanie generowane co 1sek) BT
	TCCR2 |=(1<<CS20)|(1<<CS21)|(1<<CS22) |(1<<WGM21);	//preskaler=1024, tryb CTC
    6ae6:	a5 e4       	ldi	r26, 0x45	; 69
    6ae8:	b0 e0       	ldi	r27, 0x00	; 0
    6aea:	e5 e4       	ldi	r30, 0x45	; 69
    6aec:	f0 e0       	ldi	r31, 0x00	; 0
    6aee:	80 81       	ld	r24, Z
    6af0:	8f 60       	ori	r24, 0x0F	; 15
    6af2:	8c 93       	st	X, r24
	TIMSK |= (1<<TOIE2); //zezwolenie na przerwanie Overflow
    6af4:	a9 e5       	ldi	r26, 0x59	; 89
    6af6:	b0 e0       	ldi	r27, 0x00	; 0
    6af8:	e9 e5       	ldi	r30, 0x59	; 89
    6afa:	f0 e0       	ldi	r31, 0x00	; 0
    6afc:	80 81       	ld	r24, Z
    6afe:	80 64       	ori	r24, 0x40	; 64
    6b00:	8c 93       	st	X, r24
	TCNT2 =131;
    6b02:	e4 e4       	ldi	r30, 0x44	; 68
    6b04:	f0 e0       	ldi	r31, 0x00	; 0
    6b06:	83 e8       	ldi	r24, 0x83	; 131
    6b08:	80 83       	st	Z, r24

	sei();	// zezwolenie na przerwania globalne
    6b0a:	78 94       	sei

	//5.2. start
	lcd_cls(); //wyczyszczenie wyswietlacza LCD
    6b0c:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <lcd_cls>
	start(); //komunikat powitalny na LCD
    6b10:	0e 94 1f 2c 	call	0x583e	; 0x583e <start>
	komunikat_glosowy(10); //g≥osowy komunikat powitalny
    6b14:	8a e0       	ldi	r24, 0x0A	; 10
    6b16:	0e 94 5c 00 	call	0xb8	; 0xb8 <komunikat_glosowy>
	lcd_cls();
    6b1a:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <lcd_cls>
	lcd_locate(0,0);
    6b1e:	80 e0       	ldi	r24, 0x00	; 0
    6b20:	60 e0       	ldi	r22, 0x00	; 0
    6b22:	0e 94 a8 30 	call	0x6150	; 0x6150 <lcd_locate>
	lcd_str("NIEWIDOMY");
    6b26:	84 ee       	ldi	r24, 0xE4	; 228
    6b28:	91 e0       	ldi	r25, 0x01	; 1
    6b2a:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <lcd_str>

	//5.3. wprowadzenie numeru i kierunku linii
	komunikat_glosowy(11);
    6b2e:	8b e0       	ldi	r24, 0x0B	; 11
    6b30:	0e 94 5c 00 	call	0xb8	; 0xb8 <komunikat_glosowy>
	wprowadz_numer();
    6b34:	0e 94 0d 39 	call	0x721a	; 0x721a <wprowadz_numer>

	char NIEWIDOMY[5]={0};
    6b38:	85 e0       	ldi	r24, 0x05	; 5
    6b3a:	fe 01       	movw	r30, r28
    6b3c:	f7 96       	adiw	r30, 0x37	; 55
    6b3e:	df 01       	movw	r26, r30
    6b40:	98 2f       	mov	r25, r24
    6b42:	1d 92       	st	X+, r1
    6b44:	9a 95       	dec	r25
    6b46:	e9 f7       	brne	.-6      	; 0x6b42 <main+0xb8>
	for (i=0; i<4; i++){
    6b48:	10 92 24 02 	sts	0x0224, r1
    6b4c:	17 c0       	rjmp	.+46     	; 0x6b7c <main+0xf2>
		NIEWIDOMY[i] = niewidomy_char[i];
    6b4e:	80 91 24 02 	lds	r24, 0x0224
    6b52:	28 2f       	mov	r18, r24
    6b54:	30 e0       	ldi	r19, 0x00	; 0
    6b56:	80 91 24 02 	lds	r24, 0x0224
    6b5a:	88 2f       	mov	r24, r24
    6b5c:	90 e0       	ldi	r25, 0x00	; 0
    6b5e:	fc 01       	movw	r30, r24
    6b60:	e8 5d       	subi	r30, 0xD8	; 216
    6b62:	fd 4f       	sbci	r31, 0xFD	; 253
    6b64:	40 81       	ld	r20, Z
    6b66:	ce 01       	movw	r24, r28
    6b68:	c7 96       	adiw	r24, 0x37	; 55
    6b6a:	fc 01       	movw	r30, r24
    6b6c:	e2 0f       	add	r30, r18
    6b6e:	f3 1f       	adc	r31, r19
    6b70:	40 83       	st	Z, r20
	//5.3. wprowadzenie numeru i kierunku linii
	komunikat_glosowy(11);
	wprowadz_numer();

	char NIEWIDOMY[5]={0};
	for (i=0; i<4; i++){
    6b72:	80 91 24 02 	lds	r24, 0x0224
    6b76:	8f 5f       	subi	r24, 0xFF	; 255
    6b78:	80 93 24 02 	sts	0x0224, r24
    6b7c:	80 91 24 02 	lds	r24, 0x0224
    6b80:	84 30       	cpi	r24, 0x04	; 4
    6b82:	28 f3       	brcs	.-54     	; 0x6b4e <main+0xc4>
		NIEWIDOMY[i] = niewidomy_char[i];
	}
	lcd_locate(0,10);
    6b84:	80 e0       	ldi	r24, 0x00	; 0
    6b86:	6a e0       	ldi	r22, 0x0A	; 10
    6b88:	0e 94 a8 30 	call	0x6150	; 0x6150 <lcd_locate>
	lcd_str(niewidomy_char); //wyswietlenie wybranego numeru
    6b8c:	88 e2       	ldi	r24, 0x28	; 40
    6b8e:	92 e0       	ldi	r25, 0x02	; 2
    6b90:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <lcd_str>
	for (i = 13; i < 16; i++) { //obszarowe czyszczenie ekranu lcd
    6b94:	8d e0       	ldi	r24, 0x0D	; 13
    6b96:	80 93 24 02 	sts	0x0224, r24
    6b9a:	0f c0       	rjmp	.+30     	; 0x6bba <main+0x130>
		lcd_locate(0, i);
    6b9c:	90 91 24 02 	lds	r25, 0x0224
    6ba0:	80 e0       	ldi	r24, 0x00	; 0
    6ba2:	69 2f       	mov	r22, r25
    6ba4:	0e 94 a8 30 	call	0x6150	; 0x6150 <lcd_locate>
		lcd_str(spacja);
    6ba8:	83 ee       	ldi	r24, 0xE3	; 227
    6baa:	91 e0       	ldi	r25, 0x01	; 1
    6bac:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <lcd_str>
	for (i=0; i<4; i++){
		NIEWIDOMY[i] = niewidomy_char[i];
	}
	lcd_locate(0,10);
	lcd_str(niewidomy_char); //wyswietlenie wybranego numeru
	for (i = 13; i < 16; i++) { //obszarowe czyszczenie ekranu lcd
    6bb0:	80 91 24 02 	lds	r24, 0x0224
    6bb4:	8f 5f       	subi	r24, 0xFF	; 255
    6bb6:	80 93 24 02 	sts	0x0224, r24
    6bba:	80 91 24 02 	lds	r24, 0x0224
    6bbe:	80 31       	cpi	r24, 0x10	; 16
    6bc0:	68 f3       	brcs	.-38     	; 0x6b9c <main+0x112>
	}

	//5.4. pÍtla g≥Ûwna programu: sprawdzenie statusu po≥πczenia i ewentualny odbiÛr danych wysy≥anych z przez urzπdzenie zainstalowane w autobusie
	while (1) {
		//5.4.1. wyczyszczenie wyswietlacza
		for (i = 0; i < 16; i++) {
    6bc2:	10 92 24 02 	sts	0x0224, r1
    6bc6:	1d c0       	rjmp	.+58     	; 0x6c02 <main+0x178>
			lcd_locate(1,i); lcd_str(spacja); //dolny wiersz
    6bc8:	90 91 24 02 	lds	r25, 0x0224
    6bcc:	81 e0       	ldi	r24, 0x01	; 1
    6bce:	69 2f       	mov	r22, r25
    6bd0:	0e 94 a8 30 	call	0x6150	; 0x6150 <lcd_locate>
    6bd4:	83 ee       	ldi	r24, 0xE3	; 227
    6bd6:	91 e0       	ldi	r25, 0x01	; 1
    6bd8:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <lcd_str>
			if (i >= 14)
    6bdc:	80 91 24 02 	lds	r24, 0x0224
    6be0:	8e 30       	cpi	r24, 0x0E	; 14
    6be2:	30 f0       	brcs	.+12     	; 0x6bf0 <main+0x166>
				lcd_locate(0,i); lcd_str(spacja); //gÛrny wiersz
    6be4:	90 91 24 02 	lds	r25, 0x0224
    6be8:	80 e0       	ldi	r24, 0x00	; 0
    6bea:	69 2f       	mov	r22, r25
    6bec:	0e 94 a8 30 	call	0x6150	; 0x6150 <lcd_locate>
    6bf0:	83 ee       	ldi	r24, 0xE3	; 227
    6bf2:	91 e0       	ldi	r25, 0x01	; 1
    6bf4:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <lcd_str>
	}

	//5.4. pÍtla g≥Ûwna programu: sprawdzenie statusu po≥πczenia i ewentualny odbiÛr danych wysy≥anych z przez urzπdzenie zainstalowane w autobusie
	while (1) {
		//5.4.1. wyczyszczenie wyswietlacza
		for (i = 0; i < 16; i++) {
    6bf8:	80 91 24 02 	lds	r24, 0x0224
    6bfc:	8f 5f       	subi	r24, 0xFF	; 255
    6bfe:	80 93 24 02 	sts	0x0224, r24
    6c02:	80 91 24 02 	lds	r24, 0x0224
    6c06:	80 31       	cpi	r24, 0x10	; 16
    6c08:	f8 f2       	brcs	.-66     	; 0x6bc8 <main+0x13e>
				lcd_locate(0,i); lcd_str(spacja); //gÛrny wiersz
		}

		//5.4.3. odbiÛr informacji o statusie po≥πczenia (po≥πczone/roz≥πczone)
		//odbiÛr danych przez USART i zapis do bufora
		int bufsize = 1;
    6c0a:	81 e0       	ldi	r24, 0x01	; 1
    6c0c:	90 e0       	ldi	r25, 0x00	; 0
    6c0e:	9e ab       	std	Y+54, r25	; 0x36
    6c10:	8d ab       	std	Y+53, r24	; 0x35
		char *bufor = calloc(bufsize, sizeof(char)); //alokacja pamiÍci
    6c12:	8d a9       	ldd	r24, Y+53	; 0x35
    6c14:	9e a9       	ldd	r25, Y+54	; 0x36
    6c16:	61 e0       	ldi	r22, 0x01	; 1
    6c18:	70 e0       	ldi	r23, 0x00	; 0
    6c1a:	0e 94 d7 48 	call	0x91ae	; 0x91ae <calloc>
    6c1e:	9d af       	std	Y+61, r25	; 0x3d
    6c20:	8c af       	std	Y+60, r24	; 0x3c
		bufsize = BT_receive(&bufor); //zapisanie danych do bufora
    6c22:	ce 01       	movw	r24, r28
    6c24:	cc 96       	adiw	r24, 0x3c	; 60
    6c26:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <BT_receive>
    6c2a:	9e ab       	std	Y+54, r25	; 0x36
    6c2c:	8d ab       	std	Y+53, r24	; 0x35
//					*---------FLAGA---------*
//					|	0	|	1	|	2	|
//					|NEUTRAL|DISCONN|CONNECT|
//		 			*-----------------------*
		char *wynik = strstr(bufor, disconnected); //CZY ROZ£•CZONO?
    6c2e:	8c ad       	ldd	r24, Y+60	; 0x3c
    6c30:	9d ad       	ldd	r25, Y+61	; 0x3d
    6c32:	20 eb       	ldi	r18, 0xB0	; 176
    6c34:	31 e0       	ldi	r19, 0x01	; 1
    6c36:	b9 01       	movw	r22, r18
    6c38:	0e 94 d6 4a 	call	0x95ac	; 0x95ac <strstr>
    6c3c:	9c ab       	std	Y+52, r25	; 0x34
    6c3e:	8b ab       	std	Y+51, r24	; 0x33
		if (wynik != NULL) { //TAK: ROZ£•CZONO
    6c40:	8b a9       	ldd	r24, Y+51	; 0x33
    6c42:	9c a9       	ldd	r25, Y+52	; 0x34
    6c44:	00 97       	sbiw	r24, 0x00	; 0
    6c46:	61 f0       	breq	.+24     	; 0x6c60 <main+0x1d6>
			lcd_locate(1,0);
    6c48:	81 e0       	ldi	r24, 0x01	; 1
    6c4a:	60 e0       	ldi	r22, 0x00	; 0
    6c4c:	0e 94 a8 30 	call	0x6150	; 0x6150 <lcd_locate>
			lcd_str(LCDdisconnect);
    6c50:	83 ec       	ldi	r24, 0xC3	; 195
    6c52:	91 e0       	ldi	r25, 0x01	; 1
    6c54:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <lcd_str>
			flaga = 1; //stan po≥πczenia (w≥snie roz≥πczono)
    6c58:	81 e0       	ldi	r24, 0x01	; 1
    6c5a:	80 93 38 02 	sts	0x0238, r24
    6c5e:	07 c1       	rjmp	.+526    	; 0x6e6e <main+0x3e4>
		} else { //JEØELI NIE
			char *wynik = strstr(bufor, connected); //CZY PO£•CZONO?
    6c60:	8c ad       	ldd	r24, Y+60	; 0x3c
    6c62:	9d ad       	ldd	r25, Y+61	; 0x3d
    6c64:	2b eb       	ldi	r18, 0xBB	; 187
    6c66:	31 e0       	ldi	r19, 0x01	; 1
    6c68:	b9 01       	movw	r22, r18
    6c6a:	0e 94 d6 4a 	call	0x95ac	; 0x95ac <strstr>
    6c6e:	9a ab       	std	Y+50, r25	; 0x32
    6c70:	89 ab       	std	Y+49, r24	; 0x31
			if (wynik != NULL) { //TAK: PO£•CZONO
    6c72:	89 a9       	ldd	r24, Y+49	; 0x31
    6c74:	9a a9       	ldd	r25, Y+50	; 0x32
    6c76:	00 97       	sbiw	r24, 0x00	; 0
    6c78:	09 f4       	brne	.+2      	; 0x6c7c <main+0x1f2>
    6c7a:	f9 c0       	rjmp	.+498    	; 0x6e6e <main+0x3e4>
				lcd_locate(1, 0); lcd_str(LCDconnect);
    6c7c:	81 e0       	ldi	r24, 0x01	; 1
    6c7e:	60 e0       	ldi	r22, 0x00	; 0
    6c80:	0e 94 a8 30 	call	0x6150	; 0x6150 <lcd_locate>
    6c84:	83 ed       	ldi	r24, 0xD3	; 211
    6c86:	91 e0       	ldi	r25, 0x01	; 1
    6c88:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <lcd_str>
				flaga = 2; //stan po≥πczenia (w≥anie po≥πczono)
    6c8c:	82 e0       	ldi	r24, 0x02	; 2
    6c8e:	80 93 38 02 	sts	0x0238, r24
    6c92:	80 e0       	ldi	r24, 0x00	; 0
    6c94:	90 e0       	ldi	r25, 0x00	; 0
    6c96:	a0 ea       	ldi	r26, 0xA0	; 160
    6c98:	b1 e4       	ldi	r27, 0x41	; 65
    6c9a:	8f a3       	std	Y+39, r24	; 0x27
    6c9c:	98 a7       	std	Y+40, r25	; 0x28
    6c9e:	a9 a7       	std	Y+41, r26	; 0x29
    6ca0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6ca2:	6f a1       	ldd	r22, Y+39	; 0x27
    6ca4:	78 a5       	ldd	r23, Y+40	; 0x28
    6ca6:	89 a5       	ldd	r24, Y+41	; 0x29
    6ca8:	9a a5       	ldd	r25, Y+42	; 0x2a
    6caa:	20 e0       	ldi	r18, 0x00	; 0
    6cac:	30 e0       	ldi	r19, 0x00	; 0
    6cae:	4a e7       	ldi	r20, 0x7A	; 122
    6cb0:	55 e4       	ldi	r21, 0x45	; 69
    6cb2:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    6cb6:	dc 01       	movw	r26, r24
    6cb8:	cb 01       	movw	r24, r22
    6cba:	8b a3       	std	Y+35, r24	; 0x23
    6cbc:	9c a3       	std	Y+36, r25	; 0x24
    6cbe:	ad a3       	std	Y+37, r26	; 0x25
    6cc0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6cc2:	6b a1       	ldd	r22, Y+35	; 0x23
    6cc4:	7c a1       	ldd	r23, Y+36	; 0x24
    6cc6:	8d a1       	ldd	r24, Y+37	; 0x25
    6cc8:	9e a1       	ldd	r25, Y+38	; 0x26
    6cca:	20 e0       	ldi	r18, 0x00	; 0
    6ccc:	30 e0       	ldi	r19, 0x00	; 0
    6cce:	40 e8       	ldi	r20, 0x80	; 128
    6cd0:	5f e3       	ldi	r21, 0x3F	; 63
    6cd2:	0e 94 29 46 	call	0x8c52	; 0x8c52 <__ltsf2>
    6cd6:	88 23       	and	r24, r24
    6cd8:	2c f4       	brge	.+10     	; 0x6ce4 <main+0x25a>
		__ticks = 1;
    6cda:	81 e0       	ldi	r24, 0x01	; 1
    6cdc:	90 e0       	ldi	r25, 0x00	; 0
    6cde:	9a a3       	std	Y+34, r25	; 0x22
    6ce0:	89 a3       	std	Y+33, r24	; 0x21
    6ce2:	3f c0       	rjmp	.+126    	; 0x6d62 <main+0x2d8>
	else if (__tmp > 65535)
    6ce4:	6b a1       	ldd	r22, Y+35	; 0x23
    6ce6:	7c a1       	ldd	r23, Y+36	; 0x24
    6ce8:	8d a1       	ldd	r24, Y+37	; 0x25
    6cea:	9e a1       	ldd	r25, Y+38	; 0x26
    6cec:	20 e0       	ldi	r18, 0x00	; 0
    6cee:	3f ef       	ldi	r19, 0xFF	; 255
    6cf0:	4f e7       	ldi	r20, 0x7F	; 127
    6cf2:	57 e4       	ldi	r21, 0x47	; 71
    6cf4:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <__gtsf2>
    6cf8:	18 16       	cp	r1, r24
    6cfa:	4c f5       	brge	.+82     	; 0x6d4e <main+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6cfc:	6f a1       	ldd	r22, Y+39	; 0x27
    6cfe:	78 a5       	ldd	r23, Y+40	; 0x28
    6d00:	89 a5       	ldd	r24, Y+41	; 0x29
    6d02:	9a a5       	ldd	r25, Y+42	; 0x2a
    6d04:	20 e0       	ldi	r18, 0x00	; 0
    6d06:	30 e0       	ldi	r19, 0x00	; 0
    6d08:	40 e2       	ldi	r20, 0x20	; 32
    6d0a:	51 e4       	ldi	r21, 0x41	; 65
    6d0c:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    6d10:	dc 01       	movw	r26, r24
    6d12:	cb 01       	movw	r24, r22
    6d14:	bc 01       	movw	r22, r24
    6d16:	cd 01       	movw	r24, r26
    6d18:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    6d1c:	dc 01       	movw	r26, r24
    6d1e:	cb 01       	movw	r24, r22
    6d20:	9a a3       	std	Y+34, r25	; 0x22
    6d22:	89 a3       	std	Y+33, r24	; 0x21
    6d24:	0f c0       	rjmp	.+30     	; 0x6d44 <main+0x2ba>
    6d26:	80 e9       	ldi	r24, 0x90	; 144
    6d28:	91 e0       	ldi	r25, 0x01	; 1
    6d2a:	98 a3       	std	Y+32, r25	; 0x20
    6d2c:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6d2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6d30:	98 a1       	ldd	r25, Y+32	; 0x20
    6d32:	01 97       	sbiw	r24, 0x01	; 1
    6d34:	f1 f7       	brne	.-4      	; 0x6d32 <main+0x2a8>
    6d36:	98 a3       	std	Y+32, r25	; 0x20
    6d38:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6d3a:	89 a1       	ldd	r24, Y+33	; 0x21
    6d3c:	9a a1       	ldd	r25, Y+34	; 0x22
    6d3e:	01 97       	sbiw	r24, 0x01	; 1
    6d40:	9a a3       	std	Y+34, r25	; 0x22
    6d42:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6d44:	89 a1       	ldd	r24, Y+33	; 0x21
    6d46:	9a a1       	ldd	r25, Y+34	; 0x22
    6d48:	00 97       	sbiw	r24, 0x00	; 0
    6d4a:	69 f7       	brne	.-38     	; 0x6d26 <main+0x29c>
    6d4c:	14 c0       	rjmp	.+40     	; 0x6d76 <main+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6d4e:	6b a1       	ldd	r22, Y+35	; 0x23
    6d50:	7c a1       	ldd	r23, Y+36	; 0x24
    6d52:	8d a1       	ldd	r24, Y+37	; 0x25
    6d54:	9e a1       	ldd	r25, Y+38	; 0x26
    6d56:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    6d5a:	dc 01       	movw	r26, r24
    6d5c:	cb 01       	movw	r24, r22
    6d5e:	9a a3       	std	Y+34, r25	; 0x22
    6d60:	89 a3       	std	Y+33, r24	; 0x21
    6d62:	89 a1       	ldd	r24, Y+33	; 0x21
    6d64:	9a a1       	ldd	r25, Y+34	; 0x22
    6d66:	9e 8f       	std	Y+30, r25	; 0x1e
    6d68:	8d 8f       	std	Y+29, r24	; 0x1d
    6d6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6d6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6d6e:	01 97       	sbiw	r24, 0x01	; 1
    6d70:	f1 f7       	brne	.-4      	; 0x6d6e <main+0x2e4>
    6d72:	9e 8f       	std	Y+30, r25	; 0x1e
    6d74:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(20);
				TransmitUSART('X'); //wys≥anie znaku øπdania transmisji numeru i kierunku
    6d76:	88 e5       	ldi	r24, 0x58	; 88
    6d78:	0e 94 c2 2a 	call	0x5584	; 0x5584 <TransmitUSART>

				//odbiÛr danych przez USART i zapis do bufora
				int bufsize = 1;
    6d7c:	81 e0       	ldi	r24, 0x01	; 1
    6d7e:	90 e0       	ldi	r25, 0x00	; 0
    6d80:	98 ab       	std	Y+48, r25	; 0x30
    6d82:	8f a7       	std	Y+47, r24	; 0x2f
				char *bufor = calloc(bufsize, sizeof(char)); //alokacja pamiÍci
    6d84:	8f a5       	ldd	r24, Y+47	; 0x2f
    6d86:	98 a9       	ldd	r25, Y+48	; 0x30
    6d88:	61 e0       	ldi	r22, 0x01	; 1
    6d8a:	70 e0       	ldi	r23, 0x00	; 0
    6d8c:	0e 94 d7 48 	call	0x91ae	; 0x91ae <calloc>
    6d90:	9f af       	std	Y+63, r25	; 0x3f
    6d92:	8e af       	std	Y+62, r24	; 0x3e
				bufsize = BT_receive(&bufor);
    6d94:	ce 01       	movw	r24, r28
    6d96:	ce 96       	adiw	r24, 0x3e	; 62
    6d98:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <BT_receive>
    6d9c:	98 ab       	std	Y+48, r25	; 0x30
    6d9e:	8f a7       	std	Y+47, r24	; 0x2f

				char *wynik = strstr(bufor, NIEWIDOMY); //CZY TO TWOJA LINIA?
    6da0:	8e ad       	ldd	r24, Y+62	; 0x3e
    6da2:	9f ad       	ldd	r25, Y+63	; 0x3f
    6da4:	9e 01       	movw	r18, r28
    6da6:	29 5c       	subi	r18, 0xC9	; 201
    6da8:	3f 4f       	sbci	r19, 0xFF	; 255
    6daa:	b9 01       	movw	r22, r18
    6dac:	0e 94 d6 4a 	call	0x95ac	; 0x95ac <strstr>
    6db0:	9e a7       	std	Y+46, r25	; 0x2e
    6db2:	8d a7       	std	Y+45, r24	; 0x2d
				if (wynik != NULL) { //TAK: TO TWOJA LINIA
    6db4:	8d a5       	ldd	r24, Y+45	; 0x2d
    6db6:	9e a5       	ldd	r25, Y+46	; 0x2e
    6db8:	00 97       	sbiw	r24, 0x00	; 0
    6dba:	c1 f1       	breq	.+112    	; 0x6e2c <main+0x3a2>
					lcd_locate(1, 14); lcd_str(":)");
    6dbc:	81 e0       	ldi	r24, 0x01	; 1
    6dbe:	6e e0       	ldi	r22, 0x0E	; 14
    6dc0:	0e 94 a8 30 	call	0x6150	; 0x6150 <lcd_locate>
    6dc4:	8e ee       	ldi	r24, 0xEE	; 238
    6dc6:	91 e0       	ldi	r25, 0x01	; 1
    6dc8:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <lcd_str>
					komunikat_glosowy(16);
    6dcc:	80 e1       	ldi	r24, 0x10	; 16
    6dce:	0e 94 5c 00 	call	0xb8	; 0xb8 <komunikat_glosowy>
					for (i = 0; i < 3; i++) {
    6dd2:	10 92 24 02 	sts	0x0224, r1
    6dd6:	12 c0       	rjmp	.+36     	; 0x6dfc <main+0x372>
						komunikat_glosowy(niewidomy_int[i]);
    6dd8:	80 91 24 02 	lds	r24, 0x0224
    6ddc:	88 2f       	mov	r24, r24
    6dde:	90 e0       	ldi	r25, 0x00	; 0
    6de0:	88 0f       	add	r24, r24
    6de2:	99 1f       	adc	r25, r25
    6de4:	fc 01       	movw	r30, r24
    6de6:	e4 5d       	subi	r30, 0xD4	; 212
    6de8:	fd 4f       	sbci	r31, 0xFD	; 253
    6dea:	80 81       	ld	r24, Z
    6dec:	91 81       	ldd	r25, Z+1	; 0x01
    6dee:	0e 94 5c 00 	call	0xb8	; 0xb8 <komunikat_glosowy>

				char *wynik = strstr(bufor, NIEWIDOMY); //CZY TO TWOJA LINIA?
				if (wynik != NULL) { //TAK: TO TWOJA LINIA
					lcd_locate(1, 14); lcd_str(":)");
					komunikat_glosowy(16);
					for (i = 0; i < 3; i++) {
    6df2:	80 91 24 02 	lds	r24, 0x0224
    6df6:	8f 5f       	subi	r24, 0xFF	; 255
    6df8:	80 93 24 02 	sts	0x0224, r24
    6dfc:	80 91 24 02 	lds	r24, 0x0224
    6e00:	83 30       	cpi	r24, 0x03	; 3
    6e02:	50 f3       	brcs	.-44     	; 0x6dd8 <main+0x34e>
						komunikat_glosowy(niewidomy_int[i]);
					}
					komunikat_glosowy(cyfra_int);
    6e04:	80 91 25 02 	lds	r24, 0x0225
    6e08:	90 91 26 02 	lds	r25, 0x0226
    6e0c:	0e 94 5c 00 	call	0xb8	; 0xb8 <komunikat_glosowy>
					komunikat_glosowy(17);
    6e10:	81 e1       	ldi	r24, 0x11	; 17
    6e12:	0e 94 5c 00 	call	0xb8	; 0xb8 <komunikat_glosowy>
    6e16:	80 e0       	ldi	r24, 0x00	; 0
    6e18:	90 e0       	ldi	r25, 0x00	; 0
		flaga = 0; //stan neutralny
		_delay_ms(10);
		free(bufor); //zwolnienie pamiÍci
		_delay_ms(500);
	}
}
    6e1a:	ef 96       	adiw	r28, 0x3f	; 63
    6e1c:	0f b6       	in	r0, 0x3f	; 63
    6e1e:	f8 94       	cli
    6e20:	de bf       	out	0x3e, r29	; 62
    6e22:	0f be       	out	0x3f, r0	; 63
    6e24:	cd bf       	out	0x3d, r28	; 61
    6e26:	cf 91       	pop	r28
    6e28:	df 91       	pop	r29
    6e2a:	08 95       	ret
					komunikat_glosowy(cyfra_int);
					komunikat_glosowy(17);
					break; //KONIEC PROGRAMU
				}
				else {
					char *wynik = strstr(bufor, disconnected); //CZY ROZ£•CZONY? (po wystπpieniu ISR i wymuszonym zerwaniu po≥πczenia)
    6e2c:	8e ad       	ldd	r24, Y+62	; 0x3e
    6e2e:	9f ad       	ldd	r25, Y+63	; 0x3f
    6e30:	20 eb       	ldi	r18, 0xB0	; 176
    6e32:	31 e0       	ldi	r19, 0x01	; 1
    6e34:	b9 01       	movw	r22, r18
    6e36:	0e 94 d6 4a 	call	0x95ac	; 0x95ac <strstr>
    6e3a:	9c a7       	std	Y+44, r25	; 0x2c
    6e3c:	8b a7       	std	Y+43, r24	; 0x2b
					if (wynik != NULL) { //TAK: ROZ£•CZONY<=>po≥πczono z nieznanym urzπdzeniem BT
    6e3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    6e40:	9c a5       	ldd	r25, Y+44	; 0x2c
    6e42:	00 97       	sbiw	r24, 0x00	; 0
    6e44:	49 f0       	breq	.+18     	; 0x6e58 <main+0x3ce>
						lcd_locate(1, 14); lcd_str("XX");
    6e46:	81 e0       	ldi	r24, 0x01	; 1
    6e48:	6e e0       	ldi	r22, 0x0E	; 14
    6e4a:	0e 94 a8 30 	call	0x6150	; 0x6150 <lcd_locate>
    6e4e:	81 ef       	ldi	r24, 0xF1	; 241
    6e50:	91 e0       	ldi	r25, 0x01	; 1
    6e52:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <lcd_str>
    6e56:	0b c0       	rjmp	.+22     	; 0x6e6e <main+0x3e4>
					} else { //NIE: TO NIE TWOJA LINIA
						lcd_locate(1, 14); lcd_str(":(");
    6e58:	81 e0       	ldi	r24, 0x01	; 1
    6e5a:	6e e0       	ldi	r22, 0x0E	; 14
    6e5c:	0e 94 a8 30 	call	0x6150	; 0x6150 <lcd_locate>
    6e60:	84 ef       	ldi	r24, 0xF4	; 244
    6e62:	91 e0       	ldi	r25, 0x01	; 1
    6e64:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <lcd_str>
						komunikat_glosowy(21);
    6e68:	85 e1       	ldi	r24, 0x15	; 21
    6e6a:	0e 94 5c 00 	call	0xb8	; 0xb8 <komunikat_glosowy>
					}
//					flaga=1;
				}
			}
		}
		flaga = 0; //stan neutralny
    6e6e:	10 92 38 02 	sts	0x0238, r1
    6e72:	80 e0       	ldi	r24, 0x00	; 0
    6e74:	90 e0       	ldi	r25, 0x00	; 0
    6e76:	a0 e2       	ldi	r26, 0x20	; 32
    6e78:	b1 e4       	ldi	r27, 0x41	; 65
    6e7a:	89 8f       	std	Y+25, r24	; 0x19
    6e7c:	9a 8f       	std	Y+26, r25	; 0x1a
    6e7e:	ab 8f       	std	Y+27, r26	; 0x1b
    6e80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6e82:	69 8d       	ldd	r22, Y+25	; 0x19
    6e84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6e86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6e88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6e8a:	20 e0       	ldi	r18, 0x00	; 0
    6e8c:	30 e0       	ldi	r19, 0x00	; 0
    6e8e:	4a e7       	ldi	r20, 0x7A	; 122
    6e90:	55 e4       	ldi	r21, 0x45	; 69
    6e92:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    6e96:	dc 01       	movw	r26, r24
    6e98:	cb 01       	movw	r24, r22
    6e9a:	8d 8b       	std	Y+21, r24	; 0x15
    6e9c:	9e 8b       	std	Y+22, r25	; 0x16
    6e9e:	af 8b       	std	Y+23, r26	; 0x17
    6ea0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6ea2:	6d 89       	ldd	r22, Y+21	; 0x15
    6ea4:	7e 89       	ldd	r23, Y+22	; 0x16
    6ea6:	8f 89       	ldd	r24, Y+23	; 0x17
    6ea8:	98 8d       	ldd	r25, Y+24	; 0x18
    6eaa:	20 e0       	ldi	r18, 0x00	; 0
    6eac:	30 e0       	ldi	r19, 0x00	; 0
    6eae:	40 e8       	ldi	r20, 0x80	; 128
    6eb0:	5f e3       	ldi	r21, 0x3F	; 63
    6eb2:	0e 94 29 46 	call	0x8c52	; 0x8c52 <__ltsf2>
    6eb6:	88 23       	and	r24, r24
    6eb8:	2c f4       	brge	.+10     	; 0x6ec4 <main+0x43a>
		__ticks = 1;
    6eba:	81 e0       	ldi	r24, 0x01	; 1
    6ebc:	90 e0       	ldi	r25, 0x00	; 0
    6ebe:	9c 8b       	std	Y+20, r25	; 0x14
    6ec0:	8b 8b       	std	Y+19, r24	; 0x13
    6ec2:	3f c0       	rjmp	.+126    	; 0x6f42 <main+0x4b8>
	else if (__tmp > 65535)
    6ec4:	6d 89       	ldd	r22, Y+21	; 0x15
    6ec6:	7e 89       	ldd	r23, Y+22	; 0x16
    6ec8:	8f 89       	ldd	r24, Y+23	; 0x17
    6eca:	98 8d       	ldd	r25, Y+24	; 0x18
    6ecc:	20 e0       	ldi	r18, 0x00	; 0
    6ece:	3f ef       	ldi	r19, 0xFF	; 255
    6ed0:	4f e7       	ldi	r20, 0x7F	; 127
    6ed2:	57 e4       	ldi	r21, 0x47	; 71
    6ed4:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <__gtsf2>
    6ed8:	18 16       	cp	r1, r24
    6eda:	4c f5       	brge	.+82     	; 0x6f2e <main+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6edc:	69 8d       	ldd	r22, Y+25	; 0x19
    6ede:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6ee0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6ee2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6ee4:	20 e0       	ldi	r18, 0x00	; 0
    6ee6:	30 e0       	ldi	r19, 0x00	; 0
    6ee8:	40 e2       	ldi	r20, 0x20	; 32
    6eea:	51 e4       	ldi	r21, 0x41	; 65
    6eec:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    6ef0:	dc 01       	movw	r26, r24
    6ef2:	cb 01       	movw	r24, r22
    6ef4:	bc 01       	movw	r22, r24
    6ef6:	cd 01       	movw	r24, r26
    6ef8:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    6efc:	dc 01       	movw	r26, r24
    6efe:	cb 01       	movw	r24, r22
    6f00:	9c 8b       	std	Y+20, r25	; 0x14
    6f02:	8b 8b       	std	Y+19, r24	; 0x13
    6f04:	0f c0       	rjmp	.+30     	; 0x6f24 <main+0x49a>
    6f06:	80 e9       	ldi	r24, 0x90	; 144
    6f08:	91 e0       	ldi	r25, 0x01	; 1
    6f0a:	9a 8b       	std	Y+18, r25	; 0x12
    6f0c:	89 8b       	std	Y+17, r24	; 0x11
    6f0e:	89 89       	ldd	r24, Y+17	; 0x11
    6f10:	9a 89       	ldd	r25, Y+18	; 0x12
    6f12:	01 97       	sbiw	r24, 0x01	; 1
    6f14:	f1 f7       	brne	.-4      	; 0x6f12 <main+0x488>
    6f16:	9a 8b       	std	Y+18, r25	; 0x12
    6f18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6f1a:	8b 89       	ldd	r24, Y+19	; 0x13
    6f1c:	9c 89       	ldd	r25, Y+20	; 0x14
    6f1e:	01 97       	sbiw	r24, 0x01	; 1
    6f20:	9c 8b       	std	Y+20, r25	; 0x14
    6f22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6f24:	8b 89       	ldd	r24, Y+19	; 0x13
    6f26:	9c 89       	ldd	r25, Y+20	; 0x14
    6f28:	00 97       	sbiw	r24, 0x00	; 0
    6f2a:	69 f7       	brne	.-38     	; 0x6f06 <main+0x47c>
    6f2c:	14 c0       	rjmp	.+40     	; 0x6f56 <main+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6f2e:	6d 89       	ldd	r22, Y+21	; 0x15
    6f30:	7e 89       	ldd	r23, Y+22	; 0x16
    6f32:	8f 89       	ldd	r24, Y+23	; 0x17
    6f34:	98 8d       	ldd	r25, Y+24	; 0x18
    6f36:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    6f3a:	dc 01       	movw	r26, r24
    6f3c:	cb 01       	movw	r24, r22
    6f3e:	9c 8b       	std	Y+20, r25	; 0x14
    6f40:	8b 8b       	std	Y+19, r24	; 0x13
    6f42:	8b 89       	ldd	r24, Y+19	; 0x13
    6f44:	9c 89       	ldd	r25, Y+20	; 0x14
    6f46:	98 8b       	std	Y+16, r25	; 0x10
    6f48:	8f 87       	std	Y+15, r24	; 0x0f
    6f4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f4c:	98 89       	ldd	r25, Y+16	; 0x10
    6f4e:	01 97       	sbiw	r24, 0x01	; 1
    6f50:	f1 f7       	brne	.-4      	; 0x6f4e <main+0x4c4>
    6f52:	98 8b       	std	Y+16, r25	; 0x10
    6f54:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		free(bufor); //zwolnienie pamiÍci
    6f56:	8c ad       	ldd	r24, Y+60	; 0x3c
    6f58:	9d ad       	ldd	r25, Y+61	; 0x3d
    6f5a:	0e 94 a0 49 	call	0x9340	; 0x9340 <free>
    6f5e:	80 e0       	ldi	r24, 0x00	; 0
    6f60:	90 e0       	ldi	r25, 0x00	; 0
    6f62:	aa ef       	ldi	r26, 0xFA	; 250
    6f64:	b3 e4       	ldi	r27, 0x43	; 67
    6f66:	8b 87       	std	Y+11, r24	; 0x0b
    6f68:	9c 87       	std	Y+12, r25	; 0x0c
    6f6a:	ad 87       	std	Y+13, r26	; 0x0d
    6f6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6f6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6f70:	7c 85       	ldd	r23, Y+12	; 0x0c
    6f72:	8d 85       	ldd	r24, Y+13	; 0x0d
    6f74:	9e 85       	ldd	r25, Y+14	; 0x0e
    6f76:	20 e0       	ldi	r18, 0x00	; 0
    6f78:	30 e0       	ldi	r19, 0x00	; 0
    6f7a:	4a e7       	ldi	r20, 0x7A	; 122
    6f7c:	55 e4       	ldi	r21, 0x45	; 69
    6f7e:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    6f82:	dc 01       	movw	r26, r24
    6f84:	cb 01       	movw	r24, r22
    6f86:	8f 83       	std	Y+7, r24	; 0x07
    6f88:	98 87       	std	Y+8, r25	; 0x08
    6f8a:	a9 87       	std	Y+9, r26	; 0x09
    6f8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6f8e:	6f 81       	ldd	r22, Y+7	; 0x07
    6f90:	78 85       	ldd	r23, Y+8	; 0x08
    6f92:	89 85       	ldd	r24, Y+9	; 0x09
    6f94:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f96:	20 e0       	ldi	r18, 0x00	; 0
    6f98:	30 e0       	ldi	r19, 0x00	; 0
    6f9a:	40 e8       	ldi	r20, 0x80	; 128
    6f9c:	5f e3       	ldi	r21, 0x3F	; 63
    6f9e:	0e 94 29 46 	call	0x8c52	; 0x8c52 <__ltsf2>
    6fa2:	88 23       	and	r24, r24
    6fa4:	2c f4       	brge	.+10     	; 0x6fb0 <main+0x526>
		__ticks = 1;
    6fa6:	81 e0       	ldi	r24, 0x01	; 1
    6fa8:	90 e0       	ldi	r25, 0x00	; 0
    6faa:	9e 83       	std	Y+6, r25	; 0x06
    6fac:	8d 83       	std	Y+5, r24	; 0x05
    6fae:	3f c0       	rjmp	.+126    	; 0x702e <main+0x5a4>
	else if (__tmp > 65535)
    6fb0:	6f 81       	ldd	r22, Y+7	; 0x07
    6fb2:	78 85       	ldd	r23, Y+8	; 0x08
    6fb4:	89 85       	ldd	r24, Y+9	; 0x09
    6fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    6fb8:	20 e0       	ldi	r18, 0x00	; 0
    6fba:	3f ef       	ldi	r19, 0xFF	; 255
    6fbc:	4f e7       	ldi	r20, 0x7F	; 127
    6fbe:	57 e4       	ldi	r21, 0x47	; 71
    6fc0:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <__gtsf2>
    6fc4:	18 16       	cp	r1, r24
    6fc6:	4c f5       	brge	.+82     	; 0x701a <main+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6fc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    6fca:	7c 85       	ldd	r23, Y+12	; 0x0c
    6fcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    6fce:	9e 85       	ldd	r25, Y+14	; 0x0e
    6fd0:	20 e0       	ldi	r18, 0x00	; 0
    6fd2:	30 e0       	ldi	r19, 0x00	; 0
    6fd4:	40 e2       	ldi	r20, 0x20	; 32
    6fd6:	51 e4       	ldi	r21, 0x41	; 65
    6fd8:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    6fdc:	dc 01       	movw	r26, r24
    6fde:	cb 01       	movw	r24, r22
    6fe0:	bc 01       	movw	r22, r24
    6fe2:	cd 01       	movw	r24, r26
    6fe4:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    6fe8:	dc 01       	movw	r26, r24
    6fea:	cb 01       	movw	r24, r22
    6fec:	9e 83       	std	Y+6, r25	; 0x06
    6fee:	8d 83       	std	Y+5, r24	; 0x05
    6ff0:	0f c0       	rjmp	.+30     	; 0x7010 <main+0x586>
    6ff2:	80 e9       	ldi	r24, 0x90	; 144
    6ff4:	91 e0       	ldi	r25, 0x01	; 1
    6ff6:	9c 83       	std	Y+4, r25	; 0x04
    6ff8:	8b 83       	std	Y+3, r24	; 0x03
    6ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    6ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    6ffe:	01 97       	sbiw	r24, 0x01	; 1
    7000:	f1 f7       	brne	.-4      	; 0x6ffe <main+0x574>
    7002:	9c 83       	std	Y+4, r25	; 0x04
    7004:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7006:	8d 81       	ldd	r24, Y+5	; 0x05
    7008:	9e 81       	ldd	r25, Y+6	; 0x06
    700a:	01 97       	sbiw	r24, 0x01	; 1
    700c:	9e 83       	std	Y+6, r25	; 0x06
    700e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7010:	8d 81       	ldd	r24, Y+5	; 0x05
    7012:	9e 81       	ldd	r25, Y+6	; 0x06
    7014:	00 97       	sbiw	r24, 0x00	; 0
    7016:	69 f7       	brne	.-38     	; 0x6ff2 <main+0x568>
    7018:	d4 cd       	rjmp	.-1112   	; 0x6bc2 <main+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    701a:	6f 81       	ldd	r22, Y+7	; 0x07
    701c:	78 85       	ldd	r23, Y+8	; 0x08
    701e:	89 85       	ldd	r24, Y+9	; 0x09
    7020:	9a 85       	ldd	r25, Y+10	; 0x0a
    7022:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    7026:	dc 01       	movw	r26, r24
    7028:	cb 01       	movw	r24, r22
    702a:	9e 83       	std	Y+6, r25	; 0x06
    702c:	8d 83       	std	Y+5, r24	; 0x05
    702e:	8d 81       	ldd	r24, Y+5	; 0x05
    7030:	9e 81       	ldd	r25, Y+6	; 0x06
    7032:	9a 83       	std	Y+2, r25	; 0x02
    7034:	89 83       	std	Y+1, r24	; 0x01
    7036:	89 81       	ldd	r24, Y+1	; 0x01
    7038:	9a 81       	ldd	r25, Y+2	; 0x02
    703a:	01 97       	sbiw	r24, 0x01	; 1
    703c:	f1 f7       	brne	.-4      	; 0x703a <main+0x5b0>
    703e:	9a 83       	std	Y+2, r25	; 0x02
    7040:	89 83       	std	Y+1, r24	; 0x01
    7042:	bf cd       	rjmp	.-1154   	; 0x6bc2 <main+0x138>

00007044 <__vector_5>:
		_delay_ms(500);
	}
}
// funkcja przerwania odpowiedzialna za cykliczne zrywanie po≥πczenia BT--------------------------------------------------------
ISR(TIMER2_OVF_vect){	//przerwanie co 1sek
    7044:	1f 92       	push	r1
    7046:	0f 92       	push	r0
    7048:	0f b6       	in	r0, 0x3f	; 63
    704a:	0f 92       	push	r0
    704c:	11 24       	eor	r1, r1
    704e:	2f 93       	push	r18
    7050:	3f 93       	push	r19
    7052:	4f 93       	push	r20
    7054:	5f 93       	push	r21
    7056:	6f 93       	push	r22
    7058:	7f 93       	push	r23
    705a:	8f 93       	push	r24
    705c:	9f 93       	push	r25
    705e:	af 93       	push	r26
    7060:	bf 93       	push	r27
    7062:	ef 93       	push	r30
    7064:	ff 93       	push	r31
    7066:	df 93       	push	r29
    7068:	cf 93       	push	r28
    706a:	cd b7       	in	r28, 0x3d	; 61
    706c:	de b7       	in	r29, 0x3e	; 62
	licznik++;
    706e:	80 91 37 02 	lds	r24, 0x0237
    7072:	8f 5f       	subi	r24, 0xFF	; 255
    7074:	80 93 37 02 	sts	0x0237, r24
	if (licznik>125){ 	//minÍ≥a 1sek
    7078:	80 91 37 02 	lds	r24, 0x0237
    707c:	8e 37       	cpi	r24, 0x7E	; 126
    707e:	18 f1       	brcs	.+70     	; 0x70c6 <__vector_5+0x82>
		licznik=1;		//wyzerowanie licznika
    7080:	81 e0       	ldi	r24, 0x01	; 1
    7082:	80 93 37 02 	sts	0x0237, r24
		sekundy++;		//zwiÍkszenie licznika sekund
    7086:	80 91 36 02 	lds	r24, 0x0236
    708a:	8f 5f       	subi	r24, 0xFF	; 255
    708c:	80 93 36 02 	sts	0x0236, r24
		if (sekundy>59){ //reset licznika sekund co 1min (aby siÍ nie przepe≥ni≥ po 255sek)
    7090:	80 91 36 02 	lds	r24, 0x0236
    7094:	8c 33       	cpi	r24, 0x3C	; 60
    7096:	10 f0       	brcs	.+4      	; 0x709c <__vector_5+0x58>
			sekundy=0;
    7098:	10 92 36 02 	sts	0x0236, r1
		}
//		TransmitUSART(flaga);
		if (flaga==2){ //jeøeli po≥πczono to resetuj licznik sekund
    709c:	80 91 38 02 	lds	r24, 0x0238
    70a0:	82 30       	cpi	r24, 0x02	; 2
    70a2:	89 f4       	brne	.+34     	; 0x70c6 <__vector_5+0x82>
			sekundy=0;
    70a4:	10 92 36 02 	sts	0x0236, r1
			if (sekundy%10==0 && sekundy != 0){
    70a8:	80 91 36 02 	lds	r24, 0x0236
    70ac:	9a e0       	ldi	r25, 0x0A	; 10
    70ae:	69 2f       	mov	r22, r25
    70b0:	0e 94 72 48 	call	0x90e4	; 0x90e4 <__udivmodqi4>
    70b4:	89 2f       	mov	r24, r25
    70b6:	88 23       	and	r24, r24
    70b8:	31 f4       	brne	.+12     	; 0x70c6 <__vector_5+0x82>
    70ba:	80 91 36 02 	lds	r24, 0x0236
    70be:	88 23       	and	r24, r24
    70c0:	11 f0       	breq	.+4      	; 0x70c6 <__vector_5+0x82>
				reset_BT(); //zerwanie po≥πczenia BT po 3sek
    70c2:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <reset_BT>
			}
		}
	}
	TCNT2=131;
    70c6:	e4 e4       	ldi	r30, 0x44	; 68
    70c8:	f0 e0       	ldi	r31, 0x00	; 0
    70ca:	83 e8       	ldi	r24, 0x83	; 131
    70cc:	80 83       	st	Z, r24
}
    70ce:	cf 91       	pop	r28
    70d0:	df 91       	pop	r29
    70d2:	ff 91       	pop	r31
    70d4:	ef 91       	pop	r30
    70d6:	bf 91       	pop	r27
    70d8:	af 91       	pop	r26
    70da:	9f 91       	pop	r25
    70dc:	8f 91       	pop	r24
    70de:	7f 91       	pop	r23
    70e0:	6f 91       	pop	r22
    70e2:	5f 91       	pop	r21
    70e4:	4f 91       	pop	r20
    70e6:	3f 91       	pop	r19
    70e8:	2f 91       	pop	r18
    70ea:	0f 90       	pop	r0
    70ec:	0f be       	out	0x3f, r0	; 63
    70ee:	0f 90       	pop	r0
    70f0:	1f 90       	pop	r1
    70f2:	18 95       	reti

000070f4 <reset_BT>:

// funkcja zrywajπca po≥πczenie bluetooth----------------------------------------------------------------------------------------
void reset_BT(void) {
    70f4:	df 93       	push	r29
    70f6:	cf 93       	push	r28
    70f8:	cd b7       	in	r28, 0x3d	; 61
    70fa:	de b7       	in	r29, 0x3e	; 62
    70fc:	2e 97       	sbiw	r28, 0x0e	; 14
    70fe:	0f b6       	in	r0, 0x3f	; 63
    7100:	f8 94       	cli
    7102:	de bf       	out	0x3e, r29	; 62
    7104:	0f be       	out	0x3f, r0	; 63
    7106:	cd bf       	out	0x3d, r28	; 61
	reset_ON; //wy≥πczenie zasilania
    7108:	ab e3       	ldi	r26, 0x3B	; 59
    710a:	b0 e0       	ldi	r27, 0x00	; 0
    710c:	eb e3       	ldi	r30, 0x3B	; 59
    710e:	f0 e0       	ldi	r31, 0x00	; 0
    7110:	80 81       	ld	r24, Z
    7112:	8f 77       	andi	r24, 0x7F	; 127
    7114:	8c 93       	st	X, r24
    7116:	80 e0       	ldi	r24, 0x00	; 0
    7118:	90 e0       	ldi	r25, 0x00	; 0
    711a:	a8 ec       	ldi	r26, 0xC8	; 200
    711c:	b2 e4       	ldi	r27, 0x42	; 66
    711e:	8b 87       	std	Y+11, r24	; 0x0b
    7120:	9c 87       	std	Y+12, r25	; 0x0c
    7122:	ad 87       	std	Y+13, r26	; 0x0d
    7124:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7126:	6b 85       	ldd	r22, Y+11	; 0x0b
    7128:	7c 85       	ldd	r23, Y+12	; 0x0c
    712a:	8d 85       	ldd	r24, Y+13	; 0x0d
    712c:	9e 85       	ldd	r25, Y+14	; 0x0e
    712e:	20 e0       	ldi	r18, 0x00	; 0
    7130:	30 e0       	ldi	r19, 0x00	; 0
    7132:	4a e7       	ldi	r20, 0x7A	; 122
    7134:	55 e4       	ldi	r21, 0x45	; 69
    7136:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    713a:	dc 01       	movw	r26, r24
    713c:	cb 01       	movw	r24, r22
    713e:	8f 83       	std	Y+7, r24	; 0x07
    7140:	98 87       	std	Y+8, r25	; 0x08
    7142:	a9 87       	std	Y+9, r26	; 0x09
    7144:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7146:	6f 81       	ldd	r22, Y+7	; 0x07
    7148:	78 85       	ldd	r23, Y+8	; 0x08
    714a:	89 85       	ldd	r24, Y+9	; 0x09
    714c:	9a 85       	ldd	r25, Y+10	; 0x0a
    714e:	20 e0       	ldi	r18, 0x00	; 0
    7150:	30 e0       	ldi	r19, 0x00	; 0
    7152:	40 e8       	ldi	r20, 0x80	; 128
    7154:	5f e3       	ldi	r21, 0x3F	; 63
    7156:	0e 94 29 46 	call	0x8c52	; 0x8c52 <__ltsf2>
    715a:	88 23       	and	r24, r24
    715c:	2c f4       	brge	.+10     	; 0x7168 <reset_BT+0x74>
		__ticks = 1;
    715e:	81 e0       	ldi	r24, 0x01	; 1
    7160:	90 e0       	ldi	r25, 0x00	; 0
    7162:	9e 83       	std	Y+6, r25	; 0x06
    7164:	8d 83       	std	Y+5, r24	; 0x05
    7166:	3f c0       	rjmp	.+126    	; 0x71e6 <reset_BT+0xf2>
	else if (__tmp > 65535)
    7168:	6f 81       	ldd	r22, Y+7	; 0x07
    716a:	78 85       	ldd	r23, Y+8	; 0x08
    716c:	89 85       	ldd	r24, Y+9	; 0x09
    716e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7170:	20 e0       	ldi	r18, 0x00	; 0
    7172:	3f ef       	ldi	r19, 0xFF	; 255
    7174:	4f e7       	ldi	r20, 0x7F	; 127
    7176:	57 e4       	ldi	r21, 0x47	; 71
    7178:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <__gtsf2>
    717c:	18 16       	cp	r1, r24
    717e:	4c f5       	brge	.+82     	; 0x71d2 <reset_BT+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7180:	6b 85       	ldd	r22, Y+11	; 0x0b
    7182:	7c 85       	ldd	r23, Y+12	; 0x0c
    7184:	8d 85       	ldd	r24, Y+13	; 0x0d
    7186:	9e 85       	ldd	r25, Y+14	; 0x0e
    7188:	20 e0       	ldi	r18, 0x00	; 0
    718a:	30 e0       	ldi	r19, 0x00	; 0
    718c:	40 e2       	ldi	r20, 0x20	; 32
    718e:	51 e4       	ldi	r21, 0x41	; 65
    7190:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    7194:	dc 01       	movw	r26, r24
    7196:	cb 01       	movw	r24, r22
    7198:	bc 01       	movw	r22, r24
    719a:	cd 01       	movw	r24, r26
    719c:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    71a0:	dc 01       	movw	r26, r24
    71a2:	cb 01       	movw	r24, r22
    71a4:	9e 83       	std	Y+6, r25	; 0x06
    71a6:	8d 83       	std	Y+5, r24	; 0x05
    71a8:	0f c0       	rjmp	.+30     	; 0x71c8 <reset_BT+0xd4>
    71aa:	80 e9       	ldi	r24, 0x90	; 144
    71ac:	91 e0       	ldi	r25, 0x01	; 1
    71ae:	9c 83       	std	Y+4, r25	; 0x04
    71b0:	8b 83       	std	Y+3, r24	; 0x03
    71b2:	8b 81       	ldd	r24, Y+3	; 0x03
    71b4:	9c 81       	ldd	r25, Y+4	; 0x04
    71b6:	01 97       	sbiw	r24, 0x01	; 1
    71b8:	f1 f7       	brne	.-4      	; 0x71b6 <reset_BT+0xc2>
    71ba:	9c 83       	std	Y+4, r25	; 0x04
    71bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    71be:	8d 81       	ldd	r24, Y+5	; 0x05
    71c0:	9e 81       	ldd	r25, Y+6	; 0x06
    71c2:	01 97       	sbiw	r24, 0x01	; 1
    71c4:	9e 83       	std	Y+6, r25	; 0x06
    71c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    71c8:	8d 81       	ldd	r24, Y+5	; 0x05
    71ca:	9e 81       	ldd	r25, Y+6	; 0x06
    71cc:	00 97       	sbiw	r24, 0x00	; 0
    71ce:	69 f7       	brne	.-38     	; 0x71aa <reset_BT+0xb6>
    71d0:	14 c0       	rjmp	.+40     	; 0x71fa <reset_BT+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    71d2:	6f 81       	ldd	r22, Y+7	; 0x07
    71d4:	78 85       	ldd	r23, Y+8	; 0x08
    71d6:	89 85       	ldd	r24, Y+9	; 0x09
    71d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    71da:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    71de:	dc 01       	movw	r26, r24
    71e0:	cb 01       	movw	r24, r22
    71e2:	9e 83       	std	Y+6, r25	; 0x06
    71e4:	8d 83       	std	Y+5, r24	; 0x05
    71e6:	8d 81       	ldd	r24, Y+5	; 0x05
    71e8:	9e 81       	ldd	r25, Y+6	; 0x06
    71ea:	9a 83       	std	Y+2, r25	; 0x02
    71ec:	89 83       	std	Y+1, r24	; 0x01
    71ee:	89 81       	ldd	r24, Y+1	; 0x01
    71f0:	9a 81       	ldd	r25, Y+2	; 0x02
    71f2:	01 97       	sbiw	r24, 0x01	; 1
    71f4:	f1 f7       	brne	.-4      	; 0x71f2 <reset_BT+0xfe>
    71f6:	9a 83       	std	Y+2, r25	; 0x02
    71f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	reset_OFF; //w≥πczenie zasilania
    71fa:	ab e3       	ldi	r26, 0x3B	; 59
    71fc:	b0 e0       	ldi	r27, 0x00	; 0
    71fe:	eb e3       	ldi	r30, 0x3B	; 59
    7200:	f0 e0       	ldi	r31, 0x00	; 0
    7202:	80 81       	ld	r24, Z
    7204:	80 68       	ori	r24, 0x80	; 128
    7206:	8c 93       	st	X, r24
}
    7208:	2e 96       	adiw	r28, 0x0e	; 14
    720a:	0f b6       	in	r0, 0x3f	; 63
    720c:	f8 94       	cli
    720e:	de bf       	out	0x3e, r29	; 62
    7210:	0f be       	out	0x3f, r0	; 63
    7212:	cd bf       	out	0x3d, r28	; 61
    7214:	cf 91       	pop	r28
    7216:	df 91       	pop	r29
    7218:	08 95       	ret

0000721a <wprowadz_numer>:

// funkcja wprowadzajπca numer i kierunek----------------------------------------------------------------------------------------
void wprowadz_numer() {
    721a:	0f 93       	push	r16
    721c:	1f 93       	push	r17
    721e:	df 93       	push	r29
    7220:	cf 93       	push	r28
    7222:	cd b7       	in	r28, 0x3d	; 61
    7224:	de b7       	in	r29, 0x3e	; 62
    7226:	ce 57       	subi	r28, 0x7E	; 126
    7228:	d0 40       	sbci	r29, 0x00	; 0
    722a:	0f b6       	in	r0, 0x3f	; 63
    722c:	f8 94       	cli
    722e:	de bf       	out	0x3e, r29	; 62
    7230:	0f be       	out	0x3f, r0	; 63
    7232:	cd bf       	out	0x3d, r28	; 61
	//numer linii
	for (i = 0; i < 3; i++) {
    7234:	10 92 24 02 	sts	0x0224, r1
    7238:	a1 c2       	rjmp	.+1346   	; 0x777c <wprowadz_numer+0x562>
    723a:	fe 01       	movw	r30, r28
    723c:	e5 58       	subi	r30, 0x85	; 133
    723e:	ff 4f       	sbci	r31, 0xFF	; 255
    7240:	80 e0       	ldi	r24, 0x00	; 0
    7242:	90 e0       	ldi	r25, 0x00	; 0
    7244:	a8 e4       	ldi	r26, 0x48	; 72
    7246:	b3 e4       	ldi	r27, 0x43	; 67
    7248:	80 83       	st	Z, r24
    724a:	91 83       	std	Z+1, r25	; 0x01
    724c:	a2 83       	std	Z+2, r26	; 0x02
    724e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7250:	8e 01       	movw	r16, r28
    7252:	09 58       	subi	r16, 0x89	; 137
    7254:	1f 4f       	sbci	r17, 0xFF	; 255
    7256:	fe 01       	movw	r30, r28
    7258:	e5 58       	subi	r30, 0x85	; 133
    725a:	ff 4f       	sbci	r31, 0xFF	; 255
    725c:	60 81       	ld	r22, Z
    725e:	71 81       	ldd	r23, Z+1	; 0x01
    7260:	82 81       	ldd	r24, Z+2	; 0x02
    7262:	93 81       	ldd	r25, Z+3	; 0x03
    7264:	20 e0       	ldi	r18, 0x00	; 0
    7266:	30 e0       	ldi	r19, 0x00	; 0
    7268:	4a e7       	ldi	r20, 0x7A	; 122
    726a:	55 e4       	ldi	r21, 0x45	; 69
    726c:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    7270:	dc 01       	movw	r26, r24
    7272:	cb 01       	movw	r24, r22
    7274:	f8 01       	movw	r30, r16
    7276:	80 83       	st	Z, r24
    7278:	91 83       	std	Z+1, r25	; 0x01
    727a:	a2 83       	std	Z+2, r26	; 0x02
    727c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    727e:	fe 01       	movw	r30, r28
    7280:	e9 58       	subi	r30, 0x89	; 137
    7282:	ff 4f       	sbci	r31, 0xFF	; 255
    7284:	60 81       	ld	r22, Z
    7286:	71 81       	ldd	r23, Z+1	; 0x01
    7288:	82 81       	ldd	r24, Z+2	; 0x02
    728a:	93 81       	ldd	r25, Z+3	; 0x03
    728c:	20 e0       	ldi	r18, 0x00	; 0
    728e:	30 e0       	ldi	r19, 0x00	; 0
    7290:	40 e8       	ldi	r20, 0x80	; 128
    7292:	5f e3       	ldi	r21, 0x3F	; 63
    7294:	0e 94 29 46 	call	0x8c52	; 0x8c52 <__ltsf2>
    7298:	88 23       	and	r24, r24
    729a:	44 f4       	brge	.+16     	; 0x72ac <wprowadz_numer+0x92>
		__ticks = 1;
    729c:	fe 01       	movw	r30, r28
    729e:	eb 58       	subi	r30, 0x8B	; 139
    72a0:	ff 4f       	sbci	r31, 0xFF	; 255
    72a2:	81 e0       	ldi	r24, 0x01	; 1
    72a4:	90 e0       	ldi	r25, 0x00	; 0
    72a6:	91 83       	std	Z+1, r25	; 0x01
    72a8:	80 83       	st	Z, r24
    72aa:	64 c0       	rjmp	.+200    	; 0x7374 <wprowadz_numer+0x15a>
	else if (__tmp > 65535)
    72ac:	fe 01       	movw	r30, r28
    72ae:	e9 58       	subi	r30, 0x89	; 137
    72b0:	ff 4f       	sbci	r31, 0xFF	; 255
    72b2:	60 81       	ld	r22, Z
    72b4:	71 81       	ldd	r23, Z+1	; 0x01
    72b6:	82 81       	ldd	r24, Z+2	; 0x02
    72b8:	93 81       	ldd	r25, Z+3	; 0x03
    72ba:	20 e0       	ldi	r18, 0x00	; 0
    72bc:	3f ef       	ldi	r19, 0xFF	; 255
    72be:	4f e7       	ldi	r20, 0x7F	; 127
    72c0:	57 e4       	ldi	r21, 0x47	; 71
    72c2:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <__gtsf2>
    72c6:	18 16       	cp	r1, r24
    72c8:	0c f0       	brlt	.+2      	; 0x72cc <wprowadz_numer+0xb2>
    72ca:	43 c0       	rjmp	.+134    	; 0x7352 <wprowadz_numer+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    72cc:	fe 01       	movw	r30, r28
    72ce:	e5 58       	subi	r30, 0x85	; 133
    72d0:	ff 4f       	sbci	r31, 0xFF	; 255
    72d2:	60 81       	ld	r22, Z
    72d4:	71 81       	ldd	r23, Z+1	; 0x01
    72d6:	82 81       	ldd	r24, Z+2	; 0x02
    72d8:	93 81       	ldd	r25, Z+3	; 0x03
    72da:	20 e0       	ldi	r18, 0x00	; 0
    72dc:	30 e0       	ldi	r19, 0x00	; 0
    72de:	40 e2       	ldi	r20, 0x20	; 32
    72e0:	51 e4       	ldi	r21, 0x41	; 65
    72e2:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    72e6:	dc 01       	movw	r26, r24
    72e8:	cb 01       	movw	r24, r22
    72ea:	8e 01       	movw	r16, r28
    72ec:	0b 58       	subi	r16, 0x8B	; 139
    72ee:	1f 4f       	sbci	r17, 0xFF	; 255
    72f0:	bc 01       	movw	r22, r24
    72f2:	cd 01       	movw	r24, r26
    72f4:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    72f8:	dc 01       	movw	r26, r24
    72fa:	cb 01       	movw	r24, r22
    72fc:	f8 01       	movw	r30, r16
    72fe:	91 83       	std	Z+1, r25	; 0x01
    7300:	80 83       	st	Z, r24
    7302:	1f c0       	rjmp	.+62     	; 0x7342 <wprowadz_numer+0x128>
    7304:	fe 01       	movw	r30, r28
    7306:	ed 58       	subi	r30, 0x8D	; 141
    7308:	ff 4f       	sbci	r31, 0xFF	; 255
    730a:	80 e9       	ldi	r24, 0x90	; 144
    730c:	91 e0       	ldi	r25, 0x01	; 1
    730e:	91 83       	std	Z+1, r25	; 0x01
    7310:	80 83       	st	Z, r24
    7312:	fe 01       	movw	r30, r28
    7314:	ed 58       	subi	r30, 0x8D	; 141
    7316:	ff 4f       	sbci	r31, 0xFF	; 255
    7318:	80 81       	ld	r24, Z
    731a:	91 81       	ldd	r25, Z+1	; 0x01
    731c:	01 97       	sbiw	r24, 0x01	; 1
    731e:	f1 f7       	brne	.-4      	; 0x731c <wprowadz_numer+0x102>
    7320:	fe 01       	movw	r30, r28
    7322:	ed 58       	subi	r30, 0x8D	; 141
    7324:	ff 4f       	sbci	r31, 0xFF	; 255
    7326:	91 83       	std	Z+1, r25	; 0x01
    7328:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    732a:	de 01       	movw	r26, r28
    732c:	ab 58       	subi	r26, 0x8B	; 139
    732e:	bf 4f       	sbci	r27, 0xFF	; 255
    7330:	fe 01       	movw	r30, r28
    7332:	eb 58       	subi	r30, 0x8B	; 139
    7334:	ff 4f       	sbci	r31, 0xFF	; 255
    7336:	80 81       	ld	r24, Z
    7338:	91 81       	ldd	r25, Z+1	; 0x01
    733a:	01 97       	sbiw	r24, 0x01	; 1
    733c:	11 96       	adiw	r26, 0x01	; 1
    733e:	9c 93       	st	X, r25
    7340:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7342:	fe 01       	movw	r30, r28
    7344:	eb 58       	subi	r30, 0x8B	; 139
    7346:	ff 4f       	sbci	r31, 0xFF	; 255
    7348:	80 81       	ld	r24, Z
    734a:	91 81       	ldd	r25, Z+1	; 0x01
    734c:	00 97       	sbiw	r24, 0x00	; 0
    734e:	d1 f6       	brne	.-76     	; 0x7304 <wprowadz_numer+0xea>
    7350:	27 c0       	rjmp	.+78     	; 0x73a0 <wprowadz_numer+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7352:	8e 01       	movw	r16, r28
    7354:	0b 58       	subi	r16, 0x8B	; 139
    7356:	1f 4f       	sbci	r17, 0xFF	; 255
    7358:	fe 01       	movw	r30, r28
    735a:	e9 58       	subi	r30, 0x89	; 137
    735c:	ff 4f       	sbci	r31, 0xFF	; 255
    735e:	60 81       	ld	r22, Z
    7360:	71 81       	ldd	r23, Z+1	; 0x01
    7362:	82 81       	ldd	r24, Z+2	; 0x02
    7364:	93 81       	ldd	r25, Z+3	; 0x03
    7366:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    736a:	dc 01       	movw	r26, r24
    736c:	cb 01       	movw	r24, r22
    736e:	f8 01       	movw	r30, r16
    7370:	91 83       	std	Z+1, r25	; 0x01
    7372:	80 83       	st	Z, r24
    7374:	de 01       	movw	r26, r28
    7376:	af 58       	subi	r26, 0x8F	; 143
    7378:	bf 4f       	sbci	r27, 0xFF	; 255
    737a:	fe 01       	movw	r30, r28
    737c:	eb 58       	subi	r30, 0x8B	; 139
    737e:	ff 4f       	sbci	r31, 0xFF	; 255
    7380:	80 81       	ld	r24, Z
    7382:	91 81       	ldd	r25, Z+1	; 0x01
    7384:	8d 93       	st	X+, r24
    7386:	9c 93       	st	X, r25
    7388:	fe 01       	movw	r30, r28
    738a:	ef 58       	subi	r30, 0x8F	; 143
    738c:	ff 4f       	sbci	r31, 0xFF	; 255
    738e:	80 81       	ld	r24, Z
    7390:	91 81       	ldd	r25, Z+1	; 0x01
    7392:	01 97       	sbiw	r24, 0x01	; 1
    7394:	f1 f7       	brne	.-4      	; 0x7392 <wprowadz_numer+0x178>
    7396:	fe 01       	movw	r30, r28
    7398:	ef 58       	subi	r30, 0x8F	; 143
    739a:	ff 4f       	sbci	r31, 0xFF	; 255
    739c:	91 83       	std	Z+1, r25	; 0x01
    739e:	80 83       	st	Z, r24
		_delay_ms(200);
		cyfra_int = 0; //zerowanie cyfry
    73a0:	10 92 26 02 	sts	0x0226, r1
    73a4:	10 92 25 02 	sts	0x0225, r1
		wyswietl_numer(cyfra_int);
    73a8:	80 91 25 02 	lds	r24, 0x0225
    73ac:	90 91 26 02 	lds	r25, 0x0226
    73b0:	0e 94 4e 2b 	call	0x569c	; 0x569c <wyswietl_numer>
		if (i == 0) {
    73b4:	80 91 24 02 	lds	r24, 0x0224
    73b8:	88 23       	and	r24, r24
    73ba:	21 f4       	brne	.+8      	; 0x73c4 <wprowadz_numer+0x1aa>
			komunikat_glosowy(12);
    73bc:	8c e0       	ldi	r24, 0x0C	; 12
    73be:	0e 94 5c 00 	call	0xb8	; 0xb8 <komunikat_glosowy>
    73c2:	ad c1       	rjmp	.+858    	; 0x771e <wprowadz_numer+0x504>
		} else if (i == 1) {
    73c4:	80 91 24 02 	lds	r24, 0x0224
    73c8:	81 30       	cpi	r24, 0x01	; 1
    73ca:	21 f4       	brne	.+8      	; 0x73d4 <wprowadz_numer+0x1ba>
			komunikat_glosowy(13);
    73cc:	8d e0       	ldi	r24, 0x0D	; 13
    73ce:	0e 94 5c 00 	call	0xb8	; 0xb8 <komunikat_glosowy>
    73d2:	a5 c1       	rjmp	.+842    	; 0x771e <wprowadz_numer+0x504>
		} else if (i == 2) {
    73d4:	80 91 24 02 	lds	r24, 0x0224
    73d8:	82 30       	cpi	r24, 0x02	; 2
    73da:	09 f0       	breq	.+2      	; 0x73de <wprowadz_numer+0x1c4>
    73dc:	a0 c1       	rjmp	.+832    	; 0x771e <wprowadz_numer+0x504>
			komunikat_glosowy(14);
    73de:	8e e0       	ldi	r24, 0x0E	; 14
    73e0:	0e 94 5c 00 	call	0xb8	; 0xb8 <komunikat_glosowy>
    73e4:	9c c1       	rjmp	.+824    	; 0x771e <wprowadz_numer+0x504>
		}

//		komunikat_glosowy(cyfra);
		while (klawisz_ENT_pressed) { //dopÛki klawisz LED_enter nie jest wcisniety
			if (!(KEY_PIN & (klawisz_NUM))) {
    73e6:	e3 e3       	ldi	r30, 0x33	; 51
    73e8:	f0 e0       	ldi	r31, 0x00	; 0
    73ea:	80 81       	ld	r24, Z
    73ec:	88 2f       	mov	r24, r24
    73ee:	90 e0       	ldi	r25, 0x00	; 0
    73f0:	81 70       	andi	r24, 0x01	; 1
    73f2:	90 70       	andi	r25, 0x00	; 0
    73f4:	00 97       	sbiw	r24, 0x00	; 0
    73f6:	09 f0       	breq	.+2      	; 0x73fa <wprowadz_numer+0x1e0>
    73f8:	92 c1       	rjmp	.+804    	; 0x771e <wprowadz_numer+0x504>
    73fa:	fe 01       	movw	r30, r28
    73fc:	e3 59       	subi	r30, 0x93	; 147
    73fe:	ff 4f       	sbci	r31, 0xFF	; 255
    7400:	80 e0       	ldi	r24, 0x00	; 0
    7402:	90 e0       	ldi	r25, 0x00	; 0
    7404:	a0 ea       	ldi	r26, 0xA0	; 160
    7406:	b2 e4       	ldi	r27, 0x42	; 66
    7408:	80 83       	st	Z, r24
    740a:	91 83       	std	Z+1, r25	; 0x01
    740c:	a2 83       	std	Z+2, r26	; 0x02
    740e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7410:	8e 01       	movw	r16, r28
    7412:	07 59       	subi	r16, 0x97	; 151
    7414:	1f 4f       	sbci	r17, 0xFF	; 255
    7416:	fe 01       	movw	r30, r28
    7418:	e3 59       	subi	r30, 0x93	; 147
    741a:	ff 4f       	sbci	r31, 0xFF	; 255
    741c:	60 81       	ld	r22, Z
    741e:	71 81       	ldd	r23, Z+1	; 0x01
    7420:	82 81       	ldd	r24, Z+2	; 0x02
    7422:	93 81       	ldd	r25, Z+3	; 0x03
    7424:	20 e0       	ldi	r18, 0x00	; 0
    7426:	30 e0       	ldi	r19, 0x00	; 0
    7428:	4a e7       	ldi	r20, 0x7A	; 122
    742a:	55 e4       	ldi	r21, 0x45	; 69
    742c:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    7430:	dc 01       	movw	r26, r24
    7432:	cb 01       	movw	r24, r22
    7434:	f8 01       	movw	r30, r16
    7436:	80 83       	st	Z, r24
    7438:	91 83       	std	Z+1, r25	; 0x01
    743a:	a2 83       	std	Z+2, r26	; 0x02
    743c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    743e:	fe 01       	movw	r30, r28
    7440:	e7 59       	subi	r30, 0x97	; 151
    7442:	ff 4f       	sbci	r31, 0xFF	; 255
    7444:	60 81       	ld	r22, Z
    7446:	71 81       	ldd	r23, Z+1	; 0x01
    7448:	82 81       	ldd	r24, Z+2	; 0x02
    744a:	93 81       	ldd	r25, Z+3	; 0x03
    744c:	20 e0       	ldi	r18, 0x00	; 0
    744e:	30 e0       	ldi	r19, 0x00	; 0
    7450:	40 e8       	ldi	r20, 0x80	; 128
    7452:	5f e3       	ldi	r21, 0x3F	; 63
    7454:	0e 94 29 46 	call	0x8c52	; 0x8c52 <__ltsf2>
    7458:	88 23       	and	r24, r24
    745a:	44 f4       	brge	.+16     	; 0x746c <wprowadz_numer+0x252>
		__ticks = 1;
    745c:	fe 01       	movw	r30, r28
    745e:	e9 59       	subi	r30, 0x99	; 153
    7460:	ff 4f       	sbci	r31, 0xFF	; 255
    7462:	81 e0       	ldi	r24, 0x01	; 1
    7464:	90 e0       	ldi	r25, 0x00	; 0
    7466:	91 83       	std	Z+1, r25	; 0x01
    7468:	80 83       	st	Z, r24
    746a:	64 c0       	rjmp	.+200    	; 0x7534 <wprowadz_numer+0x31a>
	else if (__tmp > 65535)
    746c:	fe 01       	movw	r30, r28
    746e:	e7 59       	subi	r30, 0x97	; 151
    7470:	ff 4f       	sbci	r31, 0xFF	; 255
    7472:	60 81       	ld	r22, Z
    7474:	71 81       	ldd	r23, Z+1	; 0x01
    7476:	82 81       	ldd	r24, Z+2	; 0x02
    7478:	93 81       	ldd	r25, Z+3	; 0x03
    747a:	20 e0       	ldi	r18, 0x00	; 0
    747c:	3f ef       	ldi	r19, 0xFF	; 255
    747e:	4f e7       	ldi	r20, 0x7F	; 127
    7480:	57 e4       	ldi	r21, 0x47	; 71
    7482:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <__gtsf2>
    7486:	18 16       	cp	r1, r24
    7488:	0c f0       	brlt	.+2      	; 0x748c <wprowadz_numer+0x272>
    748a:	43 c0       	rjmp	.+134    	; 0x7512 <wprowadz_numer+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    748c:	fe 01       	movw	r30, r28
    748e:	e3 59       	subi	r30, 0x93	; 147
    7490:	ff 4f       	sbci	r31, 0xFF	; 255
    7492:	60 81       	ld	r22, Z
    7494:	71 81       	ldd	r23, Z+1	; 0x01
    7496:	82 81       	ldd	r24, Z+2	; 0x02
    7498:	93 81       	ldd	r25, Z+3	; 0x03
    749a:	20 e0       	ldi	r18, 0x00	; 0
    749c:	30 e0       	ldi	r19, 0x00	; 0
    749e:	40 e2       	ldi	r20, 0x20	; 32
    74a0:	51 e4       	ldi	r21, 0x41	; 65
    74a2:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    74a6:	dc 01       	movw	r26, r24
    74a8:	cb 01       	movw	r24, r22
    74aa:	8e 01       	movw	r16, r28
    74ac:	09 59       	subi	r16, 0x99	; 153
    74ae:	1f 4f       	sbci	r17, 0xFF	; 255
    74b0:	bc 01       	movw	r22, r24
    74b2:	cd 01       	movw	r24, r26
    74b4:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    74b8:	dc 01       	movw	r26, r24
    74ba:	cb 01       	movw	r24, r22
    74bc:	f8 01       	movw	r30, r16
    74be:	91 83       	std	Z+1, r25	; 0x01
    74c0:	80 83       	st	Z, r24
    74c2:	1f c0       	rjmp	.+62     	; 0x7502 <wprowadz_numer+0x2e8>
    74c4:	fe 01       	movw	r30, r28
    74c6:	eb 59       	subi	r30, 0x9B	; 155
    74c8:	ff 4f       	sbci	r31, 0xFF	; 255
    74ca:	80 e9       	ldi	r24, 0x90	; 144
    74cc:	91 e0       	ldi	r25, 0x01	; 1
    74ce:	91 83       	std	Z+1, r25	; 0x01
    74d0:	80 83       	st	Z, r24
    74d2:	fe 01       	movw	r30, r28
    74d4:	eb 59       	subi	r30, 0x9B	; 155
    74d6:	ff 4f       	sbci	r31, 0xFF	; 255
    74d8:	80 81       	ld	r24, Z
    74da:	91 81       	ldd	r25, Z+1	; 0x01
    74dc:	01 97       	sbiw	r24, 0x01	; 1
    74de:	f1 f7       	brne	.-4      	; 0x74dc <wprowadz_numer+0x2c2>
    74e0:	fe 01       	movw	r30, r28
    74e2:	eb 59       	subi	r30, 0x9B	; 155
    74e4:	ff 4f       	sbci	r31, 0xFF	; 255
    74e6:	91 83       	std	Z+1, r25	; 0x01
    74e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    74ea:	de 01       	movw	r26, r28
    74ec:	a9 59       	subi	r26, 0x99	; 153
    74ee:	bf 4f       	sbci	r27, 0xFF	; 255
    74f0:	fe 01       	movw	r30, r28
    74f2:	e9 59       	subi	r30, 0x99	; 153
    74f4:	ff 4f       	sbci	r31, 0xFF	; 255
    74f6:	80 81       	ld	r24, Z
    74f8:	91 81       	ldd	r25, Z+1	; 0x01
    74fa:	01 97       	sbiw	r24, 0x01	; 1
    74fc:	11 96       	adiw	r26, 0x01	; 1
    74fe:	9c 93       	st	X, r25
    7500:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7502:	fe 01       	movw	r30, r28
    7504:	e9 59       	subi	r30, 0x99	; 153
    7506:	ff 4f       	sbci	r31, 0xFF	; 255
    7508:	80 81       	ld	r24, Z
    750a:	91 81       	ldd	r25, Z+1	; 0x01
    750c:	00 97       	sbiw	r24, 0x00	; 0
    750e:	d1 f6       	brne	.-76     	; 0x74c4 <wprowadz_numer+0x2aa>
    7510:	28 c0       	rjmp	.+80     	; 0x7562 <wprowadz_numer+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7512:	8e 01       	movw	r16, r28
    7514:	09 59       	subi	r16, 0x99	; 153
    7516:	1f 4f       	sbci	r17, 0xFF	; 255
    7518:	fe 01       	movw	r30, r28
    751a:	e7 59       	subi	r30, 0x97	; 151
    751c:	ff 4f       	sbci	r31, 0xFF	; 255
    751e:	60 81       	ld	r22, Z
    7520:	71 81       	ldd	r23, Z+1	; 0x01
    7522:	82 81       	ldd	r24, Z+2	; 0x02
    7524:	93 81       	ldd	r25, Z+3	; 0x03
    7526:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    752a:	dc 01       	movw	r26, r24
    752c:	cb 01       	movw	r24, r22
    752e:	f8 01       	movw	r30, r16
    7530:	91 83       	std	Z+1, r25	; 0x01
    7532:	80 83       	st	Z, r24
    7534:	de 01       	movw	r26, r28
    7536:	ad 59       	subi	r26, 0x9D	; 157
    7538:	bf 4f       	sbci	r27, 0xFF	; 255
    753a:	fe 01       	movw	r30, r28
    753c:	e9 59       	subi	r30, 0x99	; 153
    753e:	ff 4f       	sbci	r31, 0xFF	; 255
    7540:	80 81       	ld	r24, Z
    7542:	91 81       	ldd	r25, Z+1	; 0x01
    7544:	11 96       	adiw	r26, 0x01	; 1
    7546:	9c 93       	st	X, r25
    7548:	8e 93       	st	-X, r24
    754a:	fe 01       	movw	r30, r28
    754c:	ed 59       	subi	r30, 0x9D	; 157
    754e:	ff 4f       	sbci	r31, 0xFF	; 255
    7550:	80 81       	ld	r24, Z
    7552:	91 81       	ldd	r25, Z+1	; 0x01
    7554:	01 97       	sbiw	r24, 0x01	; 1
    7556:	f1 f7       	brne	.-4      	; 0x7554 <wprowadz_numer+0x33a>
    7558:	fe 01       	movw	r30, r28
    755a:	ed 59       	subi	r30, 0x9D	; 157
    755c:	ff 4f       	sbci	r31, 0xFF	; 255
    755e:	91 83       	std	Z+1, r25	; 0x01
    7560:	80 83       	st	Z, r24
				_delay_ms(80);
				if (!(KEY_PIN & (klawisz_NUM))) {
    7562:	e3 e3       	ldi	r30, 0x33	; 51
    7564:	f0 e0       	ldi	r31, 0x00	; 0
    7566:	80 81       	ld	r24, Z
    7568:	88 2f       	mov	r24, r24
    756a:	90 e0       	ldi	r25, 0x00	; 0
    756c:	81 70       	andi	r24, 0x01	; 1
    756e:	90 70       	andi	r25, 0x00	; 0
    7570:	00 97       	sbiw	r24, 0x00	; 0
    7572:	09 f0       	breq	.+2      	; 0x7576 <wprowadz_numer+0x35c>
    7574:	d4 c0       	rjmp	.+424    	; 0x771e <wprowadz_numer+0x504>
					cyfra_int++;
    7576:	80 91 25 02 	lds	r24, 0x0225
    757a:	90 91 26 02 	lds	r25, 0x0226
    757e:	01 96       	adiw	r24, 0x01	; 1
    7580:	90 93 26 02 	sts	0x0226, r25
    7584:	80 93 25 02 	sts	0x0225, r24
    7588:	fe 01       	movw	r30, r28
    758a:	e1 5a       	subi	r30, 0xA1	; 161
    758c:	ff 4f       	sbci	r31, 0xFF	; 255
    758e:	80 e0       	ldi	r24, 0x00	; 0
    7590:	90 e0       	ldi	r25, 0x00	; 0
    7592:	a8 e4       	ldi	r26, 0x48	; 72
    7594:	b3 e4       	ldi	r27, 0x43	; 67
    7596:	80 83       	st	Z, r24
    7598:	91 83       	std	Z+1, r25	; 0x01
    759a:	a2 83       	std	Z+2, r26	; 0x02
    759c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    759e:	8e 01       	movw	r16, r28
    75a0:	05 5a       	subi	r16, 0xA5	; 165
    75a2:	1f 4f       	sbci	r17, 0xFF	; 255
    75a4:	fe 01       	movw	r30, r28
    75a6:	e1 5a       	subi	r30, 0xA1	; 161
    75a8:	ff 4f       	sbci	r31, 0xFF	; 255
    75aa:	60 81       	ld	r22, Z
    75ac:	71 81       	ldd	r23, Z+1	; 0x01
    75ae:	82 81       	ldd	r24, Z+2	; 0x02
    75b0:	93 81       	ldd	r25, Z+3	; 0x03
    75b2:	20 e0       	ldi	r18, 0x00	; 0
    75b4:	30 e0       	ldi	r19, 0x00	; 0
    75b6:	4a e7       	ldi	r20, 0x7A	; 122
    75b8:	55 e4       	ldi	r21, 0x45	; 69
    75ba:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    75be:	dc 01       	movw	r26, r24
    75c0:	cb 01       	movw	r24, r22
    75c2:	f8 01       	movw	r30, r16
    75c4:	80 83       	st	Z, r24
    75c6:	91 83       	std	Z+1, r25	; 0x01
    75c8:	a2 83       	std	Z+2, r26	; 0x02
    75ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    75cc:	fe 01       	movw	r30, r28
    75ce:	e5 5a       	subi	r30, 0xA5	; 165
    75d0:	ff 4f       	sbci	r31, 0xFF	; 255
    75d2:	60 81       	ld	r22, Z
    75d4:	71 81       	ldd	r23, Z+1	; 0x01
    75d6:	82 81       	ldd	r24, Z+2	; 0x02
    75d8:	93 81       	ldd	r25, Z+3	; 0x03
    75da:	20 e0       	ldi	r18, 0x00	; 0
    75dc:	30 e0       	ldi	r19, 0x00	; 0
    75de:	40 e8       	ldi	r20, 0x80	; 128
    75e0:	5f e3       	ldi	r21, 0x3F	; 63
    75e2:	0e 94 29 46 	call	0x8c52	; 0x8c52 <__ltsf2>
    75e6:	88 23       	and	r24, r24
    75e8:	44 f4       	brge	.+16     	; 0x75fa <wprowadz_numer+0x3e0>
		__ticks = 1;
    75ea:	fe 01       	movw	r30, r28
    75ec:	e7 5a       	subi	r30, 0xA7	; 167
    75ee:	ff 4f       	sbci	r31, 0xFF	; 255
    75f0:	81 e0       	ldi	r24, 0x01	; 1
    75f2:	90 e0       	ldi	r25, 0x00	; 0
    75f4:	91 83       	std	Z+1, r25	; 0x01
    75f6:	80 83       	st	Z, r24
    75f8:	64 c0       	rjmp	.+200    	; 0x76c2 <wprowadz_numer+0x4a8>
	else if (__tmp > 65535)
    75fa:	fe 01       	movw	r30, r28
    75fc:	e5 5a       	subi	r30, 0xA5	; 165
    75fe:	ff 4f       	sbci	r31, 0xFF	; 255
    7600:	60 81       	ld	r22, Z
    7602:	71 81       	ldd	r23, Z+1	; 0x01
    7604:	82 81       	ldd	r24, Z+2	; 0x02
    7606:	93 81       	ldd	r25, Z+3	; 0x03
    7608:	20 e0       	ldi	r18, 0x00	; 0
    760a:	3f ef       	ldi	r19, 0xFF	; 255
    760c:	4f e7       	ldi	r20, 0x7F	; 127
    760e:	57 e4       	ldi	r21, 0x47	; 71
    7610:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <__gtsf2>
    7614:	18 16       	cp	r1, r24
    7616:	0c f0       	brlt	.+2      	; 0x761a <wprowadz_numer+0x400>
    7618:	43 c0       	rjmp	.+134    	; 0x76a0 <wprowadz_numer+0x486>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    761a:	fe 01       	movw	r30, r28
    761c:	e1 5a       	subi	r30, 0xA1	; 161
    761e:	ff 4f       	sbci	r31, 0xFF	; 255
    7620:	60 81       	ld	r22, Z
    7622:	71 81       	ldd	r23, Z+1	; 0x01
    7624:	82 81       	ldd	r24, Z+2	; 0x02
    7626:	93 81       	ldd	r25, Z+3	; 0x03
    7628:	20 e0       	ldi	r18, 0x00	; 0
    762a:	30 e0       	ldi	r19, 0x00	; 0
    762c:	40 e2       	ldi	r20, 0x20	; 32
    762e:	51 e4       	ldi	r21, 0x41	; 65
    7630:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    7634:	dc 01       	movw	r26, r24
    7636:	cb 01       	movw	r24, r22
    7638:	8e 01       	movw	r16, r28
    763a:	07 5a       	subi	r16, 0xA7	; 167
    763c:	1f 4f       	sbci	r17, 0xFF	; 255
    763e:	bc 01       	movw	r22, r24
    7640:	cd 01       	movw	r24, r26
    7642:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    7646:	dc 01       	movw	r26, r24
    7648:	cb 01       	movw	r24, r22
    764a:	f8 01       	movw	r30, r16
    764c:	91 83       	std	Z+1, r25	; 0x01
    764e:	80 83       	st	Z, r24
    7650:	1f c0       	rjmp	.+62     	; 0x7690 <wprowadz_numer+0x476>
    7652:	fe 01       	movw	r30, r28
    7654:	e9 5a       	subi	r30, 0xA9	; 169
    7656:	ff 4f       	sbci	r31, 0xFF	; 255
    7658:	80 e9       	ldi	r24, 0x90	; 144
    765a:	91 e0       	ldi	r25, 0x01	; 1
    765c:	91 83       	std	Z+1, r25	; 0x01
    765e:	80 83       	st	Z, r24
    7660:	fe 01       	movw	r30, r28
    7662:	e9 5a       	subi	r30, 0xA9	; 169
    7664:	ff 4f       	sbci	r31, 0xFF	; 255
    7666:	80 81       	ld	r24, Z
    7668:	91 81       	ldd	r25, Z+1	; 0x01
    766a:	01 97       	sbiw	r24, 0x01	; 1
    766c:	f1 f7       	brne	.-4      	; 0x766a <wprowadz_numer+0x450>
    766e:	fe 01       	movw	r30, r28
    7670:	e9 5a       	subi	r30, 0xA9	; 169
    7672:	ff 4f       	sbci	r31, 0xFF	; 255
    7674:	91 83       	std	Z+1, r25	; 0x01
    7676:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7678:	de 01       	movw	r26, r28
    767a:	a7 5a       	subi	r26, 0xA7	; 167
    767c:	bf 4f       	sbci	r27, 0xFF	; 255
    767e:	fe 01       	movw	r30, r28
    7680:	e7 5a       	subi	r30, 0xA7	; 167
    7682:	ff 4f       	sbci	r31, 0xFF	; 255
    7684:	80 81       	ld	r24, Z
    7686:	91 81       	ldd	r25, Z+1	; 0x01
    7688:	01 97       	sbiw	r24, 0x01	; 1
    768a:	11 96       	adiw	r26, 0x01	; 1
    768c:	9c 93       	st	X, r25
    768e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7690:	fe 01       	movw	r30, r28
    7692:	e7 5a       	subi	r30, 0xA7	; 167
    7694:	ff 4f       	sbci	r31, 0xFF	; 255
    7696:	80 81       	ld	r24, Z
    7698:	91 81       	ldd	r25, Z+1	; 0x01
    769a:	00 97       	sbiw	r24, 0x00	; 0
    769c:	d1 f6       	brne	.-76     	; 0x7652 <wprowadz_numer+0x438>
    769e:	28 c0       	rjmp	.+80     	; 0x76f0 <wprowadz_numer+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    76a0:	8e 01       	movw	r16, r28
    76a2:	07 5a       	subi	r16, 0xA7	; 167
    76a4:	1f 4f       	sbci	r17, 0xFF	; 255
    76a6:	fe 01       	movw	r30, r28
    76a8:	e5 5a       	subi	r30, 0xA5	; 165
    76aa:	ff 4f       	sbci	r31, 0xFF	; 255
    76ac:	60 81       	ld	r22, Z
    76ae:	71 81       	ldd	r23, Z+1	; 0x01
    76b0:	82 81       	ldd	r24, Z+2	; 0x02
    76b2:	93 81       	ldd	r25, Z+3	; 0x03
    76b4:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    76b8:	dc 01       	movw	r26, r24
    76ba:	cb 01       	movw	r24, r22
    76bc:	f8 01       	movw	r30, r16
    76be:	91 83       	std	Z+1, r25	; 0x01
    76c0:	80 83       	st	Z, r24
    76c2:	de 01       	movw	r26, r28
    76c4:	ab 5a       	subi	r26, 0xAB	; 171
    76c6:	bf 4f       	sbci	r27, 0xFF	; 255
    76c8:	fe 01       	movw	r30, r28
    76ca:	e7 5a       	subi	r30, 0xA7	; 167
    76cc:	ff 4f       	sbci	r31, 0xFF	; 255
    76ce:	80 81       	ld	r24, Z
    76d0:	91 81       	ldd	r25, Z+1	; 0x01
    76d2:	11 96       	adiw	r26, 0x01	; 1
    76d4:	9c 93       	st	X, r25
    76d6:	8e 93       	st	-X, r24
    76d8:	fe 01       	movw	r30, r28
    76da:	eb 5a       	subi	r30, 0xAB	; 171
    76dc:	ff 4f       	sbci	r31, 0xFF	; 255
    76de:	80 81       	ld	r24, Z
    76e0:	91 81       	ldd	r25, Z+1	; 0x01
    76e2:	01 97       	sbiw	r24, 0x01	; 1
    76e4:	f1 f7       	brne	.-4      	; 0x76e2 <wprowadz_numer+0x4c8>
    76e6:	fe 01       	movw	r30, r28
    76e8:	eb 5a       	subi	r30, 0xAB	; 171
    76ea:	ff 4f       	sbci	r31, 0xFF	; 255
    76ec:	91 83       	std	Z+1, r25	; 0x01
    76ee:	80 83       	st	Z, r24
					_delay_ms(200);
					if (cyfra_int > 9)
    76f0:	80 91 25 02 	lds	r24, 0x0225
    76f4:	90 91 26 02 	lds	r25, 0x0226
    76f8:	8a 30       	cpi	r24, 0x0A	; 10
    76fa:	91 05       	cpc	r25, r1
    76fc:	24 f0       	brlt	.+8      	; 0x7706 <wprowadz_numer+0x4ec>
						cyfra_int = 0; // jeøeli wybrana cyfra >9 to jπ wyzeruje
    76fe:	10 92 26 02 	sts	0x0226, r1
    7702:	10 92 25 02 	sts	0x0225, r1
					wyswietl_numer(cyfra_int);
    7706:	80 91 25 02 	lds	r24, 0x0225
    770a:	90 91 26 02 	lds	r25, 0x0226
    770e:	0e 94 4e 2b 	call	0x569c	; 0x569c <wyswietl_numer>
					komunikat_glosowy(cyfra_int);
    7712:	80 91 25 02 	lds	r24, 0x0225
    7716:	90 91 26 02 	lds	r25, 0x0226
    771a:	0e 94 5c 00 	call	0xb8	; 0xb8 <komunikat_glosowy>
		} else if (i == 2) {
			komunikat_glosowy(14);
		}

//		komunikat_glosowy(cyfra);
		while (klawisz_ENT_pressed) { //dopÛki klawisz LED_enter nie jest wcisniety
    771e:	e3 e3       	ldi	r30, 0x33	; 51
    7720:	f0 e0       	ldi	r31, 0x00	; 0
    7722:	80 81       	ld	r24, Z
    7724:	88 2f       	mov	r24, r24
    7726:	90 e0       	ldi	r25, 0x00	; 0
    7728:	82 70       	andi	r24, 0x02	; 2
    772a:	90 70       	andi	r25, 0x00	; 0
    772c:	00 97       	sbiw	r24, 0x00	; 0
    772e:	09 f0       	breq	.+2      	; 0x7732 <wprowadz_numer+0x518>
    7730:	5a ce       	rjmp	.-844    	; 0x73e6 <wprowadz_numer+0x1cc>
					komunikat_glosowy(cyfra_int);
				}
			}
		}
		//zapis numeru do tablicy w formacie uint8_t
			niewidomy_int[i] = cyfra_int; //zapisanie inta do tablicy niewidomego
    7732:	80 91 24 02 	lds	r24, 0x0224
    7736:	88 2f       	mov	r24, r24
    7738:	90 e0       	ldi	r25, 0x00	; 0
    773a:	20 91 25 02 	lds	r18, 0x0225
    773e:	30 91 26 02 	lds	r19, 0x0226
    7742:	88 0f       	add	r24, r24
    7744:	99 1f       	adc	r25, r25
    7746:	fc 01       	movw	r30, r24
    7748:	e4 5d       	subi	r30, 0xD4	; 212
    774a:	fd 4f       	sbci	r31, 0xFD	; 253
    774c:	31 83       	std	Z+1, r19	; 0x01
    774e:	20 83       	st	Z, r18
			cyfra_char = cyfra_int+48;
    7750:	80 91 25 02 	lds	r24, 0x0225
    7754:	90 91 26 02 	lds	r25, 0x0226
    7758:	80 5d       	subi	r24, 0xD0	; 208
    775a:	80 93 27 02 	sts	0x0227, r24
			niewidomy_char[i] = cyfra_char; //zapisanie stringa do tablicy niewidomego
    775e:	80 91 24 02 	lds	r24, 0x0224
    7762:	88 2f       	mov	r24, r24
    7764:	90 e0       	ldi	r25, 0x00	; 0
    7766:	20 91 27 02 	lds	r18, 0x0227
    776a:	fc 01       	movw	r30, r24
    776c:	e8 5d       	subi	r30, 0xD8	; 216
    776e:	fd 4f       	sbci	r31, 0xFD	; 253
    7770:	20 83       	st	Z, r18
}

// funkcja wprowadzajπca numer i kierunek----------------------------------------------------------------------------------------
void wprowadz_numer() {
	//numer linii
	for (i = 0; i < 3; i++) {
    7772:	80 91 24 02 	lds	r24, 0x0224
    7776:	8f 5f       	subi	r24, 0xFF	; 255
    7778:	80 93 24 02 	sts	0x0224, r24
    777c:	80 91 24 02 	lds	r24, 0x0224
    7780:	83 30       	cpi	r24, 0x03	; 3
    7782:	08 f4       	brcc	.+2      	; 0x7786 <wprowadz_numer+0x56c>
    7784:	5a cd       	rjmp	.-1356   	; 0x723a <wprowadz_numer+0x20>
			niewidomy_int[i] = cyfra_int; //zapisanie inta do tablicy niewidomego
			cyfra_char = cyfra_int+48;
			niewidomy_char[i] = cyfra_char; //zapisanie stringa do tablicy niewidomego
	}
	//wybor kierunku
	komunikat_glosowy(19);
    7786:	83 e1       	ldi	r24, 0x13	; 19
    7788:	0e 94 5c 00 	call	0xb8	; 0xb8 <komunikat_glosowy>
	if (niewidomy_int[0] == 0 && niewidomy_int[1] == 0 && niewidomy_int[2] == 4) {        //4
    778c:	80 91 2c 02 	lds	r24, 0x022C
    7790:	90 91 2d 02 	lds	r25, 0x022D
    7794:	00 97       	sbiw	r24, 0x00	; 0
    7796:	e1 f4       	brne	.+56     	; 0x77d0 <wprowadz_numer+0x5b6>
    7798:	80 91 2e 02 	lds	r24, 0x022E
    779c:	90 91 2f 02 	lds	r25, 0x022F
    77a0:	00 97       	sbiw	r24, 0x00	; 0
    77a2:	b1 f4       	brne	.+44     	; 0x77d0 <wprowadz_numer+0x5b6>
    77a4:	80 91 30 02 	lds	r24, 0x0230
    77a8:	90 91 31 02 	lds	r25, 0x0231
    77ac:	84 30       	cpi	r24, 0x04	; 4
    77ae:	91 05       	cpc	r25, r1
    77b0:	79 f4       	brne	.+30     	; 0x77d0 <wprowadz_numer+0x5b6>
		kierunek_A = 50; kierunek_B = 51; cyfra_int = kierunek_A;
    77b2:	82 e3       	ldi	r24, 0x32	; 50
    77b4:	80 93 34 02 	sts	0x0234, r24
    77b8:	83 e3       	ldi	r24, 0x33	; 51
    77ba:	80 93 35 02 	sts	0x0235, r24
    77be:	80 91 34 02 	lds	r24, 0x0234
    77c2:	88 2f       	mov	r24, r24
    77c4:	90 e0       	ldi	r25, 0x00	; 0
    77c6:	90 93 26 02 	sts	0x0226, r25
    77ca:	80 93 25 02 	sts	0x0225, r24
    77ce:	6a c3       	rjmp	.+1748   	; 0x7ea4 <wprowadz_numer+0xc8a>
	} else if (niewidomy_int[0] == 0 && niewidomy_int[1] == 1 && niewidomy_int[2] == 1) { //11
    77d0:	80 91 2c 02 	lds	r24, 0x022C
    77d4:	90 91 2d 02 	lds	r25, 0x022D
    77d8:	00 97       	sbiw	r24, 0x00	; 0
    77da:	e9 f4       	brne	.+58     	; 0x7816 <wprowadz_numer+0x5fc>
    77dc:	80 91 2e 02 	lds	r24, 0x022E
    77e0:	90 91 2f 02 	lds	r25, 0x022F
    77e4:	81 30       	cpi	r24, 0x01	; 1
    77e6:	91 05       	cpc	r25, r1
    77e8:	b1 f4       	brne	.+44     	; 0x7816 <wprowadz_numer+0x5fc>
    77ea:	80 91 30 02 	lds	r24, 0x0230
    77ee:	90 91 31 02 	lds	r25, 0x0231
    77f2:	81 30       	cpi	r24, 0x01	; 1
    77f4:	91 05       	cpc	r25, r1
    77f6:	79 f4       	brne	.+30     	; 0x7816 <wprowadz_numer+0x5fc>
		kierunek_A = 40; kierunek_B = 46; cyfra_int = kierunek_A;
    77f8:	88 e2       	ldi	r24, 0x28	; 40
    77fa:	80 93 34 02 	sts	0x0234, r24
    77fe:	8e e2       	ldi	r24, 0x2E	; 46
    7800:	80 93 35 02 	sts	0x0235, r24
    7804:	80 91 34 02 	lds	r24, 0x0234
    7808:	88 2f       	mov	r24, r24
    780a:	90 e0       	ldi	r25, 0x00	; 0
    780c:	90 93 26 02 	sts	0x0226, r25
    7810:	80 93 25 02 	sts	0x0225, r24
    7814:	47 c3       	rjmp	.+1678   	; 0x7ea4 <wprowadz_numer+0xc8a>
	} else if (niewidomy_int[0] == 0 && niewidomy_int[1] == 2 && niewidomy_int[2] == 0) { //20
    7816:	80 91 2c 02 	lds	r24, 0x022C
    781a:	90 91 2d 02 	lds	r25, 0x022D
    781e:	00 97       	sbiw	r24, 0x00	; 0
    7820:	e1 f4       	brne	.+56     	; 0x785a <wprowadz_numer+0x640>
    7822:	80 91 2e 02 	lds	r24, 0x022E
    7826:	90 91 2f 02 	lds	r25, 0x022F
    782a:	82 30       	cpi	r24, 0x02	; 2
    782c:	91 05       	cpc	r25, r1
    782e:	a9 f4       	brne	.+42     	; 0x785a <wprowadz_numer+0x640>
    7830:	80 91 30 02 	lds	r24, 0x0230
    7834:	90 91 31 02 	lds	r25, 0x0231
    7838:	00 97       	sbiw	r24, 0x00	; 0
    783a:	79 f4       	brne	.+30     	; 0x785a <wprowadz_numer+0x640>
		kierunek_A = 35; kierunek_B = 36; cyfra_int = kierunek_A;
    783c:	83 e2       	ldi	r24, 0x23	; 35
    783e:	80 93 34 02 	sts	0x0234, r24
    7842:	84 e2       	ldi	r24, 0x24	; 36
    7844:	80 93 35 02 	sts	0x0235, r24
    7848:	80 91 34 02 	lds	r24, 0x0234
    784c:	88 2f       	mov	r24, r24
    784e:	90 e0       	ldi	r25, 0x00	; 0
    7850:	90 93 26 02 	sts	0x0226, r25
    7854:	80 93 25 02 	sts	0x0225, r24
    7858:	25 c3       	rjmp	.+1610   	; 0x7ea4 <wprowadz_numer+0xc8a>
	} else if (niewidomy_int[0] == 0 && niewidomy_int[1] == 2 && niewidomy_int[2] == 5) { //25
    785a:	80 91 2c 02 	lds	r24, 0x022C
    785e:	90 91 2d 02 	lds	r25, 0x022D
    7862:	00 97       	sbiw	r24, 0x00	; 0
    7864:	e9 f4       	brne	.+58     	; 0x78a0 <wprowadz_numer+0x686>
    7866:	80 91 2e 02 	lds	r24, 0x022E
    786a:	90 91 2f 02 	lds	r25, 0x022F
    786e:	82 30       	cpi	r24, 0x02	; 2
    7870:	91 05       	cpc	r25, r1
    7872:	b1 f4       	brne	.+44     	; 0x78a0 <wprowadz_numer+0x686>
    7874:	80 91 30 02 	lds	r24, 0x0230
    7878:	90 91 31 02 	lds	r25, 0x0231
    787c:	85 30       	cpi	r24, 0x05	; 5
    787e:	91 05       	cpc	r25, r1
    7880:	79 f4       	brne	.+30     	; 0x78a0 <wprowadz_numer+0x686>
		kierunek_A = 48; kierunek_B = 49; cyfra_int = kierunek_A;
    7882:	80 e3       	ldi	r24, 0x30	; 48
    7884:	80 93 34 02 	sts	0x0234, r24
    7888:	81 e3       	ldi	r24, 0x31	; 49
    788a:	80 93 35 02 	sts	0x0235, r24
    788e:	80 91 34 02 	lds	r24, 0x0234
    7892:	88 2f       	mov	r24, r24
    7894:	90 e0       	ldi	r25, 0x00	; 0
    7896:	90 93 26 02 	sts	0x0226, r25
    789a:	80 93 25 02 	sts	0x0225, r24
    789e:	02 c3       	rjmp	.+1540   	; 0x7ea4 <wprowadz_numer+0xc8a>
	} else if (niewidomy_int[0] == 0 && niewidomy_int[1] == 2 && niewidomy_int[2] == 8) { //28
    78a0:	80 91 2c 02 	lds	r24, 0x022C
    78a4:	90 91 2d 02 	lds	r25, 0x022D
    78a8:	00 97       	sbiw	r24, 0x00	; 0
    78aa:	e9 f4       	brne	.+58     	; 0x78e6 <wprowadz_numer+0x6cc>
    78ac:	80 91 2e 02 	lds	r24, 0x022E
    78b0:	90 91 2f 02 	lds	r25, 0x022F
    78b4:	82 30       	cpi	r24, 0x02	; 2
    78b6:	91 05       	cpc	r25, r1
    78b8:	b1 f4       	brne	.+44     	; 0x78e6 <wprowadz_numer+0x6cc>
    78ba:	80 91 30 02 	lds	r24, 0x0230
    78be:	90 91 31 02 	lds	r25, 0x0231
    78c2:	88 30       	cpi	r24, 0x08	; 8
    78c4:	91 05       	cpc	r25, r1
    78c6:	79 f4       	brne	.+30     	; 0x78e6 <wprowadz_numer+0x6cc>
		kierunek_A = 32;kierunek_B = 47; cyfra_int = kierunek_A;
    78c8:	80 e2       	ldi	r24, 0x20	; 32
    78ca:	80 93 34 02 	sts	0x0234, r24
    78ce:	8f e2       	ldi	r24, 0x2F	; 47
    78d0:	80 93 35 02 	sts	0x0235, r24
    78d4:	80 91 34 02 	lds	r24, 0x0234
    78d8:	88 2f       	mov	r24, r24
    78da:	90 e0       	ldi	r25, 0x00	; 0
    78dc:	90 93 26 02 	sts	0x0226, r25
    78e0:	80 93 25 02 	sts	0x0225, r24
    78e4:	df c2       	rjmp	.+1470   	; 0x7ea4 <wprowadz_numer+0xc8a>
	} else if (niewidomy_int[0] == 1 && niewidomy_int[1] == 1 && niewidomy_int[2] == 2) { //112
    78e6:	80 91 2c 02 	lds	r24, 0x022C
    78ea:	90 91 2d 02 	lds	r25, 0x022D
    78ee:	81 30       	cpi	r24, 0x01	; 1
    78f0:	91 05       	cpc	r25, r1
    78f2:	e9 f4       	brne	.+58     	; 0x792e <wprowadz_numer+0x714>
    78f4:	80 91 2e 02 	lds	r24, 0x022E
    78f8:	90 91 2f 02 	lds	r25, 0x022F
    78fc:	81 30       	cpi	r24, 0x01	; 1
    78fe:	91 05       	cpc	r25, r1
    7900:	b1 f4       	brne	.+44     	; 0x792e <wprowadz_numer+0x714>
    7902:	80 91 30 02 	lds	r24, 0x0230
    7906:	90 91 31 02 	lds	r25, 0x0231
    790a:	82 30       	cpi	r24, 0x02	; 2
    790c:	91 05       	cpc	r25, r1
    790e:	79 f4       	brne	.+30     	; 0x792e <wprowadz_numer+0x714>
		kierunek_A = 52; kierunek_B = 53; cyfra_int = kierunek_A;
    7910:	84 e3       	ldi	r24, 0x34	; 52
    7912:	80 93 34 02 	sts	0x0234, r24
    7916:	85 e3       	ldi	r24, 0x35	; 53
    7918:	80 93 35 02 	sts	0x0235, r24
    791c:	80 91 34 02 	lds	r24, 0x0234
    7920:	88 2f       	mov	r24, r24
    7922:	90 e0       	ldi	r25, 0x00	; 0
    7924:	90 93 26 02 	sts	0x0226, r25
    7928:	80 93 25 02 	sts	0x0225, r24
    792c:	bb c2       	rjmp	.+1398   	; 0x7ea4 <wprowadz_numer+0xc8a>
	} else if (niewidomy_int[0] == 1 && niewidomy_int[1] == 2 && niewidomy_int[2] == 2) { //122
    792e:	80 91 2c 02 	lds	r24, 0x022C
    7932:	90 91 2d 02 	lds	r25, 0x022D
    7936:	81 30       	cpi	r24, 0x01	; 1
    7938:	91 05       	cpc	r25, r1
    793a:	e9 f4       	brne	.+58     	; 0x7976 <wprowadz_numer+0x75c>
    793c:	80 91 2e 02 	lds	r24, 0x022E
    7940:	90 91 2f 02 	lds	r25, 0x022F
    7944:	82 30       	cpi	r24, 0x02	; 2
    7946:	91 05       	cpc	r25, r1
    7948:	b1 f4       	brne	.+44     	; 0x7976 <wprowadz_numer+0x75c>
    794a:	80 91 30 02 	lds	r24, 0x0230
    794e:	90 91 31 02 	lds	r25, 0x0231
    7952:	82 30       	cpi	r24, 0x02	; 2
    7954:	91 05       	cpc	r25, r1
    7956:	79 f4       	brne	.+30     	; 0x7976 <wprowadz_numer+0x75c>
		kierunek_A = 32; kierunek_B = 33; cyfra_int = kierunek_A;
    7958:	80 e2       	ldi	r24, 0x20	; 32
    795a:	80 93 34 02 	sts	0x0234, r24
    795e:	81 e2       	ldi	r24, 0x21	; 33
    7960:	80 93 35 02 	sts	0x0235, r24
    7964:	80 91 34 02 	lds	r24, 0x0234
    7968:	88 2f       	mov	r24, r24
    796a:	90 e0       	ldi	r25, 0x00	; 0
    796c:	90 93 26 02 	sts	0x0226, r25
    7970:	80 93 25 02 	sts	0x0225, r24
    7974:	97 c2       	rjmp	.+1326   	; 0x7ea4 <wprowadz_numer+0xc8a>
	} else if (niewidomy_int[0] == 1 && niewidomy_int[1] == 3 && niewidomy_int[2] == 3) { //133
    7976:	80 91 2c 02 	lds	r24, 0x022C
    797a:	90 91 2d 02 	lds	r25, 0x022D
    797e:	81 30       	cpi	r24, 0x01	; 1
    7980:	91 05       	cpc	r25, r1
    7982:	e9 f4       	brne	.+58     	; 0x79be <wprowadz_numer+0x7a4>
    7984:	80 91 2e 02 	lds	r24, 0x022E
    7988:	90 91 2f 02 	lds	r25, 0x022F
    798c:	83 30       	cpi	r24, 0x03	; 3
    798e:	91 05       	cpc	r25, r1
    7990:	b1 f4       	brne	.+44     	; 0x79be <wprowadz_numer+0x7a4>
    7992:	80 91 30 02 	lds	r24, 0x0230
    7996:	90 91 31 02 	lds	r25, 0x0231
    799a:	83 30       	cpi	r24, 0x03	; 3
    799c:	91 05       	cpc	r25, r1
    799e:	79 f4       	brne	.+30     	; 0x79be <wprowadz_numer+0x7a4>
		kierunek_A = 61; kierunek_B = 62; cyfra_int = kierunek_A;
    79a0:	8d e3       	ldi	r24, 0x3D	; 61
    79a2:	80 93 34 02 	sts	0x0234, r24
    79a6:	8e e3       	ldi	r24, 0x3E	; 62
    79a8:	80 93 35 02 	sts	0x0235, r24
    79ac:	80 91 34 02 	lds	r24, 0x0234
    79b0:	88 2f       	mov	r24, r24
    79b2:	90 e0       	ldi	r25, 0x00	; 0
    79b4:	90 93 26 02 	sts	0x0226, r25
    79b8:	80 93 25 02 	sts	0x0225, r24
    79bc:	73 c2       	rjmp	.+1254   	; 0x7ea4 <wprowadz_numer+0xc8a>
	} else if (niewidomy_int[0] == 1 && niewidomy_int[1] == 5 && niewidomy_int[2] == 4) { //154
    79be:	80 91 2c 02 	lds	r24, 0x022C
    79c2:	90 91 2d 02 	lds	r25, 0x022D
    79c6:	81 30       	cpi	r24, 0x01	; 1
    79c8:	91 05       	cpc	r25, r1
    79ca:	e9 f4       	brne	.+58     	; 0x7a06 <wprowadz_numer+0x7ec>
    79cc:	80 91 2e 02 	lds	r24, 0x022E
    79d0:	90 91 2f 02 	lds	r25, 0x022F
    79d4:	85 30       	cpi	r24, 0x05	; 5
    79d6:	91 05       	cpc	r25, r1
    79d8:	b1 f4       	brne	.+44     	; 0x7a06 <wprowadz_numer+0x7ec>
    79da:	80 91 30 02 	lds	r24, 0x0230
    79de:	90 91 31 02 	lds	r25, 0x0231
    79e2:	84 30       	cpi	r24, 0x04	; 4
    79e4:	91 05       	cpc	r25, r1
    79e6:	79 f4       	brne	.+30     	; 0x7a06 <wprowadz_numer+0x7ec>
		kierunek_A = 30; kierunek_B = 34; cyfra_int = kierunek_A;
    79e8:	8e e1       	ldi	r24, 0x1E	; 30
    79ea:	80 93 34 02 	sts	0x0234, r24
    79ee:	82 e2       	ldi	r24, 0x22	; 34
    79f0:	80 93 35 02 	sts	0x0235, r24
    79f4:	80 91 34 02 	lds	r24, 0x0234
    79f8:	88 2f       	mov	r24, r24
    79fa:	90 e0       	ldi	r25, 0x00	; 0
    79fc:	90 93 26 02 	sts	0x0226, r25
    7a00:	80 93 25 02 	sts	0x0225, r24
    7a04:	4f c2       	rjmp	.+1182   	; 0x7ea4 <wprowadz_numer+0xc8a>
	} else if (niewidomy_int[0] == 1 && niewidomy_int[1] == 5 && niewidomy_int[2] == 8) { //158
    7a06:	80 91 2c 02 	lds	r24, 0x022C
    7a0a:	90 91 2d 02 	lds	r25, 0x022D
    7a0e:	81 30       	cpi	r24, 0x01	; 1
    7a10:	91 05       	cpc	r25, r1
    7a12:	e9 f4       	brne	.+58     	; 0x7a4e <wprowadz_numer+0x834>
    7a14:	80 91 2e 02 	lds	r24, 0x022E
    7a18:	90 91 2f 02 	lds	r25, 0x022F
    7a1c:	85 30       	cpi	r24, 0x05	; 5
    7a1e:	91 05       	cpc	r25, r1
    7a20:	b1 f4       	brne	.+44     	; 0x7a4e <wprowadz_numer+0x834>
    7a22:	80 91 30 02 	lds	r24, 0x0230
    7a26:	90 91 31 02 	lds	r25, 0x0231
    7a2a:	88 30       	cpi	r24, 0x08	; 8
    7a2c:	91 05       	cpc	r25, r1
    7a2e:	79 f4       	brne	.+30     	; 0x7a4e <wprowadz_numer+0x834>
		kierunek_A = 42; kierunek_B = 43;cyfra_int = kierunek_A;
    7a30:	8a e2       	ldi	r24, 0x2A	; 42
    7a32:	80 93 34 02 	sts	0x0234, r24
    7a36:	8b e2       	ldi	r24, 0x2B	; 43
    7a38:	80 93 35 02 	sts	0x0235, r24
    7a3c:	80 91 34 02 	lds	r24, 0x0234
    7a40:	88 2f       	mov	r24, r24
    7a42:	90 e0       	ldi	r25, 0x00	; 0
    7a44:	90 93 26 02 	sts	0x0226, r25
    7a48:	80 93 25 02 	sts	0x0225, r24
    7a4c:	2b c2       	rjmp	.+1110   	; 0x7ea4 <wprowadz_numer+0xc8a>
	} else if (niewidomy_int[0] == 1 && niewidomy_int[1] == 7 && niewidomy_int[2] == 2) { //172
    7a4e:	80 91 2c 02 	lds	r24, 0x022C
    7a52:	90 91 2d 02 	lds	r25, 0x022D
    7a56:	81 30       	cpi	r24, 0x01	; 1
    7a58:	91 05       	cpc	r25, r1
    7a5a:	e9 f4       	brne	.+58     	; 0x7a96 <wprowadz_numer+0x87c>
    7a5c:	80 91 2e 02 	lds	r24, 0x022E
    7a60:	90 91 2f 02 	lds	r25, 0x022F
    7a64:	87 30       	cpi	r24, 0x07	; 7
    7a66:	91 05       	cpc	r25, r1
    7a68:	b1 f4       	brne	.+44     	; 0x7a96 <wprowadz_numer+0x87c>
    7a6a:	80 91 30 02 	lds	r24, 0x0230
    7a6e:	90 91 31 02 	lds	r25, 0x0231
    7a72:	82 30       	cpi	r24, 0x02	; 2
    7a74:	91 05       	cpc	r25, r1
    7a76:	79 f4       	brne	.+30     	; 0x7a96 <wprowadz_numer+0x87c>
		kierunek_A = 41; kierunek_B = 37; cyfra_int = kierunek_A;
    7a78:	89 e2       	ldi	r24, 0x29	; 41
    7a7a:	80 93 34 02 	sts	0x0234, r24
    7a7e:	85 e2       	ldi	r24, 0x25	; 37
    7a80:	80 93 35 02 	sts	0x0235, r24
    7a84:	80 91 34 02 	lds	r24, 0x0234
    7a88:	88 2f       	mov	r24, r24
    7a8a:	90 e0       	ldi	r25, 0x00	; 0
    7a8c:	90 93 26 02 	sts	0x0226, r25
    7a90:	80 93 25 02 	sts	0x0225, r24
    7a94:	07 c2       	rjmp	.+1038   	; 0x7ea4 <wprowadz_numer+0xc8a>
	} else if (niewidomy_int[0] == 1 && niewidomy_int[1] == 8 && niewidomy_int[2] == 4) { //184
    7a96:	80 91 2c 02 	lds	r24, 0x022C
    7a9a:	90 91 2d 02 	lds	r25, 0x022D
    7a9e:	81 30       	cpi	r24, 0x01	; 1
    7aa0:	91 05       	cpc	r25, r1
    7aa2:	e9 f4       	brne	.+58     	; 0x7ade <wprowadz_numer+0x8c4>
    7aa4:	80 91 2e 02 	lds	r24, 0x022E
    7aa8:	90 91 2f 02 	lds	r25, 0x022F
    7aac:	88 30       	cpi	r24, 0x08	; 8
    7aae:	91 05       	cpc	r25, r1
    7ab0:	b1 f4       	brne	.+44     	; 0x7ade <wprowadz_numer+0x8c4>
    7ab2:	80 91 30 02 	lds	r24, 0x0230
    7ab6:	90 91 31 02 	lds	r25, 0x0231
    7aba:	84 30       	cpi	r24, 0x04	; 4
    7abc:	91 05       	cpc	r25, r1
    7abe:	79 f4       	brne	.+30     	; 0x7ade <wprowadz_numer+0x8c4>
		kierunek_A = 40; kierunek_B = 38; cyfra_int = kierunek_A;
    7ac0:	88 e2       	ldi	r24, 0x28	; 40
    7ac2:	80 93 34 02 	sts	0x0234, r24
    7ac6:	86 e2       	ldi	r24, 0x26	; 38
    7ac8:	80 93 35 02 	sts	0x0235, r24
    7acc:	80 91 34 02 	lds	r24, 0x0234
    7ad0:	88 2f       	mov	r24, r24
    7ad2:	90 e0       	ldi	r25, 0x00	; 0
    7ad4:	90 93 26 02 	sts	0x0226, r25
    7ad8:	80 93 25 02 	sts	0x0225, r24
    7adc:	e3 c1       	rjmp	.+966    	; 0x7ea4 <wprowadz_numer+0xc8a>
	} else if (niewidomy_int[0] == 1 && niewidomy_int[1] == 8 && niewidomy_int[2] == 6) { //186
    7ade:	80 91 2c 02 	lds	r24, 0x022C
    7ae2:	90 91 2d 02 	lds	r25, 0x022D
    7ae6:	81 30       	cpi	r24, 0x01	; 1
    7ae8:	91 05       	cpc	r25, r1
    7aea:	e9 f4       	brne	.+58     	; 0x7b26 <wprowadz_numer+0x90c>
    7aec:	80 91 2e 02 	lds	r24, 0x022E
    7af0:	90 91 2f 02 	lds	r25, 0x022F
    7af4:	88 30       	cpi	r24, 0x08	; 8
    7af6:	91 05       	cpc	r25, r1
    7af8:	b1 f4       	brne	.+44     	; 0x7b26 <wprowadz_numer+0x90c>
    7afa:	80 91 30 02 	lds	r24, 0x0230
    7afe:	90 91 31 02 	lds	r25, 0x0231
    7b02:	86 30       	cpi	r24, 0x06	; 6
    7b04:	91 05       	cpc	r25, r1
    7b06:	79 f4       	brne	.+30     	; 0x7b26 <wprowadz_numer+0x90c>
		kierunek_A = 38; kierunek_B = 39; cyfra_int = kierunek_A;
    7b08:	86 e2       	ldi	r24, 0x26	; 38
    7b0a:	80 93 34 02 	sts	0x0234, r24
    7b0e:	87 e2       	ldi	r24, 0x27	; 39
    7b10:	80 93 35 02 	sts	0x0235, r24
    7b14:	80 91 34 02 	lds	r24, 0x0234
    7b18:	88 2f       	mov	r24, r24
    7b1a:	90 e0       	ldi	r25, 0x00	; 0
    7b1c:	90 93 26 02 	sts	0x0226, r25
    7b20:	80 93 25 02 	sts	0x0225, r24
    7b24:	bf c1       	rjmp	.+894    	; 0x7ea4 <wprowadz_numer+0xc8a>
	} else if (niewidomy_int[0] == 1 && niewidomy_int[1] == 8 && niewidomy_int[2] == 9) { //189
    7b26:	80 91 2c 02 	lds	r24, 0x022C
    7b2a:	90 91 2d 02 	lds	r25, 0x022D
    7b2e:	81 30       	cpi	r24, 0x01	; 1
    7b30:	91 05       	cpc	r25, r1
    7b32:	e9 f4       	brne	.+58     	; 0x7b6e <wprowadz_numer+0x954>
    7b34:	80 91 2e 02 	lds	r24, 0x022E
    7b38:	90 91 2f 02 	lds	r25, 0x022F
    7b3c:	88 30       	cpi	r24, 0x08	; 8
    7b3e:	91 05       	cpc	r25, r1
    7b40:	b1 f4       	brne	.+44     	; 0x7b6e <wprowadz_numer+0x954>
    7b42:	80 91 30 02 	lds	r24, 0x0230
    7b46:	90 91 31 02 	lds	r25, 0x0231
    7b4a:	89 30       	cpi	r24, 0x09	; 9
    7b4c:	91 05       	cpc	r25, r1
    7b4e:	79 f4       	brne	.+30     	; 0x7b6e <wprowadz_numer+0x954>
		kierunek_A = 32; kierunek_B = 37; cyfra_int = kierunek_A;
    7b50:	80 e2       	ldi	r24, 0x20	; 32
    7b52:	80 93 34 02 	sts	0x0234, r24
    7b56:	85 e2       	ldi	r24, 0x25	; 37
    7b58:	80 93 35 02 	sts	0x0235, r24
    7b5c:	80 91 34 02 	lds	r24, 0x0234
    7b60:	88 2f       	mov	r24, r24
    7b62:	90 e0       	ldi	r25, 0x00	; 0
    7b64:	90 93 26 02 	sts	0x0226, r25
    7b68:	80 93 25 02 	sts	0x0225, r24
    7b6c:	9b c1       	rjmp	.+822    	; 0x7ea4 <wprowadz_numer+0xc8a>
	} else if (niewidomy_int[0] == 3 && niewidomy_int[1] == 0 && niewidomy_int[2] == 3) { //303
    7b6e:	80 91 2c 02 	lds	r24, 0x022C
    7b72:	90 91 2d 02 	lds	r25, 0x022D
    7b76:	83 30       	cpi	r24, 0x03	; 3
    7b78:	91 05       	cpc	r25, r1
    7b7a:	e1 f4       	brne	.+56     	; 0x7bb4 <wprowadz_numer+0x99a>
    7b7c:	80 91 2e 02 	lds	r24, 0x022E
    7b80:	90 91 2f 02 	lds	r25, 0x022F
    7b84:	00 97       	sbiw	r24, 0x00	; 0
    7b86:	b1 f4       	brne	.+44     	; 0x7bb4 <wprowadz_numer+0x99a>
    7b88:	80 91 30 02 	lds	r24, 0x0230
    7b8c:	90 91 31 02 	lds	r25, 0x0231
    7b90:	83 30       	cpi	r24, 0x03	; 3
    7b92:	91 05       	cpc	r25, r1
    7b94:	79 f4       	brne	.+30     	; 0x7bb4 <wprowadz_numer+0x99a>
		kierunek_A = 56; kierunek_B = 57; cyfra_int = kierunek_A;
    7b96:	88 e3       	ldi	r24, 0x38	; 56
    7b98:	80 93 34 02 	sts	0x0234, r24
    7b9c:	89 e3       	ldi	r24, 0x39	; 57
    7b9e:	80 93 35 02 	sts	0x0235, r24
    7ba2:	80 91 34 02 	lds	r24, 0x0234
    7ba6:	88 2f       	mov	r24, r24
    7ba8:	90 e0       	ldi	r25, 0x00	; 0
    7baa:	90 93 26 02 	sts	0x0226, r25
    7bae:	80 93 25 02 	sts	0x0225, r24
    7bb2:	78 c1       	rjmp	.+752    	; 0x7ea4 <wprowadz_numer+0xc8a>
	} else if (niewidomy_int[0] == 3 && niewidomy_int[1] == 2 && niewidomy_int[2] == 0) { //320
    7bb4:	80 91 2c 02 	lds	r24, 0x022C
    7bb8:	90 91 2d 02 	lds	r25, 0x022D
    7bbc:	83 30       	cpi	r24, 0x03	; 3
    7bbe:	91 05       	cpc	r25, r1
    7bc0:	e1 f4       	brne	.+56     	; 0x7bfa <wprowadz_numer+0x9e0>
    7bc2:	80 91 2e 02 	lds	r24, 0x022E
    7bc6:	90 91 2f 02 	lds	r25, 0x022F
    7bca:	82 30       	cpi	r24, 0x02	; 2
    7bcc:	91 05       	cpc	r25, r1
    7bce:	a9 f4       	brne	.+42     	; 0x7bfa <wprowadz_numer+0x9e0>
    7bd0:	80 91 30 02 	lds	r24, 0x0230
    7bd4:	90 91 31 02 	lds	r25, 0x0231
    7bd8:	00 97       	sbiw	r24, 0x00	; 0
    7bda:	79 f4       	brne	.+30     	; 0x7bfa <wprowadz_numer+0x9e0>
		kierunek_A = 54; kierunek_B = 55; cyfra_int = kierunek_A;
    7bdc:	86 e3       	ldi	r24, 0x36	; 54
    7bde:	80 93 34 02 	sts	0x0234, r24
    7be2:	87 e3       	ldi	r24, 0x37	; 55
    7be4:	80 93 35 02 	sts	0x0235, r24
    7be8:	80 91 34 02 	lds	r24, 0x0234
    7bec:	88 2f       	mov	r24, r24
    7bee:	90 e0       	ldi	r25, 0x00	; 0
    7bf0:	90 93 26 02 	sts	0x0226, r25
    7bf4:	80 93 25 02 	sts	0x0225, r24
    7bf8:	55 c1       	rjmp	.+682    	; 0x7ea4 <wprowadz_numer+0xc8a>
	} else if (niewidomy_int[0] == 5 && niewidomy_int[1] == 0 && niewidomy_int[2] == 3) { //503
    7bfa:	80 91 2c 02 	lds	r24, 0x022C
    7bfe:	90 91 2d 02 	lds	r25, 0x022D
    7c02:	85 30       	cpi	r24, 0x05	; 5
    7c04:	91 05       	cpc	r25, r1
    7c06:	e1 f4       	brne	.+56     	; 0x7c40 <wprowadz_numer+0xa26>
    7c08:	80 91 2e 02 	lds	r24, 0x022E
    7c0c:	90 91 2f 02 	lds	r25, 0x022F
    7c10:	00 97       	sbiw	r24, 0x00	; 0
    7c12:	b1 f4       	brne	.+44     	; 0x7c40 <wprowadz_numer+0xa26>
    7c14:	80 91 30 02 	lds	r24, 0x0230
    7c18:	90 91 31 02 	lds	r25, 0x0231
    7c1c:	83 30       	cpi	r24, 0x03	; 3
    7c1e:	91 05       	cpc	r25, r1
    7c20:	79 f4       	brne	.+30     	; 0x7c40 <wprowadz_numer+0xa26>
		kierunek_A = 44; kierunek_B = 45; cyfra_int = kierunek_A;
    7c22:	8c e2       	ldi	r24, 0x2C	; 44
    7c24:	80 93 34 02 	sts	0x0234, r24
    7c28:	8d e2       	ldi	r24, 0x2D	; 45
    7c2a:	80 93 35 02 	sts	0x0235, r24
    7c2e:	80 91 34 02 	lds	r24, 0x0234
    7c32:	88 2f       	mov	r24, r24
    7c34:	90 e0       	ldi	r25, 0x00	; 0
    7c36:	90 93 26 02 	sts	0x0226, r25
    7c3a:	80 93 25 02 	sts	0x0225, r24
    7c3e:	32 c1       	rjmp	.+612    	; 0x7ea4 <wprowadz_numer+0xc8a>
	} else if (niewidomy_int[0] == 5 && niewidomy_int[1] == 2 && niewidomy_int[2] == 3) { //523
    7c40:	80 91 2c 02 	lds	r24, 0x022C
    7c44:	90 91 2d 02 	lds	r25, 0x022D
    7c48:	85 30       	cpi	r24, 0x05	; 5
    7c4a:	91 05       	cpc	r25, r1
    7c4c:	e9 f4       	brne	.+58     	; 0x7c88 <wprowadz_numer+0xa6e>
    7c4e:	80 91 2e 02 	lds	r24, 0x022E
    7c52:	90 91 2f 02 	lds	r25, 0x022F
    7c56:	82 30       	cpi	r24, 0x02	; 2
    7c58:	91 05       	cpc	r25, r1
    7c5a:	b1 f4       	brne	.+44     	; 0x7c88 <wprowadz_numer+0xa6e>
    7c5c:	80 91 30 02 	lds	r24, 0x0230
    7c60:	90 91 31 02 	lds	r25, 0x0231
    7c64:	83 30       	cpi	r24, 0x03	; 3
    7c66:	91 05       	cpc	r25, r1
    7c68:	79 f4       	brne	.+30     	; 0x7c88 <wprowadz_numer+0xa6e>
		kierunek_A = 30; kierunek_B = 31; cyfra_int = kierunek_A;
    7c6a:	8e e1       	ldi	r24, 0x1E	; 30
    7c6c:	80 93 34 02 	sts	0x0234, r24
    7c70:	8f e1       	ldi	r24, 0x1F	; 31
    7c72:	80 93 35 02 	sts	0x0235, r24
    7c76:	80 91 34 02 	lds	r24, 0x0234
    7c7a:	88 2f       	mov	r24, r24
    7c7c:	90 e0       	ldi	r25, 0x00	; 0
    7c7e:	90 93 26 02 	sts	0x0226, r25
    7c82:	80 93 25 02 	sts	0x0225, r24
    7c86:	0e c1       	rjmp	.+540    	; 0x7ea4 <wprowadz_numer+0xc8a>
	} else if (niewidomy_int[0] == 7 && niewidomy_int[1] == 1 && niewidomy_int[2] == 4) { //714
    7c88:	80 91 2c 02 	lds	r24, 0x022C
    7c8c:	90 91 2d 02 	lds	r25, 0x022D
    7c90:	87 30       	cpi	r24, 0x07	; 7
    7c92:	91 05       	cpc	r25, r1
    7c94:	e9 f4       	brne	.+58     	; 0x7cd0 <wprowadz_numer+0xab6>
    7c96:	80 91 2e 02 	lds	r24, 0x022E
    7c9a:	90 91 2f 02 	lds	r25, 0x022F
    7c9e:	81 30       	cpi	r24, 0x01	; 1
    7ca0:	91 05       	cpc	r25, r1
    7ca2:	b1 f4       	brne	.+44     	; 0x7cd0 <wprowadz_numer+0xab6>
    7ca4:	80 91 30 02 	lds	r24, 0x0230
    7ca8:	90 91 31 02 	lds	r25, 0x0231
    7cac:	84 30       	cpi	r24, 0x04	; 4
    7cae:	91 05       	cpc	r25, r1
    7cb0:	79 f4       	brne	.+30     	; 0x7cd0 <wprowadz_numer+0xab6>
		kierunek_A = 32; kierunek_B = 60; cyfra_int = kierunek_A;
    7cb2:	80 e2       	ldi	r24, 0x20	; 32
    7cb4:	80 93 34 02 	sts	0x0234, r24
    7cb8:	8c e3       	ldi	r24, 0x3C	; 60
    7cba:	80 93 35 02 	sts	0x0235, r24
    7cbe:	80 91 34 02 	lds	r24, 0x0234
    7cc2:	88 2f       	mov	r24, r24
    7cc4:	90 e0       	ldi	r25, 0x00	; 0
    7cc6:	90 93 26 02 	sts	0x0226, r25
    7cca:	80 93 25 02 	sts	0x0225, r24
    7cce:	ea c0       	rjmp	.+468    	; 0x7ea4 <wprowadz_numer+0xc8a>
	} else if (niewidomy_int[0] == 7 && niewidomy_int[1] == 2 && niewidomy_int[2] == 0) { //720
    7cd0:	80 91 2c 02 	lds	r24, 0x022C
    7cd4:	90 91 2d 02 	lds	r25, 0x022D
    7cd8:	87 30       	cpi	r24, 0x07	; 7
    7cda:	91 05       	cpc	r25, r1
    7cdc:	e1 f4       	brne	.+56     	; 0x7d16 <wprowadz_numer+0xafc>
    7cde:	80 91 2e 02 	lds	r24, 0x022E
    7ce2:	90 91 2f 02 	lds	r25, 0x022F
    7ce6:	82 30       	cpi	r24, 0x02	; 2
    7ce8:	91 05       	cpc	r25, r1
    7cea:	a9 f4       	brne	.+42     	; 0x7d16 <wprowadz_numer+0xafc>
    7cec:	80 91 30 02 	lds	r24, 0x0230
    7cf0:	90 91 31 02 	lds	r25, 0x0231
    7cf4:	00 97       	sbiw	r24, 0x00	; 0
    7cf6:	79 f4       	brne	.+30     	; 0x7d16 <wprowadz_numer+0xafc>
		kierunek_A = 58; kierunek_B = 59; cyfra_int = kierunek_A;
    7cf8:	8a e3       	ldi	r24, 0x3A	; 58
    7cfa:	80 93 34 02 	sts	0x0234, r24
    7cfe:	8b e3       	ldi	r24, 0x3B	; 59
    7d00:	80 93 35 02 	sts	0x0235, r24
    7d04:	80 91 34 02 	lds	r24, 0x0234
    7d08:	88 2f       	mov	r24, r24
    7d0a:	90 e0       	ldi	r25, 0x00	; 0
    7d0c:	90 93 26 02 	sts	0x0226, r25
    7d10:	80 93 25 02 	sts	0x0225, r24
    7d14:	c7 c0       	rjmp	.+398    	; 0x7ea4 <wprowadz_numer+0xc8a>
	} else {
		lcd_locate(1,0); lcd_str("Zly numer");
    7d16:	81 e0       	ldi	r24, 0x01	; 1
    7d18:	60 e0       	ldi	r22, 0x00	; 0
    7d1a:	0e 94 a8 30 	call	0x6150	; 0x6150 <lcd_locate>
    7d1e:	87 ef       	ldi	r24, 0xF7	; 247
    7d20:	91 e0       	ldi	r25, 0x01	; 1
    7d22:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <lcd_str>
    7d26:	fe 01       	movw	r30, r28
    7d28:	ef 5a       	subi	r30, 0xAF	; 175
    7d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    7d2c:	80 e0       	ldi	r24, 0x00	; 0
    7d2e:	90 e0       	ldi	r25, 0x00	; 0
    7d30:	aa ef       	ldi	r26, 0xFA	; 250
    7d32:	b4 e4       	ldi	r27, 0x44	; 68
    7d34:	80 83       	st	Z, r24
    7d36:	91 83       	std	Z+1, r25	; 0x01
    7d38:	a2 83       	std	Z+2, r26	; 0x02
    7d3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7d3c:	8e 01       	movw	r16, r28
    7d3e:	03 5b       	subi	r16, 0xB3	; 179
    7d40:	1f 4f       	sbci	r17, 0xFF	; 255
    7d42:	fe 01       	movw	r30, r28
    7d44:	ef 5a       	subi	r30, 0xAF	; 175
    7d46:	ff 4f       	sbci	r31, 0xFF	; 255
    7d48:	60 81       	ld	r22, Z
    7d4a:	71 81       	ldd	r23, Z+1	; 0x01
    7d4c:	82 81       	ldd	r24, Z+2	; 0x02
    7d4e:	93 81       	ldd	r25, Z+3	; 0x03
    7d50:	20 e0       	ldi	r18, 0x00	; 0
    7d52:	30 e0       	ldi	r19, 0x00	; 0
    7d54:	4a e7       	ldi	r20, 0x7A	; 122
    7d56:	55 e4       	ldi	r21, 0x45	; 69
    7d58:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    7d5c:	dc 01       	movw	r26, r24
    7d5e:	cb 01       	movw	r24, r22
    7d60:	f8 01       	movw	r30, r16
    7d62:	80 83       	st	Z, r24
    7d64:	91 83       	std	Z+1, r25	; 0x01
    7d66:	a2 83       	std	Z+2, r26	; 0x02
    7d68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7d6a:	fe 01       	movw	r30, r28
    7d6c:	e3 5b       	subi	r30, 0xB3	; 179
    7d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    7d70:	60 81       	ld	r22, Z
    7d72:	71 81       	ldd	r23, Z+1	; 0x01
    7d74:	82 81       	ldd	r24, Z+2	; 0x02
    7d76:	93 81       	ldd	r25, Z+3	; 0x03
    7d78:	20 e0       	ldi	r18, 0x00	; 0
    7d7a:	30 e0       	ldi	r19, 0x00	; 0
    7d7c:	40 e8       	ldi	r20, 0x80	; 128
    7d7e:	5f e3       	ldi	r21, 0x3F	; 63
    7d80:	0e 94 29 46 	call	0x8c52	; 0x8c52 <__ltsf2>
    7d84:	88 23       	and	r24, r24
    7d86:	44 f4       	brge	.+16     	; 0x7d98 <wprowadz_numer+0xb7e>
		__ticks = 1;
    7d88:	fe 01       	movw	r30, r28
    7d8a:	e5 5b       	subi	r30, 0xB5	; 181
    7d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    7d8e:	81 e0       	ldi	r24, 0x01	; 1
    7d90:	90 e0       	ldi	r25, 0x00	; 0
    7d92:	91 83       	std	Z+1, r25	; 0x01
    7d94:	80 83       	st	Z, r24
    7d96:	64 c0       	rjmp	.+200    	; 0x7e60 <wprowadz_numer+0xc46>
	else if (__tmp > 65535)
    7d98:	fe 01       	movw	r30, r28
    7d9a:	e3 5b       	subi	r30, 0xB3	; 179
    7d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    7d9e:	60 81       	ld	r22, Z
    7da0:	71 81       	ldd	r23, Z+1	; 0x01
    7da2:	82 81       	ldd	r24, Z+2	; 0x02
    7da4:	93 81       	ldd	r25, Z+3	; 0x03
    7da6:	20 e0       	ldi	r18, 0x00	; 0
    7da8:	3f ef       	ldi	r19, 0xFF	; 255
    7daa:	4f e7       	ldi	r20, 0x7F	; 127
    7dac:	57 e4       	ldi	r21, 0x47	; 71
    7dae:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <__gtsf2>
    7db2:	18 16       	cp	r1, r24
    7db4:	0c f0       	brlt	.+2      	; 0x7db8 <wprowadz_numer+0xb9e>
    7db6:	43 c0       	rjmp	.+134    	; 0x7e3e <wprowadz_numer+0xc24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7db8:	fe 01       	movw	r30, r28
    7dba:	ef 5a       	subi	r30, 0xAF	; 175
    7dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    7dbe:	60 81       	ld	r22, Z
    7dc0:	71 81       	ldd	r23, Z+1	; 0x01
    7dc2:	82 81       	ldd	r24, Z+2	; 0x02
    7dc4:	93 81       	ldd	r25, Z+3	; 0x03
    7dc6:	20 e0       	ldi	r18, 0x00	; 0
    7dc8:	30 e0       	ldi	r19, 0x00	; 0
    7dca:	40 e2       	ldi	r20, 0x20	; 32
    7dcc:	51 e4       	ldi	r21, 0x41	; 65
    7dce:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    7dd2:	dc 01       	movw	r26, r24
    7dd4:	cb 01       	movw	r24, r22
    7dd6:	8e 01       	movw	r16, r28
    7dd8:	05 5b       	subi	r16, 0xB5	; 181
    7dda:	1f 4f       	sbci	r17, 0xFF	; 255
    7ddc:	bc 01       	movw	r22, r24
    7dde:	cd 01       	movw	r24, r26
    7de0:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    7de4:	dc 01       	movw	r26, r24
    7de6:	cb 01       	movw	r24, r22
    7de8:	f8 01       	movw	r30, r16
    7dea:	91 83       	std	Z+1, r25	; 0x01
    7dec:	80 83       	st	Z, r24
    7dee:	1f c0       	rjmp	.+62     	; 0x7e2e <wprowadz_numer+0xc14>
    7df0:	fe 01       	movw	r30, r28
    7df2:	e7 5b       	subi	r30, 0xB7	; 183
    7df4:	ff 4f       	sbci	r31, 0xFF	; 255
    7df6:	80 e9       	ldi	r24, 0x90	; 144
    7df8:	91 e0       	ldi	r25, 0x01	; 1
    7dfa:	91 83       	std	Z+1, r25	; 0x01
    7dfc:	80 83       	st	Z, r24
    7dfe:	fe 01       	movw	r30, r28
    7e00:	e7 5b       	subi	r30, 0xB7	; 183
    7e02:	ff 4f       	sbci	r31, 0xFF	; 255
    7e04:	80 81       	ld	r24, Z
    7e06:	91 81       	ldd	r25, Z+1	; 0x01
    7e08:	01 97       	sbiw	r24, 0x01	; 1
    7e0a:	f1 f7       	brne	.-4      	; 0x7e08 <wprowadz_numer+0xbee>
    7e0c:	fe 01       	movw	r30, r28
    7e0e:	e7 5b       	subi	r30, 0xB7	; 183
    7e10:	ff 4f       	sbci	r31, 0xFF	; 255
    7e12:	91 83       	std	Z+1, r25	; 0x01
    7e14:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7e16:	de 01       	movw	r26, r28
    7e18:	a5 5b       	subi	r26, 0xB5	; 181
    7e1a:	bf 4f       	sbci	r27, 0xFF	; 255
    7e1c:	fe 01       	movw	r30, r28
    7e1e:	e5 5b       	subi	r30, 0xB5	; 181
    7e20:	ff 4f       	sbci	r31, 0xFF	; 255
    7e22:	80 81       	ld	r24, Z
    7e24:	91 81       	ldd	r25, Z+1	; 0x01
    7e26:	01 97       	sbiw	r24, 0x01	; 1
    7e28:	11 96       	adiw	r26, 0x01	; 1
    7e2a:	9c 93       	st	X, r25
    7e2c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7e2e:	fe 01       	movw	r30, r28
    7e30:	e5 5b       	subi	r30, 0xB5	; 181
    7e32:	ff 4f       	sbci	r31, 0xFF	; 255
    7e34:	80 81       	ld	r24, Z
    7e36:	91 81       	ldd	r25, Z+1	; 0x01
    7e38:	00 97       	sbiw	r24, 0x00	; 0
    7e3a:	d1 f6       	brne	.-76     	; 0x7df0 <wprowadz_numer+0xbd6>
    7e3c:	27 c0       	rjmp	.+78     	; 0x7e8c <wprowadz_numer+0xc72>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7e3e:	8e 01       	movw	r16, r28
    7e40:	05 5b       	subi	r16, 0xB5	; 181
    7e42:	1f 4f       	sbci	r17, 0xFF	; 255
    7e44:	fe 01       	movw	r30, r28
    7e46:	e3 5b       	subi	r30, 0xB3	; 179
    7e48:	ff 4f       	sbci	r31, 0xFF	; 255
    7e4a:	60 81       	ld	r22, Z
    7e4c:	71 81       	ldd	r23, Z+1	; 0x01
    7e4e:	82 81       	ldd	r24, Z+2	; 0x02
    7e50:	93 81       	ldd	r25, Z+3	; 0x03
    7e52:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    7e56:	dc 01       	movw	r26, r24
    7e58:	cb 01       	movw	r24, r22
    7e5a:	f8 01       	movw	r30, r16
    7e5c:	91 83       	std	Z+1, r25	; 0x01
    7e5e:	80 83       	st	Z, r24
    7e60:	de 01       	movw	r26, r28
    7e62:	a9 5b       	subi	r26, 0xB9	; 185
    7e64:	bf 4f       	sbci	r27, 0xFF	; 255
    7e66:	fe 01       	movw	r30, r28
    7e68:	e5 5b       	subi	r30, 0xB5	; 181
    7e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    7e6c:	80 81       	ld	r24, Z
    7e6e:	91 81       	ldd	r25, Z+1	; 0x01
    7e70:	8d 93       	st	X+, r24
    7e72:	9c 93       	st	X, r25
    7e74:	fe 01       	movw	r30, r28
    7e76:	e9 5b       	subi	r30, 0xB9	; 185
    7e78:	ff 4f       	sbci	r31, 0xFF	; 255
    7e7a:	80 81       	ld	r24, Z
    7e7c:	91 81       	ldd	r25, Z+1	; 0x01
    7e7e:	01 97       	sbiw	r24, 0x01	; 1
    7e80:	f1 f7       	brne	.-4      	; 0x7e7e <wprowadz_numer+0xc64>
    7e82:	fe 01       	movw	r30, r28
    7e84:	e9 5b       	subi	r30, 0xB9	; 185
    7e86:	ff 4f       	sbci	r31, 0xFF	; 255
    7e88:	91 83       	std	Z+1, r25	; 0x01
    7e8a:	80 83       	st	Z, r24
		_delay_ms(2000);
		lcd_locate(1,0); lcd_str("Nac. Reset");
    7e8c:	81 e0       	ldi	r24, 0x01	; 1
    7e8e:	60 e0       	ldi	r22, 0x00	; 0
    7e90:	0e 94 a8 30 	call	0x6150	; 0x6150 <lcd_locate>
    7e94:	81 e0       	ldi	r24, 0x01	; 1
    7e96:	92 e0       	ldi	r25, 0x02	; 2
    7e98:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <lcd_str>
		komunikat_glosowy(22);
    7e9c:	86 e1       	ldi	r24, 0x16	; 22
    7e9e:	0e 94 5c 00 	call	0xb8	; 0xb8 <komunikat_glosowy>
    7ea2:	ef c2       	rjmp	.+1502   	; 0x8482 <wprowadz_numer+0x1268>
		return 0;//KONIEC PRGORAMU
	}

	wyswietl_numer(cyfra_int);
    7ea4:	80 91 25 02 	lds	r24, 0x0225
    7ea8:	90 91 26 02 	lds	r25, 0x0226
    7eac:	0e 94 4e 2b 	call	0x569c	; 0x569c <wyswietl_numer>
	komunikat_glosowy(cyfra_int);
    7eb0:	80 91 25 02 	lds	r24, 0x0225
    7eb4:	90 91 26 02 	lds	r25, 0x0226
    7eb8:	0e 94 5c 00 	call	0xb8	; 0xb8 <komunikat_glosowy>
    7ebc:	fe 01       	movw	r30, r28
    7ebe:	ed 5b       	subi	r30, 0xBD	; 189
    7ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    7ec2:	80 e0       	ldi	r24, 0x00	; 0
    7ec4:	90 e0       	ldi	r25, 0x00	; 0
    7ec6:	aa e7       	ldi	r26, 0x7A	; 122
    7ec8:	b4 e4       	ldi	r27, 0x44	; 68
    7eca:	80 83       	st	Z, r24
    7ecc:	91 83       	std	Z+1, r25	; 0x01
    7ece:	a2 83       	std	Z+2, r26	; 0x02
    7ed0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7ed2:	8e 01       	movw	r16, r28
    7ed4:	01 5c       	subi	r16, 0xC1	; 193
    7ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    7ed8:	fe 01       	movw	r30, r28
    7eda:	ed 5b       	subi	r30, 0xBD	; 189
    7edc:	ff 4f       	sbci	r31, 0xFF	; 255
    7ede:	60 81       	ld	r22, Z
    7ee0:	71 81       	ldd	r23, Z+1	; 0x01
    7ee2:	82 81       	ldd	r24, Z+2	; 0x02
    7ee4:	93 81       	ldd	r25, Z+3	; 0x03
    7ee6:	20 e0       	ldi	r18, 0x00	; 0
    7ee8:	30 e0       	ldi	r19, 0x00	; 0
    7eea:	4a e7       	ldi	r20, 0x7A	; 122
    7eec:	55 e4       	ldi	r21, 0x45	; 69
    7eee:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    7ef2:	dc 01       	movw	r26, r24
    7ef4:	cb 01       	movw	r24, r22
    7ef6:	f8 01       	movw	r30, r16
    7ef8:	80 83       	st	Z, r24
    7efa:	91 83       	std	Z+1, r25	; 0x01
    7efc:	a2 83       	std	Z+2, r26	; 0x02
    7efe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7f00:	fe 01       	movw	r30, r28
    7f02:	ff 96       	adiw	r30, 0x3f	; 63
    7f04:	60 81       	ld	r22, Z
    7f06:	71 81       	ldd	r23, Z+1	; 0x01
    7f08:	82 81       	ldd	r24, Z+2	; 0x02
    7f0a:	93 81       	ldd	r25, Z+3	; 0x03
    7f0c:	20 e0       	ldi	r18, 0x00	; 0
    7f0e:	30 e0       	ldi	r19, 0x00	; 0
    7f10:	40 e8       	ldi	r20, 0x80	; 128
    7f12:	5f e3       	ldi	r21, 0x3F	; 63
    7f14:	0e 94 29 46 	call	0x8c52	; 0x8c52 <__ltsf2>
    7f18:	88 23       	and	r24, r24
    7f1a:	2c f4       	brge	.+10     	; 0x7f26 <wprowadz_numer+0xd0c>
		__ticks = 1;
    7f1c:	81 e0       	ldi	r24, 0x01	; 1
    7f1e:	90 e0       	ldi	r25, 0x00	; 0
    7f20:	9e af       	std	Y+62, r25	; 0x3e
    7f22:	8d af       	std	Y+61, r24	; 0x3d
    7f24:	46 c0       	rjmp	.+140    	; 0x7fb2 <wprowadz_numer+0xd98>
	else if (__tmp > 65535)
    7f26:	fe 01       	movw	r30, r28
    7f28:	ff 96       	adiw	r30, 0x3f	; 63
    7f2a:	60 81       	ld	r22, Z
    7f2c:	71 81       	ldd	r23, Z+1	; 0x01
    7f2e:	82 81       	ldd	r24, Z+2	; 0x02
    7f30:	93 81       	ldd	r25, Z+3	; 0x03
    7f32:	20 e0       	ldi	r18, 0x00	; 0
    7f34:	3f ef       	ldi	r19, 0xFF	; 255
    7f36:	4f e7       	ldi	r20, 0x7F	; 127
    7f38:	57 e4       	ldi	r21, 0x47	; 71
    7f3a:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <__gtsf2>
    7f3e:	18 16       	cp	r1, r24
    7f40:	64 f5       	brge	.+88     	; 0x7f9a <wprowadz_numer+0xd80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7f42:	fe 01       	movw	r30, r28
    7f44:	ed 5b       	subi	r30, 0xBD	; 189
    7f46:	ff 4f       	sbci	r31, 0xFF	; 255
    7f48:	60 81       	ld	r22, Z
    7f4a:	71 81       	ldd	r23, Z+1	; 0x01
    7f4c:	82 81       	ldd	r24, Z+2	; 0x02
    7f4e:	93 81       	ldd	r25, Z+3	; 0x03
    7f50:	20 e0       	ldi	r18, 0x00	; 0
    7f52:	30 e0       	ldi	r19, 0x00	; 0
    7f54:	40 e2       	ldi	r20, 0x20	; 32
    7f56:	51 e4       	ldi	r21, 0x41	; 65
    7f58:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    7f5c:	dc 01       	movw	r26, r24
    7f5e:	cb 01       	movw	r24, r22
    7f60:	bc 01       	movw	r22, r24
    7f62:	cd 01       	movw	r24, r26
    7f64:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    7f68:	dc 01       	movw	r26, r24
    7f6a:	cb 01       	movw	r24, r22
    7f6c:	9e af       	std	Y+62, r25	; 0x3e
    7f6e:	8d af       	std	Y+61, r24	; 0x3d
    7f70:	0f c0       	rjmp	.+30     	; 0x7f90 <wprowadz_numer+0xd76>
    7f72:	80 e9       	ldi	r24, 0x90	; 144
    7f74:	91 e0       	ldi	r25, 0x01	; 1
    7f76:	9c af       	std	Y+60, r25	; 0x3c
    7f78:	8b af       	std	Y+59, r24	; 0x3b
    7f7a:	8b ad       	ldd	r24, Y+59	; 0x3b
    7f7c:	9c ad       	ldd	r25, Y+60	; 0x3c
    7f7e:	01 97       	sbiw	r24, 0x01	; 1
    7f80:	f1 f7       	brne	.-4      	; 0x7f7e <wprowadz_numer+0xd64>
    7f82:	9c af       	std	Y+60, r25	; 0x3c
    7f84:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7f86:	8d ad       	ldd	r24, Y+61	; 0x3d
    7f88:	9e ad       	ldd	r25, Y+62	; 0x3e
    7f8a:	01 97       	sbiw	r24, 0x01	; 1
    7f8c:	9e af       	std	Y+62, r25	; 0x3e
    7f8e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7f90:	8d ad       	ldd	r24, Y+61	; 0x3d
    7f92:	9e ad       	ldd	r25, Y+62	; 0x3e
    7f94:	00 97       	sbiw	r24, 0x00	; 0
    7f96:	69 f7       	brne	.-38     	; 0x7f72 <wprowadz_numer+0xd58>
    7f98:	2f c2       	rjmp	.+1118   	; 0x83f8 <wprowadz_numer+0x11de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7f9a:	fe 01       	movw	r30, r28
    7f9c:	ff 96       	adiw	r30, 0x3f	; 63
    7f9e:	60 81       	ld	r22, Z
    7fa0:	71 81       	ldd	r23, Z+1	; 0x01
    7fa2:	82 81       	ldd	r24, Z+2	; 0x02
    7fa4:	93 81       	ldd	r25, Z+3	; 0x03
    7fa6:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    7faa:	dc 01       	movw	r26, r24
    7fac:	cb 01       	movw	r24, r22
    7fae:	9e af       	std	Y+62, r25	; 0x3e
    7fb0:	8d af       	std	Y+61, r24	; 0x3d
    7fb2:	8d ad       	ldd	r24, Y+61	; 0x3d
    7fb4:	9e ad       	ldd	r25, Y+62	; 0x3e
    7fb6:	9a af       	std	Y+58, r25	; 0x3a
    7fb8:	89 af       	std	Y+57, r24	; 0x39
    7fba:	89 ad       	ldd	r24, Y+57	; 0x39
    7fbc:	9a ad       	ldd	r25, Y+58	; 0x3a
    7fbe:	01 97       	sbiw	r24, 0x01	; 1
    7fc0:	f1 f7       	brne	.-4      	; 0x7fbe <wprowadz_numer+0xda4>
    7fc2:	9a af       	std	Y+58, r25	; 0x3a
    7fc4:	89 af       	std	Y+57, r24	; 0x39
    7fc6:	18 c2       	rjmp	.+1072   	; 0x83f8 <wprowadz_numer+0x11de>
	_delay_ms(1000); //(DO USUNI CIA)
	while (klawisz_ENT_pressed) {
		if (!(KEY_PIN & (klawisz_NUM))) {
    7fc8:	e3 e3       	ldi	r30, 0x33	; 51
    7fca:	f0 e0       	ldi	r31, 0x00	; 0
    7fcc:	80 81       	ld	r24, Z
    7fce:	88 2f       	mov	r24, r24
    7fd0:	90 e0       	ldi	r25, 0x00	; 0
    7fd2:	81 70       	andi	r24, 0x01	; 1
    7fd4:	90 70       	andi	r25, 0x00	; 0
    7fd6:	00 97       	sbiw	r24, 0x00	; 0
    7fd8:	09 f0       	breq	.+2      	; 0x7fdc <wprowadz_numer+0xdc2>
    7fda:	02 c1       	rjmp	.+516    	; 0x81e0 <wprowadz_numer+0xfc6>
    7fdc:	80 e0       	ldi	r24, 0x00	; 0
    7fde:	90 e0       	ldi	r25, 0x00	; 0
    7fe0:	a0 ea       	ldi	r26, 0xA0	; 160
    7fe2:	b2 e4       	ldi	r27, 0x42	; 66
    7fe4:	8d ab       	std	Y+53, r24	; 0x35
    7fe6:	9e ab       	std	Y+54, r25	; 0x36
    7fe8:	af ab       	std	Y+55, r26	; 0x37
    7fea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7fec:	6d a9       	ldd	r22, Y+53	; 0x35
    7fee:	7e a9       	ldd	r23, Y+54	; 0x36
    7ff0:	8f a9       	ldd	r24, Y+55	; 0x37
    7ff2:	98 ad       	ldd	r25, Y+56	; 0x38
    7ff4:	20 e0       	ldi	r18, 0x00	; 0
    7ff6:	30 e0       	ldi	r19, 0x00	; 0
    7ff8:	4a e7       	ldi	r20, 0x7A	; 122
    7ffa:	55 e4       	ldi	r21, 0x45	; 69
    7ffc:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    8000:	dc 01       	movw	r26, r24
    8002:	cb 01       	movw	r24, r22
    8004:	89 ab       	std	Y+49, r24	; 0x31
    8006:	9a ab       	std	Y+50, r25	; 0x32
    8008:	ab ab       	std	Y+51, r26	; 0x33
    800a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    800c:	69 a9       	ldd	r22, Y+49	; 0x31
    800e:	7a a9       	ldd	r23, Y+50	; 0x32
    8010:	8b a9       	ldd	r24, Y+51	; 0x33
    8012:	9c a9       	ldd	r25, Y+52	; 0x34
    8014:	20 e0       	ldi	r18, 0x00	; 0
    8016:	30 e0       	ldi	r19, 0x00	; 0
    8018:	40 e8       	ldi	r20, 0x80	; 128
    801a:	5f e3       	ldi	r21, 0x3F	; 63
    801c:	0e 94 29 46 	call	0x8c52	; 0x8c52 <__ltsf2>
    8020:	88 23       	and	r24, r24
    8022:	2c f4       	brge	.+10     	; 0x802e <wprowadz_numer+0xe14>
		__ticks = 1;
    8024:	81 e0       	ldi	r24, 0x01	; 1
    8026:	90 e0       	ldi	r25, 0x00	; 0
    8028:	98 ab       	std	Y+48, r25	; 0x30
    802a:	8f a7       	std	Y+47, r24	; 0x2f
    802c:	3f c0       	rjmp	.+126    	; 0x80ac <wprowadz_numer+0xe92>
	else if (__tmp > 65535)
    802e:	69 a9       	ldd	r22, Y+49	; 0x31
    8030:	7a a9       	ldd	r23, Y+50	; 0x32
    8032:	8b a9       	ldd	r24, Y+51	; 0x33
    8034:	9c a9       	ldd	r25, Y+52	; 0x34
    8036:	20 e0       	ldi	r18, 0x00	; 0
    8038:	3f ef       	ldi	r19, 0xFF	; 255
    803a:	4f e7       	ldi	r20, 0x7F	; 127
    803c:	57 e4       	ldi	r21, 0x47	; 71
    803e:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <__gtsf2>
    8042:	18 16       	cp	r1, r24
    8044:	4c f5       	brge	.+82     	; 0x8098 <wprowadz_numer+0xe7e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8046:	6d a9       	ldd	r22, Y+53	; 0x35
    8048:	7e a9       	ldd	r23, Y+54	; 0x36
    804a:	8f a9       	ldd	r24, Y+55	; 0x37
    804c:	98 ad       	ldd	r25, Y+56	; 0x38
    804e:	20 e0       	ldi	r18, 0x00	; 0
    8050:	30 e0       	ldi	r19, 0x00	; 0
    8052:	40 e2       	ldi	r20, 0x20	; 32
    8054:	51 e4       	ldi	r21, 0x41	; 65
    8056:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    805a:	dc 01       	movw	r26, r24
    805c:	cb 01       	movw	r24, r22
    805e:	bc 01       	movw	r22, r24
    8060:	cd 01       	movw	r24, r26
    8062:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    8066:	dc 01       	movw	r26, r24
    8068:	cb 01       	movw	r24, r22
    806a:	98 ab       	std	Y+48, r25	; 0x30
    806c:	8f a7       	std	Y+47, r24	; 0x2f
    806e:	0f c0       	rjmp	.+30     	; 0x808e <wprowadz_numer+0xe74>
    8070:	80 e9       	ldi	r24, 0x90	; 144
    8072:	91 e0       	ldi	r25, 0x01	; 1
    8074:	9e a7       	std	Y+46, r25	; 0x2e
    8076:	8d a7       	std	Y+45, r24	; 0x2d
    8078:	8d a5       	ldd	r24, Y+45	; 0x2d
    807a:	9e a5       	ldd	r25, Y+46	; 0x2e
    807c:	01 97       	sbiw	r24, 0x01	; 1
    807e:	f1 f7       	brne	.-4      	; 0x807c <wprowadz_numer+0xe62>
    8080:	9e a7       	std	Y+46, r25	; 0x2e
    8082:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8084:	8f a5       	ldd	r24, Y+47	; 0x2f
    8086:	98 a9       	ldd	r25, Y+48	; 0x30
    8088:	01 97       	sbiw	r24, 0x01	; 1
    808a:	98 ab       	std	Y+48, r25	; 0x30
    808c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    808e:	8f a5       	ldd	r24, Y+47	; 0x2f
    8090:	98 a9       	ldd	r25, Y+48	; 0x30
    8092:	00 97       	sbiw	r24, 0x00	; 0
    8094:	69 f7       	brne	.-38     	; 0x8070 <wprowadz_numer+0xe56>
    8096:	14 c0       	rjmp	.+40     	; 0x80c0 <wprowadz_numer+0xea6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8098:	69 a9       	ldd	r22, Y+49	; 0x31
    809a:	7a a9       	ldd	r23, Y+50	; 0x32
    809c:	8b a9       	ldd	r24, Y+51	; 0x33
    809e:	9c a9       	ldd	r25, Y+52	; 0x34
    80a0:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    80a4:	dc 01       	movw	r26, r24
    80a6:	cb 01       	movw	r24, r22
    80a8:	98 ab       	std	Y+48, r25	; 0x30
    80aa:	8f a7       	std	Y+47, r24	; 0x2f
    80ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    80ae:	98 a9       	ldd	r25, Y+48	; 0x30
    80b0:	9c a7       	std	Y+44, r25	; 0x2c
    80b2:	8b a7       	std	Y+43, r24	; 0x2b
    80b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    80b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    80b8:	01 97       	sbiw	r24, 0x01	; 1
    80ba:	f1 f7       	brne	.-4      	; 0x80b8 <wprowadz_numer+0xe9e>
    80bc:	9c a7       	std	Y+44, r25	; 0x2c
    80be:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(80);
			if (!(KEY_PIN & (klawisz_NUM))) {
    80c0:	e3 e3       	ldi	r30, 0x33	; 51
    80c2:	f0 e0       	ldi	r31, 0x00	; 0
    80c4:	80 81       	ld	r24, Z
    80c6:	88 2f       	mov	r24, r24
    80c8:	90 e0       	ldi	r25, 0x00	; 0
    80ca:	81 70       	andi	r24, 0x01	; 1
    80cc:	90 70       	andi	r25, 0x00	; 0
    80ce:	00 97       	sbiw	r24, 0x00	; 0
    80d0:	09 f0       	breq	.+2      	; 0x80d4 <wprowadz_numer+0xeba>
    80d2:	86 c0       	rjmp	.+268    	; 0x81e0 <wprowadz_numer+0xfc6>
				cyfra_int = kierunek_B;
    80d4:	80 91 35 02 	lds	r24, 0x0235
    80d8:	88 2f       	mov	r24, r24
    80da:	90 e0       	ldi	r25, 0x00	; 0
    80dc:	90 93 26 02 	sts	0x0226, r25
    80e0:	80 93 25 02 	sts	0x0225, r24
				wyswietl_numer(cyfra_int);
    80e4:	80 91 25 02 	lds	r24, 0x0225
    80e8:	90 91 26 02 	lds	r25, 0x0226
    80ec:	0e 94 4e 2b 	call	0x569c	; 0x569c <wyswietl_numer>
				komunikat_glosowy(cyfra_int);
    80f0:	80 91 25 02 	lds	r24, 0x0225
    80f4:	90 91 26 02 	lds	r25, 0x0226
    80f8:	0e 94 5c 00 	call	0xb8	; 0xb8 <komunikat_glosowy>
    80fc:	80 e0       	ldi	r24, 0x00	; 0
    80fe:	90 e0       	ldi	r25, 0x00	; 0
    8100:	a8 e4       	ldi	r26, 0x48	; 72
    8102:	b3 e4       	ldi	r27, 0x43	; 67
    8104:	8f a3       	std	Y+39, r24	; 0x27
    8106:	98 a7       	std	Y+40, r25	; 0x28
    8108:	a9 a7       	std	Y+41, r26	; 0x29
    810a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    810c:	6f a1       	ldd	r22, Y+39	; 0x27
    810e:	78 a5       	ldd	r23, Y+40	; 0x28
    8110:	89 a5       	ldd	r24, Y+41	; 0x29
    8112:	9a a5       	ldd	r25, Y+42	; 0x2a
    8114:	20 e0       	ldi	r18, 0x00	; 0
    8116:	30 e0       	ldi	r19, 0x00	; 0
    8118:	4a e7       	ldi	r20, 0x7A	; 122
    811a:	55 e4       	ldi	r21, 0x45	; 69
    811c:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    8120:	dc 01       	movw	r26, r24
    8122:	cb 01       	movw	r24, r22
    8124:	8b a3       	std	Y+35, r24	; 0x23
    8126:	9c a3       	std	Y+36, r25	; 0x24
    8128:	ad a3       	std	Y+37, r26	; 0x25
    812a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    812c:	6b a1       	ldd	r22, Y+35	; 0x23
    812e:	7c a1       	ldd	r23, Y+36	; 0x24
    8130:	8d a1       	ldd	r24, Y+37	; 0x25
    8132:	9e a1       	ldd	r25, Y+38	; 0x26
    8134:	20 e0       	ldi	r18, 0x00	; 0
    8136:	30 e0       	ldi	r19, 0x00	; 0
    8138:	40 e8       	ldi	r20, 0x80	; 128
    813a:	5f e3       	ldi	r21, 0x3F	; 63
    813c:	0e 94 29 46 	call	0x8c52	; 0x8c52 <__ltsf2>
    8140:	88 23       	and	r24, r24
    8142:	2c f4       	brge	.+10     	; 0x814e <wprowadz_numer+0xf34>
		__ticks = 1;
    8144:	81 e0       	ldi	r24, 0x01	; 1
    8146:	90 e0       	ldi	r25, 0x00	; 0
    8148:	9a a3       	std	Y+34, r25	; 0x22
    814a:	89 a3       	std	Y+33, r24	; 0x21
    814c:	3f c0       	rjmp	.+126    	; 0x81cc <wprowadz_numer+0xfb2>
	else if (__tmp > 65535)
    814e:	6b a1       	ldd	r22, Y+35	; 0x23
    8150:	7c a1       	ldd	r23, Y+36	; 0x24
    8152:	8d a1       	ldd	r24, Y+37	; 0x25
    8154:	9e a1       	ldd	r25, Y+38	; 0x26
    8156:	20 e0       	ldi	r18, 0x00	; 0
    8158:	3f ef       	ldi	r19, 0xFF	; 255
    815a:	4f e7       	ldi	r20, 0x7F	; 127
    815c:	57 e4       	ldi	r21, 0x47	; 71
    815e:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <__gtsf2>
    8162:	18 16       	cp	r1, r24
    8164:	4c f5       	brge	.+82     	; 0x81b8 <wprowadz_numer+0xf9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8166:	6f a1       	ldd	r22, Y+39	; 0x27
    8168:	78 a5       	ldd	r23, Y+40	; 0x28
    816a:	89 a5       	ldd	r24, Y+41	; 0x29
    816c:	9a a5       	ldd	r25, Y+42	; 0x2a
    816e:	20 e0       	ldi	r18, 0x00	; 0
    8170:	30 e0       	ldi	r19, 0x00	; 0
    8172:	40 e2       	ldi	r20, 0x20	; 32
    8174:	51 e4       	ldi	r21, 0x41	; 65
    8176:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    817a:	dc 01       	movw	r26, r24
    817c:	cb 01       	movw	r24, r22
    817e:	bc 01       	movw	r22, r24
    8180:	cd 01       	movw	r24, r26
    8182:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    8186:	dc 01       	movw	r26, r24
    8188:	cb 01       	movw	r24, r22
    818a:	9a a3       	std	Y+34, r25	; 0x22
    818c:	89 a3       	std	Y+33, r24	; 0x21
    818e:	0f c0       	rjmp	.+30     	; 0x81ae <wprowadz_numer+0xf94>
    8190:	80 e9       	ldi	r24, 0x90	; 144
    8192:	91 e0       	ldi	r25, 0x01	; 1
    8194:	98 a3       	std	Y+32, r25	; 0x20
    8196:	8f 8f       	std	Y+31, r24	; 0x1f
    8198:	8f 8d       	ldd	r24, Y+31	; 0x1f
    819a:	98 a1       	ldd	r25, Y+32	; 0x20
    819c:	01 97       	sbiw	r24, 0x01	; 1
    819e:	f1 f7       	brne	.-4      	; 0x819c <wprowadz_numer+0xf82>
    81a0:	98 a3       	std	Y+32, r25	; 0x20
    81a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    81a4:	89 a1       	ldd	r24, Y+33	; 0x21
    81a6:	9a a1       	ldd	r25, Y+34	; 0x22
    81a8:	01 97       	sbiw	r24, 0x01	; 1
    81aa:	9a a3       	std	Y+34, r25	; 0x22
    81ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    81ae:	89 a1       	ldd	r24, Y+33	; 0x21
    81b0:	9a a1       	ldd	r25, Y+34	; 0x22
    81b2:	00 97       	sbiw	r24, 0x00	; 0
    81b4:	69 f7       	brne	.-38     	; 0x8190 <wprowadz_numer+0xf76>
    81b6:	14 c0       	rjmp	.+40     	; 0x81e0 <wprowadz_numer+0xfc6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    81b8:	6b a1       	ldd	r22, Y+35	; 0x23
    81ba:	7c a1       	ldd	r23, Y+36	; 0x24
    81bc:	8d a1       	ldd	r24, Y+37	; 0x25
    81be:	9e a1       	ldd	r25, Y+38	; 0x26
    81c0:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    81c4:	dc 01       	movw	r26, r24
    81c6:	cb 01       	movw	r24, r22
    81c8:	9a a3       	std	Y+34, r25	; 0x22
    81ca:	89 a3       	std	Y+33, r24	; 0x21
    81cc:	89 a1       	ldd	r24, Y+33	; 0x21
    81ce:	9a a1       	ldd	r25, Y+34	; 0x22
    81d0:	9e 8f       	std	Y+30, r25	; 0x1e
    81d2:	8d 8f       	std	Y+29, r24	; 0x1d
    81d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    81d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    81d8:	01 97       	sbiw	r24, 0x01	; 1
    81da:	f1 f7       	brne	.-4      	; 0x81d8 <wprowadz_numer+0xfbe>
    81dc:	9e 8f       	std	Y+30, r25	; 0x1e
    81de:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(200);
			}
		}
		if (!(KEY_PIN & (klawisz_NUM))) {
    81e0:	e3 e3       	ldi	r30, 0x33	; 51
    81e2:	f0 e0       	ldi	r31, 0x00	; 0
    81e4:	80 81       	ld	r24, Z
    81e6:	88 2f       	mov	r24, r24
    81e8:	90 e0       	ldi	r25, 0x00	; 0
    81ea:	81 70       	andi	r24, 0x01	; 1
    81ec:	90 70       	andi	r25, 0x00	; 0
    81ee:	00 97       	sbiw	r24, 0x00	; 0
    81f0:	09 f0       	breq	.+2      	; 0x81f4 <wprowadz_numer+0xfda>
    81f2:	02 c1       	rjmp	.+516    	; 0x83f8 <wprowadz_numer+0x11de>
    81f4:	80 e0       	ldi	r24, 0x00	; 0
    81f6:	90 e0       	ldi	r25, 0x00	; 0
    81f8:	a0 ea       	ldi	r26, 0xA0	; 160
    81fa:	b2 e4       	ldi	r27, 0x42	; 66
    81fc:	89 8f       	std	Y+25, r24	; 0x19
    81fe:	9a 8f       	std	Y+26, r25	; 0x1a
    8200:	ab 8f       	std	Y+27, r26	; 0x1b
    8202:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8204:	69 8d       	ldd	r22, Y+25	; 0x19
    8206:	7a 8d       	ldd	r23, Y+26	; 0x1a
    8208:	8b 8d       	ldd	r24, Y+27	; 0x1b
    820a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    820c:	20 e0       	ldi	r18, 0x00	; 0
    820e:	30 e0       	ldi	r19, 0x00	; 0
    8210:	4a e7       	ldi	r20, 0x7A	; 122
    8212:	55 e4       	ldi	r21, 0x45	; 69
    8214:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    8218:	dc 01       	movw	r26, r24
    821a:	cb 01       	movw	r24, r22
    821c:	8d 8b       	std	Y+21, r24	; 0x15
    821e:	9e 8b       	std	Y+22, r25	; 0x16
    8220:	af 8b       	std	Y+23, r26	; 0x17
    8222:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    8224:	6d 89       	ldd	r22, Y+21	; 0x15
    8226:	7e 89       	ldd	r23, Y+22	; 0x16
    8228:	8f 89       	ldd	r24, Y+23	; 0x17
    822a:	98 8d       	ldd	r25, Y+24	; 0x18
    822c:	20 e0       	ldi	r18, 0x00	; 0
    822e:	30 e0       	ldi	r19, 0x00	; 0
    8230:	40 e8       	ldi	r20, 0x80	; 128
    8232:	5f e3       	ldi	r21, 0x3F	; 63
    8234:	0e 94 29 46 	call	0x8c52	; 0x8c52 <__ltsf2>
    8238:	88 23       	and	r24, r24
    823a:	2c f4       	brge	.+10     	; 0x8246 <wprowadz_numer+0x102c>
		__ticks = 1;
    823c:	81 e0       	ldi	r24, 0x01	; 1
    823e:	90 e0       	ldi	r25, 0x00	; 0
    8240:	9c 8b       	std	Y+20, r25	; 0x14
    8242:	8b 8b       	std	Y+19, r24	; 0x13
    8244:	3f c0       	rjmp	.+126    	; 0x82c4 <wprowadz_numer+0x10aa>
	else if (__tmp > 65535)
    8246:	6d 89       	ldd	r22, Y+21	; 0x15
    8248:	7e 89       	ldd	r23, Y+22	; 0x16
    824a:	8f 89       	ldd	r24, Y+23	; 0x17
    824c:	98 8d       	ldd	r25, Y+24	; 0x18
    824e:	20 e0       	ldi	r18, 0x00	; 0
    8250:	3f ef       	ldi	r19, 0xFF	; 255
    8252:	4f e7       	ldi	r20, 0x7F	; 127
    8254:	57 e4       	ldi	r21, 0x47	; 71
    8256:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <__gtsf2>
    825a:	18 16       	cp	r1, r24
    825c:	4c f5       	brge	.+82     	; 0x82b0 <wprowadz_numer+0x1096>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    825e:	69 8d       	ldd	r22, Y+25	; 0x19
    8260:	7a 8d       	ldd	r23, Y+26	; 0x1a
    8262:	8b 8d       	ldd	r24, Y+27	; 0x1b
    8264:	9c 8d       	ldd	r25, Y+28	; 0x1c
    8266:	20 e0       	ldi	r18, 0x00	; 0
    8268:	30 e0       	ldi	r19, 0x00	; 0
    826a:	40 e2       	ldi	r20, 0x20	; 32
    826c:	51 e4       	ldi	r21, 0x41	; 65
    826e:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    8272:	dc 01       	movw	r26, r24
    8274:	cb 01       	movw	r24, r22
    8276:	bc 01       	movw	r22, r24
    8278:	cd 01       	movw	r24, r26
    827a:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    827e:	dc 01       	movw	r26, r24
    8280:	cb 01       	movw	r24, r22
    8282:	9c 8b       	std	Y+20, r25	; 0x14
    8284:	8b 8b       	std	Y+19, r24	; 0x13
    8286:	0f c0       	rjmp	.+30     	; 0x82a6 <wprowadz_numer+0x108c>
    8288:	80 e9       	ldi	r24, 0x90	; 144
    828a:	91 e0       	ldi	r25, 0x01	; 1
    828c:	9a 8b       	std	Y+18, r25	; 0x12
    828e:	89 8b       	std	Y+17, r24	; 0x11
    8290:	89 89       	ldd	r24, Y+17	; 0x11
    8292:	9a 89       	ldd	r25, Y+18	; 0x12
    8294:	01 97       	sbiw	r24, 0x01	; 1
    8296:	f1 f7       	brne	.-4      	; 0x8294 <wprowadz_numer+0x107a>
    8298:	9a 8b       	std	Y+18, r25	; 0x12
    829a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    829c:	8b 89       	ldd	r24, Y+19	; 0x13
    829e:	9c 89       	ldd	r25, Y+20	; 0x14
    82a0:	01 97       	sbiw	r24, 0x01	; 1
    82a2:	9c 8b       	std	Y+20, r25	; 0x14
    82a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    82a6:	8b 89       	ldd	r24, Y+19	; 0x13
    82a8:	9c 89       	ldd	r25, Y+20	; 0x14
    82aa:	00 97       	sbiw	r24, 0x00	; 0
    82ac:	69 f7       	brne	.-38     	; 0x8288 <wprowadz_numer+0x106e>
    82ae:	14 c0       	rjmp	.+40     	; 0x82d8 <wprowadz_numer+0x10be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    82b0:	6d 89       	ldd	r22, Y+21	; 0x15
    82b2:	7e 89       	ldd	r23, Y+22	; 0x16
    82b4:	8f 89       	ldd	r24, Y+23	; 0x17
    82b6:	98 8d       	ldd	r25, Y+24	; 0x18
    82b8:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    82bc:	dc 01       	movw	r26, r24
    82be:	cb 01       	movw	r24, r22
    82c0:	9c 8b       	std	Y+20, r25	; 0x14
    82c2:	8b 8b       	std	Y+19, r24	; 0x13
    82c4:	8b 89       	ldd	r24, Y+19	; 0x13
    82c6:	9c 89       	ldd	r25, Y+20	; 0x14
    82c8:	98 8b       	std	Y+16, r25	; 0x10
    82ca:	8f 87       	std	Y+15, r24	; 0x0f
    82cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    82ce:	98 89       	ldd	r25, Y+16	; 0x10
    82d0:	01 97       	sbiw	r24, 0x01	; 1
    82d2:	f1 f7       	brne	.-4      	; 0x82d0 <wprowadz_numer+0x10b6>
    82d4:	98 8b       	std	Y+16, r25	; 0x10
    82d6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(80);
			if (!(KEY_PIN & (klawisz_NUM))) {
    82d8:	e3 e3       	ldi	r30, 0x33	; 51
    82da:	f0 e0       	ldi	r31, 0x00	; 0
    82dc:	80 81       	ld	r24, Z
    82de:	88 2f       	mov	r24, r24
    82e0:	90 e0       	ldi	r25, 0x00	; 0
    82e2:	81 70       	andi	r24, 0x01	; 1
    82e4:	90 70       	andi	r25, 0x00	; 0
    82e6:	00 97       	sbiw	r24, 0x00	; 0
    82e8:	09 f0       	breq	.+2      	; 0x82ec <wprowadz_numer+0x10d2>
    82ea:	86 c0       	rjmp	.+268    	; 0x83f8 <wprowadz_numer+0x11de>
				cyfra_int = kierunek_A;
    82ec:	80 91 34 02 	lds	r24, 0x0234
    82f0:	88 2f       	mov	r24, r24
    82f2:	90 e0       	ldi	r25, 0x00	; 0
    82f4:	90 93 26 02 	sts	0x0226, r25
    82f8:	80 93 25 02 	sts	0x0225, r24
				wyswietl_numer(cyfra_int);
    82fc:	80 91 25 02 	lds	r24, 0x0225
    8300:	90 91 26 02 	lds	r25, 0x0226
    8304:	0e 94 4e 2b 	call	0x569c	; 0x569c <wyswietl_numer>
				komunikat_glosowy(cyfra_int);
    8308:	80 91 25 02 	lds	r24, 0x0225
    830c:	90 91 26 02 	lds	r25, 0x0226
    8310:	0e 94 5c 00 	call	0xb8	; 0xb8 <komunikat_glosowy>
    8314:	80 e0       	ldi	r24, 0x00	; 0
    8316:	90 e0       	ldi	r25, 0x00	; 0
    8318:	a8 e4       	ldi	r26, 0x48	; 72
    831a:	b3 e4       	ldi	r27, 0x43	; 67
    831c:	8b 87       	std	Y+11, r24	; 0x0b
    831e:	9c 87       	std	Y+12, r25	; 0x0c
    8320:	ad 87       	std	Y+13, r26	; 0x0d
    8322:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8324:	6b 85       	ldd	r22, Y+11	; 0x0b
    8326:	7c 85       	ldd	r23, Y+12	; 0x0c
    8328:	8d 85       	ldd	r24, Y+13	; 0x0d
    832a:	9e 85       	ldd	r25, Y+14	; 0x0e
    832c:	20 e0       	ldi	r18, 0x00	; 0
    832e:	30 e0       	ldi	r19, 0x00	; 0
    8330:	4a e7       	ldi	r20, 0x7A	; 122
    8332:	55 e4       	ldi	r21, 0x45	; 69
    8334:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    8338:	dc 01       	movw	r26, r24
    833a:	cb 01       	movw	r24, r22
    833c:	8f 83       	std	Y+7, r24	; 0x07
    833e:	98 87       	std	Y+8, r25	; 0x08
    8340:	a9 87       	std	Y+9, r26	; 0x09
    8342:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    8344:	6f 81       	ldd	r22, Y+7	; 0x07
    8346:	78 85       	ldd	r23, Y+8	; 0x08
    8348:	89 85       	ldd	r24, Y+9	; 0x09
    834a:	9a 85       	ldd	r25, Y+10	; 0x0a
    834c:	20 e0       	ldi	r18, 0x00	; 0
    834e:	30 e0       	ldi	r19, 0x00	; 0
    8350:	40 e8       	ldi	r20, 0x80	; 128
    8352:	5f e3       	ldi	r21, 0x3F	; 63
    8354:	0e 94 29 46 	call	0x8c52	; 0x8c52 <__ltsf2>
    8358:	88 23       	and	r24, r24
    835a:	2c f4       	brge	.+10     	; 0x8366 <wprowadz_numer+0x114c>
		__ticks = 1;
    835c:	81 e0       	ldi	r24, 0x01	; 1
    835e:	90 e0       	ldi	r25, 0x00	; 0
    8360:	9e 83       	std	Y+6, r25	; 0x06
    8362:	8d 83       	std	Y+5, r24	; 0x05
    8364:	3f c0       	rjmp	.+126    	; 0x83e4 <wprowadz_numer+0x11ca>
	else if (__tmp > 65535)
    8366:	6f 81       	ldd	r22, Y+7	; 0x07
    8368:	78 85       	ldd	r23, Y+8	; 0x08
    836a:	89 85       	ldd	r24, Y+9	; 0x09
    836c:	9a 85       	ldd	r25, Y+10	; 0x0a
    836e:	20 e0       	ldi	r18, 0x00	; 0
    8370:	3f ef       	ldi	r19, 0xFF	; 255
    8372:	4f e7       	ldi	r20, 0x7F	; 127
    8374:	57 e4       	ldi	r21, 0x47	; 71
    8376:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <__gtsf2>
    837a:	18 16       	cp	r1, r24
    837c:	4c f5       	brge	.+82     	; 0x83d0 <wprowadz_numer+0x11b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    837e:	6b 85       	ldd	r22, Y+11	; 0x0b
    8380:	7c 85       	ldd	r23, Y+12	; 0x0c
    8382:	8d 85       	ldd	r24, Y+13	; 0x0d
    8384:	9e 85       	ldd	r25, Y+14	; 0x0e
    8386:	20 e0       	ldi	r18, 0x00	; 0
    8388:	30 e0       	ldi	r19, 0x00	; 0
    838a:	40 e2       	ldi	r20, 0x20	; 32
    838c:	51 e4       	ldi	r21, 0x41	; 65
    838e:	0e 94 23 44 	call	0x8846	; 0x8846 <__mulsf3>
    8392:	dc 01       	movw	r26, r24
    8394:	cb 01       	movw	r24, r22
    8396:	bc 01       	movw	r22, r24
    8398:	cd 01       	movw	r24, r26
    839a:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    839e:	dc 01       	movw	r26, r24
    83a0:	cb 01       	movw	r24, r22
    83a2:	9e 83       	std	Y+6, r25	; 0x06
    83a4:	8d 83       	std	Y+5, r24	; 0x05
    83a6:	0f c0       	rjmp	.+30     	; 0x83c6 <wprowadz_numer+0x11ac>
    83a8:	80 e9       	ldi	r24, 0x90	; 144
    83aa:	91 e0       	ldi	r25, 0x01	; 1
    83ac:	9c 83       	std	Y+4, r25	; 0x04
    83ae:	8b 83       	std	Y+3, r24	; 0x03
    83b0:	8b 81       	ldd	r24, Y+3	; 0x03
    83b2:	9c 81       	ldd	r25, Y+4	; 0x04
    83b4:	01 97       	sbiw	r24, 0x01	; 1
    83b6:	f1 f7       	brne	.-4      	; 0x83b4 <wprowadz_numer+0x119a>
    83b8:	9c 83       	std	Y+4, r25	; 0x04
    83ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    83bc:	8d 81       	ldd	r24, Y+5	; 0x05
    83be:	9e 81       	ldd	r25, Y+6	; 0x06
    83c0:	01 97       	sbiw	r24, 0x01	; 1
    83c2:	9e 83       	std	Y+6, r25	; 0x06
    83c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    83c6:	8d 81       	ldd	r24, Y+5	; 0x05
    83c8:	9e 81       	ldd	r25, Y+6	; 0x06
    83ca:	00 97       	sbiw	r24, 0x00	; 0
    83cc:	69 f7       	brne	.-38     	; 0x83a8 <wprowadz_numer+0x118e>
    83ce:	14 c0       	rjmp	.+40     	; 0x83f8 <wprowadz_numer+0x11de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    83d0:	6f 81       	ldd	r22, Y+7	; 0x07
    83d2:	78 85       	ldd	r23, Y+8	; 0x08
    83d4:	89 85       	ldd	r24, Y+9	; 0x09
    83d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    83d8:	0e 94 4d 42 	call	0x849a	; 0x849a <__fixunssfsi>
    83dc:	dc 01       	movw	r26, r24
    83de:	cb 01       	movw	r24, r22
    83e0:	9e 83       	std	Y+6, r25	; 0x06
    83e2:	8d 83       	std	Y+5, r24	; 0x05
    83e4:	8d 81       	ldd	r24, Y+5	; 0x05
    83e6:	9e 81       	ldd	r25, Y+6	; 0x06
    83e8:	9a 83       	std	Y+2, r25	; 0x02
    83ea:	89 83       	std	Y+1, r24	; 0x01
    83ec:	89 81       	ldd	r24, Y+1	; 0x01
    83ee:	9a 81       	ldd	r25, Y+2	; 0x02
    83f0:	01 97       	sbiw	r24, 0x01	; 1
    83f2:	f1 f7       	brne	.-4      	; 0x83f0 <wprowadz_numer+0x11d6>
    83f4:	9a 83       	std	Y+2, r25	; 0x02
    83f6:	89 83       	std	Y+1, r24	; 0x01
	}

	wyswietl_numer(cyfra_int);
	komunikat_glosowy(cyfra_int);
	_delay_ms(1000); //(DO USUNI CIA)
	while (klawisz_ENT_pressed) {
    83f8:	e3 e3       	ldi	r30, 0x33	; 51
    83fa:	f0 e0       	ldi	r31, 0x00	; 0
    83fc:	80 81       	ld	r24, Z
    83fe:	88 2f       	mov	r24, r24
    8400:	90 e0       	ldi	r25, 0x00	; 0
    8402:	82 70       	andi	r24, 0x02	; 2
    8404:	90 70       	andi	r25, 0x00	; 0
    8406:	00 97       	sbiw	r24, 0x00	; 0
    8408:	09 f0       	breq	.+2      	; 0x840c <wprowadz_numer+0x11f2>
    840a:	de cd       	rjmp	.-1092   	; 0x7fc8 <wprowadz_numer+0xdae>
				komunikat_glosowy(cyfra_int);
				_delay_ms(200);
			}
		}
	}
	komunikat_glosowy(18);
    840c:	82 e1       	ldi	r24, 0x12	; 18
    840e:	0e 94 5c 00 	call	0xb8	; 0xb8 <komunikat_glosowy>
	niewidomy_int[3] = cyfra_int;
    8412:	80 91 25 02 	lds	r24, 0x0225
    8416:	90 91 26 02 	lds	r25, 0x0226
    841a:	90 93 33 02 	sts	0x0233, r25
    841e:	80 93 32 02 	sts	0x0232, r24
	cyfra_char = cyfra_int+48;
    8422:	80 91 25 02 	lds	r24, 0x0225
    8426:	90 91 26 02 	lds	r25, 0x0226
    842a:	80 5d       	subi	r24, 0xD0	; 208
    842c:	80 93 27 02 	sts	0x0227, r24
	niewidomy_char[3] = cyfra_char;
    8430:	80 91 27 02 	lds	r24, 0x0227
    8434:	80 93 2b 02 	sts	0x022B, r24
	komunikat_glosowy(15);
    8438:	8f e0       	ldi	r24, 0x0F	; 15
    843a:	0e 94 5c 00 	call	0xb8	; 0xb8 <komunikat_glosowy>
	for (i = 0; i < 3; i++) {
    843e:	10 92 24 02 	sts	0x0224, r1
    8442:	12 c0       	rjmp	.+36     	; 0x8468 <wprowadz_numer+0x124e>
		komunikat_glosowy(niewidomy_int[i]);
    8444:	80 91 24 02 	lds	r24, 0x0224
    8448:	88 2f       	mov	r24, r24
    844a:	90 e0       	ldi	r25, 0x00	; 0
    844c:	88 0f       	add	r24, r24
    844e:	99 1f       	adc	r25, r25
    8450:	fc 01       	movw	r30, r24
    8452:	e4 5d       	subi	r30, 0xD4	; 212
    8454:	fd 4f       	sbci	r31, 0xFD	; 253
    8456:	80 81       	ld	r24, Z
    8458:	91 81       	ldd	r25, Z+1	; 0x01
    845a:	0e 94 5c 00 	call	0xb8	; 0xb8 <komunikat_glosowy>
	komunikat_glosowy(18);
	niewidomy_int[3] = cyfra_int;
	cyfra_char = cyfra_int+48;
	niewidomy_char[3] = cyfra_char;
	komunikat_glosowy(15);
	for (i = 0; i < 3; i++) {
    845e:	80 91 24 02 	lds	r24, 0x0224
    8462:	8f 5f       	subi	r24, 0xFF	; 255
    8464:	80 93 24 02 	sts	0x0224, r24
    8468:	80 91 24 02 	lds	r24, 0x0224
    846c:	83 30       	cpi	r24, 0x03	; 3
    846e:	50 f3       	brcs	.-44     	; 0x8444 <wprowadz_numer+0x122a>
		komunikat_glosowy(niewidomy_int[i]);
	}
	komunikat_glosowy(cyfra_int);
    8470:	80 91 25 02 	lds	r24, 0x0225
    8474:	90 91 26 02 	lds	r25, 0x0226
    8478:	0e 94 5c 00 	call	0xb8	; 0xb8 <komunikat_glosowy>
	komunikat_glosowy(20);
    847c:	84 e1       	ldi	r24, 0x14	; 20
    847e:	0e 94 5c 00 	call	0xb8	; 0xb8 <komunikat_glosowy>
}
    8482:	c2 58       	subi	r28, 0x82	; 130
    8484:	df 4f       	sbci	r29, 0xFF	; 255
    8486:	0f b6       	in	r0, 0x3f	; 63
    8488:	f8 94       	cli
    848a:	de bf       	out	0x3e, r29	; 62
    848c:	0f be       	out	0x3f, r0	; 63
    848e:	cd bf       	out	0x3d, r28	; 61
    8490:	cf 91       	pop	r28
    8492:	df 91       	pop	r29
    8494:	1f 91       	pop	r17
    8496:	0f 91       	pop	r16
    8498:	08 95       	ret

0000849a <__fixunssfsi>:
    849a:	ef 92       	push	r14
    849c:	ff 92       	push	r15
    849e:	0f 93       	push	r16
    84a0:	1f 93       	push	r17
    84a2:	7b 01       	movw	r14, r22
    84a4:	8c 01       	movw	r16, r24
    84a6:	20 e0       	ldi	r18, 0x00	; 0
    84a8:	30 e0       	ldi	r19, 0x00	; 0
    84aa:	40 e0       	ldi	r20, 0x00	; 0
    84ac:	5f e4       	ldi	r21, 0x4F	; 79
    84ae:	0e 94 f9 45 	call	0x8bf2	; 0x8bf2 <__gesf2>
    84b2:	88 23       	and	r24, r24
    84b4:	8c f0       	brlt	.+34     	; 0x84d8 <__fixunssfsi+0x3e>
    84b6:	c8 01       	movw	r24, r16
    84b8:	b7 01       	movw	r22, r14
    84ba:	20 e0       	ldi	r18, 0x00	; 0
    84bc:	30 e0       	ldi	r19, 0x00	; 0
    84be:	40 e0       	ldi	r20, 0x00	; 0
    84c0:	5f e4       	ldi	r21, 0x4F	; 79
    84c2:	0e 94 c5 43 	call	0x878a	; 0x878a <__subsf3>
    84c6:	0e 94 59 46 	call	0x8cb2	; 0x8cb2 <__fixsfsi>
    84ca:	9b 01       	movw	r18, r22
    84cc:	ac 01       	movw	r20, r24
    84ce:	20 50       	subi	r18, 0x00	; 0
    84d0:	30 40       	sbci	r19, 0x00	; 0
    84d2:	40 40       	sbci	r20, 0x00	; 0
    84d4:	50 48       	sbci	r21, 0x80	; 128
    84d6:	06 c0       	rjmp	.+12     	; 0x84e4 <__fixunssfsi+0x4a>
    84d8:	c8 01       	movw	r24, r16
    84da:	b7 01       	movw	r22, r14
    84dc:	0e 94 59 46 	call	0x8cb2	; 0x8cb2 <__fixsfsi>
    84e0:	9b 01       	movw	r18, r22
    84e2:	ac 01       	movw	r20, r24
    84e4:	b9 01       	movw	r22, r18
    84e6:	ca 01       	movw	r24, r20
    84e8:	1f 91       	pop	r17
    84ea:	0f 91       	pop	r16
    84ec:	ff 90       	pop	r15
    84ee:	ef 90       	pop	r14
    84f0:	08 95       	ret

000084f2 <_fpadd_parts>:
    84f2:	a0 e0       	ldi	r26, 0x00	; 0
    84f4:	b0 e0       	ldi	r27, 0x00	; 0
    84f6:	ef e7       	ldi	r30, 0x7F	; 127
    84f8:	f2 e4       	ldi	r31, 0x42	; 66
    84fa:	0c 94 a0 48 	jmp	0x9140	; 0x9140 <__prologue_saves__>
    84fe:	dc 01       	movw	r26, r24
    8500:	2b 01       	movw	r4, r22
    8502:	fa 01       	movw	r30, r20
    8504:	9c 91       	ld	r25, X
    8506:	92 30       	cpi	r25, 0x02	; 2
    8508:	08 f4       	brcc	.+2      	; 0x850c <_fpadd_parts+0x1a>
    850a:	39 c1       	rjmp	.+626    	; 0x877e <_fpadd_parts+0x28c>
    850c:	eb 01       	movw	r28, r22
    850e:	88 81       	ld	r24, Y
    8510:	82 30       	cpi	r24, 0x02	; 2
    8512:	08 f4       	brcc	.+2      	; 0x8516 <_fpadd_parts+0x24>
    8514:	33 c1       	rjmp	.+614    	; 0x877c <_fpadd_parts+0x28a>
    8516:	94 30       	cpi	r25, 0x04	; 4
    8518:	69 f4       	brne	.+26     	; 0x8534 <_fpadd_parts+0x42>
    851a:	84 30       	cpi	r24, 0x04	; 4
    851c:	09 f0       	breq	.+2      	; 0x8520 <_fpadd_parts+0x2e>
    851e:	2f c1       	rjmp	.+606    	; 0x877e <_fpadd_parts+0x28c>
    8520:	11 96       	adiw	r26, 0x01	; 1
    8522:	9c 91       	ld	r25, X
    8524:	11 97       	sbiw	r26, 0x01	; 1
    8526:	89 81       	ldd	r24, Y+1	; 0x01
    8528:	98 17       	cp	r25, r24
    852a:	09 f4       	brne	.+2      	; 0x852e <_fpadd_parts+0x3c>
    852c:	28 c1       	rjmp	.+592    	; 0x877e <_fpadd_parts+0x28c>
    852e:	ac e0       	ldi	r26, 0x0C	; 12
    8530:	b2 e0       	ldi	r27, 0x02	; 2
    8532:	25 c1       	rjmp	.+586    	; 0x877e <_fpadd_parts+0x28c>
    8534:	84 30       	cpi	r24, 0x04	; 4
    8536:	09 f4       	brne	.+2      	; 0x853a <_fpadd_parts+0x48>
    8538:	21 c1       	rjmp	.+578    	; 0x877c <_fpadd_parts+0x28a>
    853a:	82 30       	cpi	r24, 0x02	; 2
    853c:	a9 f4       	brne	.+42     	; 0x8568 <_fpadd_parts+0x76>
    853e:	92 30       	cpi	r25, 0x02	; 2
    8540:	09 f0       	breq	.+2      	; 0x8544 <_fpadd_parts+0x52>
    8542:	1d c1       	rjmp	.+570    	; 0x877e <_fpadd_parts+0x28c>
    8544:	9a 01       	movw	r18, r20
    8546:	ad 01       	movw	r20, r26
    8548:	88 e0       	ldi	r24, 0x08	; 8
    854a:	ea 01       	movw	r28, r20
    854c:	09 90       	ld	r0, Y+
    854e:	ae 01       	movw	r20, r28
    8550:	e9 01       	movw	r28, r18
    8552:	09 92       	st	Y+, r0
    8554:	9e 01       	movw	r18, r28
    8556:	81 50       	subi	r24, 0x01	; 1
    8558:	c1 f7       	brne	.-16     	; 0x854a <_fpadd_parts+0x58>
    855a:	e2 01       	movw	r28, r4
    855c:	89 81       	ldd	r24, Y+1	; 0x01
    855e:	11 96       	adiw	r26, 0x01	; 1
    8560:	9c 91       	ld	r25, X
    8562:	89 23       	and	r24, r25
    8564:	81 83       	std	Z+1, r24	; 0x01
    8566:	08 c1       	rjmp	.+528    	; 0x8778 <_fpadd_parts+0x286>
    8568:	92 30       	cpi	r25, 0x02	; 2
    856a:	09 f4       	brne	.+2      	; 0x856e <_fpadd_parts+0x7c>
    856c:	07 c1       	rjmp	.+526    	; 0x877c <_fpadd_parts+0x28a>
    856e:	12 96       	adiw	r26, 0x02	; 2
    8570:	2d 90       	ld	r2, X+
    8572:	3c 90       	ld	r3, X
    8574:	13 97       	sbiw	r26, 0x03	; 3
    8576:	eb 01       	movw	r28, r22
    8578:	8a 81       	ldd	r24, Y+2	; 0x02
    857a:	9b 81       	ldd	r25, Y+3	; 0x03
    857c:	14 96       	adiw	r26, 0x04	; 4
    857e:	ad 90       	ld	r10, X+
    8580:	bd 90       	ld	r11, X+
    8582:	cd 90       	ld	r12, X+
    8584:	dc 90       	ld	r13, X
    8586:	17 97       	sbiw	r26, 0x07	; 7
    8588:	ec 80       	ldd	r14, Y+4	; 0x04
    858a:	fd 80       	ldd	r15, Y+5	; 0x05
    858c:	0e 81       	ldd	r16, Y+6	; 0x06
    858e:	1f 81       	ldd	r17, Y+7	; 0x07
    8590:	91 01       	movw	r18, r2
    8592:	28 1b       	sub	r18, r24
    8594:	39 0b       	sbc	r19, r25
    8596:	b9 01       	movw	r22, r18
    8598:	37 ff       	sbrs	r19, 7
    859a:	04 c0       	rjmp	.+8      	; 0x85a4 <_fpadd_parts+0xb2>
    859c:	66 27       	eor	r22, r22
    859e:	77 27       	eor	r23, r23
    85a0:	62 1b       	sub	r22, r18
    85a2:	73 0b       	sbc	r23, r19
    85a4:	60 32       	cpi	r22, 0x20	; 32
    85a6:	71 05       	cpc	r23, r1
    85a8:	0c f0       	brlt	.+2      	; 0x85ac <_fpadd_parts+0xba>
    85aa:	61 c0       	rjmp	.+194    	; 0x866e <_fpadd_parts+0x17c>
    85ac:	12 16       	cp	r1, r18
    85ae:	13 06       	cpc	r1, r19
    85b0:	6c f5       	brge	.+90     	; 0x860c <_fpadd_parts+0x11a>
    85b2:	37 01       	movw	r6, r14
    85b4:	48 01       	movw	r8, r16
    85b6:	06 2e       	mov	r0, r22
    85b8:	04 c0       	rjmp	.+8      	; 0x85c2 <_fpadd_parts+0xd0>
    85ba:	96 94       	lsr	r9
    85bc:	87 94       	ror	r8
    85be:	77 94       	ror	r7
    85c0:	67 94       	ror	r6
    85c2:	0a 94       	dec	r0
    85c4:	d2 f7       	brpl	.-12     	; 0x85ba <_fpadd_parts+0xc8>
    85c6:	21 e0       	ldi	r18, 0x01	; 1
    85c8:	30 e0       	ldi	r19, 0x00	; 0
    85ca:	40 e0       	ldi	r20, 0x00	; 0
    85cc:	50 e0       	ldi	r21, 0x00	; 0
    85ce:	04 c0       	rjmp	.+8      	; 0x85d8 <_fpadd_parts+0xe6>
    85d0:	22 0f       	add	r18, r18
    85d2:	33 1f       	adc	r19, r19
    85d4:	44 1f       	adc	r20, r20
    85d6:	55 1f       	adc	r21, r21
    85d8:	6a 95       	dec	r22
    85da:	d2 f7       	brpl	.-12     	; 0x85d0 <_fpadd_parts+0xde>
    85dc:	21 50       	subi	r18, 0x01	; 1
    85de:	30 40       	sbci	r19, 0x00	; 0
    85e0:	40 40       	sbci	r20, 0x00	; 0
    85e2:	50 40       	sbci	r21, 0x00	; 0
    85e4:	2e 21       	and	r18, r14
    85e6:	3f 21       	and	r19, r15
    85e8:	40 23       	and	r20, r16
    85ea:	51 23       	and	r21, r17
    85ec:	21 15       	cp	r18, r1
    85ee:	31 05       	cpc	r19, r1
    85f0:	41 05       	cpc	r20, r1
    85f2:	51 05       	cpc	r21, r1
    85f4:	21 f0       	breq	.+8      	; 0x85fe <_fpadd_parts+0x10c>
    85f6:	21 e0       	ldi	r18, 0x01	; 1
    85f8:	30 e0       	ldi	r19, 0x00	; 0
    85fa:	40 e0       	ldi	r20, 0x00	; 0
    85fc:	50 e0       	ldi	r21, 0x00	; 0
    85fe:	79 01       	movw	r14, r18
    8600:	8a 01       	movw	r16, r20
    8602:	e6 28       	or	r14, r6
    8604:	f7 28       	or	r15, r7
    8606:	08 29       	or	r16, r8
    8608:	19 29       	or	r17, r9
    860a:	3c c0       	rjmp	.+120    	; 0x8684 <_fpadd_parts+0x192>
    860c:	23 2b       	or	r18, r19
    860e:	d1 f1       	breq	.+116    	; 0x8684 <_fpadd_parts+0x192>
    8610:	26 0e       	add	r2, r22
    8612:	37 1e       	adc	r3, r23
    8614:	35 01       	movw	r6, r10
    8616:	46 01       	movw	r8, r12
    8618:	06 2e       	mov	r0, r22
    861a:	04 c0       	rjmp	.+8      	; 0x8624 <_fpadd_parts+0x132>
    861c:	96 94       	lsr	r9
    861e:	87 94       	ror	r8
    8620:	77 94       	ror	r7
    8622:	67 94       	ror	r6
    8624:	0a 94       	dec	r0
    8626:	d2 f7       	brpl	.-12     	; 0x861c <_fpadd_parts+0x12a>
    8628:	21 e0       	ldi	r18, 0x01	; 1
    862a:	30 e0       	ldi	r19, 0x00	; 0
    862c:	40 e0       	ldi	r20, 0x00	; 0
    862e:	50 e0       	ldi	r21, 0x00	; 0
    8630:	04 c0       	rjmp	.+8      	; 0x863a <_fpadd_parts+0x148>
    8632:	22 0f       	add	r18, r18
    8634:	33 1f       	adc	r19, r19
    8636:	44 1f       	adc	r20, r20
    8638:	55 1f       	adc	r21, r21
    863a:	6a 95       	dec	r22
    863c:	d2 f7       	brpl	.-12     	; 0x8632 <_fpadd_parts+0x140>
    863e:	21 50       	subi	r18, 0x01	; 1
    8640:	30 40       	sbci	r19, 0x00	; 0
    8642:	40 40       	sbci	r20, 0x00	; 0
    8644:	50 40       	sbci	r21, 0x00	; 0
    8646:	2a 21       	and	r18, r10
    8648:	3b 21       	and	r19, r11
    864a:	4c 21       	and	r20, r12
    864c:	5d 21       	and	r21, r13
    864e:	21 15       	cp	r18, r1
    8650:	31 05       	cpc	r19, r1
    8652:	41 05       	cpc	r20, r1
    8654:	51 05       	cpc	r21, r1
    8656:	21 f0       	breq	.+8      	; 0x8660 <_fpadd_parts+0x16e>
    8658:	21 e0       	ldi	r18, 0x01	; 1
    865a:	30 e0       	ldi	r19, 0x00	; 0
    865c:	40 e0       	ldi	r20, 0x00	; 0
    865e:	50 e0       	ldi	r21, 0x00	; 0
    8660:	59 01       	movw	r10, r18
    8662:	6a 01       	movw	r12, r20
    8664:	a6 28       	or	r10, r6
    8666:	b7 28       	or	r11, r7
    8668:	c8 28       	or	r12, r8
    866a:	d9 28       	or	r13, r9
    866c:	0b c0       	rjmp	.+22     	; 0x8684 <_fpadd_parts+0x192>
    866e:	82 15       	cp	r24, r2
    8670:	93 05       	cpc	r25, r3
    8672:	2c f0       	brlt	.+10     	; 0x867e <_fpadd_parts+0x18c>
    8674:	1c 01       	movw	r2, r24
    8676:	aa 24       	eor	r10, r10
    8678:	bb 24       	eor	r11, r11
    867a:	65 01       	movw	r12, r10
    867c:	03 c0       	rjmp	.+6      	; 0x8684 <_fpadd_parts+0x192>
    867e:	ee 24       	eor	r14, r14
    8680:	ff 24       	eor	r15, r15
    8682:	87 01       	movw	r16, r14
    8684:	11 96       	adiw	r26, 0x01	; 1
    8686:	9c 91       	ld	r25, X
    8688:	d2 01       	movw	r26, r4
    868a:	11 96       	adiw	r26, 0x01	; 1
    868c:	8c 91       	ld	r24, X
    868e:	98 17       	cp	r25, r24
    8690:	09 f4       	brne	.+2      	; 0x8694 <_fpadd_parts+0x1a2>
    8692:	45 c0       	rjmp	.+138    	; 0x871e <_fpadd_parts+0x22c>
    8694:	99 23       	and	r25, r25
    8696:	39 f0       	breq	.+14     	; 0x86a6 <_fpadd_parts+0x1b4>
    8698:	a8 01       	movw	r20, r16
    869a:	97 01       	movw	r18, r14
    869c:	2a 19       	sub	r18, r10
    869e:	3b 09       	sbc	r19, r11
    86a0:	4c 09       	sbc	r20, r12
    86a2:	5d 09       	sbc	r21, r13
    86a4:	06 c0       	rjmp	.+12     	; 0x86b2 <_fpadd_parts+0x1c0>
    86a6:	a6 01       	movw	r20, r12
    86a8:	95 01       	movw	r18, r10
    86aa:	2e 19       	sub	r18, r14
    86ac:	3f 09       	sbc	r19, r15
    86ae:	40 0b       	sbc	r20, r16
    86b0:	51 0b       	sbc	r21, r17
    86b2:	57 fd       	sbrc	r21, 7
    86b4:	08 c0       	rjmp	.+16     	; 0x86c6 <_fpadd_parts+0x1d4>
    86b6:	11 82       	std	Z+1, r1	; 0x01
    86b8:	33 82       	std	Z+3, r3	; 0x03
    86ba:	22 82       	std	Z+2, r2	; 0x02
    86bc:	24 83       	std	Z+4, r18	; 0x04
    86be:	35 83       	std	Z+5, r19	; 0x05
    86c0:	46 83       	std	Z+6, r20	; 0x06
    86c2:	57 83       	std	Z+7, r21	; 0x07
    86c4:	1d c0       	rjmp	.+58     	; 0x8700 <_fpadd_parts+0x20e>
    86c6:	81 e0       	ldi	r24, 0x01	; 1
    86c8:	81 83       	std	Z+1, r24	; 0x01
    86ca:	33 82       	std	Z+3, r3	; 0x03
    86cc:	22 82       	std	Z+2, r2	; 0x02
    86ce:	88 27       	eor	r24, r24
    86d0:	99 27       	eor	r25, r25
    86d2:	dc 01       	movw	r26, r24
    86d4:	82 1b       	sub	r24, r18
    86d6:	93 0b       	sbc	r25, r19
    86d8:	a4 0b       	sbc	r26, r20
    86da:	b5 0b       	sbc	r27, r21
    86dc:	84 83       	std	Z+4, r24	; 0x04
    86de:	95 83       	std	Z+5, r25	; 0x05
    86e0:	a6 83       	std	Z+6, r26	; 0x06
    86e2:	b7 83       	std	Z+7, r27	; 0x07
    86e4:	0d c0       	rjmp	.+26     	; 0x8700 <_fpadd_parts+0x20e>
    86e6:	22 0f       	add	r18, r18
    86e8:	33 1f       	adc	r19, r19
    86ea:	44 1f       	adc	r20, r20
    86ec:	55 1f       	adc	r21, r21
    86ee:	24 83       	std	Z+4, r18	; 0x04
    86f0:	35 83       	std	Z+5, r19	; 0x05
    86f2:	46 83       	std	Z+6, r20	; 0x06
    86f4:	57 83       	std	Z+7, r21	; 0x07
    86f6:	82 81       	ldd	r24, Z+2	; 0x02
    86f8:	93 81       	ldd	r25, Z+3	; 0x03
    86fa:	01 97       	sbiw	r24, 0x01	; 1
    86fc:	93 83       	std	Z+3, r25	; 0x03
    86fe:	82 83       	std	Z+2, r24	; 0x02
    8700:	24 81       	ldd	r18, Z+4	; 0x04
    8702:	35 81       	ldd	r19, Z+5	; 0x05
    8704:	46 81       	ldd	r20, Z+6	; 0x06
    8706:	57 81       	ldd	r21, Z+7	; 0x07
    8708:	da 01       	movw	r26, r20
    870a:	c9 01       	movw	r24, r18
    870c:	01 97       	sbiw	r24, 0x01	; 1
    870e:	a1 09       	sbc	r26, r1
    8710:	b1 09       	sbc	r27, r1
    8712:	8f 5f       	subi	r24, 0xFF	; 255
    8714:	9f 4f       	sbci	r25, 0xFF	; 255
    8716:	af 4f       	sbci	r26, 0xFF	; 255
    8718:	bf 43       	sbci	r27, 0x3F	; 63
    871a:	28 f3       	brcs	.-54     	; 0x86e6 <_fpadd_parts+0x1f4>
    871c:	0b c0       	rjmp	.+22     	; 0x8734 <_fpadd_parts+0x242>
    871e:	91 83       	std	Z+1, r25	; 0x01
    8720:	33 82       	std	Z+3, r3	; 0x03
    8722:	22 82       	std	Z+2, r2	; 0x02
    8724:	ea 0c       	add	r14, r10
    8726:	fb 1c       	adc	r15, r11
    8728:	0c 1d       	adc	r16, r12
    872a:	1d 1d       	adc	r17, r13
    872c:	e4 82       	std	Z+4, r14	; 0x04
    872e:	f5 82       	std	Z+5, r15	; 0x05
    8730:	06 83       	std	Z+6, r16	; 0x06
    8732:	17 83       	std	Z+7, r17	; 0x07
    8734:	83 e0       	ldi	r24, 0x03	; 3
    8736:	80 83       	st	Z, r24
    8738:	24 81       	ldd	r18, Z+4	; 0x04
    873a:	35 81       	ldd	r19, Z+5	; 0x05
    873c:	46 81       	ldd	r20, Z+6	; 0x06
    873e:	57 81       	ldd	r21, Z+7	; 0x07
    8740:	57 ff       	sbrs	r21, 7
    8742:	1a c0       	rjmp	.+52     	; 0x8778 <_fpadd_parts+0x286>
    8744:	c9 01       	movw	r24, r18
    8746:	aa 27       	eor	r26, r26
    8748:	97 fd       	sbrc	r25, 7
    874a:	a0 95       	com	r26
    874c:	ba 2f       	mov	r27, r26
    874e:	81 70       	andi	r24, 0x01	; 1
    8750:	90 70       	andi	r25, 0x00	; 0
    8752:	a0 70       	andi	r26, 0x00	; 0
    8754:	b0 70       	andi	r27, 0x00	; 0
    8756:	56 95       	lsr	r21
    8758:	47 95       	ror	r20
    875a:	37 95       	ror	r19
    875c:	27 95       	ror	r18
    875e:	82 2b       	or	r24, r18
    8760:	93 2b       	or	r25, r19
    8762:	a4 2b       	or	r26, r20
    8764:	b5 2b       	or	r27, r21
    8766:	84 83       	std	Z+4, r24	; 0x04
    8768:	95 83       	std	Z+5, r25	; 0x05
    876a:	a6 83       	std	Z+6, r26	; 0x06
    876c:	b7 83       	std	Z+7, r27	; 0x07
    876e:	82 81       	ldd	r24, Z+2	; 0x02
    8770:	93 81       	ldd	r25, Z+3	; 0x03
    8772:	01 96       	adiw	r24, 0x01	; 1
    8774:	93 83       	std	Z+3, r25	; 0x03
    8776:	82 83       	std	Z+2, r24	; 0x02
    8778:	df 01       	movw	r26, r30
    877a:	01 c0       	rjmp	.+2      	; 0x877e <_fpadd_parts+0x28c>
    877c:	d2 01       	movw	r26, r4
    877e:	cd 01       	movw	r24, r26
    8780:	cd b7       	in	r28, 0x3d	; 61
    8782:	de b7       	in	r29, 0x3e	; 62
    8784:	e2 e1       	ldi	r30, 0x12	; 18
    8786:	0c 94 bc 48 	jmp	0x9178	; 0x9178 <__epilogue_restores__>

0000878a <__subsf3>:
    878a:	a0 e2       	ldi	r26, 0x20	; 32
    878c:	b0 e0       	ldi	r27, 0x00	; 0
    878e:	eb ec       	ldi	r30, 0xCB	; 203
    8790:	f3 e4       	ldi	r31, 0x43	; 67
    8792:	0c 94 ac 48 	jmp	0x9158	; 0x9158 <__prologue_saves__+0x18>
    8796:	69 83       	std	Y+1, r22	; 0x01
    8798:	7a 83       	std	Y+2, r23	; 0x02
    879a:	8b 83       	std	Y+3, r24	; 0x03
    879c:	9c 83       	std	Y+4, r25	; 0x04
    879e:	2d 83       	std	Y+5, r18	; 0x05
    87a0:	3e 83       	std	Y+6, r19	; 0x06
    87a2:	4f 83       	std	Y+7, r20	; 0x07
    87a4:	58 87       	std	Y+8, r21	; 0x08
    87a6:	e9 e0       	ldi	r30, 0x09	; 9
    87a8:	ee 2e       	mov	r14, r30
    87aa:	f1 2c       	mov	r15, r1
    87ac:	ec 0e       	add	r14, r28
    87ae:	fd 1e       	adc	r15, r29
    87b0:	ce 01       	movw	r24, r28
    87b2:	01 96       	adiw	r24, 0x01	; 1
    87b4:	b7 01       	movw	r22, r14
    87b6:	0e 94 82 47 	call	0x8f04	; 0x8f04 <__unpack_f>
    87ba:	8e 01       	movw	r16, r28
    87bc:	0f 5e       	subi	r16, 0xEF	; 239
    87be:	1f 4f       	sbci	r17, 0xFF	; 255
    87c0:	ce 01       	movw	r24, r28
    87c2:	05 96       	adiw	r24, 0x05	; 5
    87c4:	b8 01       	movw	r22, r16
    87c6:	0e 94 82 47 	call	0x8f04	; 0x8f04 <__unpack_f>
    87ca:	8a 89       	ldd	r24, Y+18	; 0x12
    87cc:	91 e0       	ldi	r25, 0x01	; 1
    87ce:	89 27       	eor	r24, r25
    87d0:	8a 8b       	std	Y+18, r24	; 0x12
    87d2:	c7 01       	movw	r24, r14
    87d4:	b8 01       	movw	r22, r16
    87d6:	ae 01       	movw	r20, r28
    87d8:	47 5e       	subi	r20, 0xE7	; 231
    87da:	5f 4f       	sbci	r21, 0xFF	; 255
    87dc:	0e 94 79 42 	call	0x84f2	; 0x84f2 <_fpadd_parts>
    87e0:	0e 94 ad 46 	call	0x8d5a	; 0x8d5a <__pack_f>
    87e4:	a0 96       	adiw	r28, 0x20	; 32
    87e6:	e6 e0       	ldi	r30, 0x06	; 6
    87e8:	0c 94 c8 48 	jmp	0x9190	; 0x9190 <__epilogue_restores__+0x18>

000087ec <__addsf3>:
    87ec:	a0 e2       	ldi	r26, 0x20	; 32
    87ee:	b0 e0       	ldi	r27, 0x00	; 0
    87f0:	ec ef       	ldi	r30, 0xFC	; 252
    87f2:	f3 e4       	ldi	r31, 0x43	; 67
    87f4:	0c 94 ac 48 	jmp	0x9158	; 0x9158 <__prologue_saves__+0x18>
    87f8:	69 83       	std	Y+1, r22	; 0x01
    87fa:	7a 83       	std	Y+2, r23	; 0x02
    87fc:	8b 83       	std	Y+3, r24	; 0x03
    87fe:	9c 83       	std	Y+4, r25	; 0x04
    8800:	2d 83       	std	Y+5, r18	; 0x05
    8802:	3e 83       	std	Y+6, r19	; 0x06
    8804:	4f 83       	std	Y+7, r20	; 0x07
    8806:	58 87       	std	Y+8, r21	; 0x08
    8808:	f9 e0       	ldi	r31, 0x09	; 9
    880a:	ef 2e       	mov	r14, r31
    880c:	f1 2c       	mov	r15, r1
    880e:	ec 0e       	add	r14, r28
    8810:	fd 1e       	adc	r15, r29
    8812:	ce 01       	movw	r24, r28
    8814:	01 96       	adiw	r24, 0x01	; 1
    8816:	b7 01       	movw	r22, r14
    8818:	0e 94 82 47 	call	0x8f04	; 0x8f04 <__unpack_f>
    881c:	8e 01       	movw	r16, r28
    881e:	0f 5e       	subi	r16, 0xEF	; 239
    8820:	1f 4f       	sbci	r17, 0xFF	; 255
    8822:	ce 01       	movw	r24, r28
    8824:	05 96       	adiw	r24, 0x05	; 5
    8826:	b8 01       	movw	r22, r16
    8828:	0e 94 82 47 	call	0x8f04	; 0x8f04 <__unpack_f>
    882c:	c7 01       	movw	r24, r14
    882e:	b8 01       	movw	r22, r16
    8830:	ae 01       	movw	r20, r28
    8832:	47 5e       	subi	r20, 0xE7	; 231
    8834:	5f 4f       	sbci	r21, 0xFF	; 255
    8836:	0e 94 79 42 	call	0x84f2	; 0x84f2 <_fpadd_parts>
    883a:	0e 94 ad 46 	call	0x8d5a	; 0x8d5a <__pack_f>
    883e:	a0 96       	adiw	r28, 0x20	; 32
    8840:	e6 e0       	ldi	r30, 0x06	; 6
    8842:	0c 94 c8 48 	jmp	0x9190	; 0x9190 <__epilogue_restores__+0x18>

00008846 <__mulsf3>:
    8846:	a0 e2       	ldi	r26, 0x20	; 32
    8848:	b0 e0       	ldi	r27, 0x00	; 0
    884a:	e9 e2       	ldi	r30, 0x29	; 41
    884c:	f4 e4       	ldi	r31, 0x44	; 68
    884e:	0c 94 a0 48 	jmp	0x9140	; 0x9140 <__prologue_saves__>
    8852:	69 83       	std	Y+1, r22	; 0x01
    8854:	7a 83       	std	Y+2, r23	; 0x02
    8856:	8b 83       	std	Y+3, r24	; 0x03
    8858:	9c 83       	std	Y+4, r25	; 0x04
    885a:	2d 83       	std	Y+5, r18	; 0x05
    885c:	3e 83       	std	Y+6, r19	; 0x06
    885e:	4f 83       	std	Y+7, r20	; 0x07
    8860:	58 87       	std	Y+8, r21	; 0x08
    8862:	ce 01       	movw	r24, r28
    8864:	01 96       	adiw	r24, 0x01	; 1
    8866:	be 01       	movw	r22, r28
    8868:	67 5f       	subi	r22, 0xF7	; 247
    886a:	7f 4f       	sbci	r23, 0xFF	; 255
    886c:	0e 94 82 47 	call	0x8f04	; 0x8f04 <__unpack_f>
    8870:	ce 01       	movw	r24, r28
    8872:	05 96       	adiw	r24, 0x05	; 5
    8874:	be 01       	movw	r22, r28
    8876:	6f 5e       	subi	r22, 0xEF	; 239
    8878:	7f 4f       	sbci	r23, 0xFF	; 255
    887a:	0e 94 82 47 	call	0x8f04	; 0x8f04 <__unpack_f>
    887e:	99 85       	ldd	r25, Y+9	; 0x09
    8880:	92 30       	cpi	r25, 0x02	; 2
    8882:	88 f0       	brcs	.+34     	; 0x88a6 <__mulsf3+0x60>
    8884:	89 89       	ldd	r24, Y+17	; 0x11
    8886:	82 30       	cpi	r24, 0x02	; 2
    8888:	c8 f0       	brcs	.+50     	; 0x88bc <__mulsf3+0x76>
    888a:	94 30       	cpi	r25, 0x04	; 4
    888c:	19 f4       	brne	.+6      	; 0x8894 <__mulsf3+0x4e>
    888e:	82 30       	cpi	r24, 0x02	; 2
    8890:	51 f4       	brne	.+20     	; 0x88a6 <__mulsf3+0x60>
    8892:	04 c0       	rjmp	.+8      	; 0x889c <__mulsf3+0x56>
    8894:	84 30       	cpi	r24, 0x04	; 4
    8896:	29 f4       	brne	.+10     	; 0x88a2 <__mulsf3+0x5c>
    8898:	92 30       	cpi	r25, 0x02	; 2
    889a:	81 f4       	brne	.+32     	; 0x88bc <__mulsf3+0x76>
    889c:	8c e0       	ldi	r24, 0x0C	; 12
    889e:	92 e0       	ldi	r25, 0x02	; 2
    88a0:	c6 c0       	rjmp	.+396    	; 0x8a2e <__mulsf3+0x1e8>
    88a2:	92 30       	cpi	r25, 0x02	; 2
    88a4:	49 f4       	brne	.+18     	; 0x88b8 <__mulsf3+0x72>
    88a6:	20 e0       	ldi	r18, 0x00	; 0
    88a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    88aa:	8a 89       	ldd	r24, Y+18	; 0x12
    88ac:	98 13       	cpse	r25, r24
    88ae:	21 e0       	ldi	r18, 0x01	; 1
    88b0:	2a 87       	std	Y+10, r18	; 0x0a
    88b2:	ce 01       	movw	r24, r28
    88b4:	09 96       	adiw	r24, 0x09	; 9
    88b6:	bb c0       	rjmp	.+374    	; 0x8a2e <__mulsf3+0x1e8>
    88b8:	82 30       	cpi	r24, 0x02	; 2
    88ba:	49 f4       	brne	.+18     	; 0x88ce <__mulsf3+0x88>
    88bc:	20 e0       	ldi	r18, 0x00	; 0
    88be:	9a 85       	ldd	r25, Y+10	; 0x0a
    88c0:	8a 89       	ldd	r24, Y+18	; 0x12
    88c2:	98 13       	cpse	r25, r24
    88c4:	21 e0       	ldi	r18, 0x01	; 1
    88c6:	2a 8b       	std	Y+18, r18	; 0x12
    88c8:	ce 01       	movw	r24, r28
    88ca:	41 96       	adiw	r24, 0x11	; 17
    88cc:	b0 c0       	rjmp	.+352    	; 0x8a2e <__mulsf3+0x1e8>
    88ce:	2d 84       	ldd	r2, Y+13	; 0x0d
    88d0:	3e 84       	ldd	r3, Y+14	; 0x0e
    88d2:	4f 84       	ldd	r4, Y+15	; 0x0f
    88d4:	58 88       	ldd	r5, Y+16	; 0x10
    88d6:	6d 88       	ldd	r6, Y+21	; 0x15
    88d8:	7e 88       	ldd	r7, Y+22	; 0x16
    88da:	8f 88       	ldd	r8, Y+23	; 0x17
    88dc:	98 8c       	ldd	r9, Y+24	; 0x18
    88de:	ee 24       	eor	r14, r14
    88e0:	ff 24       	eor	r15, r15
    88e2:	87 01       	movw	r16, r14
    88e4:	aa 24       	eor	r10, r10
    88e6:	bb 24       	eor	r11, r11
    88e8:	65 01       	movw	r12, r10
    88ea:	40 e0       	ldi	r20, 0x00	; 0
    88ec:	50 e0       	ldi	r21, 0x00	; 0
    88ee:	60 e0       	ldi	r22, 0x00	; 0
    88f0:	70 e0       	ldi	r23, 0x00	; 0
    88f2:	e0 e0       	ldi	r30, 0x00	; 0
    88f4:	f0 e0       	ldi	r31, 0x00	; 0
    88f6:	c1 01       	movw	r24, r2
    88f8:	81 70       	andi	r24, 0x01	; 1
    88fa:	90 70       	andi	r25, 0x00	; 0
    88fc:	89 2b       	or	r24, r25
    88fe:	e9 f0       	breq	.+58     	; 0x893a <__mulsf3+0xf4>
    8900:	e6 0c       	add	r14, r6
    8902:	f7 1c       	adc	r15, r7
    8904:	08 1d       	adc	r16, r8
    8906:	19 1d       	adc	r17, r9
    8908:	9a 01       	movw	r18, r20
    890a:	ab 01       	movw	r20, r22
    890c:	2a 0d       	add	r18, r10
    890e:	3b 1d       	adc	r19, r11
    8910:	4c 1d       	adc	r20, r12
    8912:	5d 1d       	adc	r21, r13
    8914:	80 e0       	ldi	r24, 0x00	; 0
    8916:	90 e0       	ldi	r25, 0x00	; 0
    8918:	a0 e0       	ldi	r26, 0x00	; 0
    891a:	b0 e0       	ldi	r27, 0x00	; 0
    891c:	e6 14       	cp	r14, r6
    891e:	f7 04       	cpc	r15, r7
    8920:	08 05       	cpc	r16, r8
    8922:	19 05       	cpc	r17, r9
    8924:	20 f4       	brcc	.+8      	; 0x892e <__mulsf3+0xe8>
    8926:	81 e0       	ldi	r24, 0x01	; 1
    8928:	90 e0       	ldi	r25, 0x00	; 0
    892a:	a0 e0       	ldi	r26, 0x00	; 0
    892c:	b0 e0       	ldi	r27, 0x00	; 0
    892e:	ba 01       	movw	r22, r20
    8930:	a9 01       	movw	r20, r18
    8932:	48 0f       	add	r20, r24
    8934:	59 1f       	adc	r21, r25
    8936:	6a 1f       	adc	r22, r26
    8938:	7b 1f       	adc	r23, r27
    893a:	aa 0c       	add	r10, r10
    893c:	bb 1c       	adc	r11, r11
    893e:	cc 1c       	adc	r12, r12
    8940:	dd 1c       	adc	r13, r13
    8942:	97 fe       	sbrs	r9, 7
    8944:	08 c0       	rjmp	.+16     	; 0x8956 <__mulsf3+0x110>
    8946:	81 e0       	ldi	r24, 0x01	; 1
    8948:	90 e0       	ldi	r25, 0x00	; 0
    894a:	a0 e0       	ldi	r26, 0x00	; 0
    894c:	b0 e0       	ldi	r27, 0x00	; 0
    894e:	a8 2a       	or	r10, r24
    8950:	b9 2a       	or	r11, r25
    8952:	ca 2a       	or	r12, r26
    8954:	db 2a       	or	r13, r27
    8956:	31 96       	adiw	r30, 0x01	; 1
    8958:	e0 32       	cpi	r30, 0x20	; 32
    895a:	f1 05       	cpc	r31, r1
    895c:	49 f0       	breq	.+18     	; 0x8970 <__mulsf3+0x12a>
    895e:	66 0c       	add	r6, r6
    8960:	77 1c       	adc	r7, r7
    8962:	88 1c       	adc	r8, r8
    8964:	99 1c       	adc	r9, r9
    8966:	56 94       	lsr	r5
    8968:	47 94       	ror	r4
    896a:	37 94       	ror	r3
    896c:	27 94       	ror	r2
    896e:	c3 cf       	rjmp	.-122    	; 0x88f6 <__mulsf3+0xb0>
    8970:	fa 85       	ldd	r31, Y+10	; 0x0a
    8972:	ea 89       	ldd	r30, Y+18	; 0x12
    8974:	2b 89       	ldd	r18, Y+19	; 0x13
    8976:	3c 89       	ldd	r19, Y+20	; 0x14
    8978:	8b 85       	ldd	r24, Y+11	; 0x0b
    897a:	9c 85       	ldd	r25, Y+12	; 0x0c
    897c:	28 0f       	add	r18, r24
    897e:	39 1f       	adc	r19, r25
    8980:	2e 5f       	subi	r18, 0xFE	; 254
    8982:	3f 4f       	sbci	r19, 0xFF	; 255
    8984:	17 c0       	rjmp	.+46     	; 0x89b4 <__mulsf3+0x16e>
    8986:	ca 01       	movw	r24, r20
    8988:	81 70       	andi	r24, 0x01	; 1
    898a:	90 70       	andi	r25, 0x00	; 0
    898c:	89 2b       	or	r24, r25
    898e:	61 f0       	breq	.+24     	; 0x89a8 <__mulsf3+0x162>
    8990:	16 95       	lsr	r17
    8992:	07 95       	ror	r16
    8994:	f7 94       	ror	r15
    8996:	e7 94       	ror	r14
    8998:	80 e0       	ldi	r24, 0x00	; 0
    899a:	90 e0       	ldi	r25, 0x00	; 0
    899c:	a0 e0       	ldi	r26, 0x00	; 0
    899e:	b0 e8       	ldi	r27, 0x80	; 128
    89a0:	e8 2a       	or	r14, r24
    89a2:	f9 2a       	or	r15, r25
    89a4:	0a 2b       	or	r16, r26
    89a6:	1b 2b       	or	r17, r27
    89a8:	76 95       	lsr	r23
    89aa:	67 95       	ror	r22
    89ac:	57 95       	ror	r21
    89ae:	47 95       	ror	r20
    89b0:	2f 5f       	subi	r18, 0xFF	; 255
    89b2:	3f 4f       	sbci	r19, 0xFF	; 255
    89b4:	77 fd       	sbrc	r23, 7
    89b6:	e7 cf       	rjmp	.-50     	; 0x8986 <__mulsf3+0x140>
    89b8:	0c c0       	rjmp	.+24     	; 0x89d2 <__mulsf3+0x18c>
    89ba:	44 0f       	add	r20, r20
    89bc:	55 1f       	adc	r21, r21
    89be:	66 1f       	adc	r22, r22
    89c0:	77 1f       	adc	r23, r23
    89c2:	17 fd       	sbrc	r17, 7
    89c4:	41 60       	ori	r20, 0x01	; 1
    89c6:	ee 0c       	add	r14, r14
    89c8:	ff 1c       	adc	r15, r15
    89ca:	00 1f       	adc	r16, r16
    89cc:	11 1f       	adc	r17, r17
    89ce:	21 50       	subi	r18, 0x01	; 1
    89d0:	30 40       	sbci	r19, 0x00	; 0
    89d2:	40 30       	cpi	r20, 0x00	; 0
    89d4:	90 e0       	ldi	r25, 0x00	; 0
    89d6:	59 07       	cpc	r21, r25
    89d8:	90 e0       	ldi	r25, 0x00	; 0
    89da:	69 07       	cpc	r22, r25
    89dc:	90 e4       	ldi	r25, 0x40	; 64
    89de:	79 07       	cpc	r23, r25
    89e0:	60 f3       	brcs	.-40     	; 0x89ba <__mulsf3+0x174>
    89e2:	2b 8f       	std	Y+27, r18	; 0x1b
    89e4:	3c 8f       	std	Y+28, r19	; 0x1c
    89e6:	db 01       	movw	r26, r22
    89e8:	ca 01       	movw	r24, r20
    89ea:	8f 77       	andi	r24, 0x7F	; 127
    89ec:	90 70       	andi	r25, 0x00	; 0
    89ee:	a0 70       	andi	r26, 0x00	; 0
    89f0:	b0 70       	andi	r27, 0x00	; 0
    89f2:	80 34       	cpi	r24, 0x40	; 64
    89f4:	91 05       	cpc	r25, r1
    89f6:	a1 05       	cpc	r26, r1
    89f8:	b1 05       	cpc	r27, r1
    89fa:	61 f4       	brne	.+24     	; 0x8a14 <__mulsf3+0x1ce>
    89fc:	47 fd       	sbrc	r20, 7
    89fe:	0a c0       	rjmp	.+20     	; 0x8a14 <__mulsf3+0x1ce>
    8a00:	e1 14       	cp	r14, r1
    8a02:	f1 04       	cpc	r15, r1
    8a04:	01 05       	cpc	r16, r1
    8a06:	11 05       	cpc	r17, r1
    8a08:	29 f0       	breq	.+10     	; 0x8a14 <__mulsf3+0x1ce>
    8a0a:	40 5c       	subi	r20, 0xC0	; 192
    8a0c:	5f 4f       	sbci	r21, 0xFF	; 255
    8a0e:	6f 4f       	sbci	r22, 0xFF	; 255
    8a10:	7f 4f       	sbci	r23, 0xFF	; 255
    8a12:	40 78       	andi	r20, 0x80	; 128
    8a14:	1a 8e       	std	Y+26, r1	; 0x1a
    8a16:	fe 17       	cp	r31, r30
    8a18:	11 f0       	breq	.+4      	; 0x8a1e <__mulsf3+0x1d8>
    8a1a:	81 e0       	ldi	r24, 0x01	; 1
    8a1c:	8a 8f       	std	Y+26, r24	; 0x1a
    8a1e:	4d 8f       	std	Y+29, r20	; 0x1d
    8a20:	5e 8f       	std	Y+30, r21	; 0x1e
    8a22:	6f 8f       	std	Y+31, r22	; 0x1f
    8a24:	78 a3       	std	Y+32, r23	; 0x20
    8a26:	83 e0       	ldi	r24, 0x03	; 3
    8a28:	89 8f       	std	Y+25, r24	; 0x19
    8a2a:	ce 01       	movw	r24, r28
    8a2c:	49 96       	adiw	r24, 0x19	; 25
    8a2e:	0e 94 ad 46 	call	0x8d5a	; 0x8d5a <__pack_f>
    8a32:	a0 96       	adiw	r28, 0x20	; 32
    8a34:	e2 e1       	ldi	r30, 0x12	; 18
    8a36:	0c 94 bc 48 	jmp	0x9178	; 0x9178 <__epilogue_restores__>

00008a3a <__divsf3>:
    8a3a:	a8 e1       	ldi	r26, 0x18	; 24
    8a3c:	b0 e0       	ldi	r27, 0x00	; 0
    8a3e:	e3 e2       	ldi	r30, 0x23	; 35
    8a40:	f5 e4       	ldi	r31, 0x45	; 69
    8a42:	0c 94 a8 48 	jmp	0x9150	; 0x9150 <__prologue_saves__+0x10>
    8a46:	69 83       	std	Y+1, r22	; 0x01
    8a48:	7a 83       	std	Y+2, r23	; 0x02
    8a4a:	8b 83       	std	Y+3, r24	; 0x03
    8a4c:	9c 83       	std	Y+4, r25	; 0x04
    8a4e:	2d 83       	std	Y+5, r18	; 0x05
    8a50:	3e 83       	std	Y+6, r19	; 0x06
    8a52:	4f 83       	std	Y+7, r20	; 0x07
    8a54:	58 87       	std	Y+8, r21	; 0x08
    8a56:	b9 e0       	ldi	r27, 0x09	; 9
    8a58:	eb 2e       	mov	r14, r27
    8a5a:	f1 2c       	mov	r15, r1
    8a5c:	ec 0e       	add	r14, r28
    8a5e:	fd 1e       	adc	r15, r29
    8a60:	ce 01       	movw	r24, r28
    8a62:	01 96       	adiw	r24, 0x01	; 1
    8a64:	b7 01       	movw	r22, r14
    8a66:	0e 94 82 47 	call	0x8f04	; 0x8f04 <__unpack_f>
    8a6a:	8e 01       	movw	r16, r28
    8a6c:	0f 5e       	subi	r16, 0xEF	; 239
    8a6e:	1f 4f       	sbci	r17, 0xFF	; 255
    8a70:	ce 01       	movw	r24, r28
    8a72:	05 96       	adiw	r24, 0x05	; 5
    8a74:	b8 01       	movw	r22, r16
    8a76:	0e 94 82 47 	call	0x8f04	; 0x8f04 <__unpack_f>
    8a7a:	29 85       	ldd	r18, Y+9	; 0x09
    8a7c:	22 30       	cpi	r18, 0x02	; 2
    8a7e:	08 f4       	brcc	.+2      	; 0x8a82 <__divsf3+0x48>
    8a80:	7e c0       	rjmp	.+252    	; 0x8b7e <__divsf3+0x144>
    8a82:	39 89       	ldd	r19, Y+17	; 0x11
    8a84:	32 30       	cpi	r19, 0x02	; 2
    8a86:	10 f4       	brcc	.+4      	; 0x8a8c <__divsf3+0x52>
    8a88:	b8 01       	movw	r22, r16
    8a8a:	7c c0       	rjmp	.+248    	; 0x8b84 <__divsf3+0x14a>
    8a8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    8a8e:	9a 89       	ldd	r25, Y+18	; 0x12
    8a90:	89 27       	eor	r24, r25
    8a92:	8a 87       	std	Y+10, r24	; 0x0a
    8a94:	24 30       	cpi	r18, 0x04	; 4
    8a96:	11 f0       	breq	.+4      	; 0x8a9c <__divsf3+0x62>
    8a98:	22 30       	cpi	r18, 0x02	; 2
    8a9a:	31 f4       	brne	.+12     	; 0x8aa8 <__divsf3+0x6e>
    8a9c:	23 17       	cp	r18, r19
    8a9e:	09 f0       	breq	.+2      	; 0x8aa2 <__divsf3+0x68>
    8aa0:	6e c0       	rjmp	.+220    	; 0x8b7e <__divsf3+0x144>
    8aa2:	6c e0       	ldi	r22, 0x0C	; 12
    8aa4:	72 e0       	ldi	r23, 0x02	; 2
    8aa6:	6e c0       	rjmp	.+220    	; 0x8b84 <__divsf3+0x14a>
    8aa8:	34 30       	cpi	r19, 0x04	; 4
    8aaa:	39 f4       	brne	.+14     	; 0x8aba <__divsf3+0x80>
    8aac:	1d 86       	std	Y+13, r1	; 0x0d
    8aae:	1e 86       	std	Y+14, r1	; 0x0e
    8ab0:	1f 86       	std	Y+15, r1	; 0x0f
    8ab2:	18 8a       	std	Y+16, r1	; 0x10
    8ab4:	1c 86       	std	Y+12, r1	; 0x0c
    8ab6:	1b 86       	std	Y+11, r1	; 0x0b
    8ab8:	04 c0       	rjmp	.+8      	; 0x8ac2 <__divsf3+0x88>
    8aba:	32 30       	cpi	r19, 0x02	; 2
    8abc:	21 f4       	brne	.+8      	; 0x8ac6 <__divsf3+0x8c>
    8abe:	84 e0       	ldi	r24, 0x04	; 4
    8ac0:	89 87       	std	Y+9, r24	; 0x09
    8ac2:	b7 01       	movw	r22, r14
    8ac4:	5f c0       	rjmp	.+190    	; 0x8b84 <__divsf3+0x14a>
    8ac6:	2b 85       	ldd	r18, Y+11	; 0x0b
    8ac8:	3c 85       	ldd	r19, Y+12	; 0x0c
    8aca:	8b 89       	ldd	r24, Y+19	; 0x13
    8acc:	9c 89       	ldd	r25, Y+20	; 0x14
    8ace:	28 1b       	sub	r18, r24
    8ad0:	39 0b       	sbc	r19, r25
    8ad2:	3c 87       	std	Y+12, r19	; 0x0c
    8ad4:	2b 87       	std	Y+11, r18	; 0x0b
    8ad6:	ed 84       	ldd	r14, Y+13	; 0x0d
    8ad8:	fe 84       	ldd	r15, Y+14	; 0x0e
    8ada:	0f 85       	ldd	r16, Y+15	; 0x0f
    8adc:	18 89       	ldd	r17, Y+16	; 0x10
    8ade:	ad 88       	ldd	r10, Y+21	; 0x15
    8ae0:	be 88       	ldd	r11, Y+22	; 0x16
    8ae2:	cf 88       	ldd	r12, Y+23	; 0x17
    8ae4:	d8 8c       	ldd	r13, Y+24	; 0x18
    8ae6:	ea 14       	cp	r14, r10
    8ae8:	fb 04       	cpc	r15, r11
    8aea:	0c 05       	cpc	r16, r12
    8aec:	1d 05       	cpc	r17, r13
    8aee:	40 f4       	brcc	.+16     	; 0x8b00 <__divsf3+0xc6>
    8af0:	ee 0c       	add	r14, r14
    8af2:	ff 1c       	adc	r15, r15
    8af4:	00 1f       	adc	r16, r16
    8af6:	11 1f       	adc	r17, r17
    8af8:	21 50       	subi	r18, 0x01	; 1
    8afa:	30 40       	sbci	r19, 0x00	; 0
    8afc:	3c 87       	std	Y+12, r19	; 0x0c
    8afe:	2b 87       	std	Y+11, r18	; 0x0b
    8b00:	20 e0       	ldi	r18, 0x00	; 0
    8b02:	30 e0       	ldi	r19, 0x00	; 0
    8b04:	40 e0       	ldi	r20, 0x00	; 0
    8b06:	50 e0       	ldi	r21, 0x00	; 0
    8b08:	80 e0       	ldi	r24, 0x00	; 0
    8b0a:	90 e0       	ldi	r25, 0x00	; 0
    8b0c:	a0 e0       	ldi	r26, 0x00	; 0
    8b0e:	b0 e4       	ldi	r27, 0x40	; 64
    8b10:	60 e0       	ldi	r22, 0x00	; 0
    8b12:	70 e0       	ldi	r23, 0x00	; 0
    8b14:	ea 14       	cp	r14, r10
    8b16:	fb 04       	cpc	r15, r11
    8b18:	0c 05       	cpc	r16, r12
    8b1a:	1d 05       	cpc	r17, r13
    8b1c:	40 f0       	brcs	.+16     	; 0x8b2e <__divsf3+0xf4>
    8b1e:	28 2b       	or	r18, r24
    8b20:	39 2b       	or	r19, r25
    8b22:	4a 2b       	or	r20, r26
    8b24:	5b 2b       	or	r21, r27
    8b26:	ea 18       	sub	r14, r10
    8b28:	fb 08       	sbc	r15, r11
    8b2a:	0c 09       	sbc	r16, r12
    8b2c:	1d 09       	sbc	r17, r13
    8b2e:	b6 95       	lsr	r27
    8b30:	a7 95       	ror	r26
    8b32:	97 95       	ror	r25
    8b34:	87 95       	ror	r24
    8b36:	ee 0c       	add	r14, r14
    8b38:	ff 1c       	adc	r15, r15
    8b3a:	00 1f       	adc	r16, r16
    8b3c:	11 1f       	adc	r17, r17
    8b3e:	6f 5f       	subi	r22, 0xFF	; 255
    8b40:	7f 4f       	sbci	r23, 0xFF	; 255
    8b42:	6f 31       	cpi	r22, 0x1F	; 31
    8b44:	71 05       	cpc	r23, r1
    8b46:	31 f7       	brne	.-52     	; 0x8b14 <__divsf3+0xda>
    8b48:	da 01       	movw	r26, r20
    8b4a:	c9 01       	movw	r24, r18
    8b4c:	8f 77       	andi	r24, 0x7F	; 127
    8b4e:	90 70       	andi	r25, 0x00	; 0
    8b50:	a0 70       	andi	r26, 0x00	; 0
    8b52:	b0 70       	andi	r27, 0x00	; 0
    8b54:	80 34       	cpi	r24, 0x40	; 64
    8b56:	91 05       	cpc	r25, r1
    8b58:	a1 05       	cpc	r26, r1
    8b5a:	b1 05       	cpc	r27, r1
    8b5c:	61 f4       	brne	.+24     	; 0x8b76 <__divsf3+0x13c>
    8b5e:	27 fd       	sbrc	r18, 7
    8b60:	0a c0       	rjmp	.+20     	; 0x8b76 <__divsf3+0x13c>
    8b62:	e1 14       	cp	r14, r1
    8b64:	f1 04       	cpc	r15, r1
    8b66:	01 05       	cpc	r16, r1
    8b68:	11 05       	cpc	r17, r1
    8b6a:	29 f0       	breq	.+10     	; 0x8b76 <__divsf3+0x13c>
    8b6c:	20 5c       	subi	r18, 0xC0	; 192
    8b6e:	3f 4f       	sbci	r19, 0xFF	; 255
    8b70:	4f 4f       	sbci	r20, 0xFF	; 255
    8b72:	5f 4f       	sbci	r21, 0xFF	; 255
    8b74:	20 78       	andi	r18, 0x80	; 128
    8b76:	2d 87       	std	Y+13, r18	; 0x0d
    8b78:	3e 87       	std	Y+14, r19	; 0x0e
    8b7a:	4f 87       	std	Y+15, r20	; 0x0f
    8b7c:	58 8b       	std	Y+16, r21	; 0x10
    8b7e:	be 01       	movw	r22, r28
    8b80:	67 5f       	subi	r22, 0xF7	; 247
    8b82:	7f 4f       	sbci	r23, 0xFF	; 255
    8b84:	cb 01       	movw	r24, r22
    8b86:	0e 94 ad 46 	call	0x8d5a	; 0x8d5a <__pack_f>
    8b8a:	68 96       	adiw	r28, 0x18	; 24
    8b8c:	ea e0       	ldi	r30, 0x0A	; 10
    8b8e:	0c 94 c4 48 	jmp	0x9188	; 0x9188 <__epilogue_restores__+0x10>

00008b92 <__gtsf2>:
    8b92:	a8 e1       	ldi	r26, 0x18	; 24
    8b94:	b0 e0       	ldi	r27, 0x00	; 0
    8b96:	ef ec       	ldi	r30, 0xCF	; 207
    8b98:	f5 e4       	ldi	r31, 0x45	; 69
    8b9a:	0c 94 ac 48 	jmp	0x9158	; 0x9158 <__prologue_saves__+0x18>
    8b9e:	69 83       	std	Y+1, r22	; 0x01
    8ba0:	7a 83       	std	Y+2, r23	; 0x02
    8ba2:	8b 83       	std	Y+3, r24	; 0x03
    8ba4:	9c 83       	std	Y+4, r25	; 0x04
    8ba6:	2d 83       	std	Y+5, r18	; 0x05
    8ba8:	3e 83       	std	Y+6, r19	; 0x06
    8baa:	4f 83       	std	Y+7, r20	; 0x07
    8bac:	58 87       	std	Y+8, r21	; 0x08
    8bae:	89 e0       	ldi	r24, 0x09	; 9
    8bb0:	e8 2e       	mov	r14, r24
    8bb2:	f1 2c       	mov	r15, r1
    8bb4:	ec 0e       	add	r14, r28
    8bb6:	fd 1e       	adc	r15, r29
    8bb8:	ce 01       	movw	r24, r28
    8bba:	01 96       	adiw	r24, 0x01	; 1
    8bbc:	b7 01       	movw	r22, r14
    8bbe:	0e 94 82 47 	call	0x8f04	; 0x8f04 <__unpack_f>
    8bc2:	8e 01       	movw	r16, r28
    8bc4:	0f 5e       	subi	r16, 0xEF	; 239
    8bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    8bc8:	ce 01       	movw	r24, r28
    8bca:	05 96       	adiw	r24, 0x05	; 5
    8bcc:	b8 01       	movw	r22, r16
    8bce:	0e 94 82 47 	call	0x8f04	; 0x8f04 <__unpack_f>
    8bd2:	89 85       	ldd	r24, Y+9	; 0x09
    8bd4:	82 30       	cpi	r24, 0x02	; 2
    8bd6:	40 f0       	brcs	.+16     	; 0x8be8 <__gtsf2+0x56>
    8bd8:	89 89       	ldd	r24, Y+17	; 0x11
    8bda:	82 30       	cpi	r24, 0x02	; 2
    8bdc:	28 f0       	brcs	.+10     	; 0x8be8 <__gtsf2+0x56>
    8bde:	c7 01       	movw	r24, r14
    8be0:	b8 01       	movw	r22, r16
    8be2:	0e 94 fa 47 	call	0x8ff4	; 0x8ff4 <__fpcmp_parts_f>
    8be6:	01 c0       	rjmp	.+2      	; 0x8bea <__gtsf2+0x58>
    8be8:	8f ef       	ldi	r24, 0xFF	; 255
    8bea:	68 96       	adiw	r28, 0x18	; 24
    8bec:	e6 e0       	ldi	r30, 0x06	; 6
    8bee:	0c 94 c8 48 	jmp	0x9190	; 0x9190 <__epilogue_restores__+0x18>

00008bf2 <__gesf2>:
    8bf2:	a8 e1       	ldi	r26, 0x18	; 24
    8bf4:	b0 e0       	ldi	r27, 0x00	; 0
    8bf6:	ef ef       	ldi	r30, 0xFF	; 255
    8bf8:	f5 e4       	ldi	r31, 0x45	; 69
    8bfa:	0c 94 ac 48 	jmp	0x9158	; 0x9158 <__prologue_saves__+0x18>
    8bfe:	69 83       	std	Y+1, r22	; 0x01
    8c00:	7a 83       	std	Y+2, r23	; 0x02
    8c02:	8b 83       	std	Y+3, r24	; 0x03
    8c04:	9c 83       	std	Y+4, r25	; 0x04
    8c06:	2d 83       	std	Y+5, r18	; 0x05
    8c08:	3e 83       	std	Y+6, r19	; 0x06
    8c0a:	4f 83       	std	Y+7, r20	; 0x07
    8c0c:	58 87       	std	Y+8, r21	; 0x08
    8c0e:	89 e0       	ldi	r24, 0x09	; 9
    8c10:	e8 2e       	mov	r14, r24
    8c12:	f1 2c       	mov	r15, r1
    8c14:	ec 0e       	add	r14, r28
    8c16:	fd 1e       	adc	r15, r29
    8c18:	ce 01       	movw	r24, r28
    8c1a:	01 96       	adiw	r24, 0x01	; 1
    8c1c:	b7 01       	movw	r22, r14
    8c1e:	0e 94 82 47 	call	0x8f04	; 0x8f04 <__unpack_f>
    8c22:	8e 01       	movw	r16, r28
    8c24:	0f 5e       	subi	r16, 0xEF	; 239
    8c26:	1f 4f       	sbci	r17, 0xFF	; 255
    8c28:	ce 01       	movw	r24, r28
    8c2a:	05 96       	adiw	r24, 0x05	; 5
    8c2c:	b8 01       	movw	r22, r16
    8c2e:	0e 94 82 47 	call	0x8f04	; 0x8f04 <__unpack_f>
    8c32:	89 85       	ldd	r24, Y+9	; 0x09
    8c34:	82 30       	cpi	r24, 0x02	; 2
    8c36:	40 f0       	brcs	.+16     	; 0x8c48 <__gesf2+0x56>
    8c38:	89 89       	ldd	r24, Y+17	; 0x11
    8c3a:	82 30       	cpi	r24, 0x02	; 2
    8c3c:	28 f0       	brcs	.+10     	; 0x8c48 <__gesf2+0x56>
    8c3e:	c7 01       	movw	r24, r14
    8c40:	b8 01       	movw	r22, r16
    8c42:	0e 94 fa 47 	call	0x8ff4	; 0x8ff4 <__fpcmp_parts_f>
    8c46:	01 c0       	rjmp	.+2      	; 0x8c4a <__gesf2+0x58>
    8c48:	8f ef       	ldi	r24, 0xFF	; 255
    8c4a:	68 96       	adiw	r28, 0x18	; 24
    8c4c:	e6 e0       	ldi	r30, 0x06	; 6
    8c4e:	0c 94 c8 48 	jmp	0x9190	; 0x9190 <__epilogue_restores__+0x18>

00008c52 <__ltsf2>:
    8c52:	a8 e1       	ldi	r26, 0x18	; 24
    8c54:	b0 e0       	ldi	r27, 0x00	; 0
    8c56:	ef e2       	ldi	r30, 0x2F	; 47
    8c58:	f6 e4       	ldi	r31, 0x46	; 70
    8c5a:	0c 94 ac 48 	jmp	0x9158	; 0x9158 <__prologue_saves__+0x18>
    8c5e:	69 83       	std	Y+1, r22	; 0x01
    8c60:	7a 83       	std	Y+2, r23	; 0x02
    8c62:	8b 83       	std	Y+3, r24	; 0x03
    8c64:	9c 83       	std	Y+4, r25	; 0x04
    8c66:	2d 83       	std	Y+5, r18	; 0x05
    8c68:	3e 83       	std	Y+6, r19	; 0x06
    8c6a:	4f 83       	std	Y+7, r20	; 0x07
    8c6c:	58 87       	std	Y+8, r21	; 0x08
    8c6e:	89 e0       	ldi	r24, 0x09	; 9
    8c70:	e8 2e       	mov	r14, r24
    8c72:	f1 2c       	mov	r15, r1
    8c74:	ec 0e       	add	r14, r28
    8c76:	fd 1e       	adc	r15, r29
    8c78:	ce 01       	movw	r24, r28
    8c7a:	01 96       	adiw	r24, 0x01	; 1
    8c7c:	b7 01       	movw	r22, r14
    8c7e:	0e 94 82 47 	call	0x8f04	; 0x8f04 <__unpack_f>
    8c82:	8e 01       	movw	r16, r28
    8c84:	0f 5e       	subi	r16, 0xEF	; 239
    8c86:	1f 4f       	sbci	r17, 0xFF	; 255
    8c88:	ce 01       	movw	r24, r28
    8c8a:	05 96       	adiw	r24, 0x05	; 5
    8c8c:	b8 01       	movw	r22, r16
    8c8e:	0e 94 82 47 	call	0x8f04	; 0x8f04 <__unpack_f>
    8c92:	89 85       	ldd	r24, Y+9	; 0x09
    8c94:	82 30       	cpi	r24, 0x02	; 2
    8c96:	40 f0       	brcs	.+16     	; 0x8ca8 <__ltsf2+0x56>
    8c98:	89 89       	ldd	r24, Y+17	; 0x11
    8c9a:	82 30       	cpi	r24, 0x02	; 2
    8c9c:	28 f0       	brcs	.+10     	; 0x8ca8 <__ltsf2+0x56>
    8c9e:	c7 01       	movw	r24, r14
    8ca0:	b8 01       	movw	r22, r16
    8ca2:	0e 94 fa 47 	call	0x8ff4	; 0x8ff4 <__fpcmp_parts_f>
    8ca6:	01 c0       	rjmp	.+2      	; 0x8caa <__ltsf2+0x58>
    8ca8:	81 e0       	ldi	r24, 0x01	; 1
    8caa:	68 96       	adiw	r28, 0x18	; 24
    8cac:	e6 e0       	ldi	r30, 0x06	; 6
    8cae:	0c 94 c8 48 	jmp	0x9190	; 0x9190 <__epilogue_restores__+0x18>

00008cb2 <__fixsfsi>:
    8cb2:	ac e0       	ldi	r26, 0x0C	; 12
    8cb4:	b0 e0       	ldi	r27, 0x00	; 0
    8cb6:	ef e5       	ldi	r30, 0x5F	; 95
    8cb8:	f6 e4       	ldi	r31, 0x46	; 70
    8cba:	0c 94 b0 48 	jmp	0x9160	; 0x9160 <__prologue_saves__+0x20>
    8cbe:	69 83       	std	Y+1, r22	; 0x01
    8cc0:	7a 83       	std	Y+2, r23	; 0x02
    8cc2:	8b 83       	std	Y+3, r24	; 0x03
    8cc4:	9c 83       	std	Y+4, r25	; 0x04
    8cc6:	ce 01       	movw	r24, r28
    8cc8:	01 96       	adiw	r24, 0x01	; 1
    8cca:	be 01       	movw	r22, r28
    8ccc:	6b 5f       	subi	r22, 0xFB	; 251
    8cce:	7f 4f       	sbci	r23, 0xFF	; 255
    8cd0:	0e 94 82 47 	call	0x8f04	; 0x8f04 <__unpack_f>
    8cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    8cd6:	82 30       	cpi	r24, 0x02	; 2
    8cd8:	61 f1       	breq	.+88     	; 0x8d32 <__fixsfsi+0x80>
    8cda:	82 30       	cpi	r24, 0x02	; 2
    8cdc:	50 f1       	brcs	.+84     	; 0x8d32 <__fixsfsi+0x80>
    8cde:	84 30       	cpi	r24, 0x04	; 4
    8ce0:	21 f4       	brne	.+8      	; 0x8cea <__fixsfsi+0x38>
    8ce2:	8e 81       	ldd	r24, Y+6	; 0x06
    8ce4:	88 23       	and	r24, r24
    8ce6:	51 f1       	breq	.+84     	; 0x8d3c <__fixsfsi+0x8a>
    8ce8:	2e c0       	rjmp	.+92     	; 0x8d46 <__fixsfsi+0x94>
    8cea:	2f 81       	ldd	r18, Y+7	; 0x07
    8cec:	38 85       	ldd	r19, Y+8	; 0x08
    8cee:	37 fd       	sbrc	r19, 7
    8cf0:	20 c0       	rjmp	.+64     	; 0x8d32 <__fixsfsi+0x80>
    8cf2:	6e 81       	ldd	r22, Y+6	; 0x06
    8cf4:	2f 31       	cpi	r18, 0x1F	; 31
    8cf6:	31 05       	cpc	r19, r1
    8cf8:	1c f0       	brlt	.+6      	; 0x8d00 <__fixsfsi+0x4e>
    8cfa:	66 23       	and	r22, r22
    8cfc:	f9 f0       	breq	.+62     	; 0x8d3c <__fixsfsi+0x8a>
    8cfe:	23 c0       	rjmp	.+70     	; 0x8d46 <__fixsfsi+0x94>
    8d00:	8e e1       	ldi	r24, 0x1E	; 30
    8d02:	90 e0       	ldi	r25, 0x00	; 0
    8d04:	82 1b       	sub	r24, r18
    8d06:	93 0b       	sbc	r25, r19
    8d08:	29 85       	ldd	r18, Y+9	; 0x09
    8d0a:	3a 85       	ldd	r19, Y+10	; 0x0a
    8d0c:	4b 85       	ldd	r20, Y+11	; 0x0b
    8d0e:	5c 85       	ldd	r21, Y+12	; 0x0c
    8d10:	04 c0       	rjmp	.+8      	; 0x8d1a <__fixsfsi+0x68>
    8d12:	56 95       	lsr	r21
    8d14:	47 95       	ror	r20
    8d16:	37 95       	ror	r19
    8d18:	27 95       	ror	r18
    8d1a:	8a 95       	dec	r24
    8d1c:	d2 f7       	brpl	.-12     	; 0x8d12 <__fixsfsi+0x60>
    8d1e:	66 23       	and	r22, r22
    8d20:	b1 f0       	breq	.+44     	; 0x8d4e <__fixsfsi+0x9c>
    8d22:	50 95       	com	r21
    8d24:	40 95       	com	r20
    8d26:	30 95       	com	r19
    8d28:	21 95       	neg	r18
    8d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    8d2c:	4f 4f       	sbci	r20, 0xFF	; 255
    8d2e:	5f 4f       	sbci	r21, 0xFF	; 255
    8d30:	0e c0       	rjmp	.+28     	; 0x8d4e <__fixsfsi+0x9c>
    8d32:	20 e0       	ldi	r18, 0x00	; 0
    8d34:	30 e0       	ldi	r19, 0x00	; 0
    8d36:	40 e0       	ldi	r20, 0x00	; 0
    8d38:	50 e0       	ldi	r21, 0x00	; 0
    8d3a:	09 c0       	rjmp	.+18     	; 0x8d4e <__fixsfsi+0x9c>
    8d3c:	2f ef       	ldi	r18, 0xFF	; 255
    8d3e:	3f ef       	ldi	r19, 0xFF	; 255
    8d40:	4f ef       	ldi	r20, 0xFF	; 255
    8d42:	5f e7       	ldi	r21, 0x7F	; 127
    8d44:	04 c0       	rjmp	.+8      	; 0x8d4e <__fixsfsi+0x9c>
    8d46:	20 e0       	ldi	r18, 0x00	; 0
    8d48:	30 e0       	ldi	r19, 0x00	; 0
    8d4a:	40 e0       	ldi	r20, 0x00	; 0
    8d4c:	50 e8       	ldi	r21, 0x80	; 128
    8d4e:	b9 01       	movw	r22, r18
    8d50:	ca 01       	movw	r24, r20
    8d52:	2c 96       	adiw	r28, 0x0c	; 12
    8d54:	e2 e0       	ldi	r30, 0x02	; 2
    8d56:	0c 94 cc 48 	jmp	0x9198	; 0x9198 <__epilogue_restores__+0x20>

00008d5a <__pack_f>:
    8d5a:	df 92       	push	r13
    8d5c:	ef 92       	push	r14
    8d5e:	ff 92       	push	r15
    8d60:	0f 93       	push	r16
    8d62:	1f 93       	push	r17
    8d64:	fc 01       	movw	r30, r24
    8d66:	e4 80       	ldd	r14, Z+4	; 0x04
    8d68:	f5 80       	ldd	r15, Z+5	; 0x05
    8d6a:	06 81       	ldd	r16, Z+6	; 0x06
    8d6c:	17 81       	ldd	r17, Z+7	; 0x07
    8d6e:	d1 80       	ldd	r13, Z+1	; 0x01
    8d70:	80 81       	ld	r24, Z
    8d72:	82 30       	cpi	r24, 0x02	; 2
    8d74:	48 f4       	brcc	.+18     	; 0x8d88 <__pack_f+0x2e>
    8d76:	80 e0       	ldi	r24, 0x00	; 0
    8d78:	90 e0       	ldi	r25, 0x00	; 0
    8d7a:	a0 e1       	ldi	r26, 0x10	; 16
    8d7c:	b0 e0       	ldi	r27, 0x00	; 0
    8d7e:	e8 2a       	or	r14, r24
    8d80:	f9 2a       	or	r15, r25
    8d82:	0a 2b       	or	r16, r26
    8d84:	1b 2b       	or	r17, r27
    8d86:	a5 c0       	rjmp	.+330    	; 0x8ed2 <__pack_f+0x178>
    8d88:	84 30       	cpi	r24, 0x04	; 4
    8d8a:	09 f4       	brne	.+2      	; 0x8d8e <__pack_f+0x34>
    8d8c:	9f c0       	rjmp	.+318    	; 0x8ecc <__pack_f+0x172>
    8d8e:	82 30       	cpi	r24, 0x02	; 2
    8d90:	21 f4       	brne	.+8      	; 0x8d9a <__pack_f+0x40>
    8d92:	ee 24       	eor	r14, r14
    8d94:	ff 24       	eor	r15, r15
    8d96:	87 01       	movw	r16, r14
    8d98:	05 c0       	rjmp	.+10     	; 0x8da4 <__pack_f+0x4a>
    8d9a:	e1 14       	cp	r14, r1
    8d9c:	f1 04       	cpc	r15, r1
    8d9e:	01 05       	cpc	r16, r1
    8da0:	11 05       	cpc	r17, r1
    8da2:	19 f4       	brne	.+6      	; 0x8daa <__pack_f+0x50>
    8da4:	e0 e0       	ldi	r30, 0x00	; 0
    8da6:	f0 e0       	ldi	r31, 0x00	; 0
    8da8:	96 c0       	rjmp	.+300    	; 0x8ed6 <__pack_f+0x17c>
    8daa:	62 81       	ldd	r22, Z+2	; 0x02
    8dac:	73 81       	ldd	r23, Z+3	; 0x03
    8dae:	9f ef       	ldi	r25, 0xFF	; 255
    8db0:	62 38       	cpi	r22, 0x82	; 130
    8db2:	79 07       	cpc	r23, r25
    8db4:	0c f0       	brlt	.+2      	; 0x8db8 <__pack_f+0x5e>
    8db6:	5b c0       	rjmp	.+182    	; 0x8e6e <__pack_f+0x114>
    8db8:	22 e8       	ldi	r18, 0x82	; 130
    8dba:	3f ef       	ldi	r19, 0xFF	; 255
    8dbc:	26 1b       	sub	r18, r22
    8dbe:	37 0b       	sbc	r19, r23
    8dc0:	2a 31       	cpi	r18, 0x1A	; 26
    8dc2:	31 05       	cpc	r19, r1
    8dc4:	2c f0       	brlt	.+10     	; 0x8dd0 <__pack_f+0x76>
    8dc6:	20 e0       	ldi	r18, 0x00	; 0
    8dc8:	30 e0       	ldi	r19, 0x00	; 0
    8dca:	40 e0       	ldi	r20, 0x00	; 0
    8dcc:	50 e0       	ldi	r21, 0x00	; 0
    8dce:	2a c0       	rjmp	.+84     	; 0x8e24 <__pack_f+0xca>
    8dd0:	b8 01       	movw	r22, r16
    8dd2:	a7 01       	movw	r20, r14
    8dd4:	02 2e       	mov	r0, r18
    8dd6:	04 c0       	rjmp	.+8      	; 0x8de0 <__pack_f+0x86>
    8dd8:	76 95       	lsr	r23
    8dda:	67 95       	ror	r22
    8ddc:	57 95       	ror	r21
    8dde:	47 95       	ror	r20
    8de0:	0a 94       	dec	r0
    8de2:	d2 f7       	brpl	.-12     	; 0x8dd8 <__pack_f+0x7e>
    8de4:	81 e0       	ldi	r24, 0x01	; 1
    8de6:	90 e0       	ldi	r25, 0x00	; 0
    8de8:	a0 e0       	ldi	r26, 0x00	; 0
    8dea:	b0 e0       	ldi	r27, 0x00	; 0
    8dec:	04 c0       	rjmp	.+8      	; 0x8df6 <__pack_f+0x9c>
    8dee:	88 0f       	add	r24, r24
    8df0:	99 1f       	adc	r25, r25
    8df2:	aa 1f       	adc	r26, r26
    8df4:	bb 1f       	adc	r27, r27
    8df6:	2a 95       	dec	r18
    8df8:	d2 f7       	brpl	.-12     	; 0x8dee <__pack_f+0x94>
    8dfa:	01 97       	sbiw	r24, 0x01	; 1
    8dfc:	a1 09       	sbc	r26, r1
    8dfe:	b1 09       	sbc	r27, r1
    8e00:	8e 21       	and	r24, r14
    8e02:	9f 21       	and	r25, r15
    8e04:	a0 23       	and	r26, r16
    8e06:	b1 23       	and	r27, r17
    8e08:	00 97       	sbiw	r24, 0x00	; 0
    8e0a:	a1 05       	cpc	r26, r1
    8e0c:	b1 05       	cpc	r27, r1
    8e0e:	21 f0       	breq	.+8      	; 0x8e18 <__pack_f+0xbe>
    8e10:	81 e0       	ldi	r24, 0x01	; 1
    8e12:	90 e0       	ldi	r25, 0x00	; 0
    8e14:	a0 e0       	ldi	r26, 0x00	; 0
    8e16:	b0 e0       	ldi	r27, 0x00	; 0
    8e18:	9a 01       	movw	r18, r20
    8e1a:	ab 01       	movw	r20, r22
    8e1c:	28 2b       	or	r18, r24
    8e1e:	39 2b       	or	r19, r25
    8e20:	4a 2b       	or	r20, r26
    8e22:	5b 2b       	or	r21, r27
    8e24:	da 01       	movw	r26, r20
    8e26:	c9 01       	movw	r24, r18
    8e28:	8f 77       	andi	r24, 0x7F	; 127
    8e2a:	90 70       	andi	r25, 0x00	; 0
    8e2c:	a0 70       	andi	r26, 0x00	; 0
    8e2e:	b0 70       	andi	r27, 0x00	; 0
    8e30:	80 34       	cpi	r24, 0x40	; 64
    8e32:	91 05       	cpc	r25, r1
    8e34:	a1 05       	cpc	r26, r1
    8e36:	b1 05       	cpc	r27, r1
    8e38:	39 f4       	brne	.+14     	; 0x8e48 <__pack_f+0xee>
    8e3a:	27 ff       	sbrs	r18, 7
    8e3c:	09 c0       	rjmp	.+18     	; 0x8e50 <__pack_f+0xf6>
    8e3e:	20 5c       	subi	r18, 0xC0	; 192
    8e40:	3f 4f       	sbci	r19, 0xFF	; 255
    8e42:	4f 4f       	sbci	r20, 0xFF	; 255
    8e44:	5f 4f       	sbci	r21, 0xFF	; 255
    8e46:	04 c0       	rjmp	.+8      	; 0x8e50 <__pack_f+0xf6>
    8e48:	21 5c       	subi	r18, 0xC1	; 193
    8e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    8e4c:	4f 4f       	sbci	r20, 0xFF	; 255
    8e4e:	5f 4f       	sbci	r21, 0xFF	; 255
    8e50:	e0 e0       	ldi	r30, 0x00	; 0
    8e52:	f0 e0       	ldi	r31, 0x00	; 0
    8e54:	20 30       	cpi	r18, 0x00	; 0
    8e56:	a0 e0       	ldi	r26, 0x00	; 0
    8e58:	3a 07       	cpc	r19, r26
    8e5a:	a0 e0       	ldi	r26, 0x00	; 0
    8e5c:	4a 07       	cpc	r20, r26
    8e5e:	a0 e4       	ldi	r26, 0x40	; 64
    8e60:	5a 07       	cpc	r21, r26
    8e62:	10 f0       	brcs	.+4      	; 0x8e68 <__pack_f+0x10e>
    8e64:	e1 e0       	ldi	r30, 0x01	; 1
    8e66:	f0 e0       	ldi	r31, 0x00	; 0
    8e68:	79 01       	movw	r14, r18
    8e6a:	8a 01       	movw	r16, r20
    8e6c:	27 c0       	rjmp	.+78     	; 0x8ebc <__pack_f+0x162>
    8e6e:	60 38       	cpi	r22, 0x80	; 128
    8e70:	71 05       	cpc	r23, r1
    8e72:	64 f5       	brge	.+88     	; 0x8ecc <__pack_f+0x172>
    8e74:	fb 01       	movw	r30, r22
    8e76:	e1 58       	subi	r30, 0x81	; 129
    8e78:	ff 4f       	sbci	r31, 0xFF	; 255
    8e7a:	d8 01       	movw	r26, r16
    8e7c:	c7 01       	movw	r24, r14
    8e7e:	8f 77       	andi	r24, 0x7F	; 127
    8e80:	90 70       	andi	r25, 0x00	; 0
    8e82:	a0 70       	andi	r26, 0x00	; 0
    8e84:	b0 70       	andi	r27, 0x00	; 0
    8e86:	80 34       	cpi	r24, 0x40	; 64
    8e88:	91 05       	cpc	r25, r1
    8e8a:	a1 05       	cpc	r26, r1
    8e8c:	b1 05       	cpc	r27, r1
    8e8e:	39 f4       	brne	.+14     	; 0x8e9e <__pack_f+0x144>
    8e90:	e7 fe       	sbrs	r14, 7
    8e92:	0d c0       	rjmp	.+26     	; 0x8eae <__pack_f+0x154>
    8e94:	80 e4       	ldi	r24, 0x40	; 64
    8e96:	90 e0       	ldi	r25, 0x00	; 0
    8e98:	a0 e0       	ldi	r26, 0x00	; 0
    8e9a:	b0 e0       	ldi	r27, 0x00	; 0
    8e9c:	04 c0       	rjmp	.+8      	; 0x8ea6 <__pack_f+0x14c>
    8e9e:	8f e3       	ldi	r24, 0x3F	; 63
    8ea0:	90 e0       	ldi	r25, 0x00	; 0
    8ea2:	a0 e0       	ldi	r26, 0x00	; 0
    8ea4:	b0 e0       	ldi	r27, 0x00	; 0
    8ea6:	e8 0e       	add	r14, r24
    8ea8:	f9 1e       	adc	r15, r25
    8eaa:	0a 1f       	adc	r16, r26
    8eac:	1b 1f       	adc	r17, r27
    8eae:	17 ff       	sbrs	r17, 7
    8eb0:	05 c0       	rjmp	.+10     	; 0x8ebc <__pack_f+0x162>
    8eb2:	16 95       	lsr	r17
    8eb4:	07 95       	ror	r16
    8eb6:	f7 94       	ror	r15
    8eb8:	e7 94       	ror	r14
    8eba:	31 96       	adiw	r30, 0x01	; 1
    8ebc:	87 e0       	ldi	r24, 0x07	; 7
    8ebe:	16 95       	lsr	r17
    8ec0:	07 95       	ror	r16
    8ec2:	f7 94       	ror	r15
    8ec4:	e7 94       	ror	r14
    8ec6:	8a 95       	dec	r24
    8ec8:	d1 f7       	brne	.-12     	; 0x8ebe <__pack_f+0x164>
    8eca:	05 c0       	rjmp	.+10     	; 0x8ed6 <__pack_f+0x17c>
    8ecc:	ee 24       	eor	r14, r14
    8ece:	ff 24       	eor	r15, r15
    8ed0:	87 01       	movw	r16, r14
    8ed2:	ef ef       	ldi	r30, 0xFF	; 255
    8ed4:	f0 e0       	ldi	r31, 0x00	; 0
    8ed6:	6e 2f       	mov	r22, r30
    8ed8:	67 95       	ror	r22
    8eda:	66 27       	eor	r22, r22
    8edc:	67 95       	ror	r22
    8ede:	90 2f       	mov	r25, r16
    8ee0:	9f 77       	andi	r25, 0x7F	; 127
    8ee2:	d7 94       	ror	r13
    8ee4:	dd 24       	eor	r13, r13
    8ee6:	d7 94       	ror	r13
    8ee8:	8e 2f       	mov	r24, r30
    8eea:	86 95       	lsr	r24
    8eec:	49 2f       	mov	r20, r25
    8eee:	46 2b       	or	r20, r22
    8ef0:	58 2f       	mov	r21, r24
    8ef2:	5d 29       	or	r21, r13
    8ef4:	b7 01       	movw	r22, r14
    8ef6:	ca 01       	movw	r24, r20
    8ef8:	1f 91       	pop	r17
    8efa:	0f 91       	pop	r16
    8efc:	ff 90       	pop	r15
    8efe:	ef 90       	pop	r14
    8f00:	df 90       	pop	r13
    8f02:	08 95       	ret

00008f04 <__unpack_f>:
    8f04:	fc 01       	movw	r30, r24
    8f06:	db 01       	movw	r26, r22
    8f08:	40 81       	ld	r20, Z
    8f0a:	51 81       	ldd	r21, Z+1	; 0x01
    8f0c:	22 81       	ldd	r18, Z+2	; 0x02
    8f0e:	62 2f       	mov	r22, r18
    8f10:	6f 77       	andi	r22, 0x7F	; 127
    8f12:	70 e0       	ldi	r23, 0x00	; 0
    8f14:	22 1f       	adc	r18, r18
    8f16:	22 27       	eor	r18, r18
    8f18:	22 1f       	adc	r18, r18
    8f1a:	93 81       	ldd	r25, Z+3	; 0x03
    8f1c:	89 2f       	mov	r24, r25
    8f1e:	88 0f       	add	r24, r24
    8f20:	82 2b       	or	r24, r18
    8f22:	28 2f       	mov	r18, r24
    8f24:	30 e0       	ldi	r19, 0x00	; 0
    8f26:	99 1f       	adc	r25, r25
    8f28:	99 27       	eor	r25, r25
    8f2a:	99 1f       	adc	r25, r25
    8f2c:	11 96       	adiw	r26, 0x01	; 1
    8f2e:	9c 93       	st	X, r25
    8f30:	11 97       	sbiw	r26, 0x01	; 1
    8f32:	21 15       	cp	r18, r1
    8f34:	31 05       	cpc	r19, r1
    8f36:	a9 f5       	brne	.+106    	; 0x8fa2 <__unpack_f+0x9e>
    8f38:	41 15       	cp	r20, r1
    8f3a:	51 05       	cpc	r21, r1
    8f3c:	61 05       	cpc	r22, r1
    8f3e:	71 05       	cpc	r23, r1
    8f40:	11 f4       	brne	.+4      	; 0x8f46 <__unpack_f+0x42>
    8f42:	82 e0       	ldi	r24, 0x02	; 2
    8f44:	37 c0       	rjmp	.+110    	; 0x8fb4 <__unpack_f+0xb0>
    8f46:	82 e8       	ldi	r24, 0x82	; 130
    8f48:	9f ef       	ldi	r25, 0xFF	; 255
    8f4a:	13 96       	adiw	r26, 0x03	; 3
    8f4c:	9c 93       	st	X, r25
    8f4e:	8e 93       	st	-X, r24
    8f50:	12 97       	sbiw	r26, 0x02	; 2
    8f52:	9a 01       	movw	r18, r20
    8f54:	ab 01       	movw	r20, r22
    8f56:	67 e0       	ldi	r22, 0x07	; 7
    8f58:	22 0f       	add	r18, r18
    8f5a:	33 1f       	adc	r19, r19
    8f5c:	44 1f       	adc	r20, r20
    8f5e:	55 1f       	adc	r21, r21
    8f60:	6a 95       	dec	r22
    8f62:	d1 f7       	brne	.-12     	; 0x8f58 <__unpack_f+0x54>
    8f64:	83 e0       	ldi	r24, 0x03	; 3
    8f66:	8c 93       	st	X, r24
    8f68:	0d c0       	rjmp	.+26     	; 0x8f84 <__unpack_f+0x80>
    8f6a:	22 0f       	add	r18, r18
    8f6c:	33 1f       	adc	r19, r19
    8f6e:	44 1f       	adc	r20, r20
    8f70:	55 1f       	adc	r21, r21
    8f72:	12 96       	adiw	r26, 0x02	; 2
    8f74:	8d 91       	ld	r24, X+
    8f76:	9c 91       	ld	r25, X
    8f78:	13 97       	sbiw	r26, 0x03	; 3
    8f7a:	01 97       	sbiw	r24, 0x01	; 1
    8f7c:	13 96       	adiw	r26, 0x03	; 3
    8f7e:	9c 93       	st	X, r25
    8f80:	8e 93       	st	-X, r24
    8f82:	12 97       	sbiw	r26, 0x02	; 2
    8f84:	20 30       	cpi	r18, 0x00	; 0
    8f86:	80 e0       	ldi	r24, 0x00	; 0
    8f88:	38 07       	cpc	r19, r24
    8f8a:	80 e0       	ldi	r24, 0x00	; 0
    8f8c:	48 07       	cpc	r20, r24
    8f8e:	80 e4       	ldi	r24, 0x40	; 64
    8f90:	58 07       	cpc	r21, r24
    8f92:	58 f3       	brcs	.-42     	; 0x8f6a <__unpack_f+0x66>
    8f94:	14 96       	adiw	r26, 0x04	; 4
    8f96:	2d 93       	st	X+, r18
    8f98:	3d 93       	st	X+, r19
    8f9a:	4d 93       	st	X+, r20
    8f9c:	5c 93       	st	X, r21
    8f9e:	17 97       	sbiw	r26, 0x07	; 7
    8fa0:	08 95       	ret
    8fa2:	2f 3f       	cpi	r18, 0xFF	; 255
    8fa4:	31 05       	cpc	r19, r1
    8fa6:	79 f4       	brne	.+30     	; 0x8fc6 <__unpack_f+0xc2>
    8fa8:	41 15       	cp	r20, r1
    8faa:	51 05       	cpc	r21, r1
    8fac:	61 05       	cpc	r22, r1
    8fae:	71 05       	cpc	r23, r1
    8fb0:	19 f4       	brne	.+6      	; 0x8fb8 <__unpack_f+0xb4>
    8fb2:	84 e0       	ldi	r24, 0x04	; 4
    8fb4:	8c 93       	st	X, r24
    8fb6:	08 95       	ret
    8fb8:	64 ff       	sbrs	r22, 4
    8fba:	03 c0       	rjmp	.+6      	; 0x8fc2 <__unpack_f+0xbe>
    8fbc:	81 e0       	ldi	r24, 0x01	; 1
    8fbe:	8c 93       	st	X, r24
    8fc0:	12 c0       	rjmp	.+36     	; 0x8fe6 <__unpack_f+0xe2>
    8fc2:	1c 92       	st	X, r1
    8fc4:	10 c0       	rjmp	.+32     	; 0x8fe6 <__unpack_f+0xe2>
    8fc6:	2f 57       	subi	r18, 0x7F	; 127
    8fc8:	30 40       	sbci	r19, 0x00	; 0
    8fca:	13 96       	adiw	r26, 0x03	; 3
    8fcc:	3c 93       	st	X, r19
    8fce:	2e 93       	st	-X, r18
    8fd0:	12 97       	sbiw	r26, 0x02	; 2
    8fd2:	83 e0       	ldi	r24, 0x03	; 3
    8fd4:	8c 93       	st	X, r24
    8fd6:	87 e0       	ldi	r24, 0x07	; 7
    8fd8:	44 0f       	add	r20, r20
    8fda:	55 1f       	adc	r21, r21
    8fdc:	66 1f       	adc	r22, r22
    8fde:	77 1f       	adc	r23, r23
    8fe0:	8a 95       	dec	r24
    8fe2:	d1 f7       	brne	.-12     	; 0x8fd8 <__unpack_f+0xd4>
    8fe4:	70 64       	ori	r23, 0x40	; 64
    8fe6:	14 96       	adiw	r26, 0x04	; 4
    8fe8:	4d 93       	st	X+, r20
    8fea:	5d 93       	st	X+, r21
    8fec:	6d 93       	st	X+, r22
    8fee:	7c 93       	st	X, r23
    8ff0:	17 97       	sbiw	r26, 0x07	; 7
    8ff2:	08 95       	ret

00008ff4 <__fpcmp_parts_f>:
    8ff4:	1f 93       	push	r17
    8ff6:	dc 01       	movw	r26, r24
    8ff8:	fb 01       	movw	r30, r22
    8ffa:	9c 91       	ld	r25, X
    8ffc:	92 30       	cpi	r25, 0x02	; 2
    8ffe:	08 f4       	brcc	.+2      	; 0x9002 <__fpcmp_parts_f+0xe>
    9000:	47 c0       	rjmp	.+142    	; 0x9090 <__fpcmp_parts_f+0x9c>
    9002:	80 81       	ld	r24, Z
    9004:	82 30       	cpi	r24, 0x02	; 2
    9006:	08 f4       	brcc	.+2      	; 0x900a <__fpcmp_parts_f+0x16>
    9008:	43 c0       	rjmp	.+134    	; 0x9090 <__fpcmp_parts_f+0x9c>
    900a:	94 30       	cpi	r25, 0x04	; 4
    900c:	51 f4       	brne	.+20     	; 0x9022 <__fpcmp_parts_f+0x2e>
    900e:	11 96       	adiw	r26, 0x01	; 1
    9010:	1c 91       	ld	r17, X
    9012:	84 30       	cpi	r24, 0x04	; 4
    9014:	99 f5       	brne	.+102    	; 0x907c <__fpcmp_parts_f+0x88>
    9016:	81 81       	ldd	r24, Z+1	; 0x01
    9018:	68 2f       	mov	r22, r24
    901a:	70 e0       	ldi	r23, 0x00	; 0
    901c:	61 1b       	sub	r22, r17
    901e:	71 09       	sbc	r23, r1
    9020:	3f c0       	rjmp	.+126    	; 0x90a0 <__fpcmp_parts_f+0xac>
    9022:	84 30       	cpi	r24, 0x04	; 4
    9024:	21 f0       	breq	.+8      	; 0x902e <__fpcmp_parts_f+0x3a>
    9026:	92 30       	cpi	r25, 0x02	; 2
    9028:	31 f4       	brne	.+12     	; 0x9036 <__fpcmp_parts_f+0x42>
    902a:	82 30       	cpi	r24, 0x02	; 2
    902c:	b9 f1       	breq	.+110    	; 0x909c <__fpcmp_parts_f+0xa8>
    902e:	81 81       	ldd	r24, Z+1	; 0x01
    9030:	88 23       	and	r24, r24
    9032:	89 f1       	breq	.+98     	; 0x9096 <__fpcmp_parts_f+0xa2>
    9034:	2d c0       	rjmp	.+90     	; 0x9090 <__fpcmp_parts_f+0x9c>
    9036:	11 96       	adiw	r26, 0x01	; 1
    9038:	1c 91       	ld	r17, X
    903a:	11 97       	sbiw	r26, 0x01	; 1
    903c:	82 30       	cpi	r24, 0x02	; 2
    903e:	f1 f0       	breq	.+60     	; 0x907c <__fpcmp_parts_f+0x88>
    9040:	81 81       	ldd	r24, Z+1	; 0x01
    9042:	18 17       	cp	r17, r24
    9044:	d9 f4       	brne	.+54     	; 0x907c <__fpcmp_parts_f+0x88>
    9046:	12 96       	adiw	r26, 0x02	; 2
    9048:	2d 91       	ld	r18, X+
    904a:	3c 91       	ld	r19, X
    904c:	13 97       	sbiw	r26, 0x03	; 3
    904e:	82 81       	ldd	r24, Z+2	; 0x02
    9050:	93 81       	ldd	r25, Z+3	; 0x03
    9052:	82 17       	cp	r24, r18
    9054:	93 07       	cpc	r25, r19
    9056:	94 f0       	brlt	.+36     	; 0x907c <__fpcmp_parts_f+0x88>
    9058:	28 17       	cp	r18, r24
    905a:	39 07       	cpc	r19, r25
    905c:	bc f0       	brlt	.+46     	; 0x908c <__fpcmp_parts_f+0x98>
    905e:	14 96       	adiw	r26, 0x04	; 4
    9060:	8d 91       	ld	r24, X+
    9062:	9d 91       	ld	r25, X+
    9064:	0d 90       	ld	r0, X+
    9066:	bc 91       	ld	r27, X
    9068:	a0 2d       	mov	r26, r0
    906a:	24 81       	ldd	r18, Z+4	; 0x04
    906c:	35 81       	ldd	r19, Z+5	; 0x05
    906e:	46 81       	ldd	r20, Z+6	; 0x06
    9070:	57 81       	ldd	r21, Z+7	; 0x07
    9072:	28 17       	cp	r18, r24
    9074:	39 07       	cpc	r19, r25
    9076:	4a 07       	cpc	r20, r26
    9078:	5b 07       	cpc	r21, r27
    907a:	18 f4       	brcc	.+6      	; 0x9082 <__fpcmp_parts_f+0x8e>
    907c:	11 23       	and	r17, r17
    907e:	41 f0       	breq	.+16     	; 0x9090 <__fpcmp_parts_f+0x9c>
    9080:	0a c0       	rjmp	.+20     	; 0x9096 <__fpcmp_parts_f+0xa2>
    9082:	82 17       	cp	r24, r18
    9084:	93 07       	cpc	r25, r19
    9086:	a4 07       	cpc	r26, r20
    9088:	b5 07       	cpc	r27, r21
    908a:	40 f4       	brcc	.+16     	; 0x909c <__fpcmp_parts_f+0xa8>
    908c:	11 23       	and	r17, r17
    908e:	19 f0       	breq	.+6      	; 0x9096 <__fpcmp_parts_f+0xa2>
    9090:	61 e0       	ldi	r22, 0x01	; 1
    9092:	70 e0       	ldi	r23, 0x00	; 0
    9094:	05 c0       	rjmp	.+10     	; 0x90a0 <__fpcmp_parts_f+0xac>
    9096:	6f ef       	ldi	r22, 0xFF	; 255
    9098:	7f ef       	ldi	r23, 0xFF	; 255
    909a:	02 c0       	rjmp	.+4      	; 0x90a0 <__fpcmp_parts_f+0xac>
    909c:	60 e0       	ldi	r22, 0x00	; 0
    909e:	70 e0       	ldi	r23, 0x00	; 0
    90a0:	cb 01       	movw	r24, r22
    90a2:	1f 91       	pop	r17
    90a4:	08 95       	ret

000090a6 <__mulsi3>:
    90a6:	62 9f       	mul	r22, r18
    90a8:	d0 01       	movw	r26, r0
    90aa:	73 9f       	mul	r23, r19
    90ac:	f0 01       	movw	r30, r0
    90ae:	82 9f       	mul	r24, r18
    90b0:	e0 0d       	add	r30, r0
    90b2:	f1 1d       	adc	r31, r1
    90b4:	64 9f       	mul	r22, r20
    90b6:	e0 0d       	add	r30, r0
    90b8:	f1 1d       	adc	r31, r1
    90ba:	92 9f       	mul	r25, r18
    90bc:	f0 0d       	add	r31, r0
    90be:	83 9f       	mul	r24, r19
    90c0:	f0 0d       	add	r31, r0
    90c2:	74 9f       	mul	r23, r20
    90c4:	f0 0d       	add	r31, r0
    90c6:	65 9f       	mul	r22, r21
    90c8:	f0 0d       	add	r31, r0
    90ca:	99 27       	eor	r25, r25
    90cc:	72 9f       	mul	r23, r18
    90ce:	b0 0d       	add	r27, r0
    90d0:	e1 1d       	adc	r30, r1
    90d2:	f9 1f       	adc	r31, r25
    90d4:	63 9f       	mul	r22, r19
    90d6:	b0 0d       	add	r27, r0
    90d8:	e1 1d       	adc	r30, r1
    90da:	f9 1f       	adc	r31, r25
    90dc:	bd 01       	movw	r22, r26
    90de:	cf 01       	movw	r24, r30
    90e0:	11 24       	eor	r1, r1
    90e2:	08 95       	ret

000090e4 <__udivmodqi4>:
    90e4:	99 1b       	sub	r25, r25
    90e6:	79 e0       	ldi	r23, 0x09	; 9
    90e8:	04 c0       	rjmp	.+8      	; 0x90f2 <__udivmodqi4_ep>

000090ea <__udivmodqi4_loop>:
    90ea:	99 1f       	adc	r25, r25
    90ec:	96 17       	cp	r25, r22
    90ee:	08 f0       	brcs	.+2      	; 0x90f2 <__udivmodqi4_ep>
    90f0:	96 1b       	sub	r25, r22

000090f2 <__udivmodqi4_ep>:
    90f2:	88 1f       	adc	r24, r24
    90f4:	7a 95       	dec	r23
    90f6:	c9 f7       	brne	.-14     	; 0x90ea <__udivmodqi4_loop>
    90f8:	80 95       	com	r24
    90fa:	08 95       	ret

000090fc <__udivmodsi4>:
    90fc:	a1 e2       	ldi	r26, 0x21	; 33
    90fe:	1a 2e       	mov	r1, r26
    9100:	aa 1b       	sub	r26, r26
    9102:	bb 1b       	sub	r27, r27
    9104:	fd 01       	movw	r30, r26
    9106:	0d c0       	rjmp	.+26     	; 0x9122 <__udivmodsi4_ep>

00009108 <__udivmodsi4_loop>:
    9108:	aa 1f       	adc	r26, r26
    910a:	bb 1f       	adc	r27, r27
    910c:	ee 1f       	adc	r30, r30
    910e:	ff 1f       	adc	r31, r31
    9110:	a2 17       	cp	r26, r18
    9112:	b3 07       	cpc	r27, r19
    9114:	e4 07       	cpc	r30, r20
    9116:	f5 07       	cpc	r31, r21
    9118:	20 f0       	brcs	.+8      	; 0x9122 <__udivmodsi4_ep>
    911a:	a2 1b       	sub	r26, r18
    911c:	b3 0b       	sbc	r27, r19
    911e:	e4 0b       	sbc	r30, r20
    9120:	f5 0b       	sbc	r31, r21

00009122 <__udivmodsi4_ep>:
    9122:	66 1f       	adc	r22, r22
    9124:	77 1f       	adc	r23, r23
    9126:	88 1f       	adc	r24, r24
    9128:	99 1f       	adc	r25, r25
    912a:	1a 94       	dec	r1
    912c:	69 f7       	brne	.-38     	; 0x9108 <__udivmodsi4_loop>
    912e:	60 95       	com	r22
    9130:	70 95       	com	r23
    9132:	80 95       	com	r24
    9134:	90 95       	com	r25
    9136:	9b 01       	movw	r18, r22
    9138:	ac 01       	movw	r20, r24
    913a:	bd 01       	movw	r22, r26
    913c:	cf 01       	movw	r24, r30
    913e:	08 95       	ret

00009140 <__prologue_saves__>:
    9140:	2f 92       	push	r2
    9142:	3f 92       	push	r3
    9144:	4f 92       	push	r4
    9146:	5f 92       	push	r5
    9148:	6f 92       	push	r6
    914a:	7f 92       	push	r7
    914c:	8f 92       	push	r8
    914e:	9f 92       	push	r9
    9150:	af 92       	push	r10
    9152:	bf 92       	push	r11
    9154:	cf 92       	push	r12
    9156:	df 92       	push	r13
    9158:	ef 92       	push	r14
    915a:	ff 92       	push	r15
    915c:	0f 93       	push	r16
    915e:	1f 93       	push	r17
    9160:	cf 93       	push	r28
    9162:	df 93       	push	r29
    9164:	cd b7       	in	r28, 0x3d	; 61
    9166:	de b7       	in	r29, 0x3e	; 62
    9168:	ca 1b       	sub	r28, r26
    916a:	db 0b       	sbc	r29, r27
    916c:	0f b6       	in	r0, 0x3f	; 63
    916e:	f8 94       	cli
    9170:	de bf       	out	0x3e, r29	; 62
    9172:	0f be       	out	0x3f, r0	; 63
    9174:	cd bf       	out	0x3d, r28	; 61
    9176:	09 94       	ijmp

00009178 <__epilogue_restores__>:
    9178:	2a 88       	ldd	r2, Y+18	; 0x12
    917a:	39 88       	ldd	r3, Y+17	; 0x11
    917c:	48 88       	ldd	r4, Y+16	; 0x10
    917e:	5f 84       	ldd	r5, Y+15	; 0x0f
    9180:	6e 84       	ldd	r6, Y+14	; 0x0e
    9182:	7d 84       	ldd	r7, Y+13	; 0x0d
    9184:	8c 84       	ldd	r8, Y+12	; 0x0c
    9186:	9b 84       	ldd	r9, Y+11	; 0x0b
    9188:	aa 84       	ldd	r10, Y+10	; 0x0a
    918a:	b9 84       	ldd	r11, Y+9	; 0x09
    918c:	c8 84       	ldd	r12, Y+8	; 0x08
    918e:	df 80       	ldd	r13, Y+7	; 0x07
    9190:	ee 80       	ldd	r14, Y+6	; 0x06
    9192:	fd 80       	ldd	r15, Y+5	; 0x05
    9194:	0c 81       	ldd	r16, Y+4	; 0x04
    9196:	1b 81       	ldd	r17, Y+3	; 0x03
    9198:	aa 81       	ldd	r26, Y+2	; 0x02
    919a:	b9 81       	ldd	r27, Y+1	; 0x01
    919c:	ce 0f       	add	r28, r30
    919e:	d1 1d       	adc	r29, r1
    91a0:	0f b6       	in	r0, 0x3f	; 63
    91a2:	f8 94       	cli
    91a4:	de bf       	out	0x3e, r29	; 62
    91a6:	0f be       	out	0x3f, r0	; 63
    91a8:	cd bf       	out	0x3d, r28	; 61
    91aa:	ed 01       	movw	r28, r26
    91ac:	08 95       	ret

000091ae <calloc>:
    91ae:	0f 93       	push	r16
    91b0:	1f 93       	push	r17
    91b2:	cf 93       	push	r28
    91b4:	df 93       	push	r29
    91b6:	68 9f       	mul	r22, r24
    91b8:	80 01       	movw	r16, r0
    91ba:	69 9f       	mul	r22, r25
    91bc:	10 0d       	add	r17, r0
    91be:	78 9f       	mul	r23, r24
    91c0:	10 0d       	add	r17, r0
    91c2:	11 24       	eor	r1, r1
    91c4:	c8 01       	movw	r24, r16
    91c6:	0e 94 f3 48 	call	0x91e6	; 0x91e6 <malloc>
    91ca:	ec 01       	movw	r28, r24
    91cc:	00 97       	sbiw	r24, 0x00	; 0
    91ce:	29 f0       	breq	.+10     	; 0x91da <calloc+0x2c>
    91d0:	60 e0       	ldi	r22, 0x00	; 0
    91d2:	70 e0       	ldi	r23, 0x00	; 0
    91d4:	a8 01       	movw	r20, r16
    91d6:	0e 94 cf 4a 	call	0x959e	; 0x959e <memset>
    91da:	ce 01       	movw	r24, r28
    91dc:	df 91       	pop	r29
    91de:	cf 91       	pop	r28
    91e0:	1f 91       	pop	r17
    91e2:	0f 91       	pop	r16
    91e4:	08 95       	ret

000091e6 <malloc>:
    91e6:	cf 93       	push	r28
    91e8:	df 93       	push	r29
    91ea:	bc 01       	movw	r22, r24
    91ec:	82 30       	cpi	r24, 0x02	; 2
    91ee:	91 05       	cpc	r25, r1
    91f0:	10 f4       	brcc	.+4      	; 0x91f6 <malloc+0x10>
    91f2:	62 e0       	ldi	r22, 0x02	; 2
    91f4:	70 e0       	ldi	r23, 0x00	; 0
    91f6:	a0 91 9a 06 	lds	r26, 0x069A
    91fa:	b0 91 9b 06 	lds	r27, 0x069B
    91fe:	ed 01       	movw	r28, r26
    9200:	e0 e0       	ldi	r30, 0x00	; 0
    9202:	f0 e0       	ldi	r31, 0x00	; 0
    9204:	40 e0       	ldi	r20, 0x00	; 0
    9206:	50 e0       	ldi	r21, 0x00	; 0
    9208:	21 c0       	rjmp	.+66     	; 0x924c <malloc+0x66>
    920a:	88 81       	ld	r24, Y
    920c:	99 81       	ldd	r25, Y+1	; 0x01
    920e:	86 17       	cp	r24, r22
    9210:	97 07       	cpc	r25, r23
    9212:	69 f4       	brne	.+26     	; 0x922e <malloc+0x48>
    9214:	8a 81       	ldd	r24, Y+2	; 0x02
    9216:	9b 81       	ldd	r25, Y+3	; 0x03
    9218:	30 97       	sbiw	r30, 0x00	; 0
    921a:	19 f0       	breq	.+6      	; 0x9222 <malloc+0x3c>
    921c:	93 83       	std	Z+3, r25	; 0x03
    921e:	82 83       	std	Z+2, r24	; 0x02
    9220:	04 c0       	rjmp	.+8      	; 0x922a <malloc+0x44>
    9222:	90 93 9b 06 	sts	0x069B, r25
    9226:	80 93 9a 06 	sts	0x069A, r24
    922a:	fe 01       	movw	r30, r28
    922c:	34 c0       	rjmp	.+104    	; 0x9296 <malloc+0xb0>
    922e:	68 17       	cp	r22, r24
    9230:	79 07       	cpc	r23, r25
    9232:	38 f4       	brcc	.+14     	; 0x9242 <malloc+0x5c>
    9234:	41 15       	cp	r20, r1
    9236:	51 05       	cpc	r21, r1
    9238:	19 f0       	breq	.+6      	; 0x9240 <malloc+0x5a>
    923a:	84 17       	cp	r24, r20
    923c:	95 07       	cpc	r25, r21
    923e:	08 f4       	brcc	.+2      	; 0x9242 <malloc+0x5c>
    9240:	ac 01       	movw	r20, r24
    9242:	fe 01       	movw	r30, r28
    9244:	8a 81       	ldd	r24, Y+2	; 0x02
    9246:	9b 81       	ldd	r25, Y+3	; 0x03
    9248:	9c 01       	movw	r18, r24
    924a:	e9 01       	movw	r28, r18
    924c:	20 97       	sbiw	r28, 0x00	; 0
    924e:	e9 f6       	brne	.-70     	; 0x920a <malloc+0x24>
    9250:	41 15       	cp	r20, r1
    9252:	51 05       	cpc	r21, r1
    9254:	a9 f1       	breq	.+106    	; 0x92c0 <malloc+0xda>
    9256:	ca 01       	movw	r24, r20
    9258:	86 1b       	sub	r24, r22
    925a:	97 0b       	sbc	r25, r23
    925c:	04 97       	sbiw	r24, 0x04	; 4
    925e:	08 f4       	brcc	.+2      	; 0x9262 <malloc+0x7c>
    9260:	ba 01       	movw	r22, r20
    9262:	e0 e0       	ldi	r30, 0x00	; 0
    9264:	f0 e0       	ldi	r31, 0x00	; 0
    9266:	2a c0       	rjmp	.+84     	; 0x92bc <malloc+0xd6>
    9268:	8d 91       	ld	r24, X+
    926a:	9c 91       	ld	r25, X
    926c:	11 97       	sbiw	r26, 0x01	; 1
    926e:	84 17       	cp	r24, r20
    9270:	95 07       	cpc	r25, r21
    9272:	f9 f4       	brne	.+62     	; 0x92b2 <malloc+0xcc>
    9274:	64 17       	cp	r22, r20
    9276:	75 07       	cpc	r23, r21
    9278:	81 f4       	brne	.+32     	; 0x929a <malloc+0xb4>
    927a:	12 96       	adiw	r26, 0x02	; 2
    927c:	8d 91       	ld	r24, X+
    927e:	9c 91       	ld	r25, X
    9280:	13 97       	sbiw	r26, 0x03	; 3
    9282:	30 97       	sbiw	r30, 0x00	; 0
    9284:	19 f0       	breq	.+6      	; 0x928c <malloc+0xa6>
    9286:	93 83       	std	Z+3, r25	; 0x03
    9288:	82 83       	std	Z+2, r24	; 0x02
    928a:	04 c0       	rjmp	.+8      	; 0x9294 <malloc+0xae>
    928c:	90 93 9b 06 	sts	0x069B, r25
    9290:	80 93 9a 06 	sts	0x069A, r24
    9294:	fd 01       	movw	r30, r26
    9296:	32 96       	adiw	r30, 0x02	; 2
    9298:	4f c0       	rjmp	.+158    	; 0x9338 <malloc+0x152>
    929a:	ca 01       	movw	r24, r20
    929c:	86 1b       	sub	r24, r22
    929e:	97 0b       	sbc	r25, r23
    92a0:	fd 01       	movw	r30, r26
    92a2:	e8 0f       	add	r30, r24
    92a4:	f9 1f       	adc	r31, r25
    92a6:	61 93       	st	Z+, r22
    92a8:	71 93       	st	Z+, r23
    92aa:	02 97       	sbiw	r24, 0x02	; 2
    92ac:	8d 93       	st	X+, r24
    92ae:	9c 93       	st	X, r25
    92b0:	43 c0       	rjmp	.+134    	; 0x9338 <malloc+0x152>
    92b2:	fd 01       	movw	r30, r26
    92b4:	82 81       	ldd	r24, Z+2	; 0x02
    92b6:	93 81       	ldd	r25, Z+3	; 0x03
    92b8:	9c 01       	movw	r18, r24
    92ba:	d9 01       	movw	r26, r18
    92bc:	10 97       	sbiw	r26, 0x00	; 0
    92be:	a1 f6       	brne	.-88     	; 0x9268 <malloc+0x82>
    92c0:	80 91 98 06 	lds	r24, 0x0698
    92c4:	90 91 99 06 	lds	r25, 0x0699
    92c8:	89 2b       	or	r24, r25
    92ca:	41 f4       	brne	.+16     	; 0x92dc <malloc+0xf6>
    92cc:	80 91 16 02 	lds	r24, 0x0216
    92d0:	90 91 17 02 	lds	r25, 0x0217
    92d4:	90 93 99 06 	sts	0x0699, r25
    92d8:	80 93 98 06 	sts	0x0698, r24
    92dc:	40 91 18 02 	lds	r20, 0x0218
    92e0:	50 91 19 02 	lds	r21, 0x0219
    92e4:	41 15       	cp	r20, r1
    92e6:	51 05       	cpc	r21, r1
    92e8:	41 f4       	brne	.+16     	; 0x92fa <malloc+0x114>
    92ea:	4d b7       	in	r20, 0x3d	; 61
    92ec:	5e b7       	in	r21, 0x3e	; 62
    92ee:	80 91 14 02 	lds	r24, 0x0214
    92f2:	90 91 15 02 	lds	r25, 0x0215
    92f6:	48 1b       	sub	r20, r24
    92f8:	59 0b       	sbc	r21, r25
    92fa:	20 91 98 06 	lds	r18, 0x0698
    92fe:	30 91 99 06 	lds	r19, 0x0699
    9302:	24 17       	cp	r18, r20
    9304:	35 07       	cpc	r19, r21
    9306:	b0 f4       	brcc	.+44     	; 0x9334 <malloc+0x14e>
    9308:	ca 01       	movw	r24, r20
    930a:	82 1b       	sub	r24, r18
    930c:	93 0b       	sbc	r25, r19
    930e:	86 17       	cp	r24, r22
    9310:	97 07       	cpc	r25, r23
    9312:	80 f0       	brcs	.+32     	; 0x9334 <malloc+0x14e>
    9314:	ab 01       	movw	r20, r22
    9316:	4e 5f       	subi	r20, 0xFE	; 254
    9318:	5f 4f       	sbci	r21, 0xFF	; 255
    931a:	84 17       	cp	r24, r20
    931c:	95 07       	cpc	r25, r21
    931e:	50 f0       	brcs	.+20     	; 0x9334 <malloc+0x14e>
    9320:	42 0f       	add	r20, r18
    9322:	53 1f       	adc	r21, r19
    9324:	50 93 99 06 	sts	0x0699, r21
    9328:	40 93 98 06 	sts	0x0698, r20
    932c:	f9 01       	movw	r30, r18
    932e:	61 93       	st	Z+, r22
    9330:	71 93       	st	Z+, r23
    9332:	02 c0       	rjmp	.+4      	; 0x9338 <malloc+0x152>
    9334:	e0 e0       	ldi	r30, 0x00	; 0
    9336:	f0 e0       	ldi	r31, 0x00	; 0
    9338:	cf 01       	movw	r24, r30
    933a:	df 91       	pop	r29
    933c:	cf 91       	pop	r28
    933e:	08 95       	ret

00009340 <free>:
    9340:	cf 93       	push	r28
    9342:	df 93       	push	r29
    9344:	00 97       	sbiw	r24, 0x00	; 0
    9346:	09 f4       	brne	.+2      	; 0x934a <free+0xa>
    9348:	50 c0       	rjmp	.+160    	; 0x93ea <free+0xaa>
    934a:	ec 01       	movw	r28, r24
    934c:	22 97       	sbiw	r28, 0x02	; 2
    934e:	1b 82       	std	Y+3, r1	; 0x03
    9350:	1a 82       	std	Y+2, r1	; 0x02
    9352:	a0 91 9a 06 	lds	r26, 0x069A
    9356:	b0 91 9b 06 	lds	r27, 0x069B
    935a:	10 97       	sbiw	r26, 0x00	; 0
    935c:	09 f1       	breq	.+66     	; 0x93a0 <free+0x60>
    935e:	40 e0       	ldi	r20, 0x00	; 0
    9360:	50 e0       	ldi	r21, 0x00	; 0
    9362:	ac 17       	cp	r26, r28
    9364:	bd 07       	cpc	r27, r29
    9366:	08 f1       	brcs	.+66     	; 0x93aa <free+0x6a>
    9368:	bb 83       	std	Y+3, r27	; 0x03
    936a:	aa 83       	std	Y+2, r26	; 0x02
    936c:	fe 01       	movw	r30, r28
    936e:	21 91       	ld	r18, Z+
    9370:	31 91       	ld	r19, Z+
    9372:	e2 0f       	add	r30, r18
    9374:	f3 1f       	adc	r31, r19
    9376:	ae 17       	cp	r26, r30
    9378:	bf 07       	cpc	r27, r31
    937a:	79 f4       	brne	.+30     	; 0x939a <free+0x5a>
    937c:	8d 91       	ld	r24, X+
    937e:	9c 91       	ld	r25, X
    9380:	11 97       	sbiw	r26, 0x01	; 1
    9382:	28 0f       	add	r18, r24
    9384:	39 1f       	adc	r19, r25
    9386:	2e 5f       	subi	r18, 0xFE	; 254
    9388:	3f 4f       	sbci	r19, 0xFF	; 255
    938a:	39 83       	std	Y+1, r19	; 0x01
    938c:	28 83       	st	Y, r18
    938e:	12 96       	adiw	r26, 0x02	; 2
    9390:	8d 91       	ld	r24, X+
    9392:	9c 91       	ld	r25, X
    9394:	13 97       	sbiw	r26, 0x03	; 3
    9396:	9b 83       	std	Y+3, r25	; 0x03
    9398:	8a 83       	std	Y+2, r24	; 0x02
    939a:	41 15       	cp	r20, r1
    939c:	51 05       	cpc	r21, r1
    939e:	71 f4       	brne	.+28     	; 0x93bc <free+0x7c>
    93a0:	d0 93 9b 06 	sts	0x069B, r29
    93a4:	c0 93 9a 06 	sts	0x069A, r28
    93a8:	20 c0       	rjmp	.+64     	; 0x93ea <free+0xaa>
    93aa:	12 96       	adiw	r26, 0x02	; 2
    93ac:	8d 91       	ld	r24, X+
    93ae:	9c 91       	ld	r25, X
    93b0:	13 97       	sbiw	r26, 0x03	; 3
    93b2:	ad 01       	movw	r20, r26
    93b4:	00 97       	sbiw	r24, 0x00	; 0
    93b6:	11 f0       	breq	.+4      	; 0x93bc <free+0x7c>
    93b8:	dc 01       	movw	r26, r24
    93ba:	d3 cf       	rjmp	.-90     	; 0x9362 <free+0x22>
    93bc:	fa 01       	movw	r30, r20
    93be:	d3 83       	std	Z+3, r29	; 0x03
    93c0:	c2 83       	std	Z+2, r28	; 0x02
    93c2:	21 91       	ld	r18, Z+
    93c4:	31 91       	ld	r19, Z+
    93c6:	e2 0f       	add	r30, r18
    93c8:	f3 1f       	adc	r31, r19
    93ca:	ce 17       	cp	r28, r30
    93cc:	df 07       	cpc	r29, r31
    93ce:	69 f4       	brne	.+26     	; 0x93ea <free+0xaa>
    93d0:	88 81       	ld	r24, Y
    93d2:	99 81       	ldd	r25, Y+1	; 0x01
    93d4:	28 0f       	add	r18, r24
    93d6:	39 1f       	adc	r19, r25
    93d8:	2e 5f       	subi	r18, 0xFE	; 254
    93da:	3f 4f       	sbci	r19, 0xFF	; 255
    93dc:	fa 01       	movw	r30, r20
    93de:	31 83       	std	Z+1, r19	; 0x01
    93e0:	20 83       	st	Z, r18
    93e2:	8a 81       	ldd	r24, Y+2	; 0x02
    93e4:	9b 81       	ldd	r25, Y+3	; 0x03
    93e6:	93 83       	std	Z+3, r25	; 0x03
    93e8:	82 83       	std	Z+2, r24	; 0x02
    93ea:	df 91       	pop	r29
    93ec:	cf 91       	pop	r28
    93ee:	08 95       	ret

000093f0 <realloc>:
    93f0:	a0 e0       	ldi	r26, 0x00	; 0
    93f2:	b0 e0       	ldi	r27, 0x00	; 0
    93f4:	ee ef       	ldi	r30, 0xFE	; 254
    93f6:	f9 e4       	ldi	r31, 0x49	; 73
    93f8:	0c 94 a6 48 	jmp	0x914c	; 0x914c <__prologue_saves__+0xc>
    93fc:	8c 01       	movw	r16, r24
    93fe:	00 97       	sbiw	r24, 0x00	; 0
    9400:	29 f4       	brne	.+10     	; 0x940c <realloc+0x1c>
    9402:	cb 01       	movw	r24, r22
    9404:	0e 94 f3 48 	call	0x91e6	; 0x91e6 <malloc>
    9408:	8c 01       	movw	r16, r24
    940a:	ba c0       	rjmp	.+372    	; 0x9580 <realloc+0x190>
    940c:	9e ef       	ldi	r25, 0xFE	; 254
    940e:	e9 2e       	mov	r14, r25
    9410:	9f ef       	ldi	r25, 0xFF	; 255
    9412:	f9 2e       	mov	r15, r25
    9414:	e0 0e       	add	r14, r16
    9416:	f1 1e       	adc	r15, r17
    9418:	58 01       	movw	r10, r16
    941a:	a6 0e       	add	r10, r22
    941c:	b7 1e       	adc	r11, r23
    941e:	ae 14       	cp	r10, r14
    9420:	bf 04       	cpc	r11, r15
    9422:	08 f4       	brcc	.+2      	; 0x9426 <realloc+0x36>
    9424:	ab c0       	rjmp	.+342    	; 0x957c <realloc+0x18c>
    9426:	8e ef       	ldi	r24, 0xFE	; 254
    9428:	88 2e       	mov	r8, r24
    942a:	8f ef       	ldi	r24, 0xFF	; 255
    942c:	98 2e       	mov	r9, r24
    942e:	8a 0c       	add	r8, r10
    9430:	9b 1c       	adc	r9, r11
    9432:	e7 01       	movw	r28, r14
    9434:	48 81       	ld	r20, Y
    9436:	59 81       	ldd	r21, Y+1	; 0x01
    9438:	46 17       	cp	r20, r22
    943a:	57 07       	cpc	r21, r23
    943c:	b8 f0       	brcs	.+46     	; 0x946c <realloc+0x7c>
    943e:	45 30       	cpi	r20, 0x05	; 5
    9440:	51 05       	cpc	r21, r1
    9442:	08 f4       	brcc	.+2      	; 0x9446 <realloc+0x56>
    9444:	9d c0       	rjmp	.+314    	; 0x9580 <realloc+0x190>
    9446:	ca 01       	movw	r24, r20
    9448:	04 97       	sbiw	r24, 0x04	; 4
    944a:	86 17       	cp	r24, r22
    944c:	97 07       	cpc	r25, r23
    944e:	08 f4       	brcc	.+2      	; 0x9452 <realloc+0x62>
    9450:	97 c0       	rjmp	.+302    	; 0x9580 <realloc+0x190>
    9452:	42 50       	subi	r20, 0x02	; 2
    9454:	50 40       	sbci	r21, 0x00	; 0
    9456:	46 1b       	sub	r20, r22
    9458:	57 0b       	sbc	r21, r23
    945a:	f4 01       	movw	r30, r8
    945c:	51 83       	std	Z+1, r21	; 0x01
    945e:	40 83       	st	Z, r20
    9460:	79 83       	std	Y+1, r23	; 0x01
    9462:	68 83       	st	Y, r22
    9464:	c5 01       	movw	r24, r10
    9466:	0e 94 a0 49 	call	0x9340	; 0x9340 <free>
    946a:	8a c0       	rjmp	.+276    	; 0x9580 <realloc+0x190>
    946c:	6b 01       	movw	r12, r22
    946e:	c4 1a       	sub	r12, r20
    9470:	d5 0a       	sbc	r13, r21
    9472:	e0 91 9a 06 	lds	r30, 0x069A
    9476:	f0 91 9b 06 	lds	r31, 0x069B
    947a:	a0 e0       	ldi	r26, 0x00	; 0
    947c:	b0 e0       	ldi	r27, 0x00	; 0
    947e:	c0 e0       	ldi	r28, 0x00	; 0
    9480:	d0 e0       	ldi	r29, 0x00	; 0
    9482:	42 c0       	rjmp	.+132    	; 0x9508 <realloc+0x118>
    9484:	e8 15       	cp	r30, r8
    9486:	f9 05       	cpc	r31, r9
    9488:	a1 f5       	brne	.+104    	; 0x94f2 <realloc+0x102>
    948a:	20 81       	ld	r18, Z
    948c:	31 81       	ldd	r19, Z+1	; 0x01
    948e:	2c 15       	cp	r18, r12
    9490:	3d 05       	cpc	r19, r13
    9492:	78 f1       	brcs	.+94     	; 0x94f2 <realloc+0x102>
    9494:	c9 01       	movw	r24, r18
    9496:	02 96       	adiw	r24, 0x02	; 2
    9498:	8c 15       	cp	r24, r12
    949a:	9d 05       	cpc	r25, r13
    949c:	a8 f0       	brcs	.+42     	; 0x94c8 <realloc+0xd8>
    949e:	4e 5f       	subi	r20, 0xFE	; 254
    94a0:	5f 4f       	sbci	r21, 0xFF	; 255
    94a2:	42 0f       	add	r20, r18
    94a4:	53 1f       	adc	r21, r19
    94a6:	e7 01       	movw	r28, r14
    94a8:	59 83       	std	Y+1, r21	; 0x01
    94aa:	48 83       	st	Y, r20
    94ac:	22 81       	ldd	r18, Z+2	; 0x02
    94ae:	33 81       	ldd	r19, Z+3	; 0x03
    94b0:	10 97       	sbiw	r26, 0x00	; 0
    94b2:	29 f0       	breq	.+10     	; 0x94be <realloc+0xce>
    94b4:	13 96       	adiw	r26, 0x03	; 3
    94b6:	3c 93       	st	X, r19
    94b8:	2e 93       	st	-X, r18
    94ba:	12 97       	sbiw	r26, 0x02	; 2
    94bc:	61 c0       	rjmp	.+194    	; 0x9580 <realloc+0x190>
    94be:	30 93 9b 06 	sts	0x069B, r19
    94c2:	20 93 9a 06 	sts	0x069A, r18
    94c6:	5c c0       	rjmp	.+184    	; 0x9580 <realloc+0x190>
    94c8:	22 50       	subi	r18, 0x02	; 2
    94ca:	30 40       	sbci	r19, 0x00	; 0
    94cc:	2c 19       	sub	r18, r12
    94ce:	3d 09       	sbc	r19, r13
    94d0:	31 83       	std	Z+1, r19	; 0x01
    94d2:	20 83       	st	Z, r18
    94d4:	10 97       	sbiw	r26, 0x00	; 0
    94d6:	29 f0       	breq	.+10     	; 0x94e2 <realloc+0xf2>
    94d8:	13 96       	adiw	r26, 0x03	; 3
    94da:	fc 93       	st	X, r31
    94dc:	ee 93       	st	-X, r30
    94de:	12 97       	sbiw	r26, 0x02	; 2
    94e0:	04 c0       	rjmp	.+8      	; 0x94ea <realloc+0xfa>
    94e2:	f0 93 9b 06 	sts	0x069B, r31
    94e6:	e0 93 9a 06 	sts	0x069A, r30
    94ea:	f7 01       	movw	r30, r14
    94ec:	71 83       	std	Z+1, r23	; 0x01
    94ee:	60 83       	st	Z, r22
    94f0:	47 c0       	rjmp	.+142    	; 0x9580 <realloc+0x190>
    94f2:	80 81       	ld	r24, Z
    94f4:	91 81       	ldd	r25, Z+1	; 0x01
    94f6:	c8 17       	cp	r28, r24
    94f8:	d9 07       	cpc	r29, r25
    94fa:	08 f4       	brcc	.+2      	; 0x94fe <realloc+0x10e>
    94fc:	ec 01       	movw	r28, r24
    94fe:	df 01       	movw	r26, r30
    9500:	82 81       	ldd	r24, Z+2	; 0x02
    9502:	93 81       	ldd	r25, Z+3	; 0x03
    9504:	9c 01       	movw	r18, r24
    9506:	f9 01       	movw	r30, r18
    9508:	30 97       	sbiw	r30, 0x00	; 0
    950a:	09 f0       	breq	.+2      	; 0x950e <realloc+0x11e>
    950c:	bb cf       	rjmp	.-138    	; 0x9484 <realloc+0x94>
    950e:	40 0f       	add	r20, r16
    9510:	51 1f       	adc	r21, r17
    9512:	80 91 98 06 	lds	r24, 0x0698
    9516:	90 91 99 06 	lds	r25, 0x0699
    951a:	84 17       	cp	r24, r20
    951c:	95 07       	cpc	r25, r21
    951e:	e9 f4       	brne	.+58     	; 0x955a <realloc+0x16a>
    9520:	c6 17       	cp	r28, r22
    9522:	d7 07       	cpc	r29, r23
    9524:	d0 f4       	brcc	.+52     	; 0x955a <realloc+0x16a>
    9526:	20 91 18 02 	lds	r18, 0x0218
    952a:	30 91 19 02 	lds	r19, 0x0219
    952e:	21 15       	cp	r18, r1
    9530:	31 05       	cpc	r19, r1
    9532:	41 f4       	brne	.+16     	; 0x9544 <realloc+0x154>
    9534:	2d b7       	in	r18, 0x3d	; 61
    9536:	3e b7       	in	r19, 0x3e	; 62
    9538:	80 91 14 02 	lds	r24, 0x0214
    953c:	90 91 15 02 	lds	r25, 0x0215
    9540:	28 1b       	sub	r18, r24
    9542:	39 0b       	sbc	r19, r25
    9544:	a2 16       	cp	r10, r18
    9546:	b3 06       	cpc	r11, r19
    9548:	c8 f4       	brcc	.+50     	; 0x957c <realloc+0x18c>
    954a:	b0 92 99 06 	sts	0x0699, r11
    954e:	a0 92 98 06 	sts	0x0698, r10
    9552:	e7 01       	movw	r28, r14
    9554:	79 83       	std	Y+1, r23	; 0x01
    9556:	68 83       	st	Y, r22
    9558:	13 c0       	rjmp	.+38     	; 0x9580 <realloc+0x190>
    955a:	cb 01       	movw	r24, r22
    955c:	0e 94 f3 48 	call	0x91e6	; 0x91e6 <malloc>
    9560:	ec 01       	movw	r28, r24
    9562:	00 97       	sbiw	r24, 0x00	; 0
    9564:	59 f0       	breq	.+22     	; 0x957c <realloc+0x18c>
    9566:	f7 01       	movw	r30, r14
    9568:	40 81       	ld	r20, Z
    956a:	51 81       	ldd	r21, Z+1	; 0x01
    956c:	b8 01       	movw	r22, r16
    956e:	0e 94 c6 4a 	call	0x958c	; 0x958c <memcpy>
    9572:	c8 01       	movw	r24, r16
    9574:	0e 94 a0 49 	call	0x9340	; 0x9340 <free>
    9578:	8e 01       	movw	r16, r28
    957a:	02 c0       	rjmp	.+4      	; 0x9580 <realloc+0x190>
    957c:	00 e0       	ldi	r16, 0x00	; 0
    957e:	10 e0       	ldi	r17, 0x00	; 0
    9580:	c8 01       	movw	r24, r16
    9582:	cd b7       	in	r28, 0x3d	; 61
    9584:	de b7       	in	r29, 0x3e	; 62
    9586:	ec e0       	ldi	r30, 0x0C	; 12
    9588:	0c 94 c2 48 	jmp	0x9184	; 0x9184 <__epilogue_restores__+0xc>

0000958c <memcpy>:
    958c:	fb 01       	movw	r30, r22
    958e:	dc 01       	movw	r26, r24
    9590:	02 c0       	rjmp	.+4      	; 0x9596 <memcpy+0xa>
    9592:	01 90       	ld	r0, Z+
    9594:	0d 92       	st	X+, r0
    9596:	41 50       	subi	r20, 0x01	; 1
    9598:	50 40       	sbci	r21, 0x00	; 0
    959a:	d8 f7       	brcc	.-10     	; 0x9592 <memcpy+0x6>
    959c:	08 95       	ret

0000959e <memset>:
    959e:	dc 01       	movw	r26, r24
    95a0:	01 c0       	rjmp	.+2      	; 0x95a4 <memset+0x6>
    95a2:	6d 93       	st	X+, r22
    95a4:	41 50       	subi	r20, 0x01	; 1
    95a6:	50 40       	sbci	r21, 0x00	; 0
    95a8:	e0 f7       	brcc	.-8      	; 0x95a2 <memset+0x4>
    95aa:	08 95       	ret

000095ac <strstr>:
    95ac:	fb 01       	movw	r30, r22
    95ae:	51 91       	ld	r21, Z+
    95b0:	55 23       	and	r21, r21
    95b2:	a9 f0       	breq	.+42     	; 0x95de <strstr+0x32>
    95b4:	bf 01       	movw	r22, r30
    95b6:	dc 01       	movw	r26, r24
    95b8:	4d 91       	ld	r20, X+
    95ba:	45 17       	cp	r20, r21
    95bc:	41 11       	cpse	r20, r1
    95be:	e1 f7       	brne	.-8      	; 0x95b8 <strstr+0xc>
    95c0:	59 f4       	brne	.+22     	; 0x95d8 <strstr+0x2c>
    95c2:	cd 01       	movw	r24, r26
    95c4:	01 90       	ld	r0, Z+
    95c6:	00 20       	and	r0, r0
    95c8:	49 f0       	breq	.+18     	; 0x95dc <strstr+0x30>
    95ca:	4d 91       	ld	r20, X+
    95cc:	40 15       	cp	r20, r0
    95ce:	41 11       	cpse	r20, r1
    95d0:	c9 f3       	breq	.-14     	; 0x95c4 <strstr+0x18>
    95d2:	fb 01       	movw	r30, r22
    95d4:	41 11       	cpse	r20, r1
    95d6:	ef cf       	rjmp	.-34     	; 0x95b6 <strstr+0xa>
    95d8:	81 e0       	ldi	r24, 0x01	; 1
    95da:	90 e0       	ldi	r25, 0x00	; 0
    95dc:	01 97       	sbiw	r24, 0x01	; 1
    95de:	08 95       	ret

000095e0 <itoa>:
    95e0:	fb 01       	movw	r30, r22
    95e2:	9f 01       	movw	r18, r30
    95e4:	e8 94       	clt
    95e6:	42 30       	cpi	r20, 0x02	; 2
    95e8:	c4 f0       	brlt	.+48     	; 0x961a <itoa+0x3a>
    95ea:	45 32       	cpi	r20, 0x25	; 37
    95ec:	b4 f4       	brge	.+44     	; 0x961a <itoa+0x3a>
    95ee:	4a 30       	cpi	r20, 0x0A	; 10
    95f0:	29 f4       	brne	.+10     	; 0x95fc <itoa+0x1c>
    95f2:	97 fb       	bst	r25, 7
    95f4:	1e f4       	brtc	.+6      	; 0x95fc <itoa+0x1c>
    95f6:	90 95       	com	r25
    95f8:	81 95       	neg	r24
    95fa:	9f 4f       	sbci	r25, 0xFF	; 255
    95fc:	64 2f       	mov	r22, r20
    95fe:	77 27       	eor	r23, r23
    9600:	0e 94 5d 4b 	call	0x96ba	; 0x96ba <__udivmodhi4>
    9604:	80 5d       	subi	r24, 0xD0	; 208
    9606:	8a 33       	cpi	r24, 0x3A	; 58
    9608:	0c f0       	brlt	.+2      	; 0x960c <itoa+0x2c>
    960a:	89 5d       	subi	r24, 0xD9	; 217
    960c:	81 93       	st	Z+, r24
    960e:	cb 01       	movw	r24, r22
    9610:	00 97       	sbiw	r24, 0x00	; 0
    9612:	a1 f7       	brne	.-24     	; 0x95fc <itoa+0x1c>
    9614:	16 f4       	brtc	.+4      	; 0x961a <itoa+0x3a>
    9616:	5d e2       	ldi	r21, 0x2D	; 45
    9618:	51 93       	st	Z+, r21
    961a:	10 82       	st	Z, r1
    961c:	c9 01       	movw	r24, r18
    961e:	0c 94 4d 4b 	jmp	0x969a	; 0x969a <strrev>

00009622 <ltoa>:
    9622:	fa 01       	movw	r30, r20
    9624:	cf 93       	push	r28
    9626:	ff 93       	push	r31
    9628:	ef 93       	push	r30
    962a:	22 30       	cpi	r18, 0x02	; 2
    962c:	44 f1       	brlt	.+80     	; 0x967e <ltoa+0x5c>
    962e:	25 32       	cpi	r18, 0x25	; 37
    9630:	34 f5       	brge	.+76     	; 0x967e <ltoa+0x5c>
    9632:	c2 2f       	mov	r28, r18
    9634:	e8 94       	clt
    9636:	ca 30       	cpi	r28, 0x0A	; 10
    9638:	49 f4       	brne	.+18     	; 0x964c <ltoa+0x2a>
    963a:	97 fb       	bst	r25, 7
    963c:	3e f4       	brtc	.+14     	; 0x964c <ltoa+0x2a>
    963e:	90 95       	com	r25
    9640:	80 95       	com	r24
    9642:	70 95       	com	r23
    9644:	61 95       	neg	r22
    9646:	7f 4f       	sbci	r23, 0xFF	; 255
    9648:	8f 4f       	sbci	r24, 0xFF	; 255
    964a:	9f 4f       	sbci	r25, 0xFF	; 255
    964c:	2c 2f       	mov	r18, r28
    964e:	33 27       	eor	r19, r19
    9650:	44 27       	eor	r20, r20
    9652:	55 27       	eor	r21, r21
    9654:	ff 93       	push	r31
    9656:	ef 93       	push	r30
    9658:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
    965c:	ef 91       	pop	r30
    965e:	ff 91       	pop	r31
    9660:	60 5d       	subi	r22, 0xD0	; 208
    9662:	6a 33       	cpi	r22, 0x3A	; 58
    9664:	0c f0       	brlt	.+2      	; 0x9668 <ltoa+0x46>
    9666:	69 5d       	subi	r22, 0xD9	; 217
    9668:	61 93       	st	Z+, r22
    966a:	b9 01       	movw	r22, r18
    966c:	ca 01       	movw	r24, r20
    966e:	60 50       	subi	r22, 0x00	; 0
    9670:	70 40       	sbci	r23, 0x00	; 0
    9672:	80 40       	sbci	r24, 0x00	; 0
    9674:	90 40       	sbci	r25, 0x00	; 0
    9676:	51 f7       	brne	.-44     	; 0x964c <ltoa+0x2a>
    9678:	16 f4       	brtc	.+4      	; 0x967e <ltoa+0x5c>
    967a:	cd e2       	ldi	r28, 0x2D	; 45
    967c:	c1 93       	st	Z+, r28
    967e:	10 82       	st	Z, r1
    9680:	8f 91       	pop	r24
    9682:	9f 91       	pop	r25
    9684:	cf 91       	pop	r28
    9686:	0c 94 4d 4b 	jmp	0x969a	; 0x969a <strrev>

0000968a <__eerd_byte_m32>:
    968a:	e1 99       	sbic	0x1c, 1	; 28
    968c:	fe cf       	rjmp	.-4      	; 0x968a <__eerd_byte_m32>
    968e:	9f bb       	out	0x1f, r25	; 31
    9690:	8e bb       	out	0x1e, r24	; 30
    9692:	e0 9a       	sbi	0x1c, 0	; 28
    9694:	99 27       	eor	r25, r25
    9696:	8d b3       	in	r24, 0x1d	; 29
    9698:	08 95       	ret

0000969a <strrev>:
    969a:	dc 01       	movw	r26, r24
    969c:	fc 01       	movw	r30, r24
    969e:	67 2f       	mov	r22, r23
    96a0:	71 91       	ld	r23, Z+
    96a2:	77 23       	and	r23, r23
    96a4:	e1 f7       	brne	.-8      	; 0x969e <strrev+0x4>
    96a6:	32 97       	sbiw	r30, 0x02	; 2
    96a8:	04 c0       	rjmp	.+8      	; 0x96b2 <strrev+0x18>
    96aa:	7c 91       	ld	r23, X
    96ac:	6d 93       	st	X+, r22
    96ae:	70 83       	st	Z, r23
    96b0:	62 91       	ld	r22, -Z
    96b2:	ae 17       	cp	r26, r30
    96b4:	bf 07       	cpc	r27, r31
    96b6:	c8 f3       	brcs	.-14     	; 0x96aa <strrev+0x10>
    96b8:	08 95       	ret

000096ba <__udivmodhi4>:
    96ba:	aa 1b       	sub	r26, r26
    96bc:	bb 1b       	sub	r27, r27
    96be:	51 e1       	ldi	r21, 0x11	; 17
    96c0:	07 c0       	rjmp	.+14     	; 0x96d0 <__udivmodhi4_ep>

000096c2 <__udivmodhi4_loop>:
    96c2:	aa 1f       	adc	r26, r26
    96c4:	bb 1f       	adc	r27, r27
    96c6:	a6 17       	cp	r26, r22
    96c8:	b7 07       	cpc	r27, r23
    96ca:	10 f0       	brcs	.+4      	; 0x96d0 <__udivmodhi4_ep>
    96cc:	a6 1b       	sub	r26, r22
    96ce:	b7 0b       	sbc	r27, r23

000096d0 <__udivmodhi4_ep>:
    96d0:	88 1f       	adc	r24, r24
    96d2:	99 1f       	adc	r25, r25
    96d4:	5a 95       	dec	r21
    96d6:	a9 f7       	brne	.-22     	; 0x96c2 <__udivmodhi4_loop>
    96d8:	80 95       	com	r24
    96da:	90 95       	com	r25
    96dc:	bc 01       	movw	r22, r24
    96de:	cd 01       	movw	r24, r26
    96e0:	08 95       	ret

000096e2 <_exit>:
    96e2:	f8 94       	cli

000096e4 <__stop_program>:
    96e4:	ff cf       	rjmp	.-2      	; 0x96e4 <__stop_program>
